<?xml version="1.0"?>
<doc>
    <assembly>
        <name>itext.kernel</name>
    </assembly>
    <members>
        <member name="M:Org.BouncyCastle.X509.X509ExtensionBase.GetNonCriticalExtensionOids">
            <summary>
            Get non critical extensions.
            </summary>
            <returns>A set of non critical extension oids.</returns>
        </member>
        <member name="M:Org.BouncyCastle.X509.X509ExtensionBase.GetCriticalExtensionOids">
            <summary>
            Get any critical extensions.
            </summary>
            <returns>A sorted list of critical entension.</returns>
        </member>
        <member name="M:Org.BouncyCastle.X509.X509ExtensionBase.GetExtensionValue(System.String)">
            <summary>
            Get the value of a given extension.
            </summary>
            <param name="oid">The object ID of the extension. </param>
            <returns>An Asn1OctetString object if that extension is found or null if not.</returns>
        </member>
        <member name="T:iText.Kernel.Colors.Color">
            <summary>Represents a color</summary>
        </member>
        <member name="F:iText.Kernel.Colors.Color.colorSpace">
            <summary>The color space of the color</summary>
        </member>
        <member name="F:iText.Kernel.Colors.Color.colorValue">
            <summary>The color value of the color</summary>
        </member>
        <member name="M:iText.Kernel.Colors.Color.#ctor(iText.Kernel.Pdf.Colorspace.PdfColorSpace,System.Single[])">
            <summary>Creates a Color of certain color space and color value.</summary>
            <remarks>
            Creates a Color of certain color space and color value.
            If color value is set in null, all value components will be initialised with zeroes.
            </remarks>
            <param name="colorSpace">the color space to which the created Color object relates</param>
            <param name="colorValue">the color value of the created Color object</param>
        </member>
        <member name="M:iText.Kernel.Colors.Color.MakeColor(iText.Kernel.Pdf.Colorspace.PdfColorSpace)">
            <summary>Makes a Color of certain color space.</summary>
            <remarks>
            Makes a Color of certain color space.
            All color value components will be initialised with zeroes.
            </remarks>
            <param name="colorSpace">the color space to which the returned Color object relates</param>
        </member>
        <member name="M:iText.Kernel.Colors.Color.MakeColor(iText.Kernel.Pdf.Colorspace.PdfColorSpace,System.Single[])">
            <summary>Makes a Color of certain color space and color value.</summary>
            <remarks>
            Makes a Color of certain color space and color value.
            If color value is set in null, all value components will be initialised with zeroes.
            </remarks>
            <param name="colorSpace">the color space to which the returned Color object relates</param>
            <param name="colorValue">the color value of the returned Color object</param>
        </member>
        <member name="M:iText.Kernel.Colors.Color.ConvertCmykToRgb(iText.Kernel.Colors.DeviceCmyk)">
            <summary>
            Converts
            <see cref="T:iText.Kernel.Colors.DeviceCmyk">DeviceCmyk</see>
            color to
            <see cref="T:iText.Kernel.Colors.DeviceRgb">DeviceRgb</see>
            color
            </summary>
            <param name="cmykColor">the DeviceCmyk color which will be converted to DeviceRgb color</param>
            <returns>converted color</returns>
        </member>
        <member name="M:iText.Kernel.Colors.Color.ConvertRgbToCmyk(iText.Kernel.Colors.DeviceRgb)">
            <summary>
            Converts
            <see cref="T:iText.Kernel.Colors.DeviceRgb">DeviceRgb</see>
            color to
            <see cref="T:iText.Kernel.Colors.DeviceCmyk">DeviceCmyk</see>
            color
            </summary>
            <param name="rgbColor">the DeviceRgb color which will be converted to DeviceCmyk color</param>
            <returns>converted color</returns>
        </member>
        <member name="M:iText.Kernel.Colors.Color.GetNumberOfComponents">
            <summary>Returns the number of color value components</summary>
            <returns>the number of color value components</returns>
        </member>
        <member name="M:iText.Kernel.Colors.Color.GetColorSpace">
            <summary>
            Returns the
            <see cref="T:iText.Kernel.Pdf.Colorspace.PdfColorSpace">color space</see>
            to which the color is related.
            </summary>
            <returns>the color space of the color</returns>
        </member>
        <member name="M:iText.Kernel.Colors.Color.GetColorValue">
            <summary>Returns the color value of the color</summary>
            <returns>the color value</returns>
        </member>
        <member name="M:iText.Kernel.Colors.Color.SetColorValue(System.Single[])">
            <summary>Sets the color value of the color</summary>
            <param name="value">new color value</param>
        </member>
        <member name="M:iText.Kernel.Colors.Color.Equals(System.Object)">
            <summary>Indicates whether the color is equal to the given color.</summary>
            <remarks>
            Indicates whether the color is equal to the given color.
            The
            <see cref="F:iText.Kernel.Colors.Color.colorSpace">color space</see>
            and
            <see cref="F:iText.Kernel.Colors.Color.colorValue">color value</see>
            are considered during the comparison.
            </remarks>
        </member>
        <member name="M:iText.Kernel.Colors.Color.GetHashCode">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.Kernel.Colors.ColorConstants">
            <summary>
            Class containing predefined
            <see cref="T:iText.Kernel.Colors.DeviceRgb"/>
            colors.
            Color space specific classes should be used for the advanced handling of colors.
            The most common ones are
            <see cref="T:iText.Kernel.Colors.DeviceGray"/>
            ,
            <see cref="T:iText.Kernel.Colors.DeviceCmyk"/>
            and
            <see cref="T:iText.Kernel.Colors.DeviceRgb"/>
            .
            </summary>
        </member>
        <member name="F:iText.Kernel.Colors.ColorConstants.BLACK">
            <summary>Predefined black DeviceRgb color</summary>
        </member>
        <member name="F:iText.Kernel.Colors.ColorConstants.BLUE">
            <summary>Predefined blue  DeviceRgb color</summary>
        </member>
        <member name="F:iText.Kernel.Colors.ColorConstants.CYAN">
            <summary>Predefined cyan DeviceRgb color</summary>
        </member>
        <member name="F:iText.Kernel.Colors.ColorConstants.DARK_GRAY">
            <summary>Predefined dark gray DeviceRgb color</summary>
        </member>
        <member name="F:iText.Kernel.Colors.ColorConstants.GRAY">
            <summary>Predefined gray DeviceRgb color</summary>
        </member>
        <member name="F:iText.Kernel.Colors.ColorConstants.GREEN">
            <summary>Predefined green DeviceRgb color</summary>
        </member>
        <member name="F:iText.Kernel.Colors.ColorConstants.LIGHT_GRAY">
            <summary>Predefined light gray DeviceRgb color</summary>
        </member>
        <member name="F:iText.Kernel.Colors.ColorConstants.MAGENTA">
            <summary>Predefined magenta DeviceRgb color</summary>
        </member>
        <member name="F:iText.Kernel.Colors.ColorConstants.ORANGE">
            <summary>Predefined orange DeviceRgb color</summary>
        </member>
        <member name="F:iText.Kernel.Colors.ColorConstants.PINK">
            <summary>Predefined pink DeviceRgb color</summary>
        </member>
        <member name="F:iText.Kernel.Colors.ColorConstants.RED">
            <summary>Predefined red DeviceRgb color</summary>
        </member>
        <member name="F:iText.Kernel.Colors.ColorConstants.WHITE">
            <summary>Predefined white DeviceRgb color</summary>
        </member>
        <member name="F:iText.Kernel.Colors.ColorConstants.YELLOW">
            <summary>Predefined yellow DeviceRgb color</summary>
        </member>
        <member name="T:iText.Kernel.Colors.DeviceCmyk">
            <summary>Color space to specify colors according to CMYK color model.</summary>
        </member>
        <member name="F:iText.Kernel.Colors.DeviceCmyk.CYAN">
            <summary>Predefined cyan DeviceCmyk color</summary>
        </member>
        <member name="F:iText.Kernel.Colors.DeviceCmyk.MAGENTA">
            <summary>Predefined magenta DeviceCmyk color</summary>
        </member>
        <member name="F:iText.Kernel.Colors.DeviceCmyk.YELLOW">
            <summary>Predefined yellow DeviceCmyk color</summary>
        </member>
        <member name="F:iText.Kernel.Colors.DeviceCmyk.BLACK">
            <summary>Predefined black DeviceCmyk color</summary>
        </member>
        <member name="M:iText.Kernel.Colors.DeviceCmyk.#ctor">
            <summary>Creates DeviceCmyk color with all colorants intensities initialised as zeroes.</summary>
        </member>
        <member name="M:iText.Kernel.Colors.DeviceCmyk.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Creates DeviceCmyk color by intensities of cyan, magenta, yellow and black colorants.</summary>
            <remarks>
            Creates DeviceCmyk color by intensities of cyan, magenta, yellow and black colorants.
            The intensities are considered to be in [0, 100] gap, if not,
            the intensity will be considered as 100 (when colorant's value is bigger than 100)
            or 0 (when colorant's value is less than 0).
            </remarks>
            <param name="c">the intensity of cyan colorant</param>
            <param name="m">the intensity of magenta colorant</param>
            <param name="y">the intensity of yellow colorant</param>
            <param name="k">the intensity of black colorant</param>
        </member>
        <member name="M:iText.Kernel.Colors.DeviceCmyk.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>Creates DeviceCmyk color by intensities of cyan, magenta, yellow and black colorants.</summary>
            <remarks>
            Creates DeviceCmyk color by intensities of cyan, magenta, yellow and black colorants.
            The intensities are considered to be in [0, 1] interval, if not,
            the intensity will be considered as 1 (when colorant's value is bigger than 1)
            or 0 (when colorant's value is less than 0).
            </remarks>
            <param name="c">the intensity of cyan colorant</param>
            <param name="m">the intensity of magenta colorant</param>
            <param name="y">the intensity of yellow colorant</param>
            <param name="k">the intensity of black colorant</param>
        </member>
        <member name="M:iText.Kernel.Colors.DeviceCmyk.MakeLighter(iText.Kernel.Colors.DeviceCmyk)">
            <summary>
            Returns
            <see cref="T:iText.Kernel.Colors.DeviceCmyk">DeviceCmyk</see>
            color which is lighter than given one
            </summary>
            <param name="cmykColor">the DeviceCmyk color to be made lighter</param>
            <returns>lighter color</returns>
        </member>
        <member name="M:iText.Kernel.Colors.DeviceCmyk.MakeDarker(iText.Kernel.Colors.DeviceCmyk)">
            <summary>
            Returns
            <see cref="T:iText.Kernel.Colors.DeviceCmyk">DeviceCmyk</see>
            color which is darker than given one
            </summary>
            <param name="cmykColor">the DeviceCmyk color to be made darker</param>
            <returns>darker color</returns>
        </member>
        <member name="T:iText.Kernel.Colors.DeviceGray">
            <summary>Color space to specify shades of gray color.</summary>
        </member>
        <member name="F:iText.Kernel.Colors.DeviceGray.WHITE">
            <summary>Predefined white DeviceGray color.</summary>
        </member>
        <member name="F:iText.Kernel.Colors.DeviceGray.GRAY">
            <summary>Predefined gray DeviceGray color.</summary>
        </member>
        <member name="F:iText.Kernel.Colors.DeviceGray.BLACK">
            <summary>Predefined black DeviceGray color.</summary>
        </member>
        <member name="M:iText.Kernel.Colors.DeviceGray.#ctor(System.Single)">
            <summary>Creates DeviceGray color by given grayscale.</summary>
            <remarks>
            Creates DeviceGray color by given grayscale.
            The grayscale is considered to be in [0, 1] interval, if not,
            the grayscale will be considered as 1 (when grayscale's value is bigger than 1)
            or 0 (when grayscale's value is less than 0).
            </remarks>
            <param name="value">the grayscale value</param>
        </member>
        <member name="M:iText.Kernel.Colors.DeviceGray.#ctor">
            <summary>Creates DeviceGray color with grayscale value initialised as zero.</summary>
        </member>
        <member name="M:iText.Kernel.Colors.DeviceGray.MakeLighter(iText.Kernel.Colors.DeviceGray)">
            <summary>
            Returns
            <see cref="T:iText.Kernel.Colors.DeviceGray">DeviceGray</see>
            color which is lighter than given one
            </summary>
            <param name="grayColor">the DeviceGray color to be made lighter</param>
            <returns>lighter color</returns>
        </member>
        <member name="M:iText.Kernel.Colors.DeviceGray.MakeDarker(iText.Kernel.Colors.DeviceGray)">
            <summary>
            Returns
            <see cref="T:iText.Kernel.Colors.DeviceGray">DeviceGray</see>
            color which is darker than given one
            </summary>
            <param name="grayColor">the DeviceGray color to be made darker</param>
            <returns>darker color</returns>
        </member>
        <member name="T:iText.Kernel.Colors.DeviceRgb">
            <summary>Color space to specify colors according to RGB color model.</summary>
        </member>
        <member name="F:iText.Kernel.Colors.DeviceRgb.BLACK">
            <summary>Predefined black DeviceRgb color</summary>
        </member>
        <member name="F:iText.Kernel.Colors.DeviceRgb.WHITE">
            <summary>Predefined white DeviceRgb color</summary>
        </member>
        <member name="F:iText.Kernel.Colors.DeviceRgb.RED">
            <summary>Predefined red DeviceRgb color</summary>
        </member>
        <member name="F:iText.Kernel.Colors.DeviceRgb.GREEN">
            <summary>Predefined green DeviceRgb color</summary>
        </member>
        <member name="F:iText.Kernel.Colors.DeviceRgb.BLUE">
            <summary>Predefined blue  DeviceRgb color</summary>
        </member>
        <member name="M:iText.Kernel.Colors.DeviceRgb.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>Creates DeviceRgb color by intensities of red, green and blue colorants.</summary>
            <remarks>
            Creates DeviceRgb color by intensities of red, green and blue colorants.
            The intensities are considered to be in [0, 255] gap, if not,
            the intensity will be considered as 255 (when colorant's value is bigger than 255)
            or 0 (when colorant's value is less than 0).
            </remarks>
            <param name="r">the intensity of red colorant</param>
            <param name="g">the intensity of green colorant</param>
            <param name="b">the intensity of blue colorant</param>
        </member>
        <member name="M:iText.Kernel.Colors.DeviceRgb.#ctor(System.Single,System.Single,System.Single)">
            <summary>Creates DeviceRgb color by intensities of red, green and blue colorants.</summary>
            <remarks>
            Creates DeviceRgb color by intensities of red, green and blue colorants.
            The intensities are considered to be in [0, 1] interval, if not,
            the intensity will be considered as 1 (when colorant's value is bigger than 1)
            or 0 (when colorant's value is less than 0).
            </remarks>
            <param name="r">the intensity of red colorant</param>
            <param name="g">the intensity of green colorant</param>
            <param name="b">the intensity of blue colorant</param>
        </member>
        <member name="M:iText.Kernel.Colors.DeviceRgb.#ctor">
            <summary>Creates DeviceRgb color with all colorants intensities initialised as zeroes.</summary>
        </member>
        <member name="M:iText.Kernel.Colors.DeviceRgb.#ctor(System.Drawing.Color)">
            <summary>
            Create DeviceRGB color from R, G, B values of System.Drawing.Color
            <br/>
            Note, that alpha chanel is ignored, but opacity still can be achieved
            in some places by using 'setOpacity' method or 'TransparentColor' class.
            </summary>
            <param name="color">the color which RGB values are used</param>
        </member>
        <member name="M:iText.Kernel.Colors.DeviceRgb.MakeLighter(iText.Kernel.Colors.DeviceRgb)">
            <summary>
            Returns
            <see cref="T:iText.Kernel.Colors.DeviceRgb">DeviceRgb</see>
            color which is lighter than given one
            </summary>
            <param name="rgbColor">the DeviceRgb color to be made lighter</param>
            <returns>lighter color</returns>
        </member>
        <member name="M:iText.Kernel.Colors.DeviceRgb.MakeDarker(iText.Kernel.Colors.DeviceRgb)">
            <summary>
            Returns
            <see cref="T:iText.Kernel.Colors.DeviceRgb">DeviceRgb</see>
            color which is darker than given one
            </summary>
            <param name="rgbColor">the DeviceRgb color to be made darker</param>
            <returns>darker color</returns>
        </member>
        <member name="M:iText.Kernel.Colors.IccBased.#ctor(System.IO.Stream)">
            <summary>Creates IccBased color.</summary>
            <param name="iccStream">ICC profile stream. User is responsible for closing the stream.</param>
        </member>
        <member name="M:iText.Kernel.Colors.IccBased.#ctor(System.IO.Stream,System.Single[])">
            <summary>Creates IccBased color.</summary>
            <param name="iccStream">ICC profile stream. User is responsible for closing the stream.</param>
            <param name="value">color value.</param>
        </member>
        <member name="T:iText.Kernel.Colors.WebColors">
            <summary>
            This class is a HashMap that contains the names of colors as a key and the
            corresponding RGB color as value.
            </summary>
            <remarks>
            This class is a HashMap that contains the names of colors as a key and the
            corresponding RGB color as value. (Source: Wikipedia
            http://en.wikipedia.org/wiki/Web_colors )
            </remarks>
        </member>
        <member name="F:iText.Kernel.Colors.WebColors.NAMES">
            <summary>HashMap containing all the names and corresponding color values.</summary>
        </member>
        <member name="M:iText.Kernel.Colors.WebColors.GetRGBColor(System.String)">
            <summary>Gives you a DeviceRgb based on a name.</summary>
            <param name="name">
            a name such as black, violet, cornflowerblue or #RGB or
            #RRGGBB or RGB or RRGGBB or rgb(R,G,B)
            </param>
            <returns>the corresponding DeviceRgb object. Never returns null.</returns>
        </member>
        <member name="M:iText.Kernel.Colors.WebColors.GetRGBAColor(System.String)">
            <summary>Gives an array of four floats that contain RGBA values, each value is between 0 and 1.</summary>
            <param name="name">
            a name such as black, violet, cornflowerblue or #RGB or
            #RRGGBB or RGB or RRGGBB or rgb(R,G,B) or rgb(R,G,B,A)
            </param>
            <returns>the corresponding array of four floats, or <code>null</code> if parsing failed.</returns>
        </member>
        <member name="M:iText.Kernel.Colors.WebColors.MissingHashColorFormat(System.String)">
            <summary>
            A web color string without the leading # will be 3 or 6 characters long
            and all those characters will be hex digits.
            </summary>
            <remarks>
            A web color string without the leading # will be 3 or 6 characters long
            and all those characters will be hex digits. NOTE: colStr must be all
            lower case or the current hex letter test will fail.
            </remarks>
            <param name="colStr">
            A non-null, lower case string that might describe an RGB color
            in hex.
            </param>
            <returns>Is this a web color hex string without the leading #?</returns>
        </member>
        <member name="T:iText.Kernel.Counter.ContextManager">
            <summary>The class that retrieves context of its invocation.</summary>
        </member>
        <member name="M:iText.Kernel.Counter.ContextManager.GetInstance">
            <summary>Gets the singelton instance of this class</summary>
            <returns>
            the
            <see cref="T:iText.Kernel.Counter.ContextManager"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Kernel.Counter.ContextManager.GetContext(System.Type)">
            <summary>Gets the context associated with the passed class object.</summary>
            <remarks>
            Gets the context associated with the passed class object.
            The context is determined by class namespace.
            </remarks>
            <param name="clazz">the class for which the context will be determined.</param>
            <returns>
            the
            <see cref="T:iText.Kernel.Counter.Context.IContext"/>
            associated with the class, or
            <see langword="null"/>
            if the class is unknown.
            </returns>
        </member>
        <member name="M:iText.Kernel.Counter.ContextManager.GetContext(System.String)">
            <summary>Gets the context associated with the passed class object.</summary>
            <remarks>
            Gets the context associated with the passed class object.
            The context is determined by class namespace.
            </remarks>
            <param name="className">the class name with the namespace for which the context will be determined.</param>
            <returns>
            the
            <see cref="T:iText.Kernel.Counter.Context.IContext"/>
            associated with the class, or
            <see langword="null"/>
            if the class is unknown.
            </returns>
        </member>
        <member name="T:iText.Kernel.Counter.Context.GenericContext">
            <summary>
            Generic context that allows
            <see cref="T:iText.Kernel.Counter.Event.IGenericEvent"/>
            based on the whitelist of supported IDs
            </summary>
        </member>
        <member name="T:iText.Kernel.Counter.Context.IContext">
            <summary>The class that determines weather event should be processed or not.</summary>
            <remarks>
            The class that determines weather event should be processed or not.
            Is calculated by the
            <see cref="T:iText.Kernel.Counter.ContextManager"/>
            </remarks>
        </member>
        <member name="T:iText.Kernel.Counter.Context.UnknownContext">
            <summary>
            The fallback
            <see cref="T:iText.Kernel.Counter.Context.IContext"/>
            </summary>
        </member>
        <member name="F:iText.Kernel.Counter.Context.UnknownContext.RESTRICTIVE">
            <summary>
            The
            <see cref="T:iText.Kernel.Counter.Context.IContext"/>
            that forbids all events
            </summary>
        </member>
        <member name="F:iText.Kernel.Counter.Context.UnknownContext.PERMISSIVE">
            <summary>
            The
            <see cref="T:iText.Kernel.Counter.Context.IContext"/>
            that allows all events
            </summary>
        </member>
        <member name="T:iText.Kernel.Counter.DataHandlerCounter`2">
            <summary>
            Counter based on
            <see cref="T:iText.Kernel.Counter.Data.EventDataHandler`2"/>
            .
            Registers shutdown hook and thread for triggering event processing after wait time
            </summary>
            
            
        </member>
        <member name="T:iText.Kernel.Counter.Data.EventData`1">
            <summary>
            The data that class that contains event signature (in simple cases it can be just event type)
            and count.
            </summary>
            <remarks>
            The data that class that contains event signature (in simple cases it can be just event type)
            and count.
            Is used in
            <see cref="T:iText.Kernel.Counter.Data.EventDataHandler`2"/>
            for adding some additional information to the event before processing
            and merging same events by increasing count.
            </remarks>
            
        </member>
        <member name="M:iText.Kernel.Counter.Data.EventData`1.GetSignature">
            <summary>The signature that identifies this data.</summary>
            <returns>data signature</returns>
        </member>
        <member name="M:iText.Kernel.Counter.Data.EventData`1.GetCount">
            <summary>Number of data instances with the same signature that where merged.</summary>
            <returns>data count</returns>
        </member>
        <member name="T:iText.Kernel.Counter.Data.EventDataCacheComparatorBased`2">
            <summary>
            Comparator-based implementation of
            <see cref="T:iText.Kernel.Counter.Data.IEventDataCache`2"/>
            .
            Merges data with the same signature by increasing its count.
            Retrieve the smallest element based on comparator.
            Not thread safe.
            </summary>
            
            
        </member>
        <member name="T:iText.Kernel.Counter.Data.EventDataCacheQueueBased`2">
            <summary>
            Queue-based implementation of
            <see cref="T:iText.Kernel.Counter.Data.IEventDataCache`2"/>
            .
            Merges data with the same signature by increasing its count.
            Will retrieve the first elements by the time of its signature registration.
            Not thread safe.
            </summary>
            
            
        </member>
        <member name="T:iText.Kernel.Counter.Data.EventDataHandler`2">
            <summary>
            This class is intended for some heavy concurrent event operations
            (like writing to database or file).
            </summary>
            <remarks>
            This class is intended for some heavy concurrent event operations
            (like writing to database or file).
            On registration of new
            <see cref="T:iText.Kernel.Counter.Event.IEvent"/>
            the instance of
            <see cref="T:iText.Kernel.Counter.Data.EventData`1"/>
            is created with
            the
            <see cref="T:iText.Kernel.Counter.Data.IEventDataFactory`2"/>
            that can add some additional information like system info
            or version.
            This data instance is immediately cached with
            <see cref="T:iText.Kernel.Counter.Data.IEventDataCache`2"/>
            that can for example
            merge data with the same signature by summing there count.
            If the previous processing operation is finished and the wait time is passed then the next event is retrieved from cache
            (it may be for example based on some comparator like the biggest count, if
            <see cref="T:iText.Kernel.Counter.Data.EventDataCacheComparatorBased`2"/>
            is used, or just queue based if the
            <see cref="T:iText.Kernel.Counter.Data.EventDataCacheQueueBased`2"/>
            is used or any other order determined by
            custom cache) and the processing is started asynchronously
            This class can be considered thread-safe if the cache and factory instances aren't used anywhere else in the code.
            </remarks>
            
            
        </member>
        <member name="M:iText.Kernel.Counter.Data.EventDataHandler`2.TryProcessRest">
            <summary>Method that will try to immediately process all cashed data, ignoring the usual error fallback procedures.
                </summary>
        </member>
        <member name="M:iText.Kernel.Counter.Data.EventDataHandler`2.OnProcessException(System.Exception)">
            <summary>Is called when exception is thrown in process.</summary>
            <param name="exception">caught exception</param>
            <returns>whether processing is treated as success</returns>
        </member>
        <member name="T:iText.Kernel.Counter.Data.EventDataHandlerUtil">
            <summary>
            The util class with service methods for
            <see cref="T:iText.Kernel.Counter.Data.EventDataHandler`2"/>
            and comparator class,
            that can be used in
            <see cref="T:iText.Kernel.Counter.Data.EventDataCacheComparatorBased`2"/>
            .
            </summary>
        </member>
        <member name="M:iText.Kernel.Counter.Data.EventDataHandlerUtil.RegisterProcessAllShutdownHook``2(iText.Kernel.Counter.Data.EventDataHandler{``0,``1})">
            <summary>
            Registers shutdown hook for
            <see cref="T:iText.Kernel.Counter.Data.EventDataHandler`2"/>
            that will try to process all the events that are left.
            It isn't guarantied that all events would be processed.
            </summary>
            <param name="dataHandler">
            the
            <see cref="T:iText.Kernel.Counter.Data.EventDataHandler`2"/>
            for which the hook will be registered
            </param>
            
            
        </member>
        <member name="M:iText.Kernel.Counter.Data.EventDataHandlerUtil.RegisterTimedProcessing``2(iText.Kernel.Counter.Data.EventDataHandler{``0,``1})">
            <summary>
            Creates thread that will try to trigger event processing with time interval from specified
            <see cref="T:iText.Kernel.Counter.Data.EventDataHandler`2"/>
            </summary>
            <param name="dataHandler">
            the
            <see cref="T:iText.Kernel.Counter.Data.EventDataHandler`2"/>
            for which the thread will be registered
            </param>
            
            
        </member>
        <member name="T:iText.Kernel.Counter.Data.EventDataHandlerUtil.BiggerCountComparator`2">
            <summary>
            Comparator class that can be used in
            <see cref="T:iText.Kernel.Counter.Data.EventDataCacheComparatorBased`2"/>
            .
            If so, the cache will return
            <see cref="T:iText.Kernel.Counter.Data.EventData`1"/>
            with bigger count first.
            </summary>
            
            
        </member>
        <member name="T:iText.Kernel.Counter.Data.IEventDataCache`2">
            <summary>
            Interface responsible for caching
            <see cref="T:iText.Kernel.Counter.Data.EventData`1"/>
            .
            Used in
            <see cref="T:iText.Kernel.Counter.Data.EventDataHandler`2"/>
            .
            </summary>
            
            
        </member>
        <member name="T:iText.Kernel.Counter.Data.IEventDataFactory`2">
            <summary>
            Interface that is responsible for creating new instance of
            <see cref="T:iText.Kernel.Counter.Data.EventData`1"/>
            .
            Used in
            <see cref="T:iText.Kernel.Counter.Data.EventDataHandler`2"/>
            </summary>
            
            
        </member>
        <member name="T:iText.Kernel.Counter.DefaultEventCounter">
            <summary>
            Default implementation of the
            <see cref="T:iText.Kernel.Counter.EventCounter"/>
            interface that essentially doesn't do anything.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:iText.Kernel.Counter.EventCounter" -->
        <member name="M:iText.Kernel.Counter.EventCounter.#ctor">
            <summary>
            Creates instance of this class that allows all events from unknown
            <see cref="T:iText.Kernel.Counter.Context.IContext"/>
            .
            </summary>
        </member>
        <member name="M:iText.Kernel.Counter.EventCounter.#ctor(iText.Kernel.Counter.Context.IContext)">
            <summary>
            Creates instance of this class with custom fallback
            <see cref="T:iText.Kernel.Counter.Context.IContext"/>
            .
            </summary>
            <param name="fallback">
            the
            <see cref="T:iText.Kernel.Counter.Context.IContext"/>
            that will be used in case the event context is unknown
            </param>
        </member>
        <member name="M:iText.Kernel.Counter.EventCounter.OnEvent(iText.Kernel.Counter.Event.IEvent,iText.Kernel.Counter.Event.IMetaInfo)">
            <summary>The method that should be overridden for actual event processing</summary>
            <param name="event">
            
            <see cref="T:iText.Kernel.Counter.Event.IEvent"/>
            to count
            </param>
            <param name="metaInfo">
            the
            <see cref="T:iText.Kernel.Counter.Event.IMetaInfo"/>
            that can hold information about event origin
            </param>
        </member>
        <!-- Badly formed XML comment ignored for member "T:iText.Kernel.Counter.EventCounterHandler" -->
        <member name="F:iText.Kernel.Counter.EventCounterHandler.instance">
            <summary>The singleton instance.</summary>
        </member>
        <member name="F:iText.Kernel.Counter.EventCounterHandler.factories">
            <summary>All registered factories.</summary>
        </member>
        <member name="M:iText.Kernel.Counter.EventCounterHandler.GetInstance">
            <summary>Returns the singleton instance of the factory.</summary>
        </member>
        <member name="M:iText.Kernel.Counter.EventCounterHandler.OnEvent(iText.Kernel.Counter.Event.IEvent,iText.Kernel.Counter.Event.IMetaInfo,System.Type)">
            <summary>
            Triggers all registered
            <see cref="T:iText.Kernel.Counter.IEventCounterFactory"/>
            to produce
            <see cref="T:iText.Kernel.Counter.EventCounter"/>
            instance
            and count the event.
            </summary>
            <param name="event"/>
            <param name="metaInfo"/>
            <param name="caller"/>
        </member>
        <member name="M:iText.Kernel.Counter.EventCounterHandler.Register(iText.Kernel.Counter.IEventCounterFactory)">
            <summary>
            Register new
            <see cref="T:iText.Kernel.Counter.IEventCounterFactory"/>
            . Does nothing if same factory was already registered.
            </summary>
            <param name="factory">
            
            <see cref="T:iText.Kernel.Counter.IEventCounterFactory"/>
            to be registered
            </param>
        </member>
        <member name="M:iText.Kernel.Counter.EventCounterHandler.Unregister(iText.Kernel.Counter.IEventCounterFactory)">
            <summary>
            Unregister specified
            <see cref="T:iText.Kernel.Counter.IEventCounterFactory"/>
            . Does nothing if this factory wasn't registered first.
            </summary>
            <param name="factory">
            
            <see cref="T:iText.Kernel.Counter.IEventCounterFactory"/>
            to be unregistered
            </param>
            <returns>
            
            <see langword="true"/>
            if specified factory was registered first
            </returns>
        </member>
        <member name="T:iText.Kernel.Counter.Event.CoreEvent">
            <summary>The generic event for core</summary>
        </member>
        <member name="T:iText.Kernel.Counter.Event.IEvent">
            <summary>Interface representing the counted event</summary>
        </member>
        <member name="T:iText.Kernel.Counter.Event.IGenericEvent">
            <summary>
            Generic
            <see cref="T:iText.Kernel.Counter.Event.IEvent"/>
            that has additional id, that should help during events filtering.
            The common practice is to return the namespace as id.
            </summary>
        </member>
        <member name="M:iText.Kernel.Counter.Event.IGenericEvent.GetOriginId">
            <summary>The id that uniquely identifies event origin.</summary>
            <remarks>
            The id that uniquely identifies event origin.
            The common practice is to return the namespace as id.
            </remarks>
            <returns>event's origin id.</returns>
        </member>
        <member name="T:iText.Kernel.Counter.Event.IMetaInfo">
            <summary>The meta info that can holds information about instance that throws the event</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:iText.Kernel.Counter.IEventCounterFactory" -->
        <member name="T:iText.Kernel.Counter.SimpleEventCounterFactory">
            <summary>
            <see cref="T:iText.Kernel.Counter.IEventCounterFactory"/>
            implementation that always returns counter instance passed to it in constructor
            </summary>
        </member>
        <member name="T:iText.Kernel.Counter.SystemOutEventCounter">
            <summary>
            A
            <see cref="T:iText.Kernel.Counter.EventCounter"/>
            implementation that outputs event type to
            <see cref="P:System.Console.Out"/>
            </summary>
        </member>
        <member name="F:iText.Kernel.Counter.SystemOutEventCounter.name">
            <summary>
            The name of the class for which the ICounter was created
            (or iText if no name is available)
            </summary>
        </member>
        <member name="T:iText.Kernel.Counter.SystemOutEventCounterFactory">
            <summary>
            <see cref="T:iText.Kernel.Counter.IEventCounterFactory"/>
            implementation that creates new
            <see cref="T:iText.Kernel.Counter.SystemOutEventCounter"/>
            on each call
            </summary>
        </member>
        <member name="T:iText.Kernel.Crypto.AESCipher">
            <summary>Creates an AES Cipher with CBC and padding PKCS5/7.</summary>
            <author>Paulo Soares</author>
        </member>
        <member name="M:iText.Kernel.Crypto.AESCipher.#ctor(System.Boolean,System.Byte[],System.Byte[])">
            <summary>Creates a new instance of AESCipher</summary>
            <param name="forEncryption"/>
            <param name="key"/>
            <param name="iv"/>
        </member>
        <member name="T:iText.Kernel.Crypto.AESCipherCBCnoPad">
            <summary>Creates an AES Cipher with CBC and no padding.</summary>
            <author>Paulo Soares</author>
        </member>
        <member name="M:iText.Kernel.Crypto.AESCipherCBCnoPad.#ctor(System.Boolean,System.Byte[])">
            <summary>Creates a new instance of AESCipher</summary>
            <param name="forEncryption"/>
            <param name="key"/>
        </member>
        <member name="M:iText.Kernel.Crypto.AesDecryptor.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>Creates a new instance of AesDecryption</summary>
            <param name="key"/>
            <param name="off"/>
            <param name="len"/>
        </member>
        <member name="M:iText.Kernel.Crypto.ARCFOUREncryption.#ctor">
            <summary>Creates a new instance of ARCFOUREncryption</summary>
        </member>
        <member name="T:iText.Kernel.Crypto.BadPasswordException">
            <summary>Bad password exception.</summary>
        </member>
        <member name="M:iText.Kernel.Crypto.BadPasswordException.#ctor(System.String,System.Exception)">
            <summary>Creates a new BadPasswordException.</summary>
            <param name="message">the detail message.</param>
            <param name="cause">
            the cause (which is saved for later retrieval by
            <see cref="P:System.Exception.InnerException"/>
            method).
            </param>
        </member>
        <member name="M:iText.Kernel.Crypto.BadPasswordException.#ctor(System.String)">
            <summary>Creates a new BadPasswordException.</summary>
            <param name="message">the detail message.</param>
        </member>
        <member name="T:iText.Kernel.Crypto.CryptoUtil">
            <summary>
            This file is a helper class for internal usage only.
            Be aware that it's API and functionality may be changed in future.
            </summary>
        </member>
        <member name="M:iText.Kernel.Crypto.CryptoUtil.ReadPrivateKeyFromPkcs12KeyStore(System.IO.Stream,System.String,System.Char[])">
            <exception cref="T:Org.BouncyCastle.Security.GeneralSecurityException"/>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="T:iText.Kernel.Crypto.IVGenerator">
            <summary>An initialization vector generator for a CBC block encryption.</summary>
            <remarks>An initialization vector generator for a CBC block encryption. It's a random generator based on ARCFOUR.
                </remarks>
            <author>Paulo Soares</author>
        </member>
        <member name="M:iText.Kernel.Crypto.IVGenerator.#ctor">
            <summary>Creates a new instance of IVGenerator</summary>
        </member>
        <member name="M:iText.Kernel.Crypto.IVGenerator.GetIV">
            <summary>Gets a 16 byte random initialization vector.</summary>
            <returns>a 16 byte random initialization vector</returns>
        </member>
        <member name="M:iText.Kernel.Crypto.IVGenerator.GetIV(System.Int32)">
            <summary>Gets a random initialization vector.</summary>
            <param name="len">the length of the initialization vector</param>
            <returns>a random initialization vector</returns>
        </member>
        <member name="M:iText.Kernel.Crypto.OutputStreamAesEncryption.#ctor(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary>Creates a new instance of OutputStreamCounter</summary>
            <param name="out"/>
            <param name="key"/>
            <param name="off"/>
            <param name="len"/>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.Crypto.OutputStreamAesEncryption.Write(System.Byte[],System.Int32,System.Int32)" -->
        <member name="M:iText.Kernel.Crypto.OutputStreamEncryption.#ctor(System.IO.Stream)">
            <summary>Creates a new instance of OutputStreamCounter</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.Crypto.OutputStreamEncryption.Dispose(System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.Crypto.OutputStreamEncryption.Flush" -->
        <member name="M:iText.Kernel.Crypto.OutputStreamEncryption.Write(System.Byte[])">
            <summary>
            Writes
            <c>b.length</c>
            bytes from the specified byte array
            to this output stream. The general contract for
            <c>write(b)</c>
            is that it should have exactly the same effect as the call
            <c>write(b, 0, b.length)</c>
            .
            </summary>
            <param name="b">the data.</param>
            <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
            <seealso cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)"/>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.Crypto.OutputStreamEncryption.Write(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.Crypto.OutputStreamEncryption.Write(System.Byte[],System.Int32,System.Int32)" -->
        <member name="M:iText.Kernel.Crypto.OutputStreamStandardEncryption.#ctor(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary>Creates a new instance of OutputStreamStandardEncryption</summary>
            <param name="out"/>
            <param name="key"/>
            <param name="off"/>
            <param name="len"/>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.Crypto.OutputStreamStandardEncryption.Write(System.Byte[],System.Int32,System.Int32)" -->
        <member name="M:iText.Kernel.Crypto.Securityhandler.EncryptionUtils.CipherBytes(Org.BouncyCastle.X509.X509Certificate,System.Byte[],Org.BouncyCastle.Asn1.X509.AlgorithmIdentifier)">
            <exception cref="T:Org.BouncyCastle.Security.GeneralSecurityException"/>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Kernel.Crypto.Securityhandler.EncryptionUtils.CalculateDERForRecipientParams(System.Byte[])">
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:Org.BouncyCastle.Security.GeneralSecurityException"/>
        </member>
        <member name="T:iText.Kernel.Crypto.Securityhandler.PubKeySecurityHandler">
            <author>Aiken Sam (aikensam@ieee.org)</author>
        </member>
        <member name="M:iText.Kernel.Crypto.Securityhandler.PubKeySecurityHandler.GetEncodedRecipient(System.Int32)">
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:Org.BouncyCastle.Security.GeneralSecurityException"/>
        </member>
        <member name="M:iText.Kernel.Crypto.Securityhandler.PubKeySecurityHandler.GetEncodedRecipients">
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:Org.BouncyCastle.Security.GeneralSecurityException"/>
        </member>
        <member name="M:iText.Kernel.Crypto.Securityhandler.PubKeySecurityHandler.CreateDERForRecipient(System.Byte[],Org.BouncyCastle.X509.X509Certificate)">
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:Org.BouncyCastle.Security.GeneralSecurityException"/>
        </member>
        <member name="M:iText.Kernel.Crypto.Securityhandler.PubKeySecurityHandler.ComputeRecipientInfo(Org.BouncyCastle.X509.X509Certificate,System.Byte[])">
            <exception cref="T:Org.BouncyCastle.Security.GeneralSecurityException"/>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="F:iText.Kernel.Crypto.Securityhandler.SecurityHandler.mkey">
            <summary>The global encryption key</summary>
        </member>
        <member name="F:iText.Kernel.Crypto.Securityhandler.SecurityHandler.nextObjectKey">
            <summary>The encryption key for a particular object/generation.</summary>
            <remarks>
            The encryption key for a particular object/generation.
            It is recalculated with
            <see cref="M:iText.Kernel.Crypto.Securityhandler.SecurityHandler.SetHashKeyForNextObject(System.Int32,System.Int32)"/>
            for every object individually based in its object/generation.
            </remarks>
        </member>
        <member name="F:iText.Kernel.Crypto.Securityhandler.SecurityHandler.nextObjectKeySize">
            <summary>
            The encryption key length for a particular object/generation
            It is recalculated with
            <see cref="M:iText.Kernel.Crypto.Securityhandler.SecurityHandler.SetHashKeyForNextObject(System.Int32,System.Int32)"/>
            for every object individually based in its object/generation.
            </summary>
        </member>
        <member name="F:iText.Kernel.Crypto.Securityhandler.SecurityHandler.extra">
            <summary>Work area to prepare the object/generation bytes</summary>
        </member>
        <member name="M:iText.Kernel.Crypto.Securityhandler.SecurityHandler.SetHashKeyForNextObject(System.Int32,System.Int32)">
            <summary>
            Note: For most of the supported security handlers algorithm to calculate encryption key for particular object
            is the same.
            </summary>
            <param name="objNumber"/>
            <param name="objGeneration"/>
        </member>
        <member name="M:iText.Kernel.Crypto.Securityhandler.StandardHandlerUsingAes256.ComputeHash(System.Byte[],System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:Org.BouncyCastle.Security.SecurityUtilityException"/>
        </member>
        <member name="M:iText.Kernel.Crypto.Securityhandler.StandardHandlerUsingAes256.ComputeHash(System.Byte[],System.Byte[],System.Int32,System.Int32,System.Byte[])">
            <exception cref="T:Org.BouncyCastle.Security.SecurityUtilityException"/>
        </member>
        <member name="M:iText.Kernel.Crypto.Securityhandler.StandardSecurityHandler.GetIsoBytes(iText.Kernel.Pdf.PdfString)">
            <summary>Gets bytes of String-value without considering encoding.</summary>
            <param name="string"/>
            <returns>byte array</returns>
        </member>
        <member name="M:iText.Kernel.Crypto.StandardDecryptor.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>Creates a new instance of StandardDecryption</summary>
            <param name="key"/>
            <param name="off"/>
            <param name="len"/>
        </member>
        <member name="T:iText.Kernel.Events.Event">
            <summary>Describes abstract event.</summary>
        </member>
        <member name="F:iText.Kernel.Events.Event.type">
            <summary>A type of event.</summary>
        </member>
        <member name="M:iText.Kernel.Events.Event.#ctor(System.String)">
            <summary>Creates an event of the specified type.</summary>
            <param name="type">type of event</param>
        </member>
        <member name="M:iText.Kernel.Events.Event.GetEventType">
            <summary>Returns the type of this event.</summary>
            <returns>type of this event</returns>
        </member>
        <member name="T:iText.Kernel.Events.EventDispatcher">
            <summary>
            IEventDispatcher implementation that forwards Events to registered
            <see cref="T:iText.Kernel.Events.IEventHandler"/>
            implementations.
            </summary>
        </member>
        <member name="T:iText.Kernel.Events.IEventDispatcher">
            <summary>Event dispatcher interface.</summary>
        </member>
        <member name="M:iText.Kernel.Events.IEventDispatcher.AddEventHandler(System.String,iText.Kernel.Events.IEventHandler)">
            <summary>Adds new event handler.</summary>
            <param name="type">a type of event to be handled.</param>
            <param name="handler">event handler.</param>
        </member>
        <member name="M:iText.Kernel.Events.IEventDispatcher.DispatchEvent(iText.Kernel.Events.Event)">
            <summary>Dispatches an event.</summary>
            <param name="event"/>
        </member>
        <member name="M:iText.Kernel.Events.IEventDispatcher.DispatchEvent(iText.Kernel.Events.Event,System.Boolean)">
            <summary>Dispatches a delayed event.</summary>
            <remarks>
            Dispatches a delayed event.
            Sometimes event cannot be handled immediately because event handler has not been set yet.
            In this case event is placed into event ques of dispatcher and is waiting until handler is assigned.
            </remarks>
            <param name="event"/>
            <param name="delayed"/>
        </member>
        <member name="M:iText.Kernel.Events.IEventDispatcher.HasEventHandler(System.String)">
            <summary>Checks if event dispatcher as an event handler assigned for a certain event type.</summary>
            <param name="type"/>
        </member>
        <member name="M:iText.Kernel.Events.IEventDispatcher.RemoveEventHandler(System.String,iText.Kernel.Events.IEventHandler)">
            <summary>Removes event handler.</summary>
            <param name="type"/>
            <param name="handler"/>
        </member>
        <member name="M:iText.Kernel.Events.IEventDispatcher.RemoveAllHandlers">
            <summary>Remove all event handlers.</summary>
        </member>
        <member name="T:iText.Kernel.Events.IEventHandler">
            <summary>Interface for handling events.</summary>
            <remarks>
            Interface for handling events. EventHandlers are added to the
            <see cref="T:iText.Kernel.Events.EventDispatcher"/>
            .
            </remarks>
        </member>
        <member name="M:iText.Kernel.Events.IEventHandler.HandleEvent(iText.Kernel.Events.Event)">
            <summary>Hook for handling events.</summary>
            <remarks>
            Hook for handling events. Implementations can access the PdfDocument instance
            associated to the specified Event or, if available, the PdfPage instance.
            </remarks>
            <param name="event">the Event that needs to be processed</param>
        </member>
        <member name="T:iText.Kernel.Events.PdfDocumentEvent">
            <summary>Event dispatched by PdfDocument.</summary>
        </member>
        <member name="F:iText.Kernel.Events.PdfDocumentEvent.START_PAGE">
            <summary>Dispatched after page is created.</summary>
        </member>
        <member name="F:iText.Kernel.Events.PdfDocumentEvent.INSERT_PAGE">
            <summary>Dispatched after page is inserted/added into document.</summary>
        </member>
        <member name="F:iText.Kernel.Events.PdfDocumentEvent.REMOVE_PAGE">
            <summary>Dispatched after page is removed from document.</summary>
        </member>
        <member name="F:iText.Kernel.Events.PdfDocumentEvent.END_PAGE">
            <summary>Dispatched before page is closed and written.</summary>
        </member>
        <member name="F:iText.Kernel.Events.PdfDocumentEvent.page">
            <summary>The PdfPage associated with this event.</summary>
        </member>
        <member name="F:iText.Kernel.Events.PdfDocumentEvent.document">
            <summary>The PdfDocument associated with this event.</summary>
        </member>
        <member name="M:iText.Kernel.Events.PdfDocumentEvent.#ctor(System.String,iText.Kernel.Pdf.PdfDocument)">
            <summary>Creates a PdfDocumentEvent.</summary>
            <param name="type">type of the event that fired this event</param>
            <param name="document">document that fired this event</param>
        </member>
        <member name="M:iText.Kernel.Events.PdfDocumentEvent.#ctor(System.String,iText.Kernel.Pdf.PdfPage)">
            <summary>Creates a PdfDocumentEvent.</summary>
            <param name="type">type of the event that fired this event</param>
            <param name="page">page that fired this event</param>
        </member>
        <member name="M:iText.Kernel.Events.PdfDocumentEvent.GetDocument">
            <summary>Returns the PdfDocument associated with this event.</summary>
            <returns>the PdfDocument associated with this event</returns>
        </member>
        <member name="M:iText.Kernel.Events.PdfDocumentEvent.GetPage">
            <summary>Returns the PdfPage associated with this event.</summary>
            <remarks>Returns the PdfPage associated with this event. Warning: this can be null.</remarks>
            <returns>the PdfPage associated with this event</returns>
        </member>
        <member name="T:iText.Kernel.Font.DocFontEncoding">
            <summary>This class allow to parse document font's encoding.</summary>
        </member>
        <member name="M:iText.Kernel.Font.DocTrueTypeFont.IsBuiltWith(System.String)">
            <summary>Returns false, because we cannot rely on an actual font subset and font name.</summary>
            <param name="fontName">a font name or path to a font program</param>
            <returns>return false.</returns>
        </member>
        <member name="M:iText.Kernel.Font.DocType1Font.IsBuiltWith(System.String)">
            <summary>Returns false, because we cannot rely on an actual font subset and font name.</summary>
            <param name="fontName">a font name or path to a font program</param>
            <returns>return false.</returns>
        </member>
        <member name="F:iText.Kernel.Font.PdfFont.newFont">
            <summary>false, if the font comes from PdfDocument.</summary>
        </member>
        <member name="F:iText.Kernel.Font.PdfFont.embedded">
            <summary>true if the font is to be embedded in the PDF.</summary>
        </member>
        <member name="F:iText.Kernel.Font.PdfFont.subset">
            <summary>Indicates if all the glyphs and widths for that particular encoding should be included in the document.
                </summary>
        </member>
        <member name="M:iText.Kernel.Font.PdfFont.GetGlyph(System.Int32)">
            <summary>Get glyph by unicode</summary>
            <param name="unicode">a unicode code point</param>
            <returns>
            
            <see cref="T:iText.IO.Font.Otf.Glyph"/>
            if it exists or .NOTDEF if supported, otherwise
            <see langword="null"/>
            .
            </returns>
        </member>
        <member name="M:iText.Kernel.Font.PdfFont.ContainsGlyph(System.Int32)">
            <summary>Check whether font contains glyph with specified unicode.</summary>
            <param name="unicode">a unicode code point</param>
            <returns>
            true if font contains glyph, represented with the unicode code point,
            otherwise false.
            </returns>
        </member>
        <member name="M:iText.Kernel.Font.PdfFont.AppendGlyphs(System.String,System.Int32,System.Int32,System.Collections.Generic.IList{iText.IO.Font.Otf.Glyph})">
            <summary>Append all supported glyphs and return number of processed chars.</summary>
            <remarks>
            Append all supported glyphs and return number of processed chars.
            Composite font supports surrogate pairs.
            </remarks>
            <param name="text">String to convert to glyphs.</param>
            <param name="from">from index of the text.</param>
            <param name="to">to index of the text.</param>
            <param name="glyphs">array for a new glyphs, shall not be null.</param>
            <returns>number of processed chars from text.</returns>
        </member>
        <member name="M:iText.Kernel.Font.PdfFont.AppendAnyGlyph(System.String,System.Int32,System.Collections.Generic.IList{iText.IO.Font.Otf.Glyph})">
            <summary>Append any single glyph, even notdef.</summary>
            <remarks>
            Append any single glyph, even notdef.
            Returns number of processed chars: 2 in case surrogate pair, otherwise 1.
            </remarks>
            <param name="text">String to convert to glyphs.</param>
            <param name="from">from index of the text.</param>
            <param name="glyphs">array for a new glyph, shall not be null.</param>
            <returns>number of processed chars: 2 in case surrogate pair, otherwise 1</returns>
        </member>
        <member name="M:iText.Kernel.Font.PdfFont.ConvertToBytes(System.String)">
            <summary>Converts the text into bytes to be placed in the document.</summary>
            <remarks>
            Converts the text into bytes to be placed in the document.
            The conversion is done according to the font and the encoding and the characters
            used are stored.
            </remarks>
            <param name="text">the text to convert</param>
            <returns>the conversion</returns>
        </member>
        <member name="M:iText.Kernel.Font.PdfFont.DecodeIntoGlyphLine(iText.Kernel.Pdf.PdfString)">
            <summary>
            Decodes a given
            <see cref="T:iText.Kernel.Pdf.PdfString"/>
            containing encoded string (e.g. from content stream) into a
            <see cref="T:iText.IO.Font.Otf.GlyphLine"/>
            </summary>
            <param name="content">the encoded string</param>
            <returns>
            the
            <see cref="T:iText.IO.Font.Otf.GlyphLine"/>
            containing the glyphs encoded by the passed string
            </returns>
        </member>
        <member name="M:iText.Kernel.Font.PdfFont.GetWidth(System.Int32)">
            <summary>Returns the width of a certain character of this font in 1000 normalized units.</summary>
            <param name="unicode">a certain character.</param>
            <returns>a width in Text Space.</returns>
        </member>
        <member name="M:iText.Kernel.Font.PdfFont.GetWidth(System.Int32,System.Single)">
            <summary>Returns the width of a certain character of this font in points.</summary>
            <param name="unicode">a certain character.</param>
            <param name="fontSize">the font size.</param>
            <returns>a width in points.</returns>
        </member>
        <member name="M:iText.Kernel.Font.PdfFont.GetWidth(System.String)">
            <summary>Returns the width of a string of this font in 1000 normalized units.</summary>
            <param name="text">a string content.</param>
            <returns>a width of string in Text Space.</returns>
        </member>
        <member name="M:iText.Kernel.Font.PdfFont.GetWidth(System.String,System.Single)">
            <summary>
            Gets the width of a
            <c>String</c>
            in points.
            </summary>
            <param name="text">
            the
            <c>String</c>
            to get the width of
            </param>
            <param name="fontSize">the font size</param>
            <returns>the width in points</returns>
        </member>
        <member name="M:iText.Kernel.Font.PdfFont.GetDescent(System.String,System.Single)">
            <summary>
            Gets the descent of a
            <c>String</c>
            in points. The descent will always be
            less than or equal to zero even if all the characters have an higher descent.
            </summary>
            <param name="text">
            the
            <c>String</c>
            to get the descent of
            </param>
            <param name="fontSize">the font size</param>
            <returns>the descent in points</returns>
        </member>
        <member name="M:iText.Kernel.Font.PdfFont.GetDescent(System.Int32,System.Single)">
            <summary>Gets the descent of a char code in points.</summary>
            <remarks>
            Gets the descent of a char code in points. The descent will always be
            less than or equal to zero even if all the characters have an higher descent.
            </remarks>
            <param name="unicode">the char code to get the descent of</param>
            <param name="fontSize">the font size</param>
            <returns>the descent in points</returns>
        </member>
        <member name="M:iText.Kernel.Font.PdfFont.GetAscent(System.String,System.Single)">
            <summary>
            Gets the ascent of a
            <c>String</c>
            in points. The ascent will always be
            greater than or equal to zero even if all the characters have a lower ascent.
            </summary>
            <param name="text">
            the
            <c>String</c>
            to get the ascent of
            </param>
            <param name="fontSize">the font size</param>
            <returns>the ascent in points</returns>
        </member>
        <member name="M:iText.Kernel.Font.PdfFont.GetAscent(System.Int32,System.Single)">
            <summary>Gets the ascent of a char code in normalized 1000 units.</summary>
            <remarks>
            Gets the ascent of a char code in normalized 1000 units. The ascent will always be
            greater than or equal to zero even if all the characters have a lower ascent.
            </remarks>
            <param name="unicode">the char code to get the ascent of</param>
            <param name="fontSize">the font size</param>
            <returns>the ascent in points</returns>
        </member>
        <member name="M:iText.Kernel.Font.PdfFont.IsSubset">
            <summary>
            Indicates if all the glyphs and widths for that particular
            encoding should be included in the document.
            </summary>
            <returns><CODE>false</CODE> to include all the glyphs and widths.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.Font.PdfFont.SetSubset(System.Boolean)" -->
        <member name="M:iText.Kernel.Font.PdfFont.AddSubsetRange(System.Int32[])">
            <summary>Adds a character range when subsetting.</summary>
            <remarks>
            Adds a character range when subsetting. The range is an <CODE>int</CODE> array
            where the first element is the start range inclusive and the second element is the
            end range inclusive. Several ranges are allowed in the same array.
            Note, #setSubset(true) will be called implicitly
            therefore this range is an addition to the used glyphs.
            </remarks>
            <param name="range">the character range</param>
        </member>
        <member name="M:iText.Kernel.Font.PdfFont.IsBuiltWith(System.String,System.String)">
            <summary>
            Checks whether the
            <see cref="T:iText.Kernel.Font.PdfFont"/>
            was built with corresponding fontProgram and encoding or CMAP.
            Default value is false unless overridden.
            </summary>
            <param name="fontProgram">a font name or path to a font program</param>
            <param name="encoding">an encoding or CMAP</param>
            <returns>true, if the PdfFont was built with the fontProgram and encoding. Otherwise false.</returns>
            <seealso cref="M:iText.Kernel.Pdf.PdfDocument.FindFont(System.String,System.String)"/>
            <seealso cref="M:iText.IO.Font.FontProgram.IsBuiltWith(System.String)"/>
            <seealso cref="M:iText.IO.Font.FontEncoding.IsBuiltWith(System.String)"/>
            <seealso cref="M:iText.IO.Font.CMapEncoding.IsBuiltWith(System.String)"/>
        </member>
        <member name="M:iText.Kernel.Font.PdfFont.Flush">
            <summary>
            To manually flush a
            <c>PdfObject</c>
            behind this wrapper, you have to ensure
            that this object is added to the document, i.e. it has an indirect reference.
            Basically this means that before flushing you need to explicitly call
            <see cref="M:iText.Kernel.Pdf.PdfObjectWrapper`1.MakeIndirect(iText.Kernel.Pdf.PdfDocument)"/>
            .
            For example: wrapperInstance.makeIndirect(document).flush();
            Note that not every wrapper require this, only those that have such warning in documentation.
            </summary>
        </member>
        <member name="M:iText.Kernel.Font.PdfFont.UpdateSubsetPrefix(System.String,System.Boolean,System.Boolean)">
            <summary>Adds a unique subset prefix to be added to the font name when the font is embedded and subset.</summary>
            <param name="fontName"/>
            <param name="isSubset"/>
            <param name="isEmbedded"/>
            <returns>the font name with subset prefix if isSubset and isEmbedded are true.s</returns>
        </member>
        <member name="M:iText.Kernel.Font.PdfFont.GetPdfFontStream(System.Byte[],System.Int32[])">
            <summary>
            Create
            <c>PdfStream</c>
            based on
            <paramref name="fontStreamBytes"/>
            .
            </summary>
            <param name="fontStreamBytes">original font data, must be not null.</param>
            <param name="fontStreamLengths">
            array to generate
            <c>Length*</c>
            keys, must be not null.
            </param>
            <returns>
            the PdfStream containing the font or
            <see langword="null"/>
            , if there is an error reading the font.
            </returns>
            <exception cref="T:iText.Kernel.PdfException">
            Method will throw exception if
            <paramref name="fontStreamBytes"/>
            is
            <see langword="null"/>
            .
            </exception>
        </member>
        <member name="M:iText.Kernel.Font.PdfFont.MakeObjectIndirect(iText.Kernel.Pdf.PdfObject)">
            <summary>Helper method for making an object indirect, if the object already is indirect.</summary>
            <remarks>
            Helper method for making an object indirect, if the object already is indirect.
            Useful for FontDescriptor and FontFile to make possible immediate flushing.
            If there is no PdfDocument, mark the object as
            <c>MUST_BE_INDIRECT</c>
            .
            </remarks>
            <param name="obj">an object to make indirect.</param>
            <returns>
            if current object isn't indirect, returns
            <see langword="false"/>
            , otherwise
            <c>tree</c>
            </returns>
        </member>
        <member name="T:iText.Kernel.Font.PdfFontFactory">
            <summary>
            This class provides helpful methods for creating fonts ready to be used in a
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            Note, just created
            <see cref="T:iText.Kernel.Font.PdfFont"/>
            is almost empty until it will be flushed,
            because it is impossible to fulfill font data until flush.
            </summary>
        </member>
        <member name="F:iText.Kernel.Font.PdfFontFactory.DEFAULT_ENCODING">
            <summary>This is the default encoding to use.</summary>
        </member>
        <member name="F:iText.Kernel.Font.PdfFontFactory.DEFAULT_EMBEDDING">
            <summary>This is the default value of the <VAR>embedded</VAR> variable.</summary>
        </member>
        <member name="F:iText.Kernel.Font.PdfFontFactory.DEFAULT_CACHED">
            <summary>This is the default value of the <VAR>cached</VAR> variable.</summary>
        </member>
        <member name="M:iText.Kernel.Font.PdfFontFactory.CreateFont">
            <summary>
            Creates a new instance of default font, namely
            <see cref="F:iText.IO.Font.Constants.StandardFonts.HELVETICA"/>
            standard font
            with
            <see cref="F:iText.IO.Font.PdfEncodings.WINANSI"/>
            encoding.
            Note, if you want to reuse the same instance of default font, you may use
            <see cref="M:iText.Kernel.Pdf.PdfDocument.GetDefaultFont"/>
            .
            </summary>
            <returns>created font</returns>
            <exception cref="T:System.IO.IOException">if error occurred while creating the font, e.g. metrics loading failure
                </exception>
        </member>
        <member name="M:iText.Kernel.Font.PdfFontFactory.CreateFont(iText.Kernel.Pdf.PdfDictionary)">
            <summary>
            Creates a
            <see cref="T:iText.Kernel.Font.PdfFont"/>
            by already existing font dictionary.
            Note, the font won't be added to any document,
            until you add it to
            <see cref="T:iText.Kernel.Pdf.Canvas.PdfCanvas"/>
            .
            While adding to
            <see cref="T:iText.Kernel.Pdf.Canvas.PdfCanvas"/>
            , or to
            <see cref="T:iText.Kernel.Pdf.PdfResources"/>
            the font will be made indirect implicitly.
            <see cref="M:iText.Kernel.Pdf.PdfDocument.GetFont(iText.Kernel.Pdf.PdfDictionary)"/>
            method is strongly recommended if you want to get PdfFont by both
            existing font dictionary, or just created and hasn't flushed yet.
            </summary>
            <param name="fontDictionary">the font dictionary to create the font from</param>
            <returns>
            created
            <see cref="T:iText.Kernel.Font.PdfFont"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Kernel.Font.PdfFontFactory.CreateFont(System.String,System.String,iText.Kernel.Pdf.PdfDocument)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Kernel.Font.PdfFontFactory.CreateFont(System.String)">
            <summary>
            Creates a
            <see cref="T:iText.Kernel.Font.PdfFont"/>
            instance by the path of the font program file
            </summary>
            <param name="fontProgram">the path of the font program file</param>
            <returns>
            created
            <see cref="T:iText.Kernel.Font.PdfFont"/>
            instance
            </returns>
            <exception cref="T:System.IO.IOException">exception is thrown in case an I/O error occurs when reading the file
                </exception>
        </member>
        <member name="M:iText.Kernel.Font.PdfFontFactory.CreateFont(System.String,System.String)">
            <summary>
            Creates a
            <see cref="T:iText.Kernel.Font.PdfFont"/>
            instance by the path of the font program file and given encoding.
            </summary>
            <param name="fontProgram">the path of the font program file</param>
            <param name="encoding">
            the font encoding. See
            <see cref="T:iText.IO.Font.PdfEncodings"/>
            </param>
            <returns>
            created
            <see cref="T:iText.Kernel.Font.PdfFont"/>
            instance
            </returns>
            <exception cref="T:System.IO.IOException">exception is thrown in case an I/O error occurs when reading the file
                </exception>
        </member>
        <member name="M:iText.Kernel.Font.PdfFontFactory.CreateTtcFont(System.Byte[],System.Int32,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a
            <see cref="T:iText.Kernel.Font.PdfFont"/>
            instance from the TrueType Collection represented by its byte contents.
            </summary>
            <param name="ttc">the byte contents of the TrueType Collection</param>
            <param name="ttcIndex">the index of the font in the collection, zero-based</param>
            <param name="encoding">
            the encoding of the font to be created. See
            <see cref="T:iText.IO.Font.PdfEncodings"/>
            </param>
            <param name="embedded">indicates whether the font is to be embedded into the target document</param>
            <param name="cached">indicates whether the font will be cached</param>
            <returns>
            created
            <see cref="T:iText.Kernel.Font.PdfFont"/>
            instance
            </returns>
            <exception cref="T:System.IO.IOException">in case the contents of the TrueType Collection is mal-formed or an error occurred during reading the font
                </exception>
        </member>
        <member name="M:iText.Kernel.Font.PdfFontFactory.CreateTtcFont(System.String,System.Int32,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a
            <see cref="T:iText.Kernel.Font.PdfFont"/>
            instance from the TrueType Collection given by the path to the .ttc file.
            </summary>
            <param name="ttc">the path of the .ttc file</param>
            <param name="ttcIndex">the index of the font in the collection, zero-based</param>
            <param name="encoding">
            the encoding of the font to be created. See
            <see cref="T:iText.IO.Font.PdfEncodings"/>
            </param>
            <param name="embedded">indicates whether the font is to be embedded into the target document</param>
            <param name="cached">indicates whether the font will be cached</param>
            <returns>
            created
            <see cref="T:iText.Kernel.Font.PdfFont"/>
            instance
            </returns>
            <exception cref="T:System.IO.IOException">
            in case the file is not found, contents of the TrueType Collection is mal-formed
            or an error occurred during reading the font
            </exception>
        </member>
        <member name="M:iText.Kernel.Font.PdfFontFactory.CreateFont(System.String,System.Boolean)">
            <summary>
            Created a
            <see cref="T:iText.Kernel.Font.PdfFont"/>
            instance given the path to the font file.
            </summary>
            <param name="fontProgram">the font program file</param>
            <param name="embedded">indicates whether the font is to be embedded into the target document</param>
            <returns>
            created
            <see cref="T:iText.Kernel.Font.PdfFont"/>
            instance
            </returns>
            <exception cref="T:System.IO.IOException">in case the file is not found or the contents of the font file is mal-formed
                </exception>
        </member>
        <member name="M:iText.Kernel.Font.PdfFontFactory.CreateFont(System.String,System.String,System.Boolean)">
            <summary>
            Created a
            <see cref="T:iText.Kernel.Font.PdfFont"/>
            instance given the path to the font file.
            </summary>
            <param name="fontProgram">the font program file</param>
            <param name="encoding">
            the encoding of the font to be created. See
            <see cref="T:iText.IO.Font.PdfEncodings"/>
            </param>
            <param name="embedded">indicates whether the font is to be embedded into the target document</param>
            <returns>
            created
            <see cref="T:iText.Kernel.Font.PdfFont"/>
            instance
            </returns>
            <exception cref="T:System.IO.IOException">in case the file is not found or the contents of the font file is mal-formed
                </exception>
        </member>
        <member name="M:iText.Kernel.Font.PdfFontFactory.CreateFont(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Created a
            <see cref="T:iText.Kernel.Font.PdfFont"/>
            instance given the path to the font file.
            </summary>
            <param name="fontProgram">the font program file</param>
            <param name="encoding">
            the encoding of the font to be created. See
            <see cref="T:iText.IO.Font.PdfEncodings"/>
            </param>
            <param name="embedded">indicates whether the font is to be embedded into the target document</param>
            <param name="cached">indicates whether the font will be cached</param>
            <returns>
            created
            <see cref="T:iText.Kernel.Font.PdfFont"/>
            instance
            </returns>
            <exception cref="T:System.IO.IOException">in case the file is not found or the contents of the font file is mal-formed
                </exception>
        </member>
        <member name="M:iText.Kernel.Font.PdfFontFactory.CreateFont(iText.IO.Font.FontProgram,System.String,System.Boolean)">
            <summary>
            Created a
            <see cref="T:iText.Kernel.Font.PdfFont"/>
            instance given the given underlying
            <see cref="T:iText.IO.Font.FontProgram"/>
            instance.
            </summary>
            <param name="fontProgram">
            the font program of the
            <see cref="T:iText.Kernel.Font.PdfFont"/>
            instance to be created
            </param>
            <param name="encoding">
            the encoding of the font to be created. See
            <see cref="T:iText.IO.Font.PdfEncodings"/>
            </param>
            <param name="embedded">indicates whether the font is to be embedded into the target document</param>
            <returns>
            created
            <see cref="T:iText.Kernel.Font.PdfFont"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Kernel.Font.PdfFontFactory.CreateFont(iText.IO.Font.FontProgram,System.String)">
            <summary>
            Created a
            <see cref="T:iText.Kernel.Font.PdfFont"/>
            instance given the given underlying
            <see cref="T:iText.IO.Font.FontProgram"/>
            instance.
            </summary>
            <param name="fontProgram">
            the font program of the
            <see cref="T:iText.Kernel.Font.PdfFont"/>
            instance to be created
            </param>
            <param name="encoding">
            the encoding of the font to be created. See
            <see cref="T:iText.IO.Font.PdfEncodings"/>
            </param>
            <returns>
            created
            <see cref="T:iText.Kernel.Font.PdfFont"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Kernel.Font.PdfFontFactory.CreateFont(iText.IO.Font.FontProgram)">
            <summary>
            Created a
            <see cref="T:iText.Kernel.Font.PdfFont"/>
            instance given the given underlying
            <see cref="T:iText.IO.Font.FontProgram"/>
            instance.
            </summary>
            <param name="fontProgram">
            the font program of the
            <see cref="T:iText.Kernel.Font.PdfFont"/>
            instance to be created
            </param>
            <returns>
            created
            <see cref="T:iText.Kernel.Font.PdfFont"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Kernel.Font.PdfFontFactory.CreateFont(System.Byte[],System.String)">
            <summary>
            Created a
            <see cref="T:iText.Kernel.Font.PdfFont"/>
            instance by the bytes of the underlying font program.
            </summary>
            <param name="fontProgram">the bytes of the underlying font program</param>
            <param name="encoding"/>
            <returns>
            created
            <see cref="T:iText.Kernel.Font.PdfFont"/>
            instance
            </returns>
            <exception cref="T:System.IO.IOException">signals that an I/O exception has occurred.</exception>
        </member>
        <member name="M:iText.Kernel.Font.PdfFontFactory.CreateFont(System.Byte[],System.Boolean)">
            <summary>
            Created a
            <see cref="T:iText.Kernel.Font.PdfFont"/>
            instance by the bytes of the underlying font program.
            </summary>
            <param name="fontProgram">the bytes of the underlying font program</param>
            <param name="embedded">indicates whether the font is to be embedded into the target document</param>
            <returns>
            created
            <see cref="T:iText.Kernel.Font.PdfFont"/>
            instance
            </returns>
            <exception cref="T:System.IO.IOException">signals that an I/O exception has occurred.</exception>
        </member>
        <member name="M:iText.Kernel.Font.PdfFontFactory.CreateFont(System.Byte[],System.String,System.Boolean)">
            <summary>
            Created a
            <see cref="T:iText.Kernel.Font.PdfFont"/>
            instance by the bytes of the underlying font program.
            </summary>
            <param name="fontProgram">the bytes of the underlying font program</param>
            <param name="encoding">
            the encoding of the font to be created. See
            <see cref="T:iText.IO.Font.PdfEncodings"/>
            </param>
            <param name="embedded">indicates whether the font is to be embedded into the target document</param>
            <returns>
            created
            <see cref="T:iText.Kernel.Font.PdfFont"/>
            instance
            </returns>
            <exception cref="T:System.IO.IOException">signals that an I/O exception has occurred.</exception>
        </member>
        <member name="M:iText.Kernel.Font.PdfFontFactory.CreateFont(System.Byte[],System.String,System.Boolean,System.Boolean)">
            <summary>
            Created a
            <see cref="T:iText.Kernel.Font.PdfFont"/>
            instance by the bytes of the underlying font program.
            </summary>
            <param name="fontProgram">the bytes of the underlying font program</param>
            <param name="encoding">
            the encoding of the font to be created. See
            <see cref="T:iText.IO.Font.PdfEncodings"/>
            </param>
            <param name="embedded">indicates whether the font is to be embedded into the target document</param>
            <param name="cached">indicates whether the font will be cached</param>
            <returns>
            created
            <see cref="T:iText.Kernel.Font.PdfFont"/>
            instance
            </returns>
            <exception cref="T:System.IO.IOException">signals that an I/O exception has occurred.</exception>
        </member>
        <member name="M:iText.Kernel.Font.PdfFontFactory.CreateType3Font(iText.Kernel.Pdf.PdfDocument,System.Boolean)">
            <summary>
            Creates a new instance of
            <see cref="T:iText.Kernel.Font.PdfType3Font"/>
            </summary>
            <param name="document">the target document of the new font</param>
            <param name="colorized">indicates whether the font will be colorized</param>
            <returns>created font</returns>
        </member>
        <member name="M:iText.Kernel.Font.PdfFontFactory.CreateType3Font(iText.Kernel.Pdf.PdfDocument,System.String,System.String,System.Boolean)">
            <summary>
            Creates a new instance of
            <see cref="T:iText.Kernel.Font.PdfType3Font"/>
            </summary>
            <param name="document">the target document of the new font.</param>
            <param name="fontName">the PostScript name of the font, shall not be null or empty.</param>
            <param name="fontFamily">a preferred font family name.</param>
            <param name="colorized">indicates whether the font will be colorized</param>
            <returns>created font.</returns>
        </member>
        <member name="M:iText.Kernel.Font.PdfFontFactory.CreateRegisteredFont(System.String,System.String,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Creates
            <see cref="T:iText.Kernel.Font.PdfFont"/>
            based on registered
            <see cref="T:iText.IO.Font.FontProgram"/>
            's.
            </summary>
            <param name="fontName"/>
            <param name="encoding"/>
            <param name="embedded"/>
            <param name="style"/>
            <param name="cached"/>
            <exception cref="T:System.IO.IOException"/>
            <seealso cref="M:iText.Kernel.Font.PdfFontFactory.Register(System.String)"/>
            <seealso cref="M:iText.Kernel.Font.PdfFontFactory.Register(System.String,System.String)"/>
            <seealso cref="M:iText.Kernel.Font.PdfFontFactory.RegisterFamily(System.String,System.String,System.String)"/>
            <seealso cref="M:iText.Kernel.Font.PdfFontFactory.RegisterDirectory(System.String)"/>
            <seealso cref="M:iText.Kernel.Font.PdfFontFactory.RegisterSystemDirectories"/>
            <seealso cref="M:iText.Kernel.Font.PdfFontFactory.GetRegisteredFamilies"/>
            <seealso cref="M:iText.Kernel.Font.PdfFontFactory.GetRegisteredFonts"/>
        </member>
        <member name="M:iText.Kernel.Font.PdfFontFactory.CreateRegisteredFont(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates
            <see cref="T:iText.Kernel.Font.PdfFont"/>
            based on registered
            <see cref="T:iText.IO.Font.FontProgram"/>
            's.
            </summary>
            <param name="fontName"/>
            <param name="encoding"/>
            <param name="embedded"/>
            <param name="cached"/>
            <exception cref="T:System.IO.IOException"/>
            <seealso cref="M:iText.Kernel.Font.PdfFontFactory.Register(System.String)"/>
            <seealso cref="M:iText.Kernel.Font.PdfFontFactory.Register(System.String,System.String)"/>
            <seealso cref="M:iText.Kernel.Font.PdfFontFactory.RegisterFamily(System.String,System.String,System.String)"/>
            <seealso cref="M:iText.Kernel.Font.PdfFontFactory.RegisterDirectory(System.String)"/>
            <seealso cref="M:iText.Kernel.Font.PdfFontFactory.RegisterSystemDirectories"/>
            <seealso cref="M:iText.Kernel.Font.PdfFontFactory.GetRegisteredFamilies"/>
            <seealso cref="M:iText.Kernel.Font.PdfFontFactory.GetRegisteredFonts"/>
        </member>
        <member name="M:iText.Kernel.Font.PdfFontFactory.CreateRegisteredFont(System.String,System.String,System.Boolean)">
            <summary>
            Creates
            <see cref="T:iText.Kernel.Font.PdfFont"/>
            based on registered
            <see cref="T:iText.IO.Font.FontProgram"/>
            's.
            </summary>
            <param name="fontName"/>
            <param name="encoding"/>
            <param name="embedded"/>
            <exception cref="T:System.IO.IOException"/>
            <seealso cref="M:iText.Kernel.Font.PdfFontFactory.Register(System.String)"/>
            <seealso cref="M:iText.Kernel.Font.PdfFontFactory.Register(System.String,System.String)"/>
            <seealso cref="M:iText.Kernel.Font.PdfFontFactory.RegisterFamily(System.String,System.String,System.String)"/>
            <seealso cref="M:iText.Kernel.Font.PdfFontFactory.RegisterDirectory(System.String)"/>
            <seealso cref="M:iText.Kernel.Font.PdfFontFactory.RegisterSystemDirectories"/>
            <seealso cref="M:iText.Kernel.Font.PdfFontFactory.GetRegisteredFamilies"/>
            <seealso cref="M:iText.Kernel.Font.PdfFontFactory.GetRegisteredFonts"/>
        </member>
        <member name="M:iText.Kernel.Font.PdfFontFactory.CreateRegisteredFont(System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            Creates
            <see cref="T:iText.Kernel.Font.PdfFont"/>
            based on registered
            <see cref="T:iText.IO.Font.FontProgram"/>
            's.
            </summary>
            <param name="fontName"/>
            <param name="encoding"/>
            <param name="embedded"/>
            <param name="style"/>
            <exception cref="T:System.IO.IOException"/>
            <seealso cref="M:iText.Kernel.Font.PdfFontFactory.Register(System.String)"/>
            <seealso cref="M:iText.Kernel.Font.PdfFontFactory.Register(System.String,System.String)"/>
            <seealso cref="M:iText.Kernel.Font.PdfFontFactory.RegisterFamily(System.String,System.String,System.String)"/>
            <seealso cref="M:iText.Kernel.Font.PdfFontFactory.RegisterDirectory(System.String)"/>
            <seealso cref="M:iText.Kernel.Font.PdfFontFactory.RegisterSystemDirectories"/>
            <seealso cref="M:iText.Kernel.Font.PdfFontFactory.GetRegisteredFamilies"/>
            <seealso cref="M:iText.Kernel.Font.PdfFontFactory.GetRegisteredFonts"/>
        </member>
        <member name="M:iText.Kernel.Font.PdfFontFactory.CreateRegisteredFont(System.String,System.String)">
            <summary>
            Creates
            <see cref="T:iText.Kernel.Font.PdfFont"/>
            based on registered
            <see cref="T:iText.IO.Font.FontProgram"/>
            's.
            </summary>
            <param name="fontName"/>
            <param name="encoding"/>
            <exception cref="T:System.IO.IOException"/>
            <seealso cref="M:iText.Kernel.Font.PdfFontFactory.Register(System.String)"/>
            <seealso cref="M:iText.Kernel.Font.PdfFontFactory.Register(System.String,System.String)"/>
            <seealso cref="M:iText.Kernel.Font.PdfFontFactory.RegisterFamily(System.String,System.String,System.String)"/>
            <seealso cref="M:iText.Kernel.Font.PdfFontFactory.RegisterDirectory(System.String)"/>
            <seealso cref="M:iText.Kernel.Font.PdfFontFactory.RegisterSystemDirectories"/>
            <seealso cref="M:iText.Kernel.Font.PdfFontFactory.GetRegisteredFamilies"/>
            <seealso cref="M:iText.Kernel.Font.PdfFontFactory.GetRegisteredFonts"/>
        </member>
        <member name="M:iText.Kernel.Font.PdfFontFactory.CreateRegisteredFont(System.String)">
            <summary>
            Creates
            <see cref="T:iText.Kernel.Font.PdfFont"/>
            based on registered
            <see cref="T:iText.IO.Font.FontProgram"/>
            's.
            </summary>
            <param name="fontName"/>
            <exception cref="T:System.IO.IOException"/>
            <seealso cref="M:iText.Kernel.Font.PdfFontFactory.Register(System.String)"/>
            <seealso cref="M:iText.Kernel.Font.PdfFontFactory.Register(System.String,System.String)"/>
            <seealso cref="M:iText.Kernel.Font.PdfFontFactory.RegisterFamily(System.String,System.String,System.String)"/>
            <seealso cref="M:iText.Kernel.Font.PdfFontFactory.RegisterDirectory(System.String)"/>
            <seealso cref="M:iText.Kernel.Font.PdfFontFactory.RegisterSystemDirectories"/>
            <seealso cref="M:iText.Kernel.Font.PdfFontFactory.GetRegisteredFamilies"/>
            <seealso cref="M:iText.Kernel.Font.PdfFontFactory.GetRegisteredFonts"/>
        </member>
        <member name="M:iText.Kernel.Font.PdfFontFactory.RegisterFamily(System.String,System.String,System.String)">
            <summary>Register a font by giving explicitly the font family and name.</summary>
            <param name="familyName">the font family</param>
            <param name="fullName">the font name</param>
            <param name="path">the font path</param>
        </member>
        <member name="M:iText.Kernel.Font.PdfFontFactory.Register(System.String)">
            <summary>Registers a .ttf, .otf, .afm, .pfm, or a .ttc font file.</summary>
            <remarks>
            Registers a .ttf, .otf, .afm, .pfm, or a .ttc font file.
            In case if TrueType Collection (.ttc), an additional parameter may be specified defining the index of the font
            to be registered, e.g. "path/to/font/collection.ttc,0". The index is zero-based.
            </remarks>
            <param name="path">the path to a font file</param>
        </member>
        <member name="M:iText.Kernel.Font.PdfFontFactory.Register(System.String,System.String)">
            <summary>Register a font file and use an alias for the font contained in it.</summary>
            <param name="path">the path to a font file</param>
            <param name="alias">the alias you want to use for the font</param>
        </member>
        <member name="M:iText.Kernel.Font.PdfFontFactory.RegisterDirectory(System.String)">
            <summary>Registers all the fonts in a directory.</summary>
            <param name="dirPath">the directory path to be registered as a font directory path</param>
            <returns>the number of fonts registered</returns>
        </member>
        <member name="M:iText.Kernel.Font.PdfFontFactory.RegisterSystemDirectories">
            <summary>Register fonts in some probable directories.</summary>
            <remarks>
            Register fonts in some probable directories. It usually works in Windows,
            Linux and Solaris.
            </remarks>
            <returns>the number of fonts registered</returns>
        </member>
        <member name="M:iText.Kernel.Font.PdfFontFactory.GetRegisteredFonts">
            <summary>Gets a set of registered font names.</summary>
            <returns>a set of registered fonts</returns>
        </member>
        <member name="M:iText.Kernel.Font.PdfFontFactory.GetRegisteredFamilies">
            <summary>Gets a set of registered font families.</summary>
            <returns>a set of registered font families</returns>
        </member>
        <member name="M:iText.Kernel.Font.PdfFontFactory.IsRegistered(System.String)">
            <summary>Checks if a certain font is registered.</summary>
            <param name="fontName">the name of the font that has to be checked.</param>
            <returns><code>true</code> if the font is found, <code>false</code> otherwise</returns>
        </member>
        <member name="M:iText.Kernel.Font.PdfFontFactory.CheckFontDictionary(iText.Kernel.Pdf.PdfDictionary,iText.Kernel.Pdf.PdfName,System.Boolean)">
            <summary>Checks if the provided dictionary is a valid font dictionary of the provided font type.</summary>
            <returns><code>true</code> if the passed dictionary is a valid dictionary, <code>false</code> otherwise</returns>
        </member>
        <member name="F:iText.Kernel.Font.PdfSimpleFont`1.forceWidthsOutput">
            <summary>Forces the output of the width array.</summary>
            <remarks>Forces the output of the width array. Only matters for the 14 built-in fonts.</remarks>
        </member>
        <member name="F:iText.Kernel.Font.PdfSimpleFont`1.shortTag">
            <summary>The array used with single byte encodings.</summary>
        </member>
        <member name="F:iText.Kernel.Font.PdfSimpleFont`1.toUnicode">
            <summary>Currently only exists for the fonts that are parsed from the document.</summary>
            <remarks>
            Currently only exists for the fonts that are parsed from the document.
            In the future, we might provide possibility to add custom mappings after a font has been created from a font file.
            </remarks>
        </member>
        <member name="M:iText.Kernel.Font.PdfSimpleFont`1.IsAppendableGlyph(iText.IO.Font.Otf.Glyph)">
            <summary>Checks whether the glyph is appendable, i.e.</summary>
            <remarks>Checks whether the glyph is appendable, i.e. has valid unicode and code values</remarks>
            <param name="glyph">
            not-null
            <see cref="T:iText.IO.Font.Otf.Glyph"/>
            </param>
        </member>
        <member name="M:iText.Kernel.Font.PdfSimpleFont`1.DecodeIntoGlyphLine(iText.Kernel.Pdf.PdfString)">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.Kernel.Font.PdfSimpleFont`1.IsForceWidthsOutput">
            <summary>Gets the state of the property.</summary>
            <returns>value of property forceWidthsOutput</returns>
        </member>
        <member name="M:iText.Kernel.Font.PdfSimpleFont`1.SetForceWidthsOutput(System.Boolean)">
            <summary>
            Set to
            <see langword="true"/>
            to force the generation of the widths array.
            </summary>
            <param name="forceWidthsOutput">
            
            <see langword="true"/>
            to force the generation of the widths array
            </param>
        </member>
        <member name="M:iText.Kernel.Font.PdfSimpleFont`1.GetFontDescriptor(System.String)">
            <summary>
            Generates the font descriptor for this font or
            <see langword="null"/>
            if it is one of the 14 built in fonts.
            </summary>
            <returns>
            the PdfDictionary containing the font descriptor or
            <see langword="null"/>
            .
            </returns>
        </member>
        <member name="T:iText.Kernel.Font.PdfTrueTypeFont">
            <summary>Note.</summary>
            <remarks>Note. For TrueType FontNames.getStyle() is the same to Subfamily(). So, we shouldn't add style to /BaseFont.
                </remarks>
        </member>
        <member name="F:iText.Kernel.Font.PdfType0Font.CID_FONT_TYPE_0">
            <summary>CIDFont Type0 (Type1 outlines).</summary>
        </member>
        <member name="F:iText.Kernel.Font.PdfType0Font.CID_FONT_TYPE_2">
            <summary>CIDFont Type2 (TrueType outlines).</summary>
        </member>
        <member name="M:iText.Kernel.Font.PdfType0Font.DecodeIntoGlyphLine(iText.Kernel.Pdf.PdfString)">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.Kernel.Font.PdfType0Font.GetCmap">
            <summary>Gets CMAP associated with the Pdf Font.</summary>
            <returns>CMAP</returns>
            <seealso cref="T:iText.IO.Font.CMapEncoding"/>
        </member>
        <member name="M:iText.Kernel.Font.PdfType0Font.GetToUnicode(System.Object[])">
            <summary>Creates a ToUnicode CMap to allow copy and paste from Acrobat.</summary>
            <param name="metrics">
            metrics[0] contains the glyph index and metrics[2]
            contains the Unicode code
            </param>
            <returns>the stream representing this CMap or <CODE>null</CODE></returns>
        </member>
        <member name="M:iText.Kernel.Font.PdfType0Font.GetCidFontType2(iText.IO.Font.TrueTypeFont,iText.Kernel.Pdf.PdfDictionary,System.String,System.Int32[][])">
            <summary>Generates the CIDFontTyte2 dictionary.</summary>
            <param name="ttf"/>
            <param name="fontDescriptor">the indirect reference to the font descriptor</param>
            <param name="fontName">a name of the font</param>
            <param name="metrics">the horizontal width metrics</param>
            <returns>fully initialized CIDFont</returns>
        </member>
        <member name="M:iText.Kernel.Font.PdfType0Font.GetCidFontType2(iText.IO.Font.TrueTypeFont,iText.Kernel.Pdf.PdfDictionary,System.String,System.Int32[])">
            <summary>Generates the CIDFontTyte2 dictionary.</summary>
            <param name="ttf">
            
            <see cref="F:iText.Kernel.Font.PdfFont.fontProgram"/>
            </param>
            <param name="fontDescriptor">the indirect reference to the font descriptor</param>
            <param name="fontName">a name of the font</param>
            <param name="glyphIds">glyph ids used in from the font</param>
            <returns>fully initialized CIDFont</returns>
        </member>
        <member name="M:iText.Kernel.Font.PdfType0Font.GetCidFont(iText.Kernel.Pdf.PdfDictionary,System.String,System.Boolean)">
            <summary>Generates the CIDFontTyte2 dictionary.</summary>
            <param name="fontDescriptor">the indirect reference to the font descriptor</param>
            <param name="fontName">a name of the font</param>
            <param name="isType2">
            true, if the font is CIDFontType2 (TrueType glyphs),
            otherwise false, i.e. CIDFontType0 (Type1/CFF glyphs)
            </param>
            <returns>fully initialized CIDFont</returns>
        </member>
        <member name="M:iText.Kernel.Font.PdfType0Font.GetToUnicode">
            <summary>Creates a ToUnicode CMap to allow copy and paste from Acrobat.</summary>
            <returns>the stream representing this CMap or <CODE>null</CODE></returns>
        </member>
        <member name="M:iText.Kernel.Font.PdfType1Font.AddFontStream(iText.Kernel.Pdf.PdfDictionary)">
            <summary>
            If the embedded flag is
            <see langword="false"/>
            or if the font is one of the 14 built in types, it returns
            <see langword="null"/>
            ,
            otherwise the font is read and output in a PdfStream object.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:iText.Kernel.Font.PdfType3Font" -->
        <member name="M:iText.Kernel.Font.PdfType3Font.#ctor(iText.Kernel.Pdf.PdfDocument,System.Boolean)">
            <summary>Creates a Type 3 font.</summary>
            <param name="colorized">defines whether the glyph color is specified in the glyph descriptions in the font.
                </param>
        </member>
        <member name="M:iText.Kernel.Font.PdfType3Font.#ctor(iText.Kernel.Pdf.PdfDocument,System.String,System.String,System.Boolean)">
            <summary>Creates a Type 3 font.</summary>
            <param name="document">the target document of the new font.</param>
            <param name="fontName">the PostScript name of the font, shall not be null or empty.</param>
            <param name="fontFamily">a preferred font family name.</param>
            <param name="colorized">indicates whether the font will be colorized</param>
        </member>
        <member name="M:iText.Kernel.Font.PdfType3Font.#ctor(iText.Kernel.Pdf.PdfDictionary)">
            <summary>Creates a Type 3 font based on an existing font dictionary, which must be an indirect object.</summary>
            <param name="fontDictionary">a dictionary of type <code>/Font</code>, must have an indirect reference.</param>
        </member>
        <member name="M:iText.Kernel.Font.PdfType3Font.SetFontName(System.String)">
            <summary>Sets the PostScript name of the font.</summary>
            <param name="fontName">the PostScript name of the font, shall not be null or empty.</param>
        </member>
        <member name="M:iText.Kernel.Font.PdfType3Font.SetFontFamily(System.String)">
            <summary>Sets a preferred font family name.</summary>
            <param name="fontFamily">a preferred font family name.</param>
        </member>
        <member name="M:iText.Kernel.Font.PdfType3Font.SetFontWeight(System.Int32)">
            <summary>Sets font weight.</summary>
            <param name="fontWeight">
            integer form 100 to 900. See
            <see cref="T:iText.IO.Font.Constants.FontWeights"/>
            .
            </param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.Font.PdfType3Font.SetItalicAngle(System.Int32)" -->
        <member name="M:iText.Kernel.Font.PdfType3Font.SetFontStretch(System.String)">
            <summary>Sets font width in css notation (font-stretch property)</summary>
            <param name="fontWidth">
            
            <see cref="T:iText.IO.Font.Constants.FontStretches"/>
            .
            </param>
        </member>
        <member name="M:iText.Kernel.Font.PdfType3Font.SetPdfFontFlags(System.Int32)">
            <summary>Sets Font descriptor flags.</summary>
            <param name="flags">font descriptor flags.</param>
            <seealso cref="T:iText.IO.Font.Constants.FontDescriptorFlags"/>
        </member>
        <member name="M:iText.Kernel.Font.PdfType3Font.GetNumberOfGlyphs">
            <summary>Gets count of glyphs in Type 3 font.</summary>
            <returns>number of glyphs.</returns>
        </member>
        <member name="M:iText.Kernel.Font.PdfType3Font.AddGlyph(System.Char,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Defines a glyph.</summary>
            <remarks>Defines a glyph. If the character was already defined it will return the same content</remarks>
            <param name="c">the character to match this glyph.</param>
            <param name="wx">the advance this character will have</param>
            <param name="llx">
            the X lower left corner of the glyph bounding box. If the <CODE>colorize</CODE> option is
            <CODE>true</CODE> the value is ignored
            </param>
            <param name="lly">
            the Y lower left corner of the glyph bounding box. If the <CODE>colorize</CODE> option is
            <CODE>true</CODE> the value is ignored
            </param>
            <param name="urx">
            the X upper right corner of the glyph bounding box. If the <CODE>colorize</CODE> option is
            <CODE>true</CODE> the value is ignored
            </param>
            <param name="ury">
            the Y upper right corner of the glyph bounding box. If the <CODE>colorize</CODE> option is
            <CODE>true</CODE> the value is ignored
            </param>
            <returns>a content where the glyph can be defined</returns>
        </member>
        <member name="M:iText.Kernel.Font.PdfType3Font.GetFirstEmptyCode">
            <summary>
            Gets first empty code, that could use with
            <seealso>addSymbol()</seealso>
            </summary>
            <returns>code from 1 to 255 or -1 if all slots are busy.</returns>
        </member>
        <member name="T:iText.Kernel.Font.Type3Font">
            <summary>FontProgram class for Type 3 font.</summary>
            <remarks>
            FontProgram class for Type 3 font. Contains map of
            <see cref="T:iText.Kernel.Font.Type3Glyph"/>
            .
            Type3Glyphs belong to a particular pdf document.
            Note, an instance of Type3Font can not be reused for multiple pdf documents.
            </remarks>
        </member>
        <member name="M:iText.Kernel.Font.Type3Font.#ctor(System.Boolean)">
            <summary>Creates a Type 3 font program.</summary>
            <param name="colorized">defines whether the glyph color is specified in the glyph descriptions in the font.
                </param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.Font.Type3Font.SetFontName(System.String)" -->
        <member name="M:iText.Kernel.Font.Type3Font.SetFontFamily(System.String)">
            <summary>Sets a preferred font family name.</summary>
            <param name="fontFamily">a preferred font family name.</param>
        </member>
        <member name="M:iText.Kernel.Font.Type3Font.SetFontWeight(System.Int32)">
            <summary>Sets font weight.</summary>
            <param name="fontWeight">
            integer form 100 to 900. See
            <see cref="T:iText.IO.Font.Constants.FontWeights"/>
            .
            </param>
        </member>
        <member name="M:iText.Kernel.Font.Type3Font.SetFontStretch(System.String)">
            <summary>Sets font width in css notation (font-stretch property)</summary>
            <param name="fontWidth">
            
            <see cref="T:iText.IO.Font.Constants.FontStretches"/>
            .
            </param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.Font.Type3Font.SetItalicAngle(System.Int32)" -->
        <member name="M:iText.Kernel.Font.Type3Font.SetPdfFontFlags(System.Int32)">
            <summary>Sets Font descriptor flags.</summary>
            <seealso cref="T:iText.IO.Font.Constants.FontDescriptorFlags"/>
            <param name="flags">
            
            <see cref="T:iText.IO.Font.Constants.FontDescriptorFlags"/>
            .
            </param>
        </member>
        <member name="T:iText.Kernel.Font.Type3Glyph">
            <summary>The content where Type3 glyphs are written to.</summary>
        </member>
        <member name="M:iText.Kernel.Font.Type3Glyph.#ctor(iText.Kernel.Pdf.PdfDocument,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>Creates a Type3Glyph canvas with a new Content Stream.</summary>
            <param name="pdfDocument">the document that this canvas is created for</param>
        </member>
        <member name="M:iText.Kernel.Font.Type3Glyph.#ctor(iText.Kernel.Pdf.PdfStream,iText.Kernel.Pdf.PdfDocument)">
            <summary>Creates a Type3Glyph canvas with a non-empty Content Stream.</summary>
            <param name="pdfStream">
            
            <c>PdfStream</c>
            from existed document.
            </param>
            <param name="document">
            document to which
            <c>PdfStream</c>
            belongs.
            </param>
        </member>
        <member name="M:iText.Kernel.Font.Type3Glyph.IsColor">
            <summary>Indicates if the glyph color specified in the glyph description or not.</summary>
            <returns>whether the glyph color is specified in the glyph description or not</returns>
        </member>
        <member name="M:iText.Kernel.Font.Type3Glyph.WriteMetrics(System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>Writes the width and optionally the bounding box parameters for a glyph</summary>
            <param name="wx">the advance this character will have</param>
            <param name="llx">
            the X lower left corner of the glyph bounding box. If the <CODE>isColor</CODE> option is
            <CODE>true</CODE> the value is ignored
            </param>
            <param name="lly">
            the Y lower left corner of the glyph bounding box. If the <CODE>isColor</CODE> option is
            <CODE>true</CODE> the value is ignored
            </param>
            <param name="urx">
            the X upper right corner of the glyph bounding box. If the <CODE>isColor</CODE> option is
            <CODE>true</CODE> the value is ignored
            </param>
            <param name="ury">
            the Y upper right corner of the glyph bounding box. If the <CODE>isColor</CODE> option is
            <CODE>true</CODE> the value is ignored
            </param>
            <param name="isColor">
            defines whether the glyph color is specified in the glyph description in the font.
            The consequence of value <CODE>true</CODE> is that the bounding box parameters are ignored.
            </param>
        </member>
        <member name="M:iText.Kernel.Font.Type3Glyph.AddImage(iText.IO.Image.ImageData,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>Creates Image XObject from image and adds it to canvas.</summary>
            <remarks>
            Creates Image XObject from image and adds it to canvas. Performs additional checks to make
            sure that we only add mask images to not colorized type 3 fonts.
            </remarks>
            <param name="image">
            the
            <c>PdfImageXObject</c>
            object
            </param>
            <param name="a">an element of the transformation matrix</param>
            <param name="b">an element of the transformation matrix</param>
            <param name="c">an element of the transformation matrix</param>
            <param name="d">an element of the transformation matrix</param>
            <param name="e">an element of the transformation matrix</param>
            <param name="f">an element of the transformation matrix</param>
            <param name="inlineImage">true if to add image as in-line.</param>
            <returns>created Image XObject or null in case of in-line image (asInline = true).</returns>
        </member>
        <member name="F:iText.Kernel.Geom.AffineTransform.TYPE_IDENTITY">
            <summary>The type of affine transformation.</summary>
            <remarks>
            The type of affine transformation. See
            <see cref="M:iText.Kernel.Geom.AffineTransform.GetTransformType"/>
            .
            </remarks>
        </member>
        <member name="F:iText.Kernel.Geom.AffineTransform.TYPE_TRANSLATION">
            <summary>The type of affine transformation.</summary>
            <remarks>
            The type of affine transformation. See
            <see cref="M:iText.Kernel.Geom.AffineTransform.GetTransformType"/>
            .
            </remarks>
        </member>
        <member name="F:iText.Kernel.Geom.AffineTransform.TYPE_UNIFORM_SCALE">
            <summary>The type of affine transformation.</summary>
            <remarks>
            The type of affine transformation. See
            <see cref="M:iText.Kernel.Geom.AffineTransform.GetTransformType"/>
            .
            </remarks>
        </member>
        <member name="F:iText.Kernel.Geom.AffineTransform.TYPE_GENERAL_SCALE">
            <summary>The type of affine transformation.</summary>
            <remarks>
            The type of affine transformation. See
            <see cref="M:iText.Kernel.Geom.AffineTransform.GetTransformType"/>
            .
            </remarks>
        </member>
        <member name="F:iText.Kernel.Geom.AffineTransform.TYPE_QUADRANT_ROTATION">
            <summary>The type of affine transformation.</summary>
            <remarks>
            The type of affine transformation. See
            <see cref="M:iText.Kernel.Geom.AffineTransform.GetTransformType"/>
            .
            </remarks>
        </member>
        <member name="F:iText.Kernel.Geom.AffineTransform.TYPE_GENERAL_ROTATION">
            <summary>The type of affine transformation.</summary>
            <remarks>
            The type of affine transformation. See
            <see cref="M:iText.Kernel.Geom.AffineTransform.GetTransformType"/>
            .
            </remarks>
        </member>
        <member name="F:iText.Kernel.Geom.AffineTransform.TYPE_GENERAL_TRANSFORM">
            <summary>The type of affine transformation.</summary>
            <remarks>
            The type of affine transformation. See
            <see cref="M:iText.Kernel.Geom.AffineTransform.GetTransformType"/>
            .
            </remarks>
        </member>
        <member name="F:iText.Kernel.Geom.AffineTransform.TYPE_FLIP">
            <summary>The type of affine transformation.</summary>
            <remarks>
            The type of affine transformation. See
            <see cref="M:iText.Kernel.Geom.AffineTransform.GetTransformType"/>
            .
            </remarks>
        </member>
        <member name="F:iText.Kernel.Geom.AffineTransform.TYPE_MASK_SCALE">
            <summary>The type of affine transformation.</summary>
            <remarks>
            The type of affine transformation. See
            <see cref="M:iText.Kernel.Geom.AffineTransform.GetTransformType"/>
            .
            </remarks>
        </member>
        <member name="F:iText.Kernel.Geom.AffineTransform.TYPE_MASK_ROTATION">
            <summary>The type of affine transformation.</summary>
            <remarks>
            The type of affine transformation. See
            <see cref="M:iText.Kernel.Geom.AffineTransform.GetTransformType"/>
            .
            </remarks>
        </member>
        <member name="F:iText.Kernel.Geom.AffineTransform.TYPE_UNKNOWN">
            <summary>The <code>TYPE_UNKNOWN</code> is an initial type value.</summary>
        </member>
        <member name="F:iText.Kernel.Geom.AffineTransform.ZERO">
            <summary>The min value equivalent to zero.</summary>
            <remarks>The min value equivalent to zero. If absolute value less then ZERO it considered as zero.</remarks>
        </member>
        <member name="F:iText.Kernel.Geom.AffineTransform.m00">
            <summary>The values of transformation matrix</summary>
        </member>
        <member name="F:iText.Kernel.Geom.AffineTransform.type">
            <summary>The transformation <code>type</code></summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.Geom.AffineTransform.GetTransformType" -->
        <member name="M:iText.Kernel.Geom.AffineTransform.SetToRotation(System.Double)">
            <summary>Set this affine transformation to represent a rotation over the passed angle</summary>
            <param name="angle">angle to rotate over in radians</param>
        </member>
        <member name="M:iText.Kernel.Geom.AffineTransform.SetToRotation(System.Double,System.Double,System.Double)">
            <summary>
            Set this affine transformation to represent a rotation over the passed angle,
            using the passed point as the center of rotation
            </summary>
            <param name="angle">angle to rotate over in radians</param>
            <param name="px">x-coordinate of center of rotation</param>
            <param name="py">y-coordinate of center of rotation</param>
        </member>
        <member name="M:iText.Kernel.Geom.AffineTransform.GetRotateInstance(System.Double)">
            <summary>Get an affine transformation representing a counter-clockwise rotation over the passed angle</summary>
            <param name="angle">angle in radians to rotate over</param>
            <returns>
            
            <see cref="T:iText.Kernel.Geom.AffineTransform"/>
            representing the rotation
            </returns>
        </member>
        <member name="M:iText.Kernel.Geom.AffineTransform.GetRotateInstance(System.Double,System.Double,System.Double)">
            <summary>
            Get an affine transformation representing a counter-clockwise rotation over the passed angle,
            using the passed point as the center of rotation
            </summary>
            <param name="angle">angle in radians to rotate over</param>
            <param name="x">x-coordinate of center of rotation</param>
            <param name="y">y-coordinate of center of rotation</param>
            <returns>
            
            <see cref="T:iText.Kernel.Geom.AffineTransform"/>
            representing the rotation
            </returns>
        </member>
        <member name="M:iText.Kernel.Geom.AffineTransform.Rotate(System.Double)">
            <summary>Add a counter-clockwise rotation to this transformation</summary>
            <param name="angle">angle in radians to rotate over</param>
        </member>
        <member name="M:iText.Kernel.Geom.AffineTransform.Rotate(System.Double,System.Double,System.Double)">
            <summary>
            Add a counter-clockwise rotation to this transformation,
            using the passed point as the center of rotation
            </summary>
            <param name="angle">angle in radians to rotate over</param>
            <param name="px">x-coordinate of center of rotation</param>
            <param name="py">y-coordinate of center of rotation</param>
        </member>
        <member name="M:iText.Kernel.Geom.AffineTransform.Multiply(iText.Kernel.Geom.AffineTransform,iText.Kernel.Geom.AffineTransform)">
            <summary>Multiply matrix of two AffineTransform objects</summary>
            <param name="t1">- the AffineTransform object is a multiplicand</param>
            <param name="t2">- the AffineTransform object is a multiplier</param>
            <returns>an AffineTransform object that is a result of t1 multiplied by matrix t2.</returns>
        </member>
        <member name="M:iText.Kernel.Geom.AffineTransform.CreateInverse">
            <exception cref="T:iText.Kernel.Geom.NoninvertibleTransformException"/>
        </member>
        <member name="M:iText.Kernel.Geom.AffineTransform.InverseTransform(iText.Kernel.Geom.Point,iText.Kernel.Geom.Point)">
            <exception cref="T:iText.Kernel.Geom.NoninvertibleTransformException"/>
        </member>
        <member name="M:iText.Kernel.Geom.AffineTransform.InverseTransform(System.Double[],System.Int32,System.Double[],System.Int32,System.Int32)">
            <exception cref="T:iText.Kernel.Geom.NoninvertibleTransformException"/>
        </member>
        <member name="M:iText.Kernel.Geom.AffineTransform.InverseTransform(System.Single[],System.Int32,System.Single[],System.Int32,System.Int32)">
            <exception cref="T:iText.Kernel.Geom.NoninvertibleTransformException"/>
        </member>
        <member name="M:iText.Kernel.Geom.AffineTransform.Clone">
            <exception cref="!:Java.Lang.CloneNotSupportedException"/>
        </member>
        <member name="T:iText.Kernel.Geom.BezierCurve">
            <summary>Represents a Bezier curve.</summary>
        </member>
        <member name="F:iText.Kernel.Geom.BezierCurve.curveCollinearityEpsilon">
            <summary>
            If the distance between a point and a line is less than
            this constant, then we consider the point lies on the line.
            </summary>
        </member>
        <member name="F:iText.Kernel.Geom.BezierCurve.distanceToleranceSquare">
            <summary>
            In the case when neither the line ((x1, y1), (x4, y4)) passes
            through both (x2, y2) and (x3, y3) nor (x1, y1) = (x4, y4) we
            use the square of the sum of the distances mentioned below in
            compare to this field as the criterion of good approximation.
            </summary>
            <remarks>
            In the case when neither the line ((x1, y1), (x4, y4)) passes
            through both (x2, y2) and (x3, y3) nor (x1, y1) = (x4, y4) we
            use the square of the sum of the distances mentioned below in
            compare to this field as the criterion of good approximation.
            1. The distance between the line and (x2, y2)
            2. The distance between the line and (x3, y3)
            </remarks>
        </member>
        <member name="F:iText.Kernel.Geom.BezierCurve.distanceToleranceManhattan">
            <summary>
            The Manhattan distance is used in the case when either the line
            ((x1, y1), (x4, y4)) passes through both (x2, y2) and (x3, y3)
            or (x1, y1) = (x4, y4).
            </summary>
            <remarks>
            The Manhattan distance is used in the case when either the line
            ((x1, y1), (x4, y4)) passes through both (x2, y2) and (x3, y3)
            or (x1, y1) = (x4, y4). The essential observation is that when
            the curve is a uniform speed straight line from end to end, the
            control points are evenly spaced from beginning to end. Our measure
            of how far we deviate from that ideal uses distance of the middle
            controls: point 2 should be halfway between points 1 and 3; point 3
            should be halfway between points 2 and 4.
            </remarks>
        </member>
        <member name="M:iText.Kernel.Geom.BezierCurve.#ctor(System.Collections.Generic.IList{iText.Kernel.Geom.Point})">
            <summary>Constructs new bezier curve.</summary>
            <param name="controlPoints">Curve's control points.</param>
        </member>
        <member name="M:iText.Kernel.Geom.BezierCurve.GetBasePoints">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.Kernel.Geom.BezierCurve.GetPiecewiseLinearApproximation">
            <summary>
            You can adjust precision of the approximation by varying the following
            parameters:
            <see cref="F:iText.Kernel.Geom.BezierCurve.curveCollinearityEpsilon"/>
            ,
            <see cref="F:iText.Kernel.Geom.BezierCurve.distanceToleranceSquare"/>
            ,
            <see cref="F:iText.Kernel.Geom.BezierCurve.distanceToleranceManhattan"/>
            </summary>
            <returns>
            
            <see cref="!:System.Collections.IList&lt;E&gt;"/>
            containing points of piecewise linear approximation
            for this bezier curve.
            </returns>
        </member>
        <member name="T:iText.Kernel.Geom.IShape">
            <summary>Represents segment from a PDF path.</summary>
        </member>
        <member name="M:iText.Kernel.Geom.IShape.GetBasePoints">
            <summary>Treat base points as the points which are enough to construct a shape.</summary>
            <remarks>
            Treat base points as the points which are enough to construct a shape.
            E.g. for a bezier curve they are control points, for a line segment - the start and the end points
            of the segment.
            </remarks>
            <returns>
            Ordered
            <see cref="!:System.Collections.IList&lt;E&gt;"/>
            consisting of shape's base points.
            </returns>
        </member>
        <member name="T:iText.Kernel.Geom.Line">
            <summary>Represents a line.</summary>
        </member>
        <member name="M:iText.Kernel.Geom.Line.#ctor">
            <summary>Constructs a new zero-length line starting at zero.</summary>
        </member>
        <member name="M:iText.Kernel.Geom.Line.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>Constructs a new line based on the given coordinates.</summary>
            <param name="x1">x-coordinate of start point of this Line</param>
            <param name="y1">y-coordinate of start point of this Line</param>
            <param name="x2">x-coordinate of end point of this Line</param>
            <param name="y2">y-coordinate of end point of this Line</param>
        </member>
        <member name="M:iText.Kernel.Geom.Line.#ctor(iText.Kernel.Geom.Point,iText.Kernel.Geom.Point)">
            <summary>Constructs a new line based on the given coordinates.</summary>
            <param name="p1">start point of this Line</param>
            <param name="p2">end point of this Line</param>
        </member>
        <member name="T:iText.Kernel.Geom.LineSegment">
            <summary>Represents a line segment in a particular coordinate system.</summary>
            <remarks>Represents a line segment in a particular coordinate system.  This class is immutable.</remarks>
        </member>
        <member name="F:iText.Kernel.Geom.LineSegment.startPoint">
            <summary>Start vector of the segment.</summary>
        </member>
        <member name="F:iText.Kernel.Geom.LineSegment.endPoint">
            <summary>End vector of the segment.</summary>
        </member>
        <member name="M:iText.Kernel.Geom.LineSegment.#ctor(iText.Kernel.Geom.Vector,iText.Kernel.Geom.Vector)">
            <summary>Creates a new line segment.</summary>
            <param name="startPoint">the start point of a line segment.</param>
            <param name="endPoint">the end point of a line segment.</param>
        </member>
        <member name="M:iText.Kernel.Geom.LineSegment.GetStartPoint">
            <returns>the start point</returns>
        </member>
        <member name="M:iText.Kernel.Geom.LineSegment.GetEndPoint">
            <returns>the end point</returns>
        </member>
        <member name="M:iText.Kernel.Geom.LineSegment.GetLength">
            <returns>the length of this line segment</returns>
        </member>
        <member name="M:iText.Kernel.Geom.LineSegment.GetBoundingRectangle">
            <summary>Computes the bounding rectangle for this line segment.</summary>
            <remarks>
            Computes the bounding rectangle for this line segment.  The rectangle has a rotation 0 degrees
            with respect to the coordinate system that the line system is in.  For example, if a line segment
            is 5 unit long and sits at a 37 degree angle from horizontal, the bounding rectangle will have
            origin of the lower left hand end point of the segment, with width = 4 and height = 3.
            </remarks>
            <returns>the bounding rectangle</returns>
        </member>
        <member name="M:iText.Kernel.Geom.LineSegment.TransformBy(iText.Kernel.Geom.Matrix)">
            <summary>Transforms the segment by the specified matrix</summary>
            <param name="m">the matrix for the transformation</param>
            <returns>the transformed segment</returns>
        </member>
        <member name="M:iText.Kernel.Geom.LineSegment.ContainsSegment(iText.Kernel.Geom.LineSegment)">
            <summary>Checks if a segment contains another segment in itself</summary>
            <param name="other">a segment to be checked</param>
            <returns>true if this segment contains other one, false otherwise</returns>
        </member>
        <member name="M:iText.Kernel.Geom.LineSegment.ContainsPoint(iText.Kernel.Geom.Vector)">
            <summary>Checks if a segment contains a given point in itself</summary>
            <param name="point">a point to be checked</param>
            <returns>true if this segment contains given point, false otherwise</returns>
        </member>
        <member name="T:iText.Kernel.Geom.Matrix">
            <summary>
            Keeps all the values of a 3 by 3 matrix and allows you to
            do some math with matrices.
            </summary>
        </member>
        <member name="F:iText.Kernel.Geom.Matrix.I11">
            <summary>the row=1, col=1 position ('a') in the matrix.</summary>
        </member>
        <member name="F:iText.Kernel.Geom.Matrix.I12">
            <summary>the row=1, col=2 position ('b') in the matrix.</summary>
        </member>
        <member name="F:iText.Kernel.Geom.Matrix.I13">
            <summary>the row=1, col=3 position (always 0 for 2-D) in the matrix.</summary>
        </member>
        <member name="F:iText.Kernel.Geom.Matrix.I21">
            <summary>the row=2, col=1 position ('c') in the matrix.</summary>
        </member>
        <member name="F:iText.Kernel.Geom.Matrix.I22">
            <summary>the row=2, col=2 position ('d') in the matrix.</summary>
        </member>
        <member name="F:iText.Kernel.Geom.Matrix.I23">
            <summary>the row=2, col=3 position (always 0 for 2-D) in the matrix.</summary>
        </member>
        <member name="F:iText.Kernel.Geom.Matrix.I31">
            <summary>the row=3, col=1 ('e', or X translation) position in the matrix.</summary>
        </member>
        <member name="F:iText.Kernel.Geom.Matrix.I32">
            <summary>the row=3, col=2 ('f', or Y translation) position in the matrix.</summary>
        </member>
        <member name="F:iText.Kernel.Geom.Matrix.I33">
            <summary>the row=3, col=3 position (always 1 for 2-D) in the matrix.</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:iText.Kernel.Geom.Matrix.vals" -->
        <member name="M:iText.Kernel.Geom.Matrix.#ctor">
            <summary>constructs a new Matrix with identity.</summary>
        </member>
        <member name="M:iText.Kernel.Geom.Matrix.#ctor(System.Single,System.Single)">
            <summary>Constructs a matrix that represents translation</summary>
            <param name="tx">x-axis translation</param>
            <param name="ty">y-axis translation</param>
        </member>
        <member name="M:iText.Kernel.Geom.Matrix.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>Creates a Matrix with 9 specified entries</summary>
            <param name="e11">element at position (1,1)</param>
            <param name="e12">element at position (1,2)</param>
            <param name="e13">element at position (1,3)</param>
            <param name="e21">element at position (2,1)</param>
            <param name="e22">element at position (2,2)</param>
            <param name="e23">element at position (2,3)</param>
            <param name="e31">element at position (3,1)</param>
            <param name="e32">element at position (3,2)</param>
            <param name="e33">element at position (3,3)</param>
        </member>
        <member name="M:iText.Kernel.Geom.Matrix.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a Matrix with 6 specified entries
            The third column will always be [0 0 1]
            (row, column)
            </summary>
            <param name="a">element at (1,1)</param>
            <param name="b">element at (1,2)</param>
            <param name="c">element at (2,1)</param>
            <param name="d">element at (2,2)</param>
            <param name="e">element at (3,1)</param>
            <param name="f">element at (3,2)</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.Geom.Matrix.Get(System.Int32)" -->
        <member name="M:iText.Kernel.Geom.Matrix.Multiply(iText.Kernel.Geom.Matrix)">
            <summary>
            multiplies this matrix by 'b' and returns the result
            See http://en.wikipedia.org/wiki/Matrix_multiplication
            </summary>
            <param name="by">The matrix to multiply by</param>
            <returns>the resulting matrix</returns>
        </member>
        <member name="M:iText.Kernel.Geom.Matrix.Add(iText.Kernel.Geom.Matrix)">
            <summary>adds a matrix from this matrix and returns the results</summary>
            <param name="arg">the matrix to subtract from this matrix</param>
            <returns>a Matrix object</returns>
        </member>
        <member name="M:iText.Kernel.Geom.Matrix.Subtract(iText.Kernel.Geom.Matrix)">
            <summary>Subtracts a matrix from this matrix and returns the results</summary>
            <param name="arg">the matrix to subtract from this matrix</param>
            <returns>a Matrix object</returns>
        </member>
        <member name="M:iText.Kernel.Geom.Matrix.GetDeterminant">
            <summary>Computes the determinant of the matrix.</summary>
            <returns>the determinant of the matrix</returns>
        </member>
        <member name="M:iText.Kernel.Geom.Matrix.Equals(System.Object)">
            <summary>Checks equality of matrices.</summary>
            <param name="obj">the other Matrix that needs to be compared with this matrix.</param>
            <returns>true if both matrices are equal</returns>
            <seealso cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:iText.Kernel.Geom.Matrix.GetHashCode">
            <summary>Generates a hash code for this object.</summary>
            <returns>the hash code of this object</returns>
            <seealso cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:iText.Kernel.Geom.Matrix.ToString">
            <summary>Generates a String representation of the matrix.</summary>
            <returns>the values, delimited with tabs and newlines.</returns>
            <seealso cref="M:System.Object.ToString"/>
        </member>
        <member name="T:iText.Kernel.Geom.NoninvertibleTransformException">
            <summary>NoninvertibleTransformException</summary>
            <author>Denis M. Kishenko</author>
        </member>
        <member name="M:iText.Kernel.Geom.NoninvertibleTransformException.#ctor(System.String)">
            <summary>Creates a new NoninvertibleTransformException.</summary>
            <param name="message">the detail message.</param>
        </member>
        <member name="M:iText.Kernel.Geom.PageSize.Rotate">
            <summary>Rotates PageSize clockwise.</summary>
        </member>
        <member name="T:iText.Kernel.Geom.Path">
            <summary>Paths define shapes, trajectories, and regions of all sorts.</summary>
            <remarks>
            Paths define shapes, trajectories, and regions of all sorts. They shall be used
            to draw lines, define the shapes of filled areas, and specify boundaries for clipping
            other graphics. A path shall be composed of straight and curved line segments, which
            may connect to one another or may be disconnected.
            </remarks>
        </member>
        <member name="M:iText.Kernel.Geom.Path.GetSubpaths">
            <returns>
            A
            <see cref="!:System.Collections.IList&lt;E&gt;"/>
            of subpaths forming this path.
            </returns>
        </member>
        <member name="M:iText.Kernel.Geom.Path.AddSubpath(iText.Kernel.Geom.Subpath)">
            <summary>Adds the subpath to this path.</summary>
            <param name="subpath">The subpath to be added to this path.</param>
        </member>
        <member name="M:iText.Kernel.Geom.Path.AddSubpaths``1(System.Collections.Generic.IList{``0})">
            <summary>Adds the subpaths to this path.</summary>
            <param name="subpaths">
            
            <see cref="!:System.Collections.IList&lt;E&gt;"/>
            of subpaths to be added to this path.
            </param>
        </member>
        <member name="M:iText.Kernel.Geom.Path.GetCurrentPoint">
            <summary>The current point is the trailing endpoint of the segment most recently added to the current path.
                </summary>
            <returns>The current point.</returns>
        </member>
        <member name="M:iText.Kernel.Geom.Path.MoveTo(System.Single,System.Single)">
            <summary>Begins a new subpath by moving the current point to coordinates <CODE>(x, y)</CODE>.</summary>
            <param name="x">x-coordinate of the new point</param>
            <param name="y">y-coordinate of the new point</param>
        </member>
        <member name="M:iText.Kernel.Geom.Path.LineTo(System.Single,System.Single)">
            <summary>Appends a straight line segment from the current point to the point <CODE>(x, y)</CODE>.</summary>
            <param name="x">x-coordinate of the new point</param>
            <param name="y">y-coordinate of the new point</param>
        </member>
        <member name="M:iText.Kernel.Geom.Path.CurveTo(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>Appends a cubic Bezier curve to the current path.</summary>
            <remarks>
            Appends a cubic Bezier curve to the current path. The curve shall extend from
            the current point to the point <CODE>(x3, y3)</CODE>.
            </remarks>
            <param name="x1">x-coordinate of the first control point</param>
            <param name="y1">y-coordinate of the first control point</param>
            <param name="x2">x-coordinate of the second control point</param>
            <param name="y2">y-coordinate of the second control point</param>
            <param name="x3">x-coordinate of the third control point</param>
            <param name="y3">y-coordinate of the third control point</param>
        </member>
        <member name="M:iText.Kernel.Geom.Path.CurveTo(System.Single,System.Single,System.Single,System.Single)">
            <summary>Appends a cubic Bezier curve to the current path.</summary>
            <remarks>
            Appends a cubic Bezier curve to the current path. The curve shall extend from
            the current point to the point <CODE>(x3, y3)</CODE> with the note that the current
            point represents two control points.
            </remarks>
        </member>
        <member name="M:iText.Kernel.Geom.Path.CurveFromTo(System.Single,System.Single,System.Single,System.Single)">
            <summary>Appends a cubic Bezier curve to the current path.</summary>
            <remarks>
            Appends a cubic Bezier curve to the current path. The curve shall extend from
            the current point to the point <CODE>(x3, y3)</CODE> with the note that the (x3, y3)
            point represents two control points.
            </remarks>
        </member>
        <member name="M:iText.Kernel.Geom.Path.Rectangle(iText.Kernel.Geom.Rectangle)">
            <summary>Appends a rectangle to the current path as a complete subpath.</summary>
        </member>
        <member name="M:iText.Kernel.Geom.Path.Rectangle(System.Single,System.Single,System.Single,System.Single)">
            <summary>Appends a rectangle to the current path as a complete subpath.</summary>
        </member>
        <member name="M:iText.Kernel.Geom.Path.CloseSubpath">
            <summary>Closes the current subpath.</summary>
        </member>
        <member name="M:iText.Kernel.Geom.Path.CloseAllSubpaths">
            <summary>Closes all subpathes contained in this path.</summary>
        </member>
        <member name="M:iText.Kernel.Geom.Path.ReplaceCloseWithLine">
            <summary>Adds additional line to each closed subpath and makes the subpath unclosed.</summary>
            <remarks>
            Adds additional line to each closed subpath and makes the subpath unclosed.
            The line connects the last and the first points of the subpaths.
            </remarks>
            <returns>Indices of modified subpaths.</returns>
        </member>
        <member name="M:iText.Kernel.Geom.Path.IsEmpty">
            <summary>Path is empty if it contains no subpaths.</summary>
        </member>
        <member name="T:iText.Kernel.Geom.Rectangle">
            <summary>Class that represent rectangle object.</summary>
        </member>
        <member name="M:iText.Kernel.Geom.Rectangle.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>Creates new instance.</summary>
            <param name="x">the x coordinate of lower left point</param>
            <param name="y">the y coordinate of lower left point</param>
            <param name="width">the width value</param>
            <param name="height">the height value</param>
        </member>
        <member name="M:iText.Kernel.Geom.Rectangle.#ctor(System.Single,System.Single)">
            <summary>Creates new instance of rectangle with (0, 0) as the lower left point.</summary>
            <param name="width">the width value</param>
            <param name="height">the height value</param>
        </member>
        <member name="M:iText.Kernel.Geom.Rectangle.#ctor(iText.Kernel.Geom.Rectangle)">
            <summary>
            Creates the copy of given
            <see cref="T:iText.Kernel.Geom.Rectangle"/>
            </summary>
            <param name="rect">
            the copied
            <see cref="T:iText.Kernel.Geom.Rectangle"/>
            </param>
        </member>
        <member name="M:iText.Kernel.Geom.Rectangle.GetCommonRectangle(iText.Kernel.Geom.Rectangle[])">
            <summary>Calculates the common rectangle which includes all the input rectangles.</summary>
            <param name="rectangles">list of input rectangles.</param>
            <returns>common rectangle.</returns>
        </member>
        <member name="M:iText.Kernel.Geom.Rectangle.GetIntersection(iText.Kernel.Geom.Rectangle)">
            <summary>Get the rectangle representation of the intersection between this rectangle and the passed rectangle
                </summary>
            <param name="rect">the rectangle to find the intersection with</param>
            <returns>
            the intersection rectangle if the passed rectangles intersects with this rectangle,
            a rectangle representing a line if the intersection is along an edge or
            a rectangle representing a point if the intersection is a single point,
            null otherwise
            </returns>
        </member>
        <member name="M:iText.Kernel.Geom.Rectangle.Contains(iText.Kernel.Geom.Rectangle)">
            <summary>Check if this rectangle contains the passed rectangle.</summary>
            <remarks>
            Check if this rectangle contains the passed rectangle.
            A rectangle will envelop itself, meaning that for any rectangle
            <paramref name="rect"/>
            the expression
            <c>rect.contains(rect)</c>
            always returns true.
            </remarks>
            <param name="rect">a rectangle which is to be checked if it is fully contained inside this rectangle.</param>
            <returns>true if this rectangle contains the passed rectangle, false otherwise.</returns>
        </member>
        <member name="M:iText.Kernel.Geom.Rectangle.Overlaps(iText.Kernel.Geom.Rectangle)">
            <summary>Check if this rectangle and the passed rectangle overlap</summary>
            <param name="rect"/>
            <returns>true if there is overlap of some kind</returns>
        </member>
        <member name="M:iText.Kernel.Geom.Rectangle.SetBbox(System.Single,System.Single,System.Single,System.Single)">
            <summary>Sets the rectangle by the coordinates, specifying its lower left and upper right points.</summary>
            <remarks>
            Sets the rectangle by the coordinates, specifying its lower left and upper right points. May be used in chain.
            <br />
            <br />
            Note: this method will normalize coordinates, so the rectangle will have non negative width and height,
            and its x and y coordinates specified lower left point.
            </remarks>
            <param name="llx">the X coordinate of lower left point</param>
            <param name="lly">the Y coordinate of lower left point</param>
            <param name="urx">the X coordinate of upper right point</param>
            <param name="ury">the Y coordinate of upper right point</param>
            <returns>
            this
            <see cref="T:iText.Kernel.Geom.Rectangle"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Geom.Rectangle.GetX">
            <summary>Gets the X coordinate of lower left point.</summary>
            <returns>the X coordinate of lower left point.</returns>
        </member>
        <member name="M:iText.Kernel.Geom.Rectangle.SetX(System.Single)">
            <summary>Sets the X coordinate of lower left point.</summary>
            <remarks>Sets the X coordinate of lower left point. May be used in chain.</remarks>
            <param name="x">the X coordinate of lower left point to be set.</param>
            <returns>
            this
            <see cref="T:iText.Kernel.Geom.Rectangle"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Geom.Rectangle.GetY">
            <summary>Gets the Y coordinate of lower left point.</summary>
            <returns>the Y coordinate of lower left point.</returns>
        </member>
        <member name="M:iText.Kernel.Geom.Rectangle.SetY(System.Single)">
            <summary>Sets the Y coordinate of lower left point.</summary>
            <remarks>Sets the Y coordinate of lower left point. May be used in chain.</remarks>
            <param name="y">the Y coordinate of lower left point to be set.</param>
            <returns>
            this
            <see cref="T:iText.Kernel.Geom.Rectangle"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Geom.Rectangle.GetWidth">
            <summary>Gets the width of rectangle.</summary>
            <returns>the width of rectangle.</returns>
        </member>
        <member name="M:iText.Kernel.Geom.Rectangle.SetWidth(System.Single)">
            <summary>Sets the width of rectangle.</summary>
            <remarks>Sets the width of rectangle. May be used in chain.</remarks>
            <param name="width">the the width of rectangle to be set.</param>
            <returns>
            this
            <see cref="T:iText.Kernel.Geom.Rectangle"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Geom.Rectangle.GetHeight">
            <summary>Gets the height of rectangle.</summary>
            <returns>the height of rectangle.</returns>
        </member>
        <member name="M:iText.Kernel.Geom.Rectangle.SetHeight(System.Single)">
            <summary>Sets the height of rectangle.</summary>
            <remarks>Sets the height of rectangle. May be used in chain.</remarks>
            <param name="height">the the width of rectangle to be set.</param>
            <returns>
            this
            <see cref="T:iText.Kernel.Geom.Rectangle"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Geom.Rectangle.IncreaseHeight(System.Single)">
            <summary>Increases the height of rectangle by the given value.</summary>
            <remarks>Increases the height of rectangle by the given value. May be used in chain.</remarks>
            <param name="extra">the value of the extra height to be added.</param>
            <returns>
            this
            <see cref="T:iText.Kernel.Geom.Rectangle"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Geom.Rectangle.DecreaseHeight(System.Single)">
            <summary>Decreases the height of rectangle by the given value.</summary>
            <remarks>Decreases the height of rectangle by the given value. May be used in chain.</remarks>
            <param name="extra">the value of the extra height to be subtracted.</param>
            <returns>
            this
            <see cref="T:iText.Kernel.Geom.Rectangle"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Geom.Rectangle.GetLeft">
            <summary>Gets the X coordinate of the left edge of the rectangle.</summary>
            <remarks>
            Gets the X coordinate of the left edge of the rectangle. Same as:
            <c>getX()</c>
            .
            </remarks>
            <returns>the X coordinate of the left edge of the rectangle.</returns>
        </member>
        <member name="M:iText.Kernel.Geom.Rectangle.GetRight">
            <summary>Gets the X coordinate of the right edge of the rectangle.</summary>
            <remarks>
            Gets the X coordinate of the right edge of the rectangle. Same as:
            <c>getX() + getWidth()</c>
            .
            </remarks>
            <returns>the X coordinate of the right edge of the rectangle.</returns>
        </member>
        <member name="M:iText.Kernel.Geom.Rectangle.GetTop">
            <summary>Gets the Y coordinate of the upper edge of the rectangle.</summary>
            <remarks>
            Gets the Y coordinate of the upper edge of the rectangle. Same as:
            <c>getY() + getHeight()</c>
            .
            </remarks>
            <returns>the Y coordinate of the upper edge of the rectangle.</returns>
        </member>
        <member name="M:iText.Kernel.Geom.Rectangle.GetBottom">
            <summary>Gets the Y coordinate of the lower edge of the rectangle.</summary>
            <remarks>
            Gets the Y coordinate of the lower edge of the rectangle. Same as:
            <c>getY()</c>
            .
            </remarks>
            <returns>the Y coordinate of the lower edge of the rectangle.</returns>
        </member>
        <member name="M:iText.Kernel.Geom.Rectangle.MoveDown(System.Single)">
            <summary>Decreases the y coordinate.</summary>
            <param name="move">the value on which the position will be changed.</param>
            <returns>
            this
            <see cref="T:iText.Kernel.Geom.Rectangle"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Geom.Rectangle.MoveUp(System.Single)">
            <summary>Increases the y coordinate.</summary>
            <param name="move">the value on which the position will be changed.</param>
            <returns>
            this
            <see cref="T:iText.Kernel.Geom.Rectangle"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Geom.Rectangle.MoveRight(System.Single)">
            <summary>Increases the x coordinate.</summary>
            <param name="move">the value on which the position will be changed.</param>
            <returns>
            this
            <see cref="T:iText.Kernel.Geom.Rectangle"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Geom.Rectangle.MoveLeft(System.Single)">
            <summary>Decreases the x coordinate.</summary>
            <param name="move">the value on which the position will be changed.</param>
            <returns>
            this
            <see cref="T:iText.Kernel.Geom.Rectangle"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Geom.Rectangle.ApplyMargins(System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>Change the rectangle according the specified margins.</summary>
            <param name="topIndent">the value on which the top y coordinate will change.</param>
            <param name="rightIndent">the value on which the right x coordinate will change.</param>
            <param name="bottomIndent">the value on which the bottom y coordinate will change.</param>
            <param name="leftIndent">the value on which the left x coordinate will change.</param>
            <param name="reverse">
            if
            <see langword="true"/>
            the rectangle will expand, otherwise it will shrink
            </param>
            <returns>the  rectanglewith applied margins</returns>
        </member>
        <member name="M:iText.Kernel.Geom.Rectangle.IntersectsLine(System.Single,System.Single,System.Single,System.Single)">
            <summary>Checks if rectangle have common points with line, specified by two points.</summary>
            <param name="x1">the x coordinate of first line's point.</param>
            <param name="y1">the y coordinate of first line's point.</param>
            <param name="x2">the x coordinate of second line's point.</param>
            <param name="y2">the y coordinate of second line's point.</param>
            <returns>
            
            <see langword="true"/>
            if rectangle have common points with line and
            <see langword="false"/>
            otherwise.
            </returns>
        </member>
        <member name="M:iText.Kernel.Geom.Rectangle.ToString">
            <summary>Gets the string representation of rectangle.</summary>
            <returns>the string representation of rectangle.</returns>
        </member>
        <member name="M:iText.Kernel.Geom.Rectangle.Clone">
            <summary>Gets the copy of this rectangle.</summary>
            <returns>the copied rectangle.</returns>
        </member>
        <member name="M:iText.Kernel.Geom.Rectangle.EqualsWithEpsilon(iText.Kernel.Geom.Rectangle)">
            <summary>Compares instance of this rectangle with given deviation equals to 0.0001</summary>
            <param name="that">
            the
            <see cref="T:iText.Kernel.Geom.Rectangle"/>
            to compare with.
            </param>
            <returns>
            
            <see langword="true"/>
            if the difference between corresponding rectangle values is less than deviation and
            <see langword="false"/>
            otherwise.
            </returns>
        </member>
        <member name="M:iText.Kernel.Geom.Rectangle.EqualsWithEpsilon(iText.Kernel.Geom.Rectangle,System.Single)">
            <summary>Compares instance of this rectangle with given deviation.</summary>
            <param name="that">
            the
            <see cref="T:iText.Kernel.Geom.Rectangle"/>
            to compare with.
            </param>
            <param name="eps">the deviation value.</param>
            <returns>
            
            <see langword="true"/>
            if the difference between corresponding rectangle values is less than deviation and
            <see langword="false"/>
            otherwise.
            </returns>
        </member>
        <member name="M:iText.Kernel.Geom.Rectangle.CreateBoundingRectanglesFromQuadPoint(iText.Kernel.Pdf.PdfArray)">
            <summary>Create a list of bounding rectangles from an 8 x n array of Quadpoints.</summary>
            <param name="quadPoints">8xn array of numbers representing 4 points</param>
            <returns>a list of bounding rectangles for the passed quadpoints</returns>
            <exception cref="T:iText.Kernel.PdfException">if the passed array's size is not a multiple of 8.</exception>
        </member>
        <member name="M:iText.Kernel.Geom.Rectangle.CreateBoundingRectangleFromQuadPoint(iText.Kernel.Pdf.PdfArray)">
            <summary>Create the bounding rectangle for the given array of quadpoints.</summary>
            <param name="quadPoints">an array containing 8 numbers that correspond to 4 points.</param>
            <returns>The smallest orthogonal rectangle containing the quadpoints.</returns>
            <exception cref="T:iText.Kernel.PdfException">if the passed array's size is not a multiple of 8.</exception>
        </member>
        <member name="T:iText.Kernel.Geom.Subpath">
            <summary>As subpath is a part of a path comprising a sequence of connected segments.</summary>
        </member>
        <member name="M:iText.Kernel.Geom.Subpath.#ctor">
            <summary>Creates a new SubPath instance.</summary>
        </member>
        <member name="M:iText.Kernel.Geom.Subpath.#ctor(iText.Kernel.Geom.Subpath)">
            <summary>Copy constuctor.</summary>
            <param name="subpath"/>
        </member>
        <member name="M:iText.Kernel.Geom.Subpath.#ctor(iText.Kernel.Geom.Point)">
            <summary>Constructs a new subpath starting at the given point.</summary>
        </member>
        <member name="M:iText.Kernel.Geom.Subpath.#ctor(System.Single,System.Single)">
            <summary>Constructs a new subpath starting at the given point.</summary>
        </member>
        <member name="M:iText.Kernel.Geom.Subpath.SetStartPoint(iText.Kernel.Geom.Point)">
            <summary>Sets the start point of the subpath.</summary>
            <param name="startPoint"/>
        </member>
        <member name="M:iText.Kernel.Geom.Subpath.SetStartPoint(System.Single,System.Single)">
            <summary>Sets the start point of the subpath.</summary>
            <param name="x"/>
            <param name="y"/>
        </member>
        <member name="M:iText.Kernel.Geom.Subpath.GetStartPoint">
            <returns>The point this subpath starts at.</returns>
        </member>
        <member name="M:iText.Kernel.Geom.Subpath.GetLastPoint">
            <returns>The last point of the subpath.</returns>
        </member>
        <member name="M:iText.Kernel.Geom.Subpath.AddSegment(iText.Kernel.Geom.IShape)">
            <summary>Adds a segment to the subpath.</summary>
            <remarks>
            Adds a segment to the subpath.
            Note: each new segment shall start at the end of the previous segment.
            </remarks>
            <param name="segment">new segment.</param>
        </member>
        <member name="M:iText.Kernel.Geom.Subpath.GetSegments">
            <returns>
            
            <see cref="!:System.Collections.IList&lt;E&gt;"/>
            comprising all the segments
            the subpath made on.
            </returns>
        </member>
        <member name="M:iText.Kernel.Geom.Subpath.IsEmpty">
            <summary>Checks whether subpath is empty or not.</summary>
            <returns>true if the subpath is empty, false otherwise.</returns>
        </member>
        <member name="M:iText.Kernel.Geom.Subpath.IsSinglePointOpen">
            <returns>
            <CODE>true</CODE> if this subpath contains only one point and it is not closed,
            <CODE>false</CODE> otherwise
            </returns>
        </member>
        <member name="M:iText.Kernel.Geom.Subpath.IsSinglePointClosed">
            <returns>
            <CODE>true</CODE> if this subpath contains only one point and it is closed,
            <CODE>false</CODE> otherwise
            </returns>
        </member>
        <member name="M:iText.Kernel.Geom.Subpath.IsClosed">
            <summary>Returns a <CODE>boolean</CODE> value indicating whether the subpath must be closed or not.</summary>
            <remarks>
            Returns a <CODE>boolean</CODE> value indicating whether the subpath must be closed or not.
            Ignore this value if the subpath is a rectangle because in this case it is already closed
            (of course if you paint the path using <CODE>re</CODE> operator)
            </remarks>
            <returns><CODE>boolean</CODE> value indicating whether the path must be closed or not.</returns>
        </member>
        <member name="M:iText.Kernel.Geom.Subpath.SetClosed(System.Boolean)">
            <summary>
            See
            <see cref="M:iText.Kernel.Geom.Subpath.IsClosed"/>
            </summary>
        </member>
        <member name="M:iText.Kernel.Geom.Subpath.IsDegenerate">
            <summary>Returns a <CODE>boolean</CODE> indicating whether the subpath is degenerate or not.</summary>
            <remarks>
            Returns a <CODE>boolean</CODE> indicating whether the subpath is degenerate or not.
            A degenerate subpath is the subpath consisting of a single-point closed path or of
            two or more points at the same coordinates.
            </remarks>
            <returns><CODE>boolean</CODE> value indicating whether the path is degenerate or not.</returns>
        </member>
        <member name="M:iText.Kernel.Geom.Subpath.GetPiecewiseLinearApproximation">
            <returns>
            
            <see cref="!:System.Collections.IList&lt;E&gt;"/>
            containing points of piecewise linear approximation
            for this subpath.
            </returns>
        </member>
        <member name="T:iText.Kernel.Geom.Vector">
            <summary>Represents a vector (i.e.</summary>
            <remarks>
            Represents a vector (i.e. a point in space).  This class is completely
            unrelated to the
            <see cref="!:System.Collections.ArrayList&lt;E&gt;"/>
            class in the standard JRE.
            <br /><br />
            For many PDF related operations, the z coordinate is specified as 1
            This is to support the coordinate transformation calculations.  If it
            helps, just think of all PDF drawing operations as occurring in a single plane
            with z=1.
            </remarks>
        </member>
        <member name="F:iText.Kernel.Geom.Vector.I1">
            <summary>index of the X coordinate</summary>
        </member>
        <member name="F:iText.Kernel.Geom.Vector.I2">
            <summary>index of the Y coordinate</summary>
        </member>
        <member name="F:iText.Kernel.Geom.Vector.I3">
            <summary>index of the Z coordinate</summary>
        </member>
        <member name="F:iText.Kernel.Geom.Vector.vals">
            <summary>the values inside the vector</summary>
        </member>
        <member name="M:iText.Kernel.Geom.Vector.#ctor(System.Single,System.Single,System.Single)">
            <summary>Creates a new Vector</summary>
            <param name="x">the X coordinate</param>
            <param name="y">the Y coordinate</param>
            <param name="z">the Z coordinate</param>
        </member>
        <member name="M:iText.Kernel.Geom.Vector.Get(System.Int32)">
            <summary>Gets the value from a coordinate of the vector</summary>
            <param name="index">the index of the value to get (I1, I2 or I3)</param>
            <returns>a coordinate value</returns>
        </member>
        <member name="M:iText.Kernel.Geom.Vector.Cross(iText.Kernel.Geom.Matrix)">
            <summary>Computes the cross product of this vector and the specified matrix</summary>
            <param name="by">the matrix to cross this vector with</param>
            <returns>the result of the cross product</returns>
        </member>
        <member name="M:iText.Kernel.Geom.Vector.Subtract(iText.Kernel.Geom.Vector)">
            <summary>Computes the difference between this vector and the specified vector</summary>
            <param name="v">the vector to subtract from this one</param>
            <returns>the results of the subtraction</returns>
        </member>
        <member name="M:iText.Kernel.Geom.Vector.Cross(iText.Kernel.Geom.Vector)">
            <summary>Computes the cross product of this vector and the specified vector</summary>
            <param name="with">the vector to cross this vector with</param>
            <returns>the cross product</returns>
        </member>
        <member name="M:iText.Kernel.Geom.Vector.Normalize">
            <summary>Normalizes the vector (i.e.</summary>
            <remarks>Normalizes the vector (i.e. returns the unit vector in the same orientation as this vector)</remarks>
            <returns>the unit vector</returns>
        </member>
        <member name="M:iText.Kernel.Geom.Vector.Multiply(System.Single)">
            <summary>Multiplies the vector by a scalar</summary>
            <param name="by">the scalar to multiply by</param>
            <returns>the result of the scalar multiplication</returns>
        </member>
        <member name="M:iText.Kernel.Geom.Vector.Dot(iText.Kernel.Geom.Vector)">
            <summary>Computes the dot product of this vector with the specified vector</summary>
            <param name="with">the vector to dot product this vector with</param>
            <returns>the dot product</returns>
        </member>
        <member name="M:iText.Kernel.Geom.Vector.Length">
            <summary>
            Computes the length of this vector
            <br />
            <b>Note:</b> If you are working with raw vectors from PDF, be careful -
            the Z axis will generally be set to 1.
            </summary>
            <remarks>
            Computes the length of this vector
            <br />
            <b>Note:</b> If you are working with raw vectors from PDF, be careful -
            the Z axis will generally be set to 1.  If you want to compute the
            length of a vector, subtract it from the origin first (this will set
            the Z axis to 0).
            <br />
            For example:
            <code>aVector.subtract(originVector).length();</code>
            </remarks>
            <returns>the length of this vector</returns>
        </member>
        <member name="M:iText.Kernel.Geom.Vector.LengthSquared">
            <summary>Computes the length squared of this vector.</summary>
            <remarks>
            Computes the length squared of this vector.
            The square of the length is less expensive to compute, and is often
            useful without taking the square root.
            <br /><br />
            <b>Note:</b> See the important note under
            <see cref="M:iText.Kernel.Geom.Vector.Length"/>
            </remarks>
            <returns>the square of the length of the vector</returns>
        </member>
        <member name="M:iText.Kernel.Geom.Vector.ToString">
            <seealso cref="M:System.Object.ToString"/>
        </member>
        <member name="M:iText.Kernel.Geom.Vector.GetHashCode">
            <summary>Calculates the hashcode using the values.</summary>
        </member>
        <member name="M:iText.Kernel.Geom.Vector.Equals(System.Object)">
            <seealso cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="T:iText.Kernel.LicenseVersionException">
            <summary>Exception class for License-key version exceptions throw in the Version class</summary>
        </member>
        <member name="F:iText.Kernel.LicenseVersionException.object">
            <summary>Object for more details</summary>
        </member>
        <member name="M:iText.Kernel.LicenseVersionException.#ctor(System.String)">
            <summary>Creates a new instance of PdfException.</summary>
            <param name="message">the detail message.</param>
        </member>
        <member name="M:iText.Kernel.LicenseVersionException.#ctor(System.Exception)">
            <summary>Creates a new instance of PdfException.</summary>
            <param name="cause">
            the cause (which is saved for later retrieval by
            <see cref="P:System.Exception.InnerException"/>
            method).
            </param>
        </member>
        <member name="M:iText.Kernel.LicenseVersionException.#ctor(System.String,System.Object)">
            <summary>Creates a new instance of PdfException.</summary>
            <param name="message">the detail message.</param>
            <param name="obj">an object for more details.</param>
        </member>
        <member name="M:iText.Kernel.LicenseVersionException.#ctor(System.String,System.Exception)">
            <summary>Creates a new instance of PdfException.</summary>
            <param name="message">the detail message.</param>
            <param name="cause">
            the cause (which is saved for later retrieval by
            <see cref="P:System.Exception.InnerException"/>
            method).
            </param>
        </member>
        <member name="M:iText.Kernel.LicenseVersionException.#ctor(System.String,System.Exception,System.Object)">
            <summary>Creates a new instance of PdfException.</summary>
            <param name="message">the detail message.</param>
            <param name="cause">
            the cause (which is saved for later retrieval by
            <see cref="P:System.Exception.InnerException"/>
            method).
            </param>
            <param name="obj">an object for more details.</param>
        </member>
        <member name="M:iText.Kernel.LicenseVersionException.SetMessageParams(System.Object[])">
            <summary>Sets additional params for Exception message.</summary>
            <param name="messageParams">additional params.</param>
            <returns>object itself.</returns>
        </member>
        <member name="M:iText.Kernel.LicenseVersionException.GetMessageParams">
            <summary>Gets additional params for Exception message.</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:iText.Kernel.Log.CounterManager" -->
        <member name="F:iText.Kernel.Log.CounterManager.instance">
            <summary>The singleton instance.</summary>
        </member>
        <member name="F:iText.Kernel.Log.CounterManager.factories">
            <summary>All registered factories.</summary>
        </member>
        <member name="M:iText.Kernel.Log.CounterManager.GetInstance">
            <summary>Returns the singleton instance of the factory.</summary>
        </member>
        <member name="M:iText.Kernel.Log.CounterManager.GetCounters(System.Type)">
            <summary>Returns a list of registered counters for specific class.</summary>
        </member>
        <member name="M:iText.Kernel.Log.CounterManager.Register(iText.Kernel.Log.ICounterFactory)">
            <summary>
            Register new
            <see cref="T:iText.Kernel.Log.ICounterFactory"/>
            . Does nothing if same factory was already registered.
            </summary>
            <param name="factory">
            
            <see cref="T:iText.Kernel.Log.ICounterFactory"/>
            to be registered
            </param>
        </member>
        <member name="M:iText.Kernel.Log.CounterManager.Unregister(iText.Kernel.Log.ICounterFactory)">
            <summary>
            Unregister specified
            <see cref="T:iText.Kernel.Log.ICounterFactory"/>
            . Does nothing if this factory wasn't registered first.
            </summary>
            <param name="factory">
            
            <see cref="T:iText.Kernel.Log.ICounterFactory"/>
            to be unregistered
            </param>
            <returns>
            
            <see langword="true"/>
            if specified factory was registered first
            </returns>
        </member>
        <member name="T:iText.Kernel.Log.DefaultCounter">
            <summary>
            Default implementation of the
            <see cref="T:iText.Kernel.Log.ICounter"/>
            interface that essentially doesn't do anything.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:iText.Kernel.Log.ICounter" -->
        <member name="M:iText.Kernel.Log.ICounter.OnDocumentRead(System.Int64)">
            <summary>This method gets triggered if a document is read.</summary>
            <param name="size">the length of the document that was read</param>
        </member>
        <member name="M:iText.Kernel.Log.ICounter.OnDocumentWritten(System.Int64)">
            <summary>This method gets triggered if a document is written.</summary>
            <param name="size">the length of the document that was written</param>
        </member>
        <!-- Badly formed XML comment ignored for member "T:iText.Kernel.Log.ICounterFactory" -->
        <member name="T:iText.Kernel.Log.SimpleCounterFactory">
            <summary>
            <see cref="T:iText.Kernel.Log.ICounterFactory"/>
            implementation that always returns counter instance passed to it in constructor
            </summary>
        </member>
        <member name="T:iText.Kernel.Log.SystemOutCounter">
            <summary>
            A
            <see cref="T:iText.Kernel.Log.ICounter"/>
            implementation that outputs information about read and written documents to
            <see cref="P:System.Console.Out"/>
            </summary>
        </member>
        <member name="F:iText.Kernel.Log.SystemOutCounter.name">
            <summary>
            The name of the class for which the ICounter was created
            (or iText if no name is available)
            </summary>
        </member>
        <member name="T:iText.Kernel.Log.SystemOutCounterFactory">
            <summary>
            <see cref="T:iText.Kernel.Log.ICounterFactory"/>
            implementation that creates new
            <see cref="T:iText.Kernel.Log.SystemOutCounter"/>
            on each call.
            </summary>
        </member>
        <member name="T:iText.Kernel.Numbering.AlphabetNumbering">
            <summary>This is a general class for alphabet numbering.</summary>
            <remarks>
            This is a general class for alphabet numbering.
            You can specify an alphabet and convert an integer into the corresponding
            alphabet number representation.
            E.g.: if the alphabet is English letters 'a' to 'z', then
            1 is represented as "a", ..., 26 is represented as "z",
            27 is represented as "aa" and so on.
            </remarks>
        </member>
        <member name="M:iText.Kernel.Numbering.AlphabetNumbering.ToAlphabetNumber(System.Int32,System.Char[])">
            <summary>
            Translates a positive integer (not equal to zero)
            into an alphabet number using the letters from the specified alphabet.
            </summary>
            <param name="number">the number</param>
            <param name="alphabet">the array containing all possible letters from the alphabet</param>
            <returns>a translated number representation</returns>
        </member>
        <member name="T:iText.Kernel.Numbering.ArmenianNumbering">
            <summary>This class can produce String combinations representing an armenian numeral.</summary>
            <remarks>
            This class can produce String combinations representing an armenian numeral.
            See https://en.wikipedia.org/wiki/Armenian_numerals
            </remarks>
        </member>
        <member name="M:iText.Kernel.Numbering.ArmenianNumbering.ToArmenian(System.Int32)">
            <summary>Returns an armenian numeral representation of an integer.</summary>
            <param name="number">a number greater than zero to be converted to armenian notation</param>
        </member>
        <member name="T:iText.Kernel.Numbering.EnglishAlphabetNumbering">
            <summary>
            This class is responsible for converting integer numbers to their
            English alphabet letter representations.
            </summary>
        </member>
        <member name="M:iText.Kernel.Numbering.EnglishAlphabetNumbering.ToLatinAlphabetNumberLowerCase(System.Int32)">
            <summary>Converts the given number to its English alphabet lowercase string representation.</summary>
            <remarks>
            Converts the given number to its English alphabet lowercase string representation.
            E.g. 1 will be converted to "a", 2 to "b", ..., 27 to "aa", and so on.
            </remarks>
            <param name="number">the number to be converted</param>
        </member>
        <member name="M:iText.Kernel.Numbering.EnglishAlphabetNumbering.ToLatinAlphabetNumberUpperCase(System.Int32)">
            <summary>Converts the given number to its English alphabet lowercase string representation.</summary>
            <remarks>
            Converts the given number to its English alphabet lowercase string representation.
            E.g. 1 will be converted to "A", 2 to "B", ..., 27 to "AA", and so on.
            </remarks>
            <param name="number">the number to be converted</param>
        </member>
        <member name="M:iText.Kernel.Numbering.EnglishAlphabetNumbering.ToLatinAlphabetNumber(System.Int32,System.Boolean)">
            <summary>Converts the given number to its English alphabet string representation.</summary>
            <remarks>
            Converts the given number to its English alphabet string representation.
            E.g. for <code>upperCase</code> set to false,
            1 will be converted to "a", 2 to "b", ..., 27 to "aa", and so on.
            </remarks>
            <param name="number">the number to be converted</param>
            <param name="upperCase">whether to use uppercase or lowercase alphabet</param>
        </member>
        <member name="T:iText.Kernel.Numbering.GeorgianNumbering">
            <summary>This class can produce String combinations representing a georgian numeral.</summary>
            <remarks>
            This class can produce String combinations representing a georgian numeral.
            See https://en.wikipedia.org/wiki/Georgian_numerals
            </remarks>
        </member>
        <member name="M:iText.Kernel.Numbering.GeorgianNumbering.ToGeorgian(System.Int32)">
            <summary>Returns a georgian numeral representation of an integer.</summary>
            <param name="number">a number greater than zero to be converted to georgian notation</param>
        </member>
        <member name="T:iText.Kernel.Numbering.GreekAlphabetNumbering">
            <summary>
            This class is responsible for converting integer numbers to their
            Greek alphabet letter representations.
            </summary>
            <remarks>
            This class is responsible for converting integer numbers to their
            Greek alphabet letter representations.
            We are aware of the fact that the original Greek numbering is different.
            See http://www.cogsci.indiana.edu/farg/harry/lan/grknum.htm#ancient
            but this isn't implemented yet; the main reason being the fact that we
            need a font that has the obsolete Greek characters qoppa and sampi.
            So we use standard 24 letter Greek alphabet
            </remarks>
        </member>
        <member name="M:iText.Kernel.Numbering.GreekAlphabetNumbering.ToGreekAlphabetNumberLowerCase(System.Int32)">
            <summary>Converts the given number to its Greek alphabet lowercase string representation.</summary>
            <remarks>
            Converts the given number to its Greek alphabet lowercase string representation.
            E.g. 1 will be converted to "alpha", 2 to "beta", and so on.
            </remarks>
            <param name="number">the number to be converted</param>
        </member>
        <member name="M:iText.Kernel.Numbering.GreekAlphabetNumbering.ToGreekAlphabetNumberUpperCase(System.Int32)">
            <summary>Converts the given number to its Greek alphabet lowercase string representation.</summary>
            <remarks>
            Converts the given number to its Greek alphabet lowercase string representation.
            E.g. 1 will be converted to "A", 2 to "B", and so on.
            </remarks>
            <param name="number">the number to be converted</param>
        </member>
        <member name="M:iText.Kernel.Numbering.GreekAlphabetNumbering.ToGreekAlphabetNumber(System.Int32,System.Boolean)">
            <summary>Converts the given number to its Greek alphabet string representation.</summary>
            <remarks>
            Converts the given number to its Greek alphabet string representation.
            E.g. for <code>upperCase</code> set to false,
            1 will be converted to "alpha", 2 to "beta", and so on.
            </remarks>
            <param name="number">the number to be converted</param>
            <param name="upperCase">whether to use uppercase or lowercase alphabet</param>
        </member>
        <member name="M:iText.Kernel.Numbering.GreekAlphabetNumbering.ToGreekAlphabetNumber(System.Int32,System.Boolean,System.Boolean)">
            <summary>Converts the given number to its Greek alphabet string representation.</summary>
            <remarks>
            Converts the given number to its Greek alphabet string representation.
            E.g. for <code>upperCase</code> set to false,
            1 will be converted to "alpha", 2 to "beta", and so on.
            </remarks>
            <param name="number">the number to be converted</param>
            <param name="upperCase">whether to use uppercase or lowercase alphabet</param>
            <param name="symbolFont">if <code>true</code>, then the string representation will be returned ready to write it in Symbol font
                </param>
        </member>
        <member name="M:iText.Kernel.Numbering.GreekAlphabetNumbering.GetSymbolFontChar(System.Char)">
            <summary>Converts a given greek unicode character code into the code of the corresponding char Symbol font.
                </summary>
            <param name="unicodeChar">original unicode char</param>
            <returns>the corresponding symbol code in Symbol standard font</returns>
        </member>
        <member name="T:iText.Kernel.Numbering.RomanNumbering">
            <summary>This class can produce String combinations representing a roman number.</summary>
            <remarks>
            This class can produce String combinations representing a roman number.
            The first roman numbers are: I, II, III, IV, V, VI, VII, VIII, IX, X
            See http://en.wikipedia.org/wiki/Roman_numerals
            </remarks>
        </member>
        <member name="F:iText.Kernel.Numbering.RomanNumbering.ROMAN_DIGITS">
            <summary>Array with Roman digits.</summary>
        </member>
        <member name="M:iText.Kernel.Numbering.RomanNumbering.ToRomanLowerCase(System.Int32)">
            <summary>Returns a lower case roman representation of an integer.</summary>
            <param name="number">a number to be converted to roman notation.</param>
        </member>
        <member name="M:iText.Kernel.Numbering.RomanNumbering.ToRomanUpperCase(System.Int32)">
            <summary>Returns an upper case roman representation of an integer.</summary>
            <param name="number">a number to be converted to roman notation.</param>
        </member>
        <member name="M:iText.Kernel.Numbering.RomanNumbering.ToRoman(System.Int32,System.Boolean)">
            <summary>Returns a roman representation of an integer.</summary>
            <param name="number">a number to be converted to roman notation.</param>
            <param name="upperCase">
            <code>true</code> for upper case representation,
            <code>false</code> for lower case one.
            </param>
        </member>
        <member name="M:iText.Kernel.Numbering.RomanNumbering.Convert(System.Int32)">
            <summary>Returns a roman representation of an integer.</summary>
            <param name="index">the original number</param>
            <returns>the roman number representation (lower case)</returns>
        </member>
        <member name="T:iText.Kernel.Numbering.RomanNumbering.RomanDigit">
            <summary>Helper class for Roman Digits</summary>
        </member>
        <member name="F:iText.Kernel.Numbering.RomanNumbering.RomanDigit.digit">
            <summary>part of a roman number</summary>
        </member>
        <member name="F:iText.Kernel.Numbering.RomanNumbering.RomanDigit.value">
            <summary>value of the roman digit</summary>
        </member>
        <member name="F:iText.Kernel.Numbering.RomanNumbering.RomanDigit.pre">
            <summary>can the digit be used as a prefix</summary>
        </member>
        <member name="M:iText.Kernel.Numbering.RomanNumbering.RomanDigit.#ctor(System.Char,System.Int32,System.Boolean)">
            <summary>Constructs a roman digit</summary>
            <param name="digit">the roman digit</param>
            <param name="value">the value</param>
            <param name="pre">can it be used as a prefix</param>
        </member>
        <member name="T:iText.Kernel.PdfException">
            <summary>Exception class for exceptions in kernel module.</summary>
        </member>
        <member name="F:iText.Kernel.PdfException.object">
            <summary>Object for more details</summary>
        </member>
        <member name="M:iText.Kernel.PdfException.#ctor(System.String)">
            <summary>Creates a new instance of PdfException.</summary>
            <param name="message">the detail message.</param>
        </member>
        <member name="M:iText.Kernel.PdfException.#ctor(System.Exception)">
            <summary>Creates a new instance of PdfException.</summary>
            <param name="cause">
            the cause (which is saved for later retrieval by
            <see cref="P:System.Exception.InnerException"/>
            method).
            </param>
        </member>
        <member name="M:iText.Kernel.PdfException.#ctor(System.String,System.Object)">
            <summary>Creates a new instance of PdfException.</summary>
            <param name="message">the detail message.</param>
            <param name="obj">an object for more details.</param>
        </member>
        <member name="M:iText.Kernel.PdfException.#ctor(System.String,System.Exception)">
            <summary>Creates a new instance of PdfException.</summary>
            <param name="message">the detail message.</param>
            <param name="cause">
            the cause (which is saved for later retrieval by
            <see cref="P:System.Exception.InnerException"/>
            method).
            </param>
        </member>
        <member name="M:iText.Kernel.PdfException.#ctor(System.String,System.Exception,System.Object)">
            <summary>Creates a new instance of PdfException.</summary>
            <param name="message">the detail message.</param>
            <param name="cause">
            the cause (which is saved for later retrieval by
            <see cref="P:System.Exception.InnerException"/>
            method).
            </param>
            <param name="obj">an object for more details.</param>
        </member>
        <member name="M:iText.Kernel.PdfException.SetMessageParams(System.Object[])">
            <summary>Sets additional params for Exception message.</summary>
            <param name="messageParams">additional params.</param>
            <returns>object itself.</returns>
        </member>
        <member name="M:iText.Kernel.PdfException.GetMessageParams">
            <summary>Gets additional params for Exception message.</summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Action.PdfAction">
            <summary>A wrapper for action dictionaries (ISO 32000-1 section 12.6).</summary>
            <remarks>
            A wrapper for action dictionaries (ISO 32000-1 section 12.6).
            An action dictionary defines the characteristics and behaviour of an action.
            </remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.Action.PdfAction.SUBMIT_EXCLUDE">
            <summary>A possible submit value</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Action.PdfAction.SUBMIT_INCLUDE_NO_VALUE_FIELDS">
            <summary>A possible submit value</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Action.PdfAction.SUBMIT_HTML_FORMAT">
            <summary>A possible submit value</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Action.PdfAction.SUBMIT_HTML_GET">
            <summary>A possible submit value</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Action.PdfAction.SUBMIT_COORDINATES">
            <summary>A possible submit value</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Action.PdfAction.SUBMIT_XFDF">
            <summary>A possible submit value</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Action.PdfAction.SUBMIT_INCLUDE_APPEND_SAVES">
            <summary>A possible submit value</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Action.PdfAction.SUBMIT_INCLUDE_ANNOTATIONS">
            <summary>A possible submit value</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Action.PdfAction.SUBMIT_PDF">
            <summary>A possible submit value</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Action.PdfAction.SUBMIT_CANONICAL_FORMAT">
            <summary>A possible submit value</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Action.PdfAction.SUBMIT_EXCL_NON_USER_ANNOTS">
            <summary>A possible submit value</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Action.PdfAction.SUBMIT_EXCL_F_KEY">
            <summary>A possible submit value</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Action.PdfAction.SUBMIT_EMBED_FORM">
            <summary>A possible submit value</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Action.PdfAction.RESET_EXCLUDE">
            <summary>A possible submit value</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Action.PdfAction.#ctor">
            <summary>Constructs an empty action that can be further modified.</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Action.PdfAction.#ctor(iText.Kernel.Pdf.PdfDictionary)">
            <summary>
            Constructs a
            <see cref="T:iText.Kernel.Pdf.Action.PdfAction"/>
            instance with a given dictionary. It can be used for handy
            property reading in reading mode or modifying in stamping mode.
            </summary>
            <param name="pdfObject">the dictionary to construct the wrapper around</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Action.PdfAction.CreateGoTo(iText.Kernel.Pdf.Navigation.PdfDestination)">
            <summary>Creates a GoTo action (section 12.6.4.2 of ISO 32000-1) via a given destination.</summary>
            <param name="destination">the desired destination of the action</param>
            <returns>created action</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Action.PdfAction.CreateGoTo(System.String)">
            <summary>
            Creates a GoTo action (section 12.6.4.2 of ISO 32000-1) via a given
            <see cref="T:iText.Kernel.Pdf.Navigation.PdfStringDestination"/>
            name.
            </summary>
            <param name="destination">
            
            <see cref="T:iText.Kernel.Pdf.Navigation.PdfStringDestination"/>
            name
            </param>
            <returns>created action</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Action.PdfAction.CreateGoToR(iText.Kernel.Pdf.Filespec.PdfFileSpec,iText.Kernel.Pdf.Navigation.PdfDestination,System.Boolean)">
            <summary>Creates a GoToR action, or remote action (section 12.6.4.3 of ISO 32000-1).</summary>
            <param name="fileSpec">the file in which the destination shall be located</param>
            <param name="destination">the destination in the remote document to jump to</param>
            <param name="newWindow">a flag specifying whether to open the destination document in a new window</param>
            <returns>created action</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Action.PdfAction.CreateGoToR(iText.Kernel.Pdf.Filespec.PdfFileSpec,iText.Kernel.Pdf.Navigation.PdfDestination)">
            <summary>Creates a GoToR action, or remote action (section 12.6.4.3 of ISO 32000-1).</summary>
            <param name="fileSpec">the file in which the destination shall be located</param>
            <param name="destination">the destination in the remote document to jump to</param>
            <returns>created action</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Action.PdfAction.CreateGoToR(System.String,System.Int32)">
            <summary>Creates a GoToR action, or remote action (section 12.6.4.3 of ISO 32000-1).</summary>
            <param name="filename">the remote destination file to jump to</param>
            <param name="pageNum">the remote destination document page to jump to</param>
            <returns>created action</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Action.PdfAction.CreateGoToR(System.String,System.Int32,System.Boolean)">
            <summary>Creates a GoToR action, or remote action (section 12.6.4.3 of ISO 32000-1).</summary>
            <param name="filename">the remote destination file to jump to</param>
            <param name="pageNum">the remote destination document page to jump to</param>
            <param name="newWindow">a flag specifying whether to open the destination document in a new window</param>
            <returns>created action</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Action.PdfAction.CreateGoToR(System.String,System.String,System.Boolean)">
            <summary>Creates a GoToR action, or remote action (section 12.6.4.3 of ISO 32000-1).</summary>
            <param name="filename">the remote destination file to jump to</param>
            <param name="destination">the string destination in the remote document to jump to</param>
            <param name="newWindow">a flag specifying whether to open the destination document in a new window</param>
            <returns>created action</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Action.PdfAction.CreateGoToR(System.String,System.String)">
            <summary>Creates a GoToR action, or remote action (section 12.6.4.3 of ISO 32000-1).</summary>
            <param name="filename">the remote destination file to jump to</param>
            <param name="destination">the string destination in the remote document to jump to</param>
            <returns>created action</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Action.PdfAction.CreateGoToE(iText.Kernel.Pdf.Navigation.PdfDestination,System.Boolean,iText.Kernel.Pdf.Action.PdfTarget)">
            <summary>Creates a GoToE action, or embedded file action (section 12.6.4.4 of ISO 32000-1).</summary>
            <param name="destination">the destination in the target to jump to</param>
            <param name="newWindow">
            if true, the destination document should be opened in a new window;
            if false, the destination document should replace the current document in the same window
            </param>
            <param name="targetDictionary">
            A target dictionary specifying path information to the target document.
            Each target dictionary specifies one element in the full path to the target and
            may have nested target dictionaries specifying additional elements
            </param>
            <returns>created action</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Action.PdfAction.CreateGoToE(iText.Kernel.Pdf.Filespec.PdfFileSpec,iText.Kernel.Pdf.Navigation.PdfDestination,System.Boolean,iText.Kernel.Pdf.Action.PdfTarget)">
            <summary>Creates a GoToE action, or embedded file action (section 12.6.4.4 of ISO 32000-1).</summary>
            <param name="fileSpec">The root document of the target relative to the root document of the source</param>
            <param name="destination">the destination in the target to jump to</param>
            <param name="newWindow">
            if true, the destination document should be opened in a new window;
            if false, the destination document should replace the current document in the same window
            </param>
            <param name="targetDictionary">
            A target dictionary specifying path information to the target document.
            Each target dictionary specifies one element in the full path to the target and
            may have nested target dictionaries specifying additional elements
            </param>
            <returns>created action</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Action.PdfAction.CreateLaunch(iText.Kernel.Pdf.Filespec.PdfFileSpec,System.Boolean)">
            <summary>Creates a Launch action (section 12.6.4.5 of ISO 32000-1).</summary>
            <param name="fileSpec">the application that shall be launched or the document that shall beopened or printed
                </param>
            <param name="newWindow">a flag specifying whether to open the destination document in a new window</param>
            <returns>created action</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Action.PdfAction.CreateLaunch(iText.Kernel.Pdf.Filespec.PdfFileSpec)">
            <summary>Creates a Launch action (section 12.6.4.5 of ISO 32000-1).</summary>
            <param name="fileSpec">the application that shall be launched or the document that shall beopened or printed
                </param>
            <returns>created action</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Action.PdfAction.CreateThread(iText.Kernel.Pdf.Filespec.PdfFileSpec,iText.Kernel.Pdf.PdfObject,iText.Kernel.Pdf.PdfObject)">
            <summary>Creates a Thread action (section 12.6.4.6 of ISO 32000-1).</summary>
            <remarks>
            Creates a Thread action (section 12.6.4.6 of ISO 32000-1).
            A thread action jumps to a specified bead on an article thread (see 12.4.3, "Articles"),
            in either the current document or a different one. Table 205 shows the action dictionary
            entries specific to this type of action.
            </remarks>
            <param name="fileSpec">the file containing the thread. If this entry is absent, the thread is in the current file
                </param>
            <param name="destinationThread">the destination thread</param>
            <param name="bead">the bead in the destination thread</param>
            <returns>created action</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Action.PdfAction.CreateThread(iText.Kernel.Pdf.Filespec.PdfFileSpec)">
            <summary>Creates a Thread action (section 12.6.4.6 of ISO 32000-1).</summary>
            <remarks>
            Creates a Thread action (section 12.6.4.6 of ISO 32000-1).
            A thread action jumps to a specified bead on an article thread (see 12.4.3, "Articles"),
            in either the current document or a different one. Table 205 shows the action dictionary
            entries specific to this type of action.
            </remarks>
            <param name="fileSpec">the file containing the thread. If this entry is absent, the thread is in the current file
                </param>
            <returns>created action</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Action.PdfAction.CreateURI(System.String)">
            <summary>Creates a URI action (section 12.6.4.7 of ISO 32000-1).</summary>
            <param name="uri">the uniform resource identifier to resolve</param>
            <returns>created action</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Action.PdfAction.CreateURI(System.String,System.Boolean)">
            <summary>Creates a URI action (section 12.6.4.7 of ISO 32000-1).</summary>
            <param name="uri">the uniform resource identifier to resolve</param>
            <param name="isMap">a flag specifying whether to track the mouse position when the URI is resolved</param>
            <returns>created action</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Action.PdfAction.CreateSound(iText.Kernel.Pdf.PdfStream)">
            <summary>Creates a Sound action (section 12.6.4.8 of ISO 32000-1).</summary>
            <remarks>Creates a Sound action (section 12.6.4.8 of ISO 32000-1). Deprecated in PDF 2.0.</remarks>
            <param name="sound">a sound object defining the sound that shall be played (see section 13.3 of ISO 32000-1)
                </param>
            <returns>created action</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Action.PdfAction.CreateSound(iText.Kernel.Pdf.PdfStream,System.Single,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Creates a Sound action (section 12.6.4.8 of ISO 32000-1).</summary>
            <remarks>Creates a Sound action (section 12.6.4.8 of ISO 32000-1). Deprecated in PDF 2.0.</remarks>
            <param name="sound">a sound object defining the sound that shall be played (see section 13.3 of ISO 32000-1)
                </param>
            <param name="volume">the volume at which to play the sound, in the range -1.0 to 1.0. Default value: 1.0</param>
            <param name="synchronous">
            a flag specifying whether to play the sound synchronously or asynchronously.
            If this flag is <code>true</code>, the conforming reader retains control, allowing no further user
            interaction other than canceling the sound, until the sound has been completely played.
            Default value: <code>false</code>
            </param>
            <param name="repeat">
            a flag specifying whether to repeat the sound indefinitely
            If this entry is present, the Synchronous entry shall be ignored. Default value: <code>false</code>
            </param>
            <param name="mix">a flag specifying whether to mix this sound with any other sound already playing</param>
            <returns>created action</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Action.PdfAction.CreateMovie(iText.Kernel.Pdf.Annot.PdfAnnotation,System.String,iText.Kernel.Pdf.PdfName)">
            <summary>Creates a Movie annotation (section 12.6.4.9 of ISO 32000-1).</summary>
            <remarks>Creates a Movie annotation (section 12.6.4.9 of ISO 32000-1). Deprecated in PDF 2.0.</remarks>
            <param name="annotation">a movie annotation identifying the movie that shall be played</param>
            <param name="title">the title of a movie annotation identifying the movie that shall be played</param>
            <param name="operation">
            the operation that shall be performed on the movie. Shall be one of the following:
            <see cref="F:iText.Kernel.Pdf.PdfName.Play"/>
            ,
            <see cref="F:iText.Kernel.Pdf.PdfName.Stop"/>
            ,
            <see cref="F:iText.Kernel.Pdf.PdfName.Pause"/>
            ,
            <see cref="F:iText.Kernel.Pdf.PdfName.Resume"/>
            </param>
            <returns>created annotation</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Action.PdfAction.CreateHide(iText.Kernel.Pdf.Annot.PdfAnnotation,System.Boolean)">
            <summary>Creates a Hide action (section 12.6.4.10 of ISO 32000-1).</summary>
            <param name="annotation">the annotation to be hidden or shown</param>
            <param name="hidden">a flag indicating whether to hide the annotation (<code>true</code>) or show it (<code>false</code>)
                </param>
            <returns>created action</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Action.PdfAction.CreateHide(iText.Kernel.Pdf.Annot.PdfAnnotation[],System.Boolean)">
            <summary>Creates a Hide action (section 12.6.4.10 of ISO 32000-1).</summary>
            <param name="annotations">the annotations to be hidden or shown</param>
            <param name="hidden">a flag indicating whether to hide the annotation (<code>true</code>) or show it (<code>false</code>)
                </param>
            <returns>created action</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Action.PdfAction.CreateHide(System.String,System.Boolean)">
            <summary>Creates a Hide action (section 12.6.4.10 of ISO 32000-1).</summary>
            <param name="text">
            a text string giving the fully qualified field name of an interactive form field whose
            associated widget annotation or annotations are to be affected
            </param>
            <param name="hidden">a flag indicating whether to hide the annotation (<code>true</code>) or show it (<code>false</code>)
                </param>
            <returns>created action</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Action.PdfAction.CreateHide(System.String[],System.Boolean)">
            <summary>Creates a Hide action (section 12.6.4.10 of ISO 32000-1).</summary>
            <param name="text">
            a text string array giving the fully qualified field names of interactive form fields whose
            associated widget annotation or annotations are to be affected
            </param>
            <param name="hidden">a flag indicating whether to hide the annotation (<code>true</code>) or show it (<code>false</code>)
                </param>
            <returns>created action</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Action.PdfAction.CreateNamed(iText.Kernel.Pdf.PdfName)">
            <summary>Creates a Named action (section 12.6.4.11 of ISO 32000-1).</summary>
            <param name="namedAction">
            the name of the action that shall be performed. Shall be one of the following:
            <see cref="F:iText.Kernel.Pdf.PdfName.NextPage"/>
            ,
            <see cref="F:iText.Kernel.Pdf.PdfName.PrevPage"/>
            ,
            <see cref="F:iText.Kernel.Pdf.PdfName.FirstPage"/>
            ,
            <see cref="F:iText.Kernel.Pdf.PdfName.LastPage"/>
            </param>
            <returns>created action</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Action.PdfAction.CreateSetOcgState(System.Collections.Generic.IList{iText.Kernel.Pdf.Action.PdfActionOcgState})">
            <summary>Creates a Set-OCG-State action (section 12.6.4.12 of ISO 32000-1).</summary>
            <param name="states">
            a list of
            <see cref="T:iText.Kernel.Pdf.Action.PdfActionOcgState"/>
            state descriptions
            </param>
            <returns>created action</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Action.PdfAction.CreateSetOcgState(System.Collections.Generic.IList{iText.Kernel.Pdf.Action.PdfActionOcgState},System.Boolean)">
            <summary>Creates a Set-OCG-State action (section 12.6.4.12 of ISO 32000-1).</summary>
            <param name="states">
            states a list of
            <see cref="T:iText.Kernel.Pdf.Action.PdfActionOcgState"/>
            state descriptions
            </param>
            <param name="preserveRb">
            If true, indicates that radio-button state relationships between optional content groups
            should be preserved when the states are applied
            </param>
            <returns>created action</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Action.PdfAction.CreateRendition(System.String,iText.Kernel.Pdf.Filespec.PdfFileSpec,System.String,iText.Kernel.Pdf.Annot.PdfAnnotation)">
            <summary>Creates a Rendition action (section 12.6.4.13 of ISO 32000-1).</summary>
            <param name="file">the name of the media clip, for use in the user interface.</param>
            <param name="fileSpec">a full file specification or form XObject that specifies the actual media data</param>
            <param name="mimeType">an ASCII string identifying the type of data</param>
            <param name="screenAnnotation">a screen annotation</param>
            <returns>created action</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Action.PdfAction.CreateJavaScript(System.String)">
            <summary>Creates a JavaScript action (section 12.6.4.16 of ISO 32000-1).</summary>
            <param name="javaScript">a text string containing the JavaScript script to be executed.</param>
            <returns>created action</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Action.PdfAction.CreateSubmitForm(System.String,System.Object[],System.Int32)">
            <summary>Creates a Submit-Form Action (section 12.7.5.2 of ISO 32000-1).</summary>
            <param name="file">a uniform resource locator, as described in 7.11.5, "URL Specifications"</param>
            <param name="names">
            an array identifying which fields to include in the submission or which to exclude,
            depending on the setting of the Include/Exclude flag in the Flags entry.
            This is an optional parameter and can be <code>null</code>
            </param>
            <param name="flags">
            a set of flags specifying various characteristics of the action (see Table 237 of ISO 32000-1).
            Default value to be passed: 0.
            </param>
            <returns>created action</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Action.PdfAction.CreateResetForm(System.Object[],System.Int32)">
            <summary>Creates a Reset-Form Action (section 12.7.5.3 of ISO 32000-1).</summary>
            <param name="names">
            an array identifying which fields to reset or which to exclude from resetting,
            depending on the setting of the Include/Exclude flag in the Flags entry (see Table 239 of ISO 32000-1).
            </param>
            <param name="flags">
            a set of flags specifying various characteristics of the action (see Table 239 of ISO 32000-1).
            Default value to be passed: 0.
            </param>
            <returns>created action</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Action.PdfAction.SetAdditionalAction(iText.Kernel.Pdf.PdfObjectWrapper{iText.Kernel.Pdf.PdfDictionary},iText.Kernel.Pdf.PdfName,iText.Kernel.Pdf.Action.PdfAction)">
            <summary>
            Adds an additional action to the provided
            <see cref="T:iText.Kernel.Pdf.PdfObjectWrapper`1"/>
            &lt;
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            &gt; wrapper.
            </summary>
            <param name="wrapper">the wrapper to add an additional action to</param>
            <param name="key">
            a
            <see cref="T:iText.Kernel.Pdf.PdfName"/>
            specifying the name of an additional action
            </param>
            <param name="action">
            the
            <see cref="T:iText.Kernel.Pdf.Action.PdfAction"/>
            to add as an additional action
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.Action.PdfAction.Next(iText.Kernel.Pdf.Action.PdfAction)">
            <summary>Adds a chained action.</summary>
            <param name="nextAction">the next action or sequence of actions that shall be performed after the current action
                </param>
        </member>
        <member name="M:iText.Kernel.Pdf.Action.PdfAction.Put(iText.Kernel.Pdf.PdfName,iText.Kernel.Pdf.PdfObject)">
            <summary>
            Inserts the value into the underlying object of this
            <see cref="T:iText.Kernel.Pdf.Action.PdfAction"/>
            and associates it with the specified key.
            If the key is already present in this
            <see cref="T:iText.Kernel.Pdf.Action.PdfAction"/>
            , this method will override the old value with the specified one.
            </summary>
            <param name="key">key to insert or to override</param>
            <param name="value">the value to associate with the specified key</param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Action.PdfAction"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Action.PdfAction.Flush">
            <summary>
            To manually flush a
            <c>PdfObject</c>
            behind this wrapper, you have to ensure
            that this object is added to the document, i.e. it has an indirect reference.
            Basically this means that before flushing you need to explicitly call
            <see cref="M:iText.Kernel.Pdf.PdfObjectWrapper`1.MakeIndirect(iText.Kernel.Pdf.PdfDocument)"/>
            .
            For example: wrapperInstance.makeIndirect(document).flush();
            Note that not every wrapper require this, only those that have such warning in documentation.
            </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Action.PdfAction.IsWrappedObjectMustBeIndirect">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Action.PdfActionOcgState">
            <summary>This is a helper class for optional content states use in Set-OCG-State actions.</summary>
            <remarks>
            This is a helper class for optional content states use in Set-OCG-State actions.
            See
            <see cref="!:PdfAction.CreateSetOcgState(System.Collections.Generic.IList&lt;E&gt;)"/>
            .
            </remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.Action.PdfActionOcgState.state">
            <summary>
            Can be:
            <see cref="F:iText.Kernel.Pdf.PdfName.OFF"/>
            ,
            <see cref="F:iText.Kernel.Pdf.PdfName.ON"/>
            ,
            <see cref="F:iText.Kernel.Pdf.PdfName.Toggle"/>
            </summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Action.PdfActionOcgState.ocgs">
            <summary>Optional content group dictionaries</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Action.PdfActionOcgState.#ctor(iText.Kernel.Pdf.PdfName,System.Collections.Generic.IList{iText.Kernel.Pdf.PdfDictionary})">
            <summary>Constructs an optional content state object.</summary>
            <param name="state">
            a
            <see cref="T:iText.Kernel.Pdf.PdfName"/>
            describing the state. Shall be one of the following:
            <see cref="F:iText.Kernel.Pdf.PdfName.OFF"/>
            ,
            <see cref="F:iText.Kernel.Pdf.PdfName.ON"/>
            ,
            <see cref="F:iText.Kernel.Pdf.PdfName.Toggle"/>
            </param>
            <param name="ocgs">a list of the OCG dictionaries</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Action.PdfActionOcgState.GetState">
            <summary>Gets the state the optional content groups should be switched to</summary>
            <returns>
            the state, one of the following:
            <see cref="F:iText.Kernel.Pdf.PdfName.OFF"/>
            ,
            <see cref="F:iText.Kernel.Pdf.PdfName.ON"/>
            ,
            <see cref="F:iText.Kernel.Pdf.PdfName.Toggle"/>
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Action.PdfActionOcgState.GetOcgs">
            <summary>Gets a list of optional content groups that shall have the state changed</summary>
            <returns>the list of optional content groups</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Action.PdfActionOcgState.GetObjectList">
            <summary>
            Gets a list of
            <see cref="T:iText.Kernel.Pdf.PdfObject"/>
            that is describing this particular optional content group states.
            </summary>
            <returns>
            a list of
            <see cref="T:iText.Kernel.Pdf.PdfObject"/>
            for construction of a
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            </returns>
        </member>
        <member name="T:iText.Kernel.Pdf.Action.PdfMediaClipData">
            <summary>This class is a wrapper of media clip data dictionary that defines the data for a media object that can be played.
                </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Action.PdfMediaClipData.#ctor(iText.Kernel.Pdf.PdfDictionary)">
            <summary>
            Constructs a new
            <see cref="T:iText.Kernel.Pdf.Action.PdfMediaClipData"/>
            wrapper using an existing dictionary.
            </summary>
            <param name="pdfObject">the dictionary to construct the wrapper from</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Action.PdfMediaClipData.#ctor(System.String,iText.Kernel.Pdf.Filespec.PdfFileSpec,System.String)">
            <summary>
            Constructs a new
            <see cref="T:iText.Kernel.Pdf.Action.PdfMediaClipData"/>
            wrapper around a newly created dictionary.
            </summary>
            <param name="file">the name of the file to create a media clip for</param>
            <param name="fs">a file specification that specifies the actual media data</param>
            <param name="mimeType">an ASCII string identifying the type of data</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Action.PdfMediaClipData.Flush">
            <summary>
            To manually flush a
            <c>PdfObject</c>
            behind this wrapper, you have to ensure
            that this object is added to the document, i.e. it has an indirect reference.
            Basically this means that before flushing you need to explicitly call
            <see cref="M:iText.Kernel.Pdf.PdfObjectWrapper`1.MakeIndirect(iText.Kernel.Pdf.PdfDocument)"/>
            .
            For example: wrapperInstance.makeIndirect(document).flush();
            Note that not every wrapper require this, only those that have such warning in documentation.
            </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Action.PdfMediaClipData.IsWrappedObjectMustBeIndirect">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Action.PdfRendition">
            <summary>This a wrapper around a rendition dictionary.</summary>
            <remarks>This a wrapper around a rendition dictionary. See ISO 32000-1 sections 13.2.3.2, 13.2.3.3.</remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Action.PdfRendition.#ctor(iText.Kernel.Pdf.PdfDictionary)">
            <summary>
            Creates a new wrapper around an existing
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            </summary>
            <param name="pdfObject">a rendition object to create a wrapper for</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Action.PdfRendition.#ctor(System.String,iText.Kernel.Pdf.Filespec.PdfFileSpec,System.String)">
            <summary>Creates a new wrapper around a newly created media rendition dictionary object.</summary>
            <param name="file">a text string specifying the name of the file to display</param>
            <param name="fs">a file specification that specifies the actual media data</param>
            <param name="mimeType">an ASCII string identifying the type of data</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Action.PdfRendition.Flush">
            <summary>
            To manually flush a
            <c>PdfObject</c>
            behind this wrapper, you have to ensure
            that this object is added to the document, i.e. it has an indirect reference.
            Basically this means that before flushing you need to explicitly call
            <see cref="M:iText.Kernel.Pdf.PdfObjectWrapper`1.MakeIndirect(iText.Kernel.Pdf.PdfDocument)"/>
            .
            For example: wrapperInstance.makeIndirect(document).flush();
            Note that not every wrapper require this, only those that have such warning in documentation.
            </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Action.PdfRendition.IsWrappedObjectMustBeIndirect">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Action.PdfTarget">
            <summary>
            A target dictionary locates the target in relation to the source,
            in much the same way that a relative path describes the physical
            relationship between two files in a file system.
            </summary>
            <remarks>
            A target dictionary locates the target in relation to the source,
            in much the same way that a relative path describes the physical
            relationship between two files in a file system. Target dictionaries may be
            nested recursively to specify one or more intermediate targets before reaching the final one.
            </remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Action.PdfTarget.Create(iText.Kernel.Pdf.PdfDictionary)">
            <summary>
            Creates a new
            <see cref="T:iText.Kernel.Pdf.Action.PdfTarget"/>
            object by the underlying dictionary.
            </summary>
            <param name="pdfObject">the underlying dictionary object</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Action.PdfTarget.Create(iText.Kernel.Pdf.PdfName)">
            <summary>
            Creates a new
            <see cref="T:iText.Kernel.Pdf.Action.PdfTarget"/>
            object given its type. The type must be either
            <see cref="F:iText.Kernel.Pdf.PdfName.P"/>
            , or
            <see cref="F:iText.Kernel.Pdf.PdfName.C"/>
            . If it is
            <see cref="F:iText.Kernel.Pdf.PdfName.C"/>
            , additional entries must be specified
            according to the spec.
            </summary>
            <param name="r">the relationship between the current document and the target</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Action.PdfTarget.CreateParentTarget">
            <summary>Creates a new target object pointing to the parent of the current document.</summary>
            <returns>
            created
            <see cref="T:iText.Kernel.Pdf.Action.PdfTarget"/>
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Action.PdfTarget.CreateChildTarget">
            <summary>Creates a new target object pointing to the child of the current document.</summary>
            <returns>
            created
            <see cref="T:iText.Kernel.Pdf.Action.PdfTarget"/>
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Action.PdfTarget.CreateChildTarget(System.String)">
            <summary>Creates a new target object pointing to a file in the EmbeddedFiles name tree.</summary>
            <param name="embeddedFileName">the name of the file in the EmbeddedFiles name tree</param>
            <returns>created object</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Action.PdfTarget.CreateChildTarget(System.String,System.String)">
            <summary>Creates a new target object pointing to a file attachment annotation.</summary>
            <param name="namedDestination">
            a named destination in the current document that
            provides the page number of the file attachment annotation
            </param>
            <param name="annotationIdentifier">
            a unique annotation identifier (
            <see cref="F:iText.Kernel.Pdf.PdfName.NM"/>
            entry) of the annotation
            </param>
            <returns>created object</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Action.PdfTarget.CreateChildTarget(System.Int32,System.Int32)">
            <summary>Creates a new target object pointing to a file attachment annotation.</summary>
            <param name="pageNumber">the number of the page in the current document, one-based</param>
            <param name="annotationIndex">the index of the annotation in the Annots entry of the page, zero-based</param>
            <returns>created object</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Action.PdfTarget.SetName(System.String)">
            <summary>
            Sets the name of the file in the EmbeddedFiles name tree for the child target located
            in the EmbeddedFiles.
            </summary>
            <param name="name">the name of the file</param>
            <returns>this object wrapper</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Action.PdfTarget.GetName">
            <summary>
            Gets name of the file in the EmbeddedFiles name tree for the child target located
            in the EmbeddedFiles.
            </summary>
            <returns>the name of the child file for this target</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Action.PdfTarget.SetAnnotation(iText.Kernel.Pdf.Annot.PdfFileAttachmentAnnotation,iText.Kernel.Pdf.PdfDocument)">
            <summary>Sets the /P and /A values corresponding to provided annotation, which is already added to a page.
                </summary>
            <param name="pdfAnnotation">the annotation to be set</param>
            <param name="pdfDocument">the corresponding document</param>
            <returns>this object wrapper</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Action.PdfTarget.GetAnnotation(iText.Kernel.Pdf.PdfDocument)">
            <summary>Gets the annotation specified by /A and /P entry values.</summary>
            <param name="pdfDocument">specifies the corresponding document</param>
            <returns>the annotation specified by /A and /P entry value.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Action.PdfTarget.SetTarget(iText.Kernel.Pdf.Action.PdfTarget)">
            <summary>Sets a target dictionary specifying additional path information to the target document.</summary>
            <remarks>
            Sets a target dictionary specifying additional path information to the target document.
            If this entry is absent, the current document is the target file containing the destination.
            </remarks>
            <param name="target">the additional path target dictionary</param>
            <returns>this object wrapper</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Action.PdfTarget.GetTarget">
            <summary>Get a target dictionary specifying additional path information to the target document.</summary>
            <remarks>
            Get a target dictionary specifying additional path information to the target document.
            If the current target object is the final node in the target path, <code>null</code> is returned.
            </remarks>
            <returns>a target dictionary specifying additional path information to the target document</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Action.PdfTarget.Put(iText.Kernel.Pdf.PdfName,iText.Kernel.Pdf.PdfObject)">
            <summary>
            This is a convenient method to put key-value pairs to the underlying
            <see cref="T:iText.Kernel.Pdf.PdfObject"/>
            .
            </summary>
            <param name="key">
            the key, a
            <see cref="T:iText.Kernel.Pdf.PdfName"/>
            instance
            </param>
            <param name="value">the value</param>
            <returns>this object wrapper</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Action.PdfTarget.IsWrappedObjectMustBeIndirect">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Action.PdfWin">
            <summary>This class is a wrapper around a Windows launch parameter dictionary.</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Action.PdfWin.#ctor(iText.Kernel.Pdf.PdfDictionary)">
            <summary>Creates a new wrapper around an existing Windows launch parameter dictionary.</summary>
            <param name="pdfObject">the dictionary to create a wrapper for</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Action.PdfWin.#ctor(iText.Kernel.Pdf.PdfString)">
            <summary>Creates a new wrapper around a newly created Windows launch parameter dictionary.</summary>
            <param name="f">
            the file name of the application that shall be launched or the document that shall be opened or printed,
            in standard Windows pathname format. If the name string includes a backslash character (\),
            the backslash shall itself be preceded by a backslash.
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.Action.PdfWin.#ctor(iText.Kernel.Pdf.PdfString,iText.Kernel.Pdf.PdfString,iText.Kernel.Pdf.PdfString,iText.Kernel.Pdf.PdfString)">
            <summary>Creates a new wrapper around a newly created Windows launch parameter dictionary.</summary>
            <param name="f">
            the file name of the application that shall be launched or the document that shall be opened or printed,
            in standard Windows pathname format. If the name string includes a backslash character (\),
            the backslash shall itself be preceded by a backslash
            </param>
            <param name="d">a bye string specifying the default directory in standard DOS syntax</param>
            <param name="o">
            an ASCII string specifying the operation to perform on the file. Shall be one of the following:
            "open", "print"
            </param>
            <param name="p">
            a parameter string that shall be passed to the application.
            This entry shall be omitted if a document is abound to be opened
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.Action.PdfWin.IsWrappedObjectMustBeIndirect">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.BorderStyleUtil.SetStyle(iText.Kernel.Pdf.PdfDictionary,iText.Kernel.Pdf.PdfName)">
            <summary>Setter for the border style.</summary>
            <remarks>
            Setter for the border style. Possible values are
            <ul>
            <li>
            <see cref="F:iText.Kernel.Pdf.Annot.PdfAnnotation.STYLE_SOLID"/>
            - A solid rectangle surrounding the annotation.</li>
            <li>
            <see cref="F:iText.Kernel.Pdf.Annot.PdfAnnotation.STYLE_DASHED"/>
            - A dashed rectangle surrounding the annotation.</li>
            <li>
            <see cref="F:iText.Kernel.Pdf.Annot.PdfAnnotation.STYLE_BEVELED"/>
            - A simulated embossed rectangle that appears to be raised above the surface of the page.</li>
            <li>
            <see cref="F:iText.Kernel.Pdf.Annot.PdfAnnotation.STYLE_INSET"/>
            - A simulated engraved rectangle that appears to be recessed below the surface of the page.</li>
            <li>
            <see cref="F:iText.Kernel.Pdf.Annot.PdfAnnotation.STYLE_UNDERLINE"/>
            - A single line along the bottom of the annotation rectangle.</li>
            </ul>
            See also ISO-320001, Table 166.
            </remarks>
            <param name="bs">original border style dictionary.</param>
            <param name="style">The new value for the annotation's border style.</param>
            <returns>Updated border style dictionary entry.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.BorderStyleUtil.SetDashPattern(iText.Kernel.Pdf.PdfDictionary,iText.Kernel.Pdf.PdfArray)">
            <summary>Setter for the dashed border style.</summary>
            <remarks>
            Setter for the dashed border style. This property has affect only if
            <see cref="F:iText.Kernel.Pdf.Annot.PdfAnnotation.STYLE_DASHED"/>
            style was used for border style (see
            <see cref="M:iText.Kernel.Pdf.Annot.BorderStyleUtil.SetStyle(iText.Kernel.Pdf.PdfDictionary,iText.Kernel.Pdf.PdfName)"/>
            .
            See ISO-320001 8.4.3.6, "Line Dash Pattern" for the format in which dash pattern shall be specified.
            </remarks>
            <param name="bs">original border style dictionary.</param>
            <param name="dashPattern">
            a dash array defining a pattern of dashes and gaps that
            shall be used in drawing a dashed border.
            </param>
            <returns>Updated border style dictionary entry.</returns>
        </member>
        <member name="T:iText.Kernel.Pdf.Annot.DA.AnnotationDefaultAppearance">
            <summary>Helper class for setting</summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Annot.DA.ExtendedAnnotationFont">
            <summary>Extended annotation fonts that are supported only by Acrobat</summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Annot.DA.StandardAnnotationFont">
            <summary>Standard fonts that can be used in pdf annotation</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.InteriorColorUtil.ParseInteriorColor(iText.Kernel.Pdf.PdfArray)">
            <summary>The interior color which is used to fill areas specific for different types of annotation.</summary>
            <remarks>
            The interior color which is used to fill areas specific for different types of annotation. For
            <see cref="T:iText.Kernel.Pdf.Annot.PdfLineAnnotation"/>
            and polyline annotation (
            <see cref="T:iText.Kernel.Pdf.Annot.PdfPolyGeomAnnotation"/>
            - the annotation's line endings, for
            <see cref="T:iText.Kernel.Pdf.Annot.PdfSquareAnnotation"/>
            and
            <see cref="T:iText.Kernel.Pdf.Annot.PdfCircleAnnotation"/>
            - the annotation's rectangle or ellipse, for
            <see cref="T:iText.Kernel.Pdf.Annot.PdfRedactAnnotation"/>
            - the redacted
            region after the affected content has been removed.
            </remarks>
            <returns>
            
            <see cref="T:iText.Kernel.Colors.Color"/>
            of either
            <see cref="T:iText.Kernel.Colors.DeviceGray"/>
            ,
            <see cref="T:iText.Kernel.Colors.DeviceRgb"/>
            or
            <see cref="T:iText.Kernel.Colors.DeviceCmyk"/>
            type which defines
            interior color of the annotation, or null if interior color is not specified.
            </returns>
        </member>
        <member name="T:iText.Kernel.Pdf.Annot.PdfAnnotation">
            <summary>This is a super class for the annotation dictionary wrappers.</summary>
            <remarks>
            This is a super class for the annotation dictionary wrappers. Derived classes represent
            different standard types of annotations. See ISO-320001 12.5.6, "Annotation Types."
            </remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.Annot.PdfAnnotation.INVISIBLE">
            <summary>Annotation flag.</summary>
            <remarks>
            Annotation flag.
            See also
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.SetFlag(System.Int32)"/>
            and ISO-320001, table 165.
            </remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.Annot.PdfAnnotation.HIDDEN">
            <summary>Annotation flag.</summary>
            <remarks>
            Annotation flag.
            See also
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.SetFlag(System.Int32)"/>
            and ISO-320001, table 165.
            </remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.Annot.PdfAnnotation.PRINT">
            <summary>Annotation flag.</summary>
            <remarks>
            Annotation flag.
            See also
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.SetFlag(System.Int32)"/>
            and ISO-320001, table 165.
            </remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.Annot.PdfAnnotation.NO_ZOOM">
            <summary>Annotation flag.</summary>
            <remarks>
            Annotation flag.
            See also
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.SetFlag(System.Int32)"/>
            and ISO-320001, table 165.
            </remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.Annot.PdfAnnotation.NO_ROTATE">
            <summary>Annotation flag.</summary>
            <remarks>
            Annotation flag.
            See also
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.SetFlag(System.Int32)"/>
            and ISO-320001, table 165.
            </remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.Annot.PdfAnnotation.NO_VIEW">
            <summary>Annotation flag.</summary>
            <remarks>
            Annotation flag.
            See also
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.SetFlag(System.Int32)"/>
            and ISO-320001, table 165.
            </remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.Annot.PdfAnnotation.READ_ONLY">
            <summary>Annotation flag.</summary>
            <remarks>
            Annotation flag.
            See also
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.SetFlag(System.Int32)"/>
            and ISO-320001, table 165.
            </remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.Annot.PdfAnnotation.LOCKED">
            <summary>Annotation flag.</summary>
            <remarks>
            Annotation flag.
            See also
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.SetFlag(System.Int32)"/>
            and ISO-320001, table 165.
            </remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.Annot.PdfAnnotation.TOGGLE_NO_VIEW">
            <summary>Annotation flag.</summary>
            <remarks>
            Annotation flag.
            See also
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.SetFlag(System.Int32)"/>
            and ISO-320001, table 165.
            </remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.Annot.PdfAnnotation.LOCKED_CONTENTS">
            <summary>Annotation flag.</summary>
            <remarks>
            Annotation flag.
            See also
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.SetFlag(System.Int32)"/>
            and ISO-320001, table 165.
            </remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.Annot.PdfAnnotation.HIGHLIGHT_NONE">
            <summary>Widget annotation highlighting mode.</summary>
            <remarks>
            Widget annotation highlighting mode. See ISO-320001, Table 188 (H key).
            Also see
            <see cref="M:iText.Kernel.Pdf.Annot.PdfWidgetAnnotation.SetHighlightMode(iText.Kernel.Pdf.PdfName)"/>
            .
            </remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.Annot.PdfAnnotation.HIGHLIGHT_INVERT">
            <summary>Widget annotation highlighting mode.</summary>
            <remarks>
            Widget annotation highlighting mode. See ISO-320001, Table 188 (H key).
            Also see
            <see cref="M:iText.Kernel.Pdf.Annot.PdfWidgetAnnotation.SetHighlightMode(iText.Kernel.Pdf.PdfName)"/>
            .
            </remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.Annot.PdfAnnotation.HIGHLIGHT_OUTLINE">
            <summary>Widget annotation highlighting mode.</summary>
            <remarks>
            Widget annotation highlighting mode. See ISO-320001, Table 188 (H key).
            Also see
            <see cref="M:iText.Kernel.Pdf.Annot.PdfWidgetAnnotation.SetHighlightMode(iText.Kernel.Pdf.PdfName)"/>
            .
            </remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.Annot.PdfAnnotation.HIGHLIGHT_PUSH">
            <summary>Widget annotation highlighting mode.</summary>
            <remarks>
            Widget annotation highlighting mode. See ISO-320001, Table 188 (H key).
            Also see
            <see cref="M:iText.Kernel.Pdf.Annot.PdfWidgetAnnotation.SetHighlightMode(iText.Kernel.Pdf.PdfName)"/>
            .
            </remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.Annot.PdfAnnotation.HIGHLIGHT_TOGGLE">
            <summary>Widget annotation highlighting mode.</summary>
            <remarks>
            Widget annotation highlighting mode. See ISO-320001, Table 188 (H key).
            Also see
            <see cref="M:iText.Kernel.Pdf.Annot.PdfWidgetAnnotation.SetHighlightMode(iText.Kernel.Pdf.PdfName)"/>
            .
            </remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.Annot.PdfAnnotation.STYLE_SOLID">
            <summary>Annotation border style.</summary>
            <remarks>Annotation border style. See ISO-320001, Table 166 (S key).</remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.Annot.PdfAnnotation.STYLE_DASHED">
            <summary>Annotation border style.</summary>
            <remarks>Annotation border style. See ISO-320001, Table 166 (S key).</remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.Annot.PdfAnnotation.STYLE_BEVELED">
            <summary>Annotation border style.</summary>
            <remarks>Annotation border style. See ISO-320001, Table 166 (S key).</remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.Annot.PdfAnnotation.STYLE_INSET">
            <summary>Annotation border style.</summary>
            <remarks>Annotation border style. See ISO-320001, Table 166 (S key).</remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.Annot.PdfAnnotation.STYLE_UNDERLINE">
            <summary>Annotation border style.</summary>
            <remarks>Annotation border style. See ISO-320001, Table 166 (S key).</remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.Annot.PdfAnnotation.Marked">
            <summary>Annotation state.</summary>
            <remarks>
            Annotation state. See ISO-320001 12.5.6.3 "Annotation States" and Table 171 in particular.
            Also see
            <see cref="M:iText.Kernel.Pdf.Annot.PdfTextAnnotation.SetState(iText.Kernel.Pdf.PdfString)"/>
            .
            </remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.Annot.PdfAnnotation.Unmarked">
            <summary>Annotation state.</summary>
            <remarks>
            Annotation state. See ISO-320001 12.5.6.3 "Annotation States" and Table 171 in particular.
            Also see
            <see cref="M:iText.Kernel.Pdf.Annot.PdfTextAnnotation.SetState(iText.Kernel.Pdf.PdfString)"/>
            .
            </remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.Annot.PdfAnnotation.Accepted">
            <summary>Annotation state.</summary>
            <remarks>
            Annotation state. See ISO-320001 12.5.6.3 "Annotation States" and Table 171 in particular.
            Also see
            <see cref="M:iText.Kernel.Pdf.Annot.PdfTextAnnotation.SetState(iText.Kernel.Pdf.PdfString)"/>
            .
            </remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.Annot.PdfAnnotation.Rejected">
            <summary>Annotation state.</summary>
            <remarks>
            Annotation state. See ISO-320001 12.5.6.3 "Annotation States" and Table 171 in particular.
            Also see
            <see cref="M:iText.Kernel.Pdf.Annot.PdfTextAnnotation.SetState(iText.Kernel.Pdf.PdfString)"/>
            .
            </remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.Annot.PdfAnnotation.Canceled">
            <summary>Annotation state.</summary>
            <remarks>
            Annotation state. See ISO-320001 12.5.6.3 "Annotation States" and Table 171 in particular.
            Also see
            <see cref="M:iText.Kernel.Pdf.Annot.PdfTextAnnotation.SetState(iText.Kernel.Pdf.PdfString)"/>
            .
            </remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.Annot.PdfAnnotation.Completed">
            <summary>Annotation state.</summary>
            <remarks>
            Annotation state. See ISO-320001 12.5.6.3 "Annotation States" and Table 171 in particular.
            Also see
            <see cref="M:iText.Kernel.Pdf.Annot.PdfTextAnnotation.SetState(iText.Kernel.Pdf.PdfString)"/>
            .
            </remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.Annot.PdfAnnotation.None">
            <summary>Annotation state.</summary>
            <remarks>
            Annotation state. See ISO-320001 12.5.6.3 "Annotation States" and Table 171 in particular.
            Also see
            <see cref="M:iText.Kernel.Pdf.Annot.PdfTextAnnotation.SetState(iText.Kernel.Pdf.PdfString)"/>
            .
            </remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.Annot.PdfAnnotation.MarkedModel">
            <summary>Annotation state model.</summary>
            <remarks>
            Annotation state model. See ISO-320001, Table 172 (StateModel key).
            Also see
            <see cref="M:iText.Kernel.Pdf.Annot.PdfTextAnnotation.SetStateModel(iText.Kernel.Pdf.PdfString)"/>
            .
            </remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.Annot.PdfAnnotation.ReviewModel">
            <summary>Annotation state model.</summary>
            <remarks>
            Annotation state model. See ISO-320001, Table 172 (StateModel key).
            Also see
            <see cref="M:iText.Kernel.Pdf.Annot.PdfTextAnnotation.SetStateModel(iText.Kernel.Pdf.PdfString)"/>
            .
            </remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfAnnotation.MakeAnnotation(iText.Kernel.Pdf.PdfObject)">
            <summary>
            Factory method that creates the type specific
            <see cref="T:iText.Kernel.Pdf.Annot.PdfAnnotation"/>
            from the given
            <see cref="T:iText.Kernel.Pdf.PdfObject"/>
            that represents annotation object. This method is useful for property reading in reading mode or
            modifying in stamping mode. See derived classes of this class to see possible specific annotation types
            created.
            </summary>
            <param name="pdfObject">
            a
            <see cref="T:iText.Kernel.Pdf.PdfObject"/>
            that represents annotation in the document.
            </param>
            <returns>
            created
            <see cref="T:iText.Kernel.Pdf.Annot.PdfAnnotation"/>
            .
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfAnnotation.GetSubtype">
            <summary>
            Gets a
            <see cref="T:iText.Kernel.Pdf.PdfName"/>
            which value is a subtype of this annotation.
            See ISO-320001 12.5.6, "Annotation Types" for the reference to the possible types.
            </summary>
            <returns>subtype of this annotation.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfAnnotation.SetLayer(iText.Kernel.Pdf.Layer.IPdfOCG)">
            <summary>Sets the layer this annotation belongs to.</summary>
            <param name="layer">the layer this annotation belongs to</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfAnnotation.GetContents">
            <summary>
            Gets the text that shall be displayed for the annotation or, if this type of annotation does not display text,
            an alternate description of the annotation’s contents in human-readable form.
            </summary>
            <returns>annotation text content.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfAnnotation.SetContents(iText.Kernel.Pdf.PdfString)">
            <summary>
            Sets the text that shall be displayed for the annotation or, if this type of annotation does not display text,
            an alternate description of the annotation’s contents in human-readable form.
            </summary>
            <param name="contents">
            a
            <see cref="T:iText.Kernel.Pdf.PdfString"/>
            containing text content to be set to the annotation.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfAnnotation.SetContents(System.String)">
            <summary>
            Sets the text that shall be displayed for the annotation or, if this type of annotation does not display text,
            an alternate description of the annotation’s contents in human-readable form.
            </summary>
            <param name="contents">
            a java
            <see cref="T:System.String"/>
            containing text content to be set to the annotation.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfAnnotation.GetPageObject">
            <summary>
            Gets a
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            that represents a page of the document on which annotation is placed,
            i.e. which has this annotation in it's /Annots array.
            </summary>
            <returns>
            
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            that is a page pdf object or null if annotation is not added to the page yet.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfAnnotation.GetPage">
            <summary>
            Gets a
            <see cref="T:iText.Kernel.Pdf.PdfPage"/>
            on which annotation is placed.
            </summary>
            <returns>
            
            <see cref="T:iText.Kernel.Pdf.PdfPage"/>
            on which annotation is placed or null if annotation is not placed yet.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfAnnotation.SetPage(iText.Kernel.Pdf.PdfPage)">
            <summary>Method that modifies annotation page property, which defines to which page annotation belongs.</summary>
            <remarks>
            Method that modifies annotation page property, which defines to which page annotation belongs.
            Keep in mind that this doesn't actually add an annotation to the page,
            it should be done via
            <see cref="M:iText.Kernel.Pdf.PdfPage.AddAnnotation(iText.Kernel.Pdf.Annot.PdfAnnotation)"/>
            .
            Also you don't need to set this property manually, this is done automatically on addition to the page.
            </remarks>
            <param name="page">
            the
            <see cref="T:iText.Kernel.Pdf.PdfPage"/>
            to which annotation will be added.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfAnnotation.GetName">
            <summary>
            Gets the annotation name, a text string uniquely identifying it among all the
            annotations on its page.
            </summary>
            <returns>
            a
            <see cref="T:iText.Kernel.Pdf.PdfString"/>
            with annotation name as it's value or null if name
            is not specified.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfAnnotation.SetName(iText.Kernel.Pdf.PdfString)">
            <summary>
            Sets the annotation name, a text string uniquely identifying it among all the
            annotations on its page.
            </summary>
            <param name="name">
            a
            <see cref="T:iText.Kernel.Pdf.PdfString"/>
            to be set as annotation name.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfAnnotation.GetDate">
            <summary>The date and time when the annotation was most recently modified.</summary>
            <remarks>
            The date and time when the annotation was most recently modified.
            This is an optional property of the annotation.
            </remarks>
            <returns>
            a
            <see cref="T:iText.Kernel.Pdf.PdfString"/>
            with the modification date as it's value or null if date is not specified.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfAnnotation.SetDate(iText.Kernel.Pdf.PdfString)">
            <summary>The date and time when the annotation was most recently modified.</summary>
            <param name="date">
            a
            <see cref="T:iText.Kernel.Pdf.PdfString"/>
            with date. The format should be a date string as described
            in ISO-320001 7.9.4, "Dates".
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfAnnotation.GetFlags">
            <summary>A set of flags specifying various characteristics of the annotation (see ISO-320001 12.5.3, "Annotation Flags").
                </summary>
            <remarks>
            A set of flags specifying various characteristics of the annotation (see ISO-320001 12.5.3, "Annotation Flags").
            For specific annotation flag constants see
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.SetFlag(System.Int32)"/>
            .
            Default value: 0.
            </remarks>
            <returns>an integer interpreted as one-bit flags specifying various characteristics of the annotation.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfAnnotation.SetFlags(System.Int32)">
            <summary>Sets a set of flags specifying various characteristics of the annotation (see ISO-320001 12.5.3, "Annotation Flags").
                </summary>
            <remarks>
            Sets a set of flags specifying various characteristics of the annotation (see ISO-320001 12.5.3, "Annotation Flags").
            On the contrary from
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.SetFlag(System.Int32)"/>
            , this method sets a complete set of enabled and disabled flags at once.
            If not set specifically the default value is 0.
            </remarks>
            <param name="flags">an integer interpreted as set of one-bit flags specifying various characteristics of the annotation.
                </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfAnnotation.SetFlag(System.Int32)">
            <summary>Sets a flag that specifies a characteristic of the annotation to enabled state (see ISO-320001 12.5.3, "Annotation Flags").
                </summary>
            <remarks>
            Sets a flag that specifies a characteristic of the annotation to enabled state (see ISO-320001 12.5.3, "Annotation Flags").
            On the contrary from
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.SetFlags(System.Int32)"/>
            , this method sets only specified flags to enabled state,
            but doesn't disable other flags.
            Possible flags:
            <ul>
            <li>
            <see cref="F:iText.Kernel.Pdf.Annot.PdfAnnotation.INVISIBLE"/>
            - If set, do not display the annotation if it does not belong to one of the
            standard annotation types and no annotation handler is available. If clear, display such unknown annotation
            using an appearance stream specified by its appearance dictionary, if any.
            </li>
            <li>
            <see cref="F:iText.Kernel.Pdf.Annot.PdfAnnotation.HIDDEN"/>
            - If set, do not display or print the annotation or allow it to interact with
            the user, regardless of its annotation type or whether an annotation handler is available.
            </li>
            <li>
            <see cref="F:iText.Kernel.Pdf.Annot.PdfAnnotation.PRINT"/>
            - If set, print the annotation when the page is printed. If clear, never print
            the annotation, regardless of whether it is displayed on the screen.
            </li>
            <li>
            <see cref="F:iText.Kernel.Pdf.Annot.PdfAnnotation.NO_ZOOM"/>
            - If set, do not scale the annotation’s appearance to match the magnification of
            the page. The location of the annotation on the page (defined by the upper-left corner of its annotation
            rectangle) shall remain fixed, regardless of the page magnification.}
            </li>
            <li>
            <see cref="F:iText.Kernel.Pdf.Annot.PdfAnnotation.NO_ROTATE"/>
            - If set, do not rotate the annotation’s appearance to match the rotation
            of the page. The upper-left corner of the annotation rectangle shall remain in a fixed location on the page,
            regardless of the page rotation.
            </li>
            <li>
            <see cref="F:iText.Kernel.Pdf.Annot.PdfAnnotation.NO_VIEW"/>
            - If set, do not display the annotation on the screen or allow it to interact
            with the user. The annotation may be printed (depending on the setting of the Print flag) but should be considered
            hidden for purposes of on-screen display and user interaction.
            </li>
            <li>
            <see cref="F:iText.Kernel.Pdf.Annot.PdfAnnotation.READ_ONLY"/>
            -  If set, do not allow the annotation to interact with the user. The annotation
            may be displayed or printed (depending on the settings of the NoView and Print flags) but should not respond to mouse
            clicks or change its appearance in response to mouse motions.
            </li>
            <li>
            <see cref="F:iText.Kernel.Pdf.Annot.PdfAnnotation.LOCKED"/>
            -  If set, do not allow the annotation to be deleted or its properties
            (including position and size) to be modified by the user. However, this flag does not restrict changes to
            the annotation’s contents, such as the value of a form field.
            </li>
            <li>
            <see cref="F:iText.Kernel.Pdf.Annot.PdfAnnotation.TOGGLE_NO_VIEW"/>
            - If set, invert the interpretation of the NoView flag for certain events.
            </li>
            <li>
            <see cref="F:iText.Kernel.Pdf.Annot.PdfAnnotation.LOCKED_CONTENTS"/>
            - If set, do not allow the contents of the annotation to be modified
            by the user. This flag does not restrict deletion of the annotation or changes to other annotation properties,
            such as position and size.
            </li>
            </ul>
            </remarks>
            <param name="flag">- an integer interpreted as set of one-bit flags which will be enabled for this annotation.
                </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfAnnotation.ResetFlag(System.Int32)">
            <summary>Resets a flag that specifies a characteristic of the annotation to disabled state (see ISO-320001 12.5.3, "Annotation Flags").
                </summary>
            <param name="flag">an integer interpreted as set of one-bit flags which will be reset to disabled state.</param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfAnnotation.HasFlag(System.Int32)">
            <summary>
            Checks if the certain flag that specifies a characteristic of the annotation
            is in enabled state (see ISO-320001 12.5.3, "Annotation Flags").
            </summary>
            <remarks>
            Checks if the certain flag that specifies a characteristic of the annotation
            is in enabled state (see ISO-320001 12.5.3, "Annotation Flags").
            This method allows only one flag to be checked at once, use constants listed in
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.SetFlag(System.Int32)"/>
            .
            </remarks>
            <param name="flag">
            an integer interpreted as set of one-bit flags. Only one bit must be set in this integer, otherwise
            exception is thrown.
            </param>
            <returns>true if the given flag is in enabled state.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfAnnotation.GetAppearanceDictionary">
            <summary>
            An appearance dictionary specifying how the annotation shall be presented visually on the page during its
            interactions with the user (see ISO-320001 12.5.5, "Appearance Streams").
            </summary>
            <remarks>
            An appearance dictionary specifying how the annotation shall be presented visually on the page during its
            interactions with the user (see ISO-320001 12.5.5, "Appearance Streams"). An appearance dictionary is a dictionary
            containing one or several appearance streams or subdictionaries.
            </remarks>
            <returns>
            an appearance
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            or null if it is not specified.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfAnnotation.GetAppearanceObject(iText.Kernel.Pdf.PdfName)">
            <summary>Specific appearance object corresponding to the specific appearance type.</summary>
            <remarks>
            Specific appearance object corresponding to the specific appearance type. This object might be either an appearance
            stream or an appearance subdictionary. In the latter case, the subdictionary defines multiple appearance streams
            corresponding to different appearance states of the annotation. See ISO-320001 12.5.5, "Appearance Streams".
            </remarks>
            <param name="appearanceType">
            a
            <see cref="T:iText.Kernel.Pdf.PdfName"/>
            specifying appearance type. Possible types are
            <see cref="F:iText.Kernel.Pdf.PdfName.N">Normal</see>
            ,
            <see cref="F:iText.Kernel.Pdf.PdfName.R">Rollover</see>
            and
            <see cref="F:iText.Kernel.Pdf.PdfName.D">Down</see>
            .
            </param>
            <returns>
            null if their is no such appearance type or an appearance object which might be either
            an appearance stream or an appearance subdictionary.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfAnnotation.GetNormalAppearanceObject">
            <summary>The normal appearance is used when the annotation is not interacting with the user.</summary>
            <remarks>
            The normal appearance is used when the annotation is not interacting with the user.
            This appearance is also used for printing the annotation.
            See also
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.GetAppearanceObject(iText.Kernel.Pdf.PdfName)"/>
            .
            </remarks>
            <returns>an appearance object which might be either an appearance stream or an appearance subdictionary.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfAnnotation.GetRolloverAppearanceObject">
            <summary>
            The rollover appearance is used when the user moves the cursor into the annotation’s active area
            without pressing the mouse button.
            </summary>
            <remarks>
            The rollover appearance is used when the user moves the cursor into the annotation’s active area
            without pressing the mouse button. If not specified normal appearance is used.
            See also
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.GetAppearanceObject(iText.Kernel.Pdf.PdfName)"/>
            .
            </remarks>
            <returns>
            null if rollover appearance is not specified or an appearance object which might be either
            an appearance stream or an appearance subdictionary.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfAnnotation.GetDownAppearanceObject">
            <summary>The down appearance is used when the mouse button is pressed or held down within the annotation’s active area.
                </summary>
            <remarks>
            The down appearance is used when the mouse button is pressed or held down within the annotation’s active area.
            If not specified normal appearance is used.
            See also
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.GetAppearanceObject(iText.Kernel.Pdf.PdfName)"/>
            .
            </remarks>
            <returns>
            null if down appearance is not specified or an appearance object which might be either
            an appearance stream or an appearance subdictionary.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfAnnotation.SetAppearance(iText.Kernel.Pdf.PdfName,iText.Kernel.Pdf.PdfDictionary)">
            <summary>Sets a specific type of the appearance.</summary>
            <remarks>
            Sets a specific type of the appearance. See
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.GetAppearanceObject(iText.Kernel.Pdf.PdfName)"/>
            and
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.GetAppearanceDictionary"/>
            for more info.
            </remarks>
            <param name="appearanceType">
            a
            <see cref="T:iText.Kernel.Pdf.PdfName"/>
            specifying appearance type. Possible types are
            <see cref="F:iText.Kernel.Pdf.PdfName.N">Normal</see>
            ,
            <see cref="F:iText.Kernel.Pdf.PdfName.R">Rollover</see>
            and
            <see cref="F:iText.Kernel.Pdf.PdfName.D">Down</see>
            .
            </param>
            <param name="appearance">an appearance object which might be either an appearance stream or an appearance subdictionary.
                </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfAnnotation.SetNormalAppearance(iText.Kernel.Pdf.PdfDictionary)">
            <summary>Sets normal appearance.</summary>
            <remarks>
            Sets normal appearance. See
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.GetNormalAppearanceObject"/>
            and
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.GetAppearanceDictionary"/>
            for more info.
            </remarks>
            <param name="appearance">an appearance object which might be either an appearance stream or an appearance subdictionary.
                </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfAnnotation.SetRolloverAppearance(iText.Kernel.Pdf.PdfDictionary)">
            <summary>Sets rollover appearance.</summary>
            <remarks>
            Sets rollover appearance. See
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.GetRolloverAppearanceObject"/>
            and
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.GetAppearanceDictionary"/>
            for more info.
            </remarks>
            <param name="appearance">an appearance object which might be either an appearance stream or an appearance subdictionary.
                </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfAnnotation.SetDownAppearance(iText.Kernel.Pdf.PdfDictionary)">
            <summary>Sets down appearance.</summary>
            <remarks>
            Sets down appearance. See
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.GetDownAppearanceObject"/>
            and
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.GetAppearanceDictionary"/>
            for more info.
            </remarks>
            <param name="appearance">an appearance object which might be either an appearance stream or an appearance subdictionary.
                </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfAnnotation.SetAppearance(iText.Kernel.Pdf.PdfName,iText.Kernel.Pdf.Annot.PdfAnnotationAppearance)">
            <summary>
            Sets a specific type of the appearance using
            <see cref="T:iText.Kernel.Pdf.Annot.PdfAnnotationAppearance"/>
            wrapper.
            This method is used to set only an appearance subdictionary. See
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.GetAppearanceObject(iText.Kernel.Pdf.PdfName)"/>
            and
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.GetAppearanceDictionary"/>
            for more info.
            </summary>
            <param name="appearanceType">
            a
            <see cref="T:iText.Kernel.Pdf.PdfName"/>
            specifying appearance type. Possible types are
            <see cref="F:iText.Kernel.Pdf.PdfName.N">Normal</see>
            ,
            <see cref="F:iText.Kernel.Pdf.PdfName.R">Rollover</see>
            and
            <see cref="F:iText.Kernel.Pdf.PdfName.D">Down</see>
            .
            </param>
            <param name="appearance">
            an appearance subdictionary wrapped in
            <see cref="T:iText.Kernel.Pdf.Annot.PdfAnnotationAppearance"/>
            .
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfAnnotation.SetNormalAppearance(iText.Kernel.Pdf.Annot.PdfAnnotationAppearance)">
            <summary>
            Sets normal appearance using
            <see cref="T:iText.Kernel.Pdf.Annot.PdfAnnotationAppearance"/>
            wrapper. This method is used to set only
            appearance subdictionary. See
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.GetNormalAppearanceObject"/>
            and
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.GetAppearanceDictionary"/>
            for more info.
            </summary>
            <param name="appearance">
            an appearance subdictionary wrapped in
            <see cref="T:iText.Kernel.Pdf.Annot.PdfAnnotationAppearance"/>
            .
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfAnnotation.SetRolloverAppearance(iText.Kernel.Pdf.Annot.PdfAnnotationAppearance)">
            <summary>
            Sets rollover appearance using
            <see cref="T:iText.Kernel.Pdf.Annot.PdfAnnotationAppearance"/>
            wrapper. This method is used to set only
            appearance subdictionary. See
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.GetRolloverAppearanceObject"/>
            and
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.GetAppearanceDictionary"/>
            for more info.
            </summary>
            <param name="appearance">
            an appearance subdictionary wrapped in
            <see cref="T:iText.Kernel.Pdf.Annot.PdfAnnotationAppearance"/>
            .
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfAnnotation.SetDownAppearance(iText.Kernel.Pdf.Annot.PdfAnnotationAppearance)">
            <summary>
            Sets down appearance using
            <see cref="T:iText.Kernel.Pdf.Annot.PdfAnnotationAppearance"/>
            wrapper. This method is used to set only
            appearance subdictionary. See
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.GetDownAppearanceObject"/>
            and
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.GetAppearanceDictionary"/>
            for more info.
            </summary>
            <param name="appearance">
            an appearance subdictionary wrapped in
            <see cref="T:iText.Kernel.Pdf.Annot.PdfAnnotationAppearance"/>
            .
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfAnnotation.GetAppearanceState">
            <summary>
            The annotation’s appearance state, which selects the applicable appearance stream
            from an appearance subdictionary if there is such.
            </summary>
            <remarks>
            The annotation’s appearance state, which selects the applicable appearance stream
            from an appearance subdictionary if there is such. See
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.GetAppearanceObject(iText.Kernel.Pdf.PdfName)"/>
            for more info.
            </remarks>
            <returns>
            a
            <see cref="T:iText.Kernel.Pdf.PdfName"/>
            which defines selected appearance state.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfAnnotation.SetAppearanceState(iText.Kernel.Pdf.PdfName)">
            <summary>
            Sets the annotation’s appearance state, which selects the applicable appearance stream
            from an appearance subdictionary.
            </summary>
            <remarks>
            Sets the annotation’s appearance state, which selects the applicable appearance stream
            from an appearance subdictionary. See
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.GetAppearanceObject(iText.Kernel.Pdf.PdfName)"/>
            for more info.
            </remarks>
            <param name="as">
            a
            <see cref="T:iText.Kernel.Pdf.PdfName"/>
            which defines appearance state to be selected.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfAnnotation"/>
            instance.
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.Pdf.Annot.PdfAnnotation.GetBorder" -->
        <member name="M:iText.Kernel.Pdf.Annot.PdfAnnotation.SetBorder(iText.Kernel.Pdf.PdfAnnotationBorder)">
            <summary>Sets the characteristics of the annotation’s border.</summary>
            <param name="border">
            an
            <see cref="T:iText.Kernel.Pdf.PdfAnnotationBorder"/>
            specifying the characteristics of the annotation’s border.
            See
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.GetBorder"/>
            for more detailes.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfAnnotation.SetBorder(iText.Kernel.Pdf.PdfArray)">
            <summary>Sets the characteristics of the annotation’s border.</summary>
            <param name="border">
            an
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            specifying the characteristics of the annotation’s border.
            See
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.GetBorder"/>
            for more detailes.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfAnnotation.GetColorObject">
            <summary>
            An array of numbers in the range 0.0 to 1.0, representing a colour used for the following purposes:
            <ul>
            <li>The background of the annotation’s icon when closed</li>
            <li>The title bar of the annotation’s pop-up window</li>
            <li>The border of a link annotation</li>
            </ul>
            The number of array elements determines the colour space in which the colour shall be defined:
            <ul>
            <li>0 - No colour; transparent</li>
            <li>1 - DeviceGray</li>
            <li>3 - DeviceRGB</li>
            <li>4 - DeviceCMYK</li>
            </ul>
            </summary>
            <returns>An array of numbers in the range 0.0 to 1.0, representing an annotation colour.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfAnnotation.SetColor(iText.Kernel.Pdf.PdfArray)">
            <summary>Sets an annotation color.</summary>
            <remarks>
            Sets an annotation color. For more details on annotation color purposes and the format
            of the passing
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            see
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.GetColorObject"/>
            .
            </remarks>
            <param name="color">an array of numbers in the range 0.0 to 1.0, specifying color.</param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfAnnotation.SetColor(System.Single[])">
            <summary>Sets an annotation color.</summary>
            <remarks>
            Sets an annotation color. For more details on annotation color purposes and the format
            of the passing array see
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.GetColorObject"/>
            .
            </remarks>
            <param name="color">an array of numbers in the range 0.0 to 1.0, specifying color.</param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfAnnotation.SetColor(iText.Kernel.Colors.Color)">
            <summary>Sets an annotation color.</summary>
            <remarks>
            Sets an annotation color. For more details on annotation color purposes
            see
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.GetColorObject"/>
            .
            </remarks>
            <param name="color">
            
            <see cref="T:iText.Kernel.Colors.Color"/>
            object of the either
            <see cref="T:iText.Kernel.Colors.DeviceGray"/>
            ,
            <see cref="T:iText.Kernel.Colors.DeviceRgb"/>
            or
            <see cref="T:iText.Kernel.Colors.DeviceCmyk"/>
            type.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfAnnotation.GetStructParentIndex">
            <summary>
            The integer key of the annotation’s entry in the structural parent tree
            (see ISO-320001 14.7.4.4, "Finding Structure Elements from Content Items").
            </summary>
            <returns>integer key in structural parent tree or -1 if annotation is not tagged.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfAnnotation.SetStructParentIndex(System.Int32)">
            <summary>
            Sets he integer key of the annotation’s entry in the structural parent tree
            (see ISO-320001 14.7.4.4, "Finding Structure Elements from Content Items").
            </summary>
            <remarks>
            Sets he integer key of the annotation’s entry in the structural parent tree
            (see ISO-320001 14.7.4.4, "Finding Structure Elements from Content Items").
            Note: Normally, there is no need to take care of this manually, struct parent index is set automatically
            if annotation is added to the tagged document's page.
            </remarks>
            <param name="structParentIndex">
            integer which is to be the key of the annotation's entry
            in structural parent tree.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfAnnotation.SetTitle(iText.Kernel.Pdf.PdfString)">
            <summary>Sets annotation title.</summary>
            <remarks>Sets annotation title. This property affects not all annotation types.</remarks>
            <param name="title">
            a
            <see cref="T:iText.Kernel.Pdf.PdfString"/>
            which value is to be annotation title.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfAnnotation.GetTitle">
            <summary>Annotation title.</summary>
            <remarks>
            Annotation title. For example for markup annotations, the title is the text label that shall be displayed in the
            title bar of the annotation’s pop-up window when open and active. For movie annotation Movie actions
            (ISO-320001 12.6.4.9, "Movie Actions") may use this title to reference the movie annotation.
            </remarks>
            <returns>
            
            <see cref="T:iText.Kernel.Pdf.PdfString"/>
            which value is an annotation title or null if it isn't specifed.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfAnnotation.SetRectangle(iText.Kernel.Pdf.PdfArray)">
            <summary>The annotation rectangle, defining the location of the annotation on the page in default user space units.
                </summary>
            <param name="array">
            a
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            which specifies a rectangle by two diagonally opposite corners.
            Typically, the array is of form [llx lly urx ury].
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfAnnotation.GetRectangle">
            <summary>The annotation rectangle, defining the location of the annotation on the page in default user space units.
                </summary>
            <returns>
            a
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            which specifies a rectangle by two diagonally opposite corners.
            Typically, the array is of form [llx lly urx ury].
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfAnnotation.GetLang">
            <summary>PDF 2.0.</summary>
            <remarks>
            PDF 2.0. A language identifier overriding the document’s language identifier to
            specify the natural language for all text in the annotation except where overridden by
            other explicit language specifications
            </remarks>
            <returns>the lang entry</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfAnnotation.SetLang(System.String)">
            <summary>PDF 2.0.</summary>
            <remarks>
            PDF 2.0. A language identifier overriding the document’s language identifier to
            specify the natural language for all text in the annotation except where overridden by
            other explicit language specifications
            </remarks>
            <param name="lang">language identifier</param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfAnnotation"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfAnnotation.GetBlendMode">
            <summary>PDF 2.0.</summary>
            <remarks>PDF 2.0. The blend mode that shall be used when painting the annotation onto the page</remarks>
            <returns>the blend mode</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfAnnotation.SetBlendMode(iText.Kernel.Pdf.PdfName)">
            <summary>PDF 2.0.</summary>
            <remarks>PDF 2.0. The blend mode that shall be used when painting the annotation onto the page</remarks>
            <param name="blendMode">blend mode</param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfAnnotation"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfAnnotation.GetNonStrokingOpacity">
            <summary>PDF 2.0.</summary>
            <remarks>
            PDF 2.0. When regenerating the annotation's appearance stream, this is the
            opacity value that shall be used for all nonstroking
            operations on all visible elements of the annotation in its closed state (including its
            background and border) but not the popup window that appears when the annotation is
            opened.
            </remarks>
            <returns>opacity value for nonstroking operations. Returns 1.0 (default value) if entry is not present</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfAnnotation.SetNonStrokingOpacity(System.Single)">
            <summary>PDF 2.0.</summary>
            <remarks>
            PDF 2.0. When regenerating the annotation's appearance stream, this is the
            opacity value that shall be used for all nonstroking
            operations on all visible elements of the annotation in its closed state (including its
            background and border) but not the popup window that appears when the annotation is
            opened.
            </remarks>
            <param name="nonStrokingOpacity">opacity for nonstroking operations</param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfAnnotation"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfAnnotation.GetStrokingOpacity">
            <summary>PDF 2.0.</summary>
            <remarks>
            PDF 2.0. When regenerating the annotation's appearance stream, this is the
            opacity value that shall be used for stroking all visible
            elements of the annotation in its closed state, including its background and border, but
            not the popup window that appears when the annotation is opened.
            </remarks>
            <returns>opacity for stroking operations, including background and border</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfAnnotation.SetStrokingOpacity(System.Single)">
            <summary>PDF 2.0.</summary>
            <remarks>
            PDF 2.0. When regenerating the annotation's appearance stream, this is the
            opacity value that shall be used for stroking all visible
            elements of the annotation in its closed state, including its background and border, but
            not the popup window that appears when the annotation is opened.
            </remarks>
            <param name="strokingOpacity">opacity for stroking operations, including background and border</param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfAnnotation"/>
            object
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfAnnotation.Put(iText.Kernel.Pdf.PdfName,iText.Kernel.Pdf.PdfObject)">
            <summary>
            Inserts the value into into the underlying
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            of this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfAnnotation"/>
            and associates it
            with the specified key. If the key is already present in this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfAnnotation"/>
            , this method will override
            the old value with the specified one.
            </summary>
            <param name="key">key to insert or to override</param>
            <param name="value">the value to associate with the specified key</param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfAnnotation.Remove(iText.Kernel.Pdf.PdfName)">
            <summary>
            Removes the specified key from the underlying
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            of this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfAnnotation"/>
            .
            </summary>
            <param name="key">key to be removed</param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfAnnotation"/>
            instance.
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.Pdf.Annot.PdfAnnotation.AddAssociatedFile(iText.Kernel.Pdf.Filespec.PdfFileSpec)" -->
        <member name="M:iText.Kernel.Pdf.Annot.PdfAnnotation.GetAssociatedFiles(System.Boolean)">
            <summary>Returns files associated with PDF annotation.</summary>
            <param name="create">iText will create AF array if it doesn't exist and create value is true</param>
            <returns>associated files array.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfAnnotation.Flush">
            <summary>
            To manually flush a
            <c>PdfObject</c>
            behind this wrapper, you have to ensure
            that this object is added to the document, i.e. it has an indirect reference.
            Basically this means that before flushing you need to explicitly call
            <see cref="M:iText.Kernel.Pdf.PdfObjectWrapper`1.MakeIndirect(iText.Kernel.Pdf.PdfDocument)"/>
            .
            For example: wrapperInstance.makeIndirect(document).flush();
            Note that not every wrapper require this, only those that have such warning in documentation.
            </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfCaretAnnotation.#ctor(iText.Kernel.Pdf.PdfDictionary)">
            <summary>
            see
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.MakeAnnotation(iText.Kernel.Pdf.PdfObject)"/>
            </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfCaretAnnotation.GetRectangleDifferences">
            <summary>
            A set of four numbers describing the numerical differences between two rectangles:
            the Rect entry of the annotation and the actual boundaries of the underlying caret.
            </summary>
            <returns>
            null if not specified, otherwise a
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            with four numbers which correspond to the
            differences in default user space between the left, top, right, and bottom coordinates of Rect and those
            of the inner rectangle, respectively.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfCaretAnnotation.SetRectangleDifferences(iText.Kernel.Pdf.PdfArray)">
            <summary>
            A set of four numbers describing the numerical differences between two rectangles:
            the Rect entry of the annotation and the actual boundaries of the underlying caret.
            </summary>
            <param name="rect">
            a
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            with four numbers which correspond to the differences in default user space between
            the left, top, right, and bottom coordinates of Rect and those of the inner rectangle, respectively.
            Each value shall be greater than or equal to 0. The sum of the top and bottom differences shall be
            less than the height of Rect, and the sum of the left and right differences shall be less than
            the width of Rect.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfCaretAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfCircleAnnotation.#ctor(iText.Kernel.Pdf.PdfDictionary)">
            <summary>
            see
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.MakeAnnotation(iText.Kernel.Pdf.PdfObject)"/>
            </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfCircleAnnotation.GetBorderStyle">
            <summary>The dictionaries for some annotation types (such as free text and polygon annotations) can include the BS entry.
                </summary>
            <remarks>
            The dictionaries for some annotation types (such as free text and polygon annotations) can include the BS entry.
            That entry specifies a border style dictionary that has more settings than the array specified for the Border
            entry (see
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.GetBorder"/>
            ). If an annotation dictionary includes the BS entry, then the Border
            entry is ignored. If annotation includes AP (see
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.GetAppearanceDictionary"/>
            ) it takes
            precedence over the BS entry. For more info on BS entry see ISO-320001, Table 166.
            </remarks>
            <returns>
            
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            which is a border style dictionary or null if it is not specified.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfCircleAnnotation.SetBorderStyle(iText.Kernel.Pdf.PdfDictionary)">
            <summary>
            Sets border style dictionary that has more settings than the array specified for the Border entry (
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.GetBorder"/>
            ).
            See ISO-320001, Table 166 and
            <see cref="M:iText.Kernel.Pdf.Annot.PdfCircleAnnotation.GetBorderStyle"/>
            for more info.
            </summary>
            <param name="borderStyle">
            a border style dictionary specifying the line width and dash pattern that shall be used
            in drawing the annotation’s border.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfCircleAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfCircleAnnotation.SetBorderStyle(iText.Kernel.Pdf.PdfName)">
            <summary>Setter for the annotation's preset border style.</summary>
            <remarks>
            Setter for the annotation's preset border style. Possible values are
            <ul>
            <li>
            <see cref="F:iText.Kernel.Pdf.Annot.PdfAnnotation.STYLE_SOLID"/>
            - A solid rectangle surrounding the annotation.</li>
            <li>
            <see cref="F:iText.Kernel.Pdf.Annot.PdfAnnotation.STYLE_DASHED"/>
            - A dashed rectangle surrounding the annotation.</li>
            <li>
            <see cref="F:iText.Kernel.Pdf.Annot.PdfAnnotation.STYLE_BEVELED"/>
            - A simulated embossed rectangle that appears to be raised above the surface of the page.</li>
            <li>
            <see cref="F:iText.Kernel.Pdf.Annot.PdfAnnotation.STYLE_INSET"/>
            - A simulated engraved rectangle that appears to be recessed below the surface of the page.</li>
            <li>
            <see cref="F:iText.Kernel.Pdf.Annot.PdfAnnotation.STYLE_UNDERLINE"/>
            - A single line along the bottom of the annotation rectangle.</li>
            </ul>
            See also ISO-320001, Table 166.
            </remarks>
            <param name="style">The new value for the annotation's border style.</param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfCircleAnnotation"/>
            instance.
            </returns>
            <seealso cref="M:iText.Kernel.Pdf.Annot.PdfCircleAnnotation.GetBorderStyle"/>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfCircleAnnotation.SetDashPattern(iText.Kernel.Pdf.PdfArray)">
            <summary>Setter for the annotation's preset dashed border style.</summary>
            <remarks>
            Setter for the annotation's preset dashed border style. This property has affect only if
            <see cref="F:iText.Kernel.Pdf.Annot.PdfAnnotation.STYLE_DASHED"/>
            style was used for the annotation border style (see
            <see cref="M:iText.Kernel.Pdf.Annot.PdfCircleAnnotation.SetBorderStyle(iText.Kernel.Pdf.PdfName)"/>
            .
            See ISO-320001 8.4.3.6, "Line Dash Pattern" for the format in which dash pattern shall be specified.
            </remarks>
            <param name="dashPattern">
            a dash array defining a pattern of dashes and gaps that
            shall be used in drawing a dashed border.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfCircleAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfCircleAnnotation.GetRectangleDifferences">
            <summary>
            A set of four numbers describing the numerical differences between two rectangles:
            the Rect entry of the annotation and the actual boundaries of the underlying circle.
            </summary>
            <returns>
            null if not specified, otherwise a
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            with four numbers which correspond to the
            differences in default user space between the left, top, right, and bottom coordinates of Rect and those
            of the inner rectangle, respectively.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfCircleAnnotation.SetRectangleDifferences(iText.Kernel.Pdf.PdfArray)">
            <summary>
            A set of four numbers describing the numerical differences between two rectangles:
            the Rect entry of the annotation and the actual boundaries of the underlying circle.
            </summary>
            <param name="rect">
            a
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            with four numbers which correspond to the differences in default user space between
            the left, top, right, and bottom coordinates of Rect and those of the inner rectangle, respectively.
            Each value shall be greater than or equal to 0. The sum of the top and bottom differences shall be
            less than the height of Rect, and the sum of the left and right differences shall be less than
            the width of Rect.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfCircleAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfCircleAnnotation.GetBorderEffect">
            <summary>Gets a border effect dictionary that specifies an effect that shall be applied to the border of the annotations.
                </summary>
            <returns>
            a
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            , which is a border effect dictionary (see ISO-320001, Table 167).
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfCircleAnnotation.SetBorderEffect(iText.Kernel.Pdf.PdfDictionary)">
            <summary>Sets a border effect dictionary that specifies an effect that shall be applied to the border of the annotations.
                </summary>
            <param name="borderEffect">
            a
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            which contents shall be specified in accordance to ISO-320001, Table 167.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfCircleAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfCircleAnnotation.GetInteriorColor">
            <summary>The interior color which is used to fill the annotation's ellipse.</summary>
            <returns>
            
            <see cref="T:iText.Kernel.Colors.Color"/>
            of either
            <see cref="T:iText.Kernel.Colors.DeviceGray"/>
            ,
            <see cref="T:iText.Kernel.Colors.DeviceRgb"/>
            or
            <see cref="T:iText.Kernel.Colors.DeviceCmyk"/>
            type which defines
            interior color of the annotation, or null if interior color is not specified.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfCircleAnnotation.SetInteriorColor(iText.Kernel.Pdf.PdfArray)">
            <summary>
            An array of numbers in the range 0.0 to 1.0 specifying the interior color
            which is used to fill the annotation's ellipse.
            </summary>
            <param name="interiorColor">
            a
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            of numbers in the range 0.0 to 1.0. The number of array elements determines
            the colour space in which the colour is defined: 0 - No colour, transparent; 1 - DeviceGray,
            3 - DeviceRGB, 4 - DeviceCMYK. For the
            <see cref="T:iText.Kernel.Pdf.Annot.PdfRedactAnnotation"/>
            number of elements shall be
            equal to 3 (which defines DeviceRGB colour space).
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfCircleAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfCircleAnnotation.SetInteriorColor(System.Single[])">
            <summary>
            An array of numbers in the range 0.0 to 1.0 specifying the interior color
            which is used to fill the annotation's ellipse.
            </summary>
            <param name="interiorColor">an array of floats in the range 0.0 to 1.0.</param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfCircleAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfFileAttachmentAnnotation.#ctor(iText.Kernel.Pdf.PdfDictionary)">
            <summary>
            see
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.MakeAnnotation(iText.Kernel.Pdf.PdfObject)"/>
            </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfFileAttachmentAnnotation.GetIconName">
            <summary>The name of an icon that is used in displaying the annotation.</summary>
            <remarks>
            The name of an icon that is used in displaying the annotation. Possible values are different for different
            annotation types. See
            <see cref="M:iText.Kernel.Pdf.Annot.PdfFileAttachmentAnnotation.SetIconName(iText.Kernel.Pdf.PdfName)"/>
            .
            </remarks>
            <returns>
            a
            <see cref="T:iText.Kernel.Pdf.PdfName"/>
            that specifies the icon for displaying annotation, or null if icon name is not specified.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfFileAttachmentAnnotation.SetIconName(iText.Kernel.Pdf.PdfName)">
            <summary>The name of an icon that is used in displaying the annotation.</summary>
            <param name="name">
            a
            <see cref="T:iText.Kernel.Pdf.PdfName"/>
            that specifies the icon for displaying annotation. Possible values are different
            for different annotation types:
            <ul>
            <li>GraphPushPin</li>
            <li>PaperclipTag</li>
            </ul>
            Additional names may be supported as well.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfFileAttachmentAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="F:iText.Kernel.Pdf.Annot.PdfFreeTextAnnotation.LEFT_JUSTIFIED">
            <summary>Text justification options.</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfFreeTextAnnotation.#ctor(iText.Kernel.Geom.Rectangle,iText.Kernel.Pdf.PdfString)">
            <summary>Creates new instance</summary>
            <param name="rect">- rectangle that specifies annotation position and bounds on page</param>
            <param name="contents">- the displayed text</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfFreeTextAnnotation.#ctor(iText.Kernel.Pdf.PdfDictionary)">
            <summary>
            see
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.MakeAnnotation(iText.Kernel.Pdf.PdfObject)"/>
            </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfFreeTextAnnotation.GetDefaultAppearance">
            <summary>The default appearance string that shall be used in formatting the text.</summary>
            <remarks>The default appearance string that shall be used in formatting the text. See ISO-32001 12.7.3.3, "Variable Text".
                </remarks>
            <returns>
            a
            <see cref="T:iText.Kernel.Pdf.PdfString"/>
            that specifies the default appearance, or null if default appereance is not specified.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfFreeTextAnnotation.SetDefaultAppearance(iText.Kernel.Pdf.PdfString)">
            <summary>The default appearance string that shall be used in formatting the text.</summary>
            <remarks>The default appearance string that shall be used in formatting the text. See ISO-32001 12.7.3.3, "Variable Text".
                </remarks>
            <param name="appearanceString">
            a
            <see cref="T:iText.Kernel.Pdf.PdfString"/>
            that specifies the default appearance.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfFreeTextAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfFreeTextAnnotation.GetJustification">
            <summary>
            A code specifying the form of quadding (justification) that is used in displaying the annotation's text:
            0 - Left-justified, 1 - Centered, 2 - Right-justified.
            </summary>
            <remarks>
            A code specifying the form of quadding (justification) that is used in displaying the annotation's text:
            0 - Left-justified, 1 - Centered, 2 - Right-justified. Default value: 0 (left-justified).
            </remarks>
            <returns>a code specifying the form of quadding (justification), returns the default value if not explicitly specified.
                </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfFreeTextAnnotation.SetJustification(System.Int32)">
            <summary>
            A code specifying the form of quadding (justification) that is used in displaying the annotation's text:
            0 - Left-justified, 1 - Centered, 2 - Right-justified.
            </summary>
            <remarks>
            A code specifying the form of quadding (justification) that is used in displaying the annotation's text:
            0 - Left-justified, 1 - Centered, 2 - Right-justified. Default value: 0 (left-justified).
            </remarks>
            <param name="justification">a code specifying the form of quadding (justification).</param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfFreeTextAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfFreeTextAnnotation.GetBorderStyle">
            <summary>The dictionaries for some annotation types (such as free text and polygon annotations) can include the BS entry.
                </summary>
            <remarks>
            The dictionaries for some annotation types (such as free text and polygon annotations) can include the BS entry.
            That entry specifies a border style dictionary that has more settings than the array specified for the Border
            entry (see
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.GetBorder"/>
            ). If an annotation dictionary includes the BS entry, then the Border
            entry is ignored. If annotation includes AP (see
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.GetAppearanceDictionary"/>
            ) it takes
            precedence over the BS entry. For more info on BS entry see ISO-320001, Table 166.
            </remarks>
            <returns>
            
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            which is a border style dictionary or null if it is not specified.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfFreeTextAnnotation.SetBorderStyle(iText.Kernel.Pdf.PdfDictionary)">
            <summary>
            Sets border style dictionary that has more settings than the array specified for the Border entry (
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.GetBorder"/>
            ).
            See ISO-320001, Table 166 and
            <see cref="M:iText.Kernel.Pdf.Annot.PdfFreeTextAnnotation.GetBorderStyle"/>
            for more info.
            </summary>
            <param name="borderStyle">
            a border style dictionary specifying the line width and dash pattern that shall be used
            in drawing the annotation’s border.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfFreeTextAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfFreeTextAnnotation.SetBorderStyle(iText.Kernel.Pdf.PdfName)">
            <summary>Setter for the annotation's preset border style.</summary>
            <remarks>
            Setter for the annotation's preset border style. Possible values are
            <ul>
            <li>
            <see cref="F:iText.Kernel.Pdf.Annot.PdfAnnotation.STYLE_SOLID"/>
            - A solid rectangle surrounding the annotation.</li>
            <li>
            <see cref="F:iText.Kernel.Pdf.Annot.PdfAnnotation.STYLE_DASHED"/>
            - A dashed rectangle surrounding the annotation.</li>
            <li>
            <see cref="F:iText.Kernel.Pdf.Annot.PdfAnnotation.STYLE_BEVELED"/>
            - A simulated embossed rectangle that appears to be raised above the surface of the page.</li>
            <li>
            <see cref="F:iText.Kernel.Pdf.Annot.PdfAnnotation.STYLE_INSET"/>
            - A simulated engraved rectangle that appears to be recessed below the surface of the page.</li>
            <li>
            <see cref="F:iText.Kernel.Pdf.Annot.PdfAnnotation.STYLE_UNDERLINE"/>
            - A single line along the bottom of the annotation rectangle.</li>
            </ul>
            See also ISO-320001, Table 166.
            </remarks>
            <param name="style">The new value for the annotation's border style.</param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfFreeTextAnnotation"/>
            instance.
            </returns>
            <seealso cref="M:iText.Kernel.Pdf.Annot.PdfFreeTextAnnotation.GetBorderStyle"/>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfFreeTextAnnotation.SetDashPattern(iText.Kernel.Pdf.PdfArray)">
            <summary>Setter for the annotation's preset dashed border style.</summary>
            <remarks>
            Setter for the annotation's preset dashed border style. This property has affect only if
            <see cref="F:iText.Kernel.Pdf.Annot.PdfAnnotation.STYLE_DASHED"/>
            style was used for the annotation border style (see
            <see cref="M:iText.Kernel.Pdf.Annot.PdfFreeTextAnnotation.SetBorderStyle(iText.Kernel.Pdf.PdfName)"/>
            .
            See ISO-320001 8.4.3.6, "Line Dash Pattern" for the format in which dash pattern shall be specified.
            </remarks>
            <param name="dashPattern">
            a dash array defining a pattern of dashes and gaps that
            shall be used in drawing a dashed border.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfFreeTextAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfFreeTextAnnotation.GetRectangleDifferences">
            <summary>
            A set of four numbers describing the numerical differences between two rectangles:
            the Rect entry of the annotation and the inner rectangle where the annotation's text should be displayed
            </summary>
            <returns>
            null if not specified, otherwise a
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            with four numbers which correspond to the
            differences in default user space between the left, top, right, and bottom coordinates of Rect and those
            of the inner rectangle, respectively.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfFreeTextAnnotation.SetRectangleDifferences(iText.Kernel.Pdf.PdfArray)">
            <summary>
            A set of four numbers describing the numerical differences between two rectangles:
            the Rect entry of the annotation and the inner rectangle where the annotation's text should be displayed
            </summary>
            <param name="rect">
            a
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            with four numbers which correspond to the differences in default user space between
            the left, top, right, and bottom coordinates of Rect and those of the inner rectangle, respectively.
            Each value shall be greater than or equal to 0. The sum of the top and bottom differences shall be
            less than the height of Rect, and the sum of the left and right differences shall be less than
            the width of Rect.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfFreeTextAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfFreeTextAnnotation.GetBorderEffect">
            <summary>A border effect dictionary that specifies an effect that shall be applied to the border of the annotations.
                </summary>
            <returns>
            a
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            , which is a border effect dictionary (see ISO-320001, Table 167).
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfFreeTextAnnotation.SetBorderEffect(iText.Kernel.Pdf.PdfDictionary)">
            <summary>Sets a border effect dictionary that specifies an effect that shall be applied to the border of the annotations.
                </summary>
            <param name="borderEffect">
            a
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            which contents shall be specified in accordance to ISO-320001, Table 167.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfFreeTextAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfInkAnnotation.#ctor(iText.Kernel.Pdf.PdfDictionary)">
            <summary>
            see
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.MakeAnnotation(iText.Kernel.Pdf.PdfObject)"/>
            </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfInkAnnotation.GetBorderStyle">
            <summary>The dictionaries for some annotation types (such as free text and polygon annotations) can include the BS entry.
                </summary>
            <remarks>
            The dictionaries for some annotation types (such as free text and polygon annotations) can include the BS entry.
            That entry specifies a border style dictionary that has more settings than the array specified for the Border
            entry (see
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.GetBorder"/>
            ). If an annotation dictionary includes the BS entry, then the Border
            entry is ignored. If annotation includes AP (see
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.GetAppearanceDictionary"/>
            ) it takes
            precedence over the BS entry. For more info on BS entry see ISO-320001, Table 166.
            </remarks>
            <returns>
            
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            which is a border style dictionary or null if it is not specified.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfInkAnnotation.SetBorderStyle(iText.Kernel.Pdf.PdfDictionary)">
            <summary>
            Sets border style dictionary that has more settings than the array specified for the Border entry (
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.GetBorder"/>
            ).
            See ISO-320001, Table 166 and
            <see cref="M:iText.Kernel.Pdf.Annot.PdfInkAnnotation.GetBorderStyle"/>
            for more info.
            </summary>
            <param name="borderStyle">
            a border style dictionary specifying the line width and dash pattern that shall be used
            in drawing the annotation’s border.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfInkAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfInkAnnotation.SetBorderStyle(iText.Kernel.Pdf.PdfName)">
            <summary>Setter for the annotation's preset border style.</summary>
            <remarks>
            Setter for the annotation's preset border style. Possible values are
            <ul>
            <li>
            <see cref="F:iText.Kernel.Pdf.Annot.PdfAnnotation.STYLE_SOLID"/>
            - A solid rectangle surrounding the annotation.</li>
            <li>
            <see cref="F:iText.Kernel.Pdf.Annot.PdfAnnotation.STYLE_DASHED"/>
            - A dashed rectangle surrounding the annotation.</li>
            <li>
            <see cref="F:iText.Kernel.Pdf.Annot.PdfAnnotation.STYLE_BEVELED"/>
            - A simulated embossed rectangle that appears to be raised above the surface of the page.</li>
            <li>
            <see cref="F:iText.Kernel.Pdf.Annot.PdfAnnotation.STYLE_INSET"/>
            - A simulated engraved rectangle that appears to be recessed below the surface of the page.</li>
            <li>
            <see cref="F:iText.Kernel.Pdf.Annot.PdfAnnotation.STYLE_UNDERLINE"/>
            - A single line along the bottom of the annotation rectangle.</li>
            </ul>
            See also ISO-320001, Table 166.
            </remarks>
            <param name="style">The new value for the annotation's border style.</param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfInkAnnotation"/>
            instance.
            </returns>
            <seealso cref="M:iText.Kernel.Pdf.Annot.PdfInkAnnotation.GetBorderStyle"/>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfInkAnnotation.SetDashPattern(iText.Kernel.Pdf.PdfArray)">
            <summary>Setter for the annotation's preset dashed border style.</summary>
            <remarks>
            Setter for the annotation's preset dashed border style. This property has affect only if
            <see cref="F:iText.Kernel.Pdf.Annot.PdfAnnotation.STYLE_DASHED"/>
            style was used for the annotation border style (see
            <see cref="M:iText.Kernel.Pdf.Annot.PdfInkAnnotation.SetBorderStyle(iText.Kernel.Pdf.PdfName)"/>
            .
            See ISO-320001 8.4.3.6, "Line Dash Pattern" for the format in which dash pattern shall be specified.
            </remarks>
            <param name="dashPattern">
            a dash array defining a pattern of dashes and gaps that
            shall be used in drawing a dashed border.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfInkAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="T:iText.Kernel.Pdf.Annot.PdfLineAnnotation">
            <summary>The purpose of a line annotation is to display a single straight line on the page.</summary>
            <remarks>
            The purpose of a line annotation is to display a single straight line on the page.
            When opened, it displays a pop-up window containing the text of the associated note.
            See also ISO-320001 12.5.6.7 "Line Annotations".
            </remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfLineAnnotation.#ctor(iText.Kernel.Geom.Rectangle,System.Single[])">
            <summary>
            Creates a
            <see cref="T:iText.Kernel.Pdf.Annot.PdfLineAnnotation"/>
            instance.
            </summary>
            <param name="rect">
            the annotation rectangle, defining the location of the annotation on the page
            in default user space units. See
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.SetRectangle(iText.Kernel.Pdf.PdfArray)"/>
            .
            </param>
            <param name="line">
            an array of four numbers, [x1 y1 x2 y2], specifying the starting and ending coordinates
            of the line in default user space. See also
            <see cref="M:iText.Kernel.Pdf.Annot.PdfLineAnnotation.GetLine"/>
            .
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfLineAnnotation.#ctor(iText.Kernel.Pdf.PdfDictionary)">
            <summary>
            see
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.MakeAnnotation(iText.Kernel.Pdf.PdfObject)"/>
            </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfLineAnnotation.GetSubtype">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfLineAnnotation.GetLine">
            <summary>
            An array of four numbers, [x1 y1 x2 y2], specifying the starting and ending coordinates of the line
            in default user space.
            </summary>
            <remarks>
            An array of four numbers, [x1 y1 x2 y2], specifying the starting and ending coordinates of the line
            in default user space. If the
            <see cref="F:iText.Kernel.Pdf.PdfName.LL"/>
            entry is present, this value represents
            the endpoints of the leader lines rather than the endpoints of the line itself.
            </remarks>
            <returns>An array of four numbers specifying the starting and ending coordinates of the line in default user space.
                </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfLineAnnotation.GetBorderStyle">
            <summary>The dictionaries for some annotation types (such as free text and polygon annotations) can include the BS entry.
                </summary>
            <remarks>
            The dictionaries for some annotation types (such as free text and polygon annotations) can include the BS entry.
            That entry specifies a border style dictionary that has more settings than the array specified for the Border
            entry (see
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.GetBorder"/>
            ). If an annotation dictionary includes the BS entry, then the Border
            entry is ignored. If annotation includes AP (see
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.GetAppearanceDictionary"/>
            ) it takes
            precedence over the BS entry. For more info on BS entry see ISO-320001, Table 166.
            </remarks>
            <returns>
            
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            which is a border style dictionary or null if it is not specified.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfLineAnnotation.SetBorderStyle(iText.Kernel.Pdf.PdfDictionary)">
            <summary>
            Sets border style dictionary that has more settings than the array specified for the Border entry (
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.GetBorder"/>
            ).
            See ISO-320001, Table 166 and
            <see cref="M:iText.Kernel.Pdf.Annot.PdfLineAnnotation.GetBorderStyle"/>
            for more info.
            </summary>
            <param name="borderStyle">
            a border style dictionary specifying the line width and dash pattern that shall be used
            in drawing the annotation’s border.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfLineAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfLineAnnotation.SetBorderStyle(iText.Kernel.Pdf.PdfName)">
            <summary>Setter for the annotation's preset border style.</summary>
            <remarks>
            Setter for the annotation's preset border style. Possible values are
            <ul>
            <li>
            <see cref="F:iText.Kernel.Pdf.Annot.PdfAnnotation.STYLE_SOLID"/>
            - A solid rectangle surrounding the annotation.</li>
            <li>
            <see cref="F:iText.Kernel.Pdf.Annot.PdfAnnotation.STYLE_DASHED"/>
            - A dashed rectangle surrounding the annotation.</li>
            <li>
            <see cref="F:iText.Kernel.Pdf.Annot.PdfAnnotation.STYLE_BEVELED"/>
            - A simulated embossed rectangle that appears to be raised above the surface of the page.</li>
            <li>
            <see cref="F:iText.Kernel.Pdf.Annot.PdfAnnotation.STYLE_INSET"/>
            - A simulated engraved rectangle that appears to be recessed below the surface of the page.</li>
            <li>
            <see cref="F:iText.Kernel.Pdf.Annot.PdfAnnotation.STYLE_UNDERLINE"/>
            - A single line along the bottom of the annotation rectangle.</li>
            </ul>
            See also ISO-320001, Table 166.
            </remarks>
            <param name="style">The new value for the annotation's border style.</param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfLineAnnotation"/>
            instance.
            </returns>
            <seealso cref="M:iText.Kernel.Pdf.Annot.PdfLineAnnotation.GetBorderStyle"/>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfLineAnnotation.SetDashPattern(iText.Kernel.Pdf.PdfArray)">
            <summary>Setter for the annotation's preset dashed border style.</summary>
            <remarks>
            Setter for the annotation's preset dashed border style. This property has affect only if
            <see cref="F:iText.Kernel.Pdf.Annot.PdfAnnotation.STYLE_DASHED"/>
            style was used for the annotation border style (see
            <see cref="M:iText.Kernel.Pdf.Annot.PdfLineAnnotation.SetBorderStyle(iText.Kernel.Pdf.PdfName)"/>
            .
            See ISO-320001 8.4.3.6, "Line Dash Pattern" for the format in which dash pattern shall be specified.
            </remarks>
            <param name="dashPattern">
            a dash array defining a pattern of dashes and gaps that
            shall be used in drawing a dashed border.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfLineAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfLineAnnotation.GetLineEndingStyles">
            <summary>An array of two names specifying the line ending styles that is used in drawing the line.</summary>
            <remarks>
            An array of two names specifying the line ending styles that is used in drawing the line.
            The first and second elements of the array shall specify the line ending styles for the endpoints defined,
            respectively, by the first and second pairs of coordinates, (x1, y1) and (x2, y2), in the
            <see cref="F:iText.Kernel.Pdf.PdfName.L"/>
            array
            (see
            <see cref="M:iText.Kernel.Pdf.Annot.PdfLineAnnotation.GetLine"/>
            . For possible values see
            <see cref="M:iText.Kernel.Pdf.Annot.PdfLineAnnotation.SetLineEndingStyles(iText.Kernel.Pdf.PdfArray)"/>
            .
            </remarks>
            <returns>
            An array of two names specifying the line ending styles that is used in drawing the line; or null if line
            endings style is not explicitly defined, default value is [/None /None].
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfLineAnnotation.SetLineEndingStyles(iText.Kernel.Pdf.PdfArray)">
            <summary>Sets the line ending styles that are used in drawing the line.</summary>
            <remarks>
            Sets the line ending styles that are used in drawing the line.
            The first and second elements of the array shall specify the line ending styles for the endpoints defined,
            respectively, by the first and second pairs of coordinates, (x1, y1) and (x2, y2), in the
            <see cref="F:iText.Kernel.Pdf.PdfName.L"/>
            array
            (see
            <see cref="M:iText.Kernel.Pdf.Annot.PdfLineAnnotation.GetLine"/>
            . Possible values for styles are:
            <ul>
            <li>
            <see cref="F:iText.Kernel.Pdf.PdfName.Square"/>
            - A square filled with the annotation's interior color, if any; </li>
            <li>
            <see cref="F:iText.Kernel.Pdf.PdfName.Circle"/>
            - A circle filled with the annotation's interior color, if any; </li>
            <li>
            <see cref="F:iText.Kernel.Pdf.PdfName.Diamond"/>
            - A diamond shape filled with the annotation's interior color, if any; </li>
            <li>
            <see cref="F:iText.Kernel.Pdf.PdfName.OpenArrow"/>
            - Two short lines meeting in an acute angle to form an open arrowhead; </li>
            <li>
            <see cref="F:iText.Kernel.Pdf.PdfName.ClosedArrow"/>
            - Two short lines meeting in an acute angle as in the
            <see cref="F:iText.Kernel.Pdf.PdfName.OpenArrow"/>
            style and
            connected by a third line to form a triangular closed arrowhead filled with the annotation's interior color, if any; </li>
            <li>
            <see cref="F:iText.Kernel.Pdf.PdfName.None"/>
            - No line ending; </li>
            <li>
            <see cref="F:iText.Kernel.Pdf.PdfName.Butt"/>
            - A short line at the endpoint perpendicular to the line itself; </li>
            <li>
            <see cref="F:iText.Kernel.Pdf.PdfName.ROpenArrow"/>
            - Two short lines in the reverse direction from
            <see cref="F:iText.Kernel.Pdf.PdfName.OpenArrow"/>
            ; </li>
            <li>
            <see cref="F:iText.Kernel.Pdf.PdfName.RClosedArrow"/>
            - A triangular closed arrowhead in the reverse direction from
            <see cref="F:iText.Kernel.Pdf.PdfName.ClosedArrow"/>
            ; </li>
            <li>
            <see cref="F:iText.Kernel.Pdf.PdfName.Slash"/>
            - A short line at the endpoint approximately 30 degrees clockwise from perpendicular to the line itself; </li>
            </ul>
            see also ISO-320001, Table 176 "Line ending styles".
            </remarks>
            <param name="lineEndingStyles">An array of two names specifying the line ending styles that is used in drawing the line.
                </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfLineAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfLineAnnotation.GetInteriorColor">
            <summary>The interior color which is used to fill the annotation's line endings.</summary>
            <returns>
            
            <see cref="T:iText.Kernel.Colors.Color"/>
            of either
            <see cref="T:iText.Kernel.Colors.DeviceGray"/>
            ,
            <see cref="T:iText.Kernel.Colors.DeviceRgb"/>
            or
            <see cref="T:iText.Kernel.Colors.DeviceCmyk"/>
            type which defines
            interior color of the annotation, or null if interior color is not specified.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfLineAnnotation.SetInteriorColor(iText.Kernel.Pdf.PdfArray)">
            <summary>
            An array of numbers in the range 0.0 to 1.0 specifying the interior color
            which is used to fill the annotation's line endings.
            </summary>
            <param name="interiorColor">
            a
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            of numbers in the range 0.0 to 1.0. The number of array elements determines
            the colour space in which the colour is defined: 0 - No colour, transparent; 1 - DeviceGray,
            3 - DeviceRGB, 4 - DeviceCMYK. For the
            <see cref="T:iText.Kernel.Pdf.Annot.PdfRedactAnnotation"/>
            number of elements shall be
            equal to 3 (which defines DeviceRGB colour space).
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfLineAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfLineAnnotation.SetInteriorColor(System.Single[])">
            <summary>
            An array of numbers in the range 0.0 to 1.0 specifying the interior color
            which is used to fill the annotation's line endings.
            </summary>
            <param name="interiorColor">an array of floats in the range 0.0 to 1.0.</param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfLineAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfLineAnnotation.GetLeaderLineLength">
            <summary>
            The length of leader lines in default user space that extend from each endpoint of the line perpendicular
            to the line itself.
            </summary>
            <remarks>
            The length of leader lines in default user space that extend from each endpoint of the line perpendicular
            to the line itself. A positive value means that the leader lines appear in the direction that is clockwise
            when traversing the line from its starting point to its ending point (as specified by
            <see cref="F:iText.Kernel.Pdf.PdfName.L"/>
            (see
            <see cref="M:iText.Kernel.Pdf.Annot.PdfLineAnnotation.GetLine"/>
            );
            a negative value indicates the opposite direction.
            </remarks>
            <returns>a float specifying the length of leader lines in default user space.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfLineAnnotation.SetLeaderLineLength(System.Single)">
            <summary>
            Sets the length of leader lines in default user space that extend from each endpoint of the line perpendicular
            to the line itself.
            </summary>
            <remarks>
            Sets the length of leader lines in default user space that extend from each endpoint of the line perpendicular
            to the line itself. A positive value means that the leader lines appear in the direction that is clockwise
            when traversing the line from its starting point to its ending point (as specified by
            <see cref="F:iText.Kernel.Pdf.PdfName.L"/>
            (see
            <see cref="M:iText.Kernel.Pdf.Annot.PdfLineAnnotation.GetLine"/>
            );
            a negative value indicates the opposite direction.
            </remarks>
            <param name="leaderLineLength">a float specifying the length of leader lines in default user space.</param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfLineAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfLineAnnotation.GetLeaderLineExtension">
            <summary>
            A non-negative number that represents the length of leader line extensions that extend from the line proper
            180 degrees from the leader lines.
            </summary>
            <returns>
            a non-negative float that represents the length of leader line extensions; or if the leader line extension
            is not explicitly set, returns the default value, which is 0.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfLineAnnotation.SetLeaderLineExtension(System.Single)">
            <summary>Sets the length of leader line extensions that extend from the line proper 180 degrees from the leader lines.
                </summary>
            <remarks>
            Sets the length of leader line extensions that extend from the line proper 180 degrees from the leader lines.
            <b>This value shall not be set unless
            <see cref="F:iText.Kernel.Pdf.PdfName.LL"/>
            is set.</b>
            </remarks>
            <param name="leaderLineExtension">a non-negative float that represents the length of leader line extensions.
                </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfLineAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfLineAnnotation.GetLeaderLineOffset">
            <summary>
            A non-negative number that represents the length of the leader line offset, which is the amount of empty space
            between the endpoints of the annotation and the beginning of the leader lines.
            </summary>
            <returns>
            a non-negative number that represents the length of the leader line offset,
            or null if leader line offset is not set.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfLineAnnotation.SetLeaderLineOffset(System.Single)">
            <summary>
            Sets the length of the leader line offset, which is the amount of empty space between the endpoints of the
            annotation and the beginning of the leader lines.
            </summary>
            <param name="leaderLineOffset">a non-negative number that represents the length of the leader line offset.
                </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfLineAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfLineAnnotation.GetContentsAsCaption">
            <summary>
            If true, the text specified by the
            <see cref="F:iText.Kernel.Pdf.PdfName.Contents"/>
            or
            <see cref="F:iText.Kernel.Pdf.PdfName.RC"/>
            entries
            (see
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.GetContents"/>
            and
            <see cref="M:iText.Kernel.Pdf.Annot.PdfMarkupAnnotation.GetRichText"/>
            )
            is replicated as a caption in the appearance of the line.
            </summary>
            <returns>
            true, if the annotation text is replicated as a caption, false otherwise. If this property is
            not set, default value is used which is <i>false</i>.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfLineAnnotation.SetContentsAsCaption(System.Boolean)">
            <summary>
            If set to true, the text specified by the
            <see cref="F:iText.Kernel.Pdf.PdfName.Contents"/>
            or
            <see cref="F:iText.Kernel.Pdf.PdfName.RC"/>
            entries
            (see
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.GetContents"/>
            and
            <see cref="M:iText.Kernel.Pdf.Annot.PdfMarkupAnnotation.GetRichText"/>
            )
            will be replicated as a caption in the appearance of the line.
            </summary>
            <param name="contentsAsCaption">true, if the annotation text should be replicated as a caption, false otherwise.
                </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfLineAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfLineAnnotation.GetCaptionPosition">
            <summary>A name describing the annotation's caption positioning.</summary>
            <remarks>
            A name describing the annotation's caption positioning. Valid values are
            <see cref="F:iText.Kernel.Pdf.PdfName.Inline"/>
            , meaning the caption
            is centered inside the line, and
            <see cref="F:iText.Kernel.Pdf.PdfName.Top"/>
            , meaning the caption is on top of the line.
            </remarks>
            <returns>
            a name describing the annotation's caption positioning, or null if the caption positioning is not
            explicitly defined (in this case the default value is used, which is
            <see cref="F:iText.Kernel.Pdf.PdfName.Inline"/>
            ).
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfLineAnnotation.SetCaptionPosition(iText.Kernel.Pdf.PdfName)">
            <summary>Sets annotation's caption positioning.</summary>
            <remarks>
            Sets annotation's caption positioning. Valid values are
            <see cref="F:iText.Kernel.Pdf.PdfName.Inline"/>
            , meaning the caption
            is centered inside the line, and
            <see cref="F:iText.Kernel.Pdf.PdfName.Top"/>
            , meaning the caption is on top of the line.
            </remarks>
            <param name="captionPosition">a name describing the annotation's caption positioning.</param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfLineAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfLineAnnotation.GetMeasure">
            <summary>A measure dictionary (see ISO-320001, Table 261) that specifies the scale and units that apply to the line annotation.
                </summary>
            <returns>
            a
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            that represents a measure dictionary.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfLineAnnotation.SetMeasure(iText.Kernel.Pdf.PdfDictionary)">
            <summary>Sets a measure dictionary that specifies the scale and units that apply to the line annotation.</summary>
            <param name="measure">
            a
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            that represents a measure dictionary, see ISO-320001, Table 261 for valid
            contents specification.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfLineAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfLineAnnotation.GetCaptionOffset">
            <summary>An array of two numbers that specifies the offset of the caption text from its normal position.</summary>
            <remarks>
            An array of two numbers that specifies the offset of the caption text from its normal position.
            The first value is the horizontal offset along the annotation line from its midpoint, with a positive value
            indicating offset to the right and a negative value indicating offset to the left. The second value is the vertical
            offset perpendicular to the annotation line, with a positive value indicating a shift up and a negative value indicating
            a shift down.
            </remarks>
            <returns>
            a
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            of two numbers that specifies the offset of the caption text from its normal position,
            or null if caption offset is not explicitly specified (in this case a default value is used, which is [0, 0]).
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfLineAnnotation.SetCaptionOffset(iText.Kernel.Pdf.PdfArray)">
            <summary>Sets the offset of the caption text from its normal position.</summary>
            <param name="captionOffset">
            a
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            of two numbers that specifies the offset of the caption text from its
            normal position. The first value defines the horizontal offset along the annotation line from
            its midpoint, with a positive value indicating offset to the right and a negative value indicating
            offset to the left. The second value defines the vertical offset perpendicular to the annotation line,
            with a positive value indicating a shift up and a negative value indicating a shift down.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfLineAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfLineAnnotation.SetCaptionOffset(System.Single[])">
            <summary>Sets the offset of the caption text from its normal position.</summary>
            <param name="captionOffset">
            an array of two floats that specifies the offset of the caption text from its
            normal position. The first value defines the horizontal offset along the annotation line from
            its midpoint, with a positive value indicating offset to the right and a negative value indicating
            offset to the left. The second value defines the vertical offset perpendicular to the annotation line,
            with a positive value indicating a shift up and a negative value indicating a shift down.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfLineAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="F:iText.Kernel.Pdf.Annot.PdfLinkAnnotation.None">
            <summary>Highlight modes.</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfLinkAnnotation.#ctor(iText.Kernel.Pdf.PdfDictionary)">
            <summary>
            see
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.MakeAnnotation(iText.Kernel.Pdf.PdfObject)"/>
            </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfLinkAnnotation.GetAction">
            <summary>
            An
            <see cref="T:iText.Kernel.Pdf.Action.PdfAction"/>
            to perform, such as launching an application, playing a sound,
            changing an annotation’s appearance state etc, when the annotation is activated.
            </summary>
            <returns>
            
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            which defines the characteristics and behaviour of an action.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfLinkAnnotation.SetAction(iText.Kernel.Pdf.PdfDictionary)">
            <summary>
            Sets a
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            representing action to this annotation which will be performed
            when the annotation is activated.
            </summary>
            <param name="action">
            
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            that represents action to set to this annotation.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfLinkAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfLinkAnnotation.SetAction(iText.Kernel.Pdf.Action.PdfAction)">
            <summary>
            Sets a
            <see cref="T:iText.Kernel.Pdf.Action.PdfAction"/>
            to this annotation which will be performed when the annotation is activated.
            </summary>
            <param name="action">
            
            <see cref="T:iText.Kernel.Pdf.Action.PdfAction"/>
            to set to this annotation.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfLinkAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfLinkAnnotation.GetQuadPoints">
            <summary>An array of 8 × n numbers specifying the coordinates of n quadrilaterals in default user space.</summary>
            <remarks>
            An array of 8 × n numbers specifying the coordinates of n quadrilaterals in default user space.
            Quadrilaterals are used to define regions inside annotation rectangle
            in which the link annotation should be activated.
            </remarks>
            <returns>
            an
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            of 8 × n numbers specifying the coordinates of n quadrilaterals.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfLinkAnnotation.SetQuadPoints(iText.Kernel.Pdf.PdfArray)">
            <summary>
            Sets n quadrilaterals in default user space by passing an
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            of 8 × n numbers.
            Quadrilaterals are used to define regions inside annotation rectangle
            in which the link annotation should be activated.
            </summary>
            <param name="quadPoints">
            an
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            of 8 × n numbers specifying the coordinates of n quadrilaterals.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfLinkAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfLinkAnnotation.GetBorderStyle">
            <summary>
            BS entry specifies a border style dictionary that has more settings than the array specified for the Border
            entry (see
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.GetBorder"/>
            ). If an annotation dictionary includes the BS entry, then the Border
            entry is ignored. If annotation includes AP (see
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.GetAppearanceDictionary"/>
            ) it takes
            precedence over the BS entry. For more info on BS entry see ISO-320001, Table 166.
            </summary>
            <returns>
            
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            which is a border style dictionary or null if it is not specified.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfLinkAnnotation.SetBorderStyle(iText.Kernel.Pdf.PdfDictionary)">
            <summary>
            Sets border style dictionary that has more settings than the array specified for the Border entry (
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.GetBorder"/>
            ).
            See ISO-320001, Table 166 and
            <see cref="M:iText.Kernel.Pdf.Annot.PdfLinkAnnotation.GetBorderStyle"/>
            for more info.
            </summary>
            <param name="borderStyle">
            a border style dictionary specifying the line width and dash pattern that shall be used
            in drawing the annotation’s border.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfLinkAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfLinkAnnotation.SetBorderStyle(iText.Kernel.Pdf.PdfName)">
            <summary>Setter for the annotation's preset border style.</summary>
            <remarks>
            Setter for the annotation's preset border style. Possible values are
            <ul>
            <li>
            <see cref="F:iText.Kernel.Pdf.Annot.PdfAnnotation.STYLE_SOLID"/>
            - A solid rectangle surrounding the annotation.</li>
            <li>
            <see cref="F:iText.Kernel.Pdf.Annot.PdfAnnotation.STYLE_DASHED"/>
            - A dashed rectangle surrounding the annotation.</li>
            <li>
            <see cref="F:iText.Kernel.Pdf.Annot.PdfAnnotation.STYLE_BEVELED"/>
            - A simulated embossed rectangle that appears to be raised above the surface of the page.</li>
            <li>
            <see cref="F:iText.Kernel.Pdf.Annot.PdfAnnotation.STYLE_INSET"/>
            - A simulated engraved rectangle that appears to be recessed below the surface of the page.</li>
            <li>
            <see cref="F:iText.Kernel.Pdf.Annot.PdfAnnotation.STYLE_UNDERLINE"/>
            - A single line along the bottom of the annotation rectangle.</li>
            </ul>
            See also ISO-320001, Table 166.
            </remarks>
            <param name="style">The new value for the annotation's border style.</param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfLinkAnnotation"/>
            instance.
            </returns>
            <seealso cref="M:iText.Kernel.Pdf.Annot.PdfLinkAnnotation.GetBorderStyle"/>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfLinkAnnotation.SetDashPattern(iText.Kernel.Pdf.PdfArray)">
            <summary>Setter for the annotation's preset dashed border style.</summary>
            <remarks>
            Setter for the annotation's preset dashed border style. This property has affect only if
            <see cref="F:iText.Kernel.Pdf.Annot.PdfAnnotation.STYLE_DASHED"/>
            style was used for the annotation border style (see
            <see cref="M:iText.Kernel.Pdf.Annot.PdfLinkAnnotation.SetBorderStyle(iText.Kernel.Pdf.PdfName)"/>
            .
            See ISO-320001 8.4.3.6, "Line Dash Pattern" for the format in which dash pattern shall be specified.
            </remarks>
            <param name="dashPattern">
            a dash array defining a pattern of dashes and gaps that
            shall be used in drawing a dashed border.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfLinkAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="T:iText.Kernel.Pdf.Annot.PdfMarkupAnnotation">
            <summary>
            This is a super class for the annotations which are defined as markup annotations
            because they are used primarily to mark up PDF documents.
            </summary>
            <remarks>
            This is a super class for the annotations which are defined as markup annotations
            because they are used primarily to mark up PDF documents. These annotations have
            text that appears as part of the annotation and may be displayed in other ways
            by a conforming reader, such as in a Comments pane.
            See also ISO-320001 12.5.6.2 "Markup Annotations".
            </remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfMarkupAnnotation.GetText">
            <summary>
            The text label that will be displayed in the title bar of the annotation's pop-up window
            when open and active.
            </summary>
            <remarks>
            The text label that will be displayed in the title bar of the annotation's pop-up window
            when open and active. This entry shall identify the user who added the annotation.
            </remarks>
            <returns>
            
            <see cref="T:iText.Kernel.Pdf.PdfString"/>
            which value is an annotation text label content
            or null if text is not specified.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfMarkupAnnotation.SetText(iText.Kernel.Pdf.PdfString)">
            <summary>
            Sets the text label that will be displayed in the title bar of the annotation's pop-up window
            when open and active.
            </summary>
            <remarks>
            Sets the text label that will be displayed in the title bar of the annotation's pop-up window
            when open and active. This entry shall identify the user who added the annotation.
            </remarks>
            <param name="text">
            
            <see cref="T:iText.Kernel.Pdf.PdfString"/>
            which value is an annotation text label content.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfMarkupAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfMarkupAnnotation.GetOpacity">
            <summary>The constant opacity value that will be used in painting the annotation.</summary>
            <remarks>
            The constant opacity value that will be used in painting the annotation.
            This value is applied to all visible elements of the annotation in its closed state
            (including its background and border) but not to the pop-up window that appears when
            the annotation is opened. Default value: 1.0.
            </remarks>
            <returns>
            a
            <see cref="T:iText.Kernel.Pdf.PdfNumber"/>
            which value is in range between 0 and 1, which specifies the
            level of opacity. This method returns null if opacity is not specified; in this case default
            value is used, which is 1.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfMarkupAnnotation.SetOpacity(iText.Kernel.Pdf.PdfNumber)">
            <summary>Sets the constant opacity value that will be used in painting the annotation.</summary>
            <param name="ca">
            a
            <see cref="T:iText.Kernel.Pdf.PdfNumber"/>
            which value is in range between 0 and 1, which specifies the
            level of opacity.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfMarkupAnnotation"/>
            instance.
            </returns>
            <seealso cref="M:iText.Kernel.Pdf.Annot.PdfMarkupAnnotation.GetOpacity"/>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfMarkupAnnotation.GetRichText">
            <summary>
            A rich text string (see ISO-320001 12.7.3.4, "Rich Text Strings") that
            shall be displayed in the pop-up window when the annotation is opened.
            </summary>
            <returns>
            text string or text stream that specifies rich text or null if
            rich text is not specified.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfMarkupAnnotation.SetRichText(iText.Kernel.Pdf.PdfObject)">
            <summary>
            Sets a rich text string (see ISO-320001 12.7.3.4, "Rich Text Strings") that
            shall be displayed in the pop-up window when the annotation is opened.
            </summary>
            <param name="richText">text string or text stream that specifies rich text.</param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfMarkupAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfMarkupAnnotation.GetCreationDate">
            <summary>The date and time when the annotation was created.</summary>
            <returns>
            a
            <see cref="T:iText.Kernel.Pdf.PdfString"/>
            which value should be in the date format specified in (ISO-320001 7.9.4, "Dates").
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfMarkupAnnotation.SetCreationDate(iText.Kernel.Pdf.PdfString)">
            <summary>Sets the date and time when the annotation was created.</summary>
            <param name="creationDate">
            
            <see cref="T:iText.Kernel.Pdf.PdfString"/>
            which value should be in the date format
            specified in (ISO-320001 7.9.4, "Dates").
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfMarkupAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfMarkupAnnotation.GetInReplyToObject">
            <summary>
            An annotation object that this annotation is "in reply to."
            Both annotations shall be on the same page of the document.
            </summary>
            <remarks>
            An annotation object that this annotation is "in reply to."
            Both annotations shall be on the same page of the document.
            The relationship between the two annotations shall be specified by the RT entry
            (see
            <see cref="M:iText.Kernel.Pdf.Annot.PdfMarkupAnnotation.GetReplyType"/>
            ).
            </remarks>
            <returns>
            a
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            that represents an annotation that this annotation is "in reply to."
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfMarkupAnnotation.GetInReplyTo">
            <summary>
            An annotation that this annotation is "in reply to."
            Both annotations shall be on the same page of the document.
            </summary>
            <remarks>
            An annotation that this annotation is "in reply to."
            Both annotations shall be on the same page of the document.
            The relationship between the two annotations shall be specified by the RT entry
            (see
            <see cref="M:iText.Kernel.Pdf.Annot.PdfMarkupAnnotation.GetReplyType"/>
            ).
            </remarks>
            <returns>
            a
            <see cref="T:iText.Kernel.Pdf.Annot.PdfAnnotation"/>
            that this annotation is "in reply to."
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfMarkupAnnotation.SetInReplyTo(iText.Kernel.Pdf.Annot.PdfAnnotation)">
            <summary>
            Sets an annotation that this annotation is "in reply to."
            Both annotations shall be on the same page of the document.
            </summary>
            <remarks>
            Sets an annotation that this annotation is "in reply to."
            Both annotations shall be on the same page of the document.
            The relationship between the two annotations shall be specified by the RT entry
            (see
            <see cref="M:iText.Kernel.Pdf.Annot.PdfMarkupAnnotation.GetReplyType"/>
            ).
            </remarks>
            <param name="inReplyTo">
            a
            <see cref="T:iText.Kernel.Pdf.Annot.PdfAnnotation"/>
            that this annotation is "in reply to."
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfMarkupAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfMarkupAnnotation.SetPopup(iText.Kernel.Pdf.Annot.PdfPopupAnnotation)">
            <summary>Sets a pop-up annotation for entering or editing the text associated with this annotation.</summary>
            <remarks>
            Sets a pop-up annotation for entering or editing the text associated with this annotation.
            Pop-up annotation defines an associated with this annotation pop-up window that may contain text.
            The Contents (see
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.SetContents(iText.Kernel.Pdf.PdfString)"/>
            ) entry of the annotation that has
            an associated popup specifies the text that shall be displayed when the pop-up window is opened.
            </remarks>
            <param name="popup">
            an
            <see cref="T:iText.Kernel.Pdf.Annot.PdfPopupAnnotation"/>
            that will be associated with this annotation.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfMarkupAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfMarkupAnnotation.GetPopupObject">
            <summary>An associated pop-up annotation object.</summary>
            <remarks>
            An associated pop-up annotation object. See
            <see cref="M:iText.Kernel.Pdf.Annot.PdfMarkupAnnotation.GetPopup"/>
            for more info.
            </remarks>
            <returns>
            a
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            that represents an associated pop-up annotation,
            or null if popup annotation is not specified.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfMarkupAnnotation.GetPopup">
            <summary>An associated pop-up annotation for entering or editing the text associated with this annotation.
                </summary>
            <remarks>
            An associated pop-up annotation for entering or editing the text associated with this annotation.
            Pop-up annotation defines an associated with this annotation pop-up window that may contain text.
            The Contents (see
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.GetContents"/>
            ) entry of the annotation that has
            an associated popup specifies the text that shall be displayed when the pop-up window is opened.
            </remarks>
            <returns>
            an
            <see cref="T:iText.Kernel.Pdf.Annot.PdfPopupAnnotation"/>
            that is associated with this annotation, or null if there is none.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfMarkupAnnotation.GetSubject">
            <summary>Text representing a short description of the subject being addressed by the annotation.</summary>
            <returns>
            a
            <see cref="T:iText.Kernel.Pdf.PdfString"/>
            which value is a annotation subject.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfMarkupAnnotation.SetSubject(iText.Kernel.Pdf.PdfString)">
            <summary>Sets the text representing a short description of the subject being addressed by the annotation.</summary>
            <param name="subject">
            a
            <see cref="T:iText.Kernel.Pdf.PdfString"/>
            which value is a annotation subject.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfMarkupAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfMarkupAnnotation.GetReplyType">
            <summary>
            A name specifying the relationship (the "reply type") between this annotation and one specified by IRT entry
            (see
            <see cref="M:iText.Kernel.Pdf.Annot.PdfMarkupAnnotation.GetInReplyTo"/>
            ). Valid values are:
            <ul>
            <li>
            <see cref="F:iText.Kernel.Pdf.PdfName.R"/>
            - The annotation shall be considered a reply to the annotation specified by IRT.
            Conforming readers shall not display replies to an annotation individually but together in the form of
            threaded comments.</li>
            <li>
            <see cref="F:iText.Kernel.Pdf.PdfName.Group"/>
            - The annotation shall be grouped with the annotation specified by IRT.</li>
            </ul>
            </summary>
            <returns>
            a
            <see cref="T:iText.Kernel.Pdf.PdfName"/>
            specifying relationship with the specified by the IRT entry; or null if reply
            type is not specified, in this case the default value is
            <see cref="F:iText.Kernel.Pdf.PdfName.R"/>
            .
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfMarkupAnnotation.SetReplyType(iText.Kernel.Pdf.PdfName)">
            <summary>
            Sets the relationship (the "reply type") between this annotation and one specified by IRT entry
            (see
            <see cref="M:iText.Kernel.Pdf.Annot.PdfMarkupAnnotation.SetInReplyTo(iText.Kernel.Pdf.Annot.PdfAnnotation)"/>
            ). For valid values see
            <see cref="M:iText.Kernel.Pdf.Annot.PdfMarkupAnnotation.GetInReplyTo"/>
            .
            </summary>
            <param name="replyType">
            a
            <see cref="T:iText.Kernel.Pdf.PdfName"/>
            specifying relationship with the specified by the IRT entry.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfMarkupAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfMarkupAnnotation.GetIntent">
            <summary>A name describing the intent of the markup annotation.</summary>
            <remarks>
            A name describing the intent of the markup annotation.
            See
            <see cref="M:iText.Kernel.Pdf.Annot.PdfMarkupAnnotation.SetIntent(iText.Kernel.Pdf.PdfName)"/>
            for more info.
            </remarks>
            <returns>
            a
            <see cref="T:iText.Kernel.Pdf.PdfName"/>
            describing the intent of the markup annotation, or null if not specified.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfMarkupAnnotation.SetIntent(iText.Kernel.Pdf.PdfName)">
            <summary>Sets a name describing the intent of the markup annotation.</summary>
            <remarks>
            Sets a name describing the intent of the markup annotation.
            Intents allow conforming readers to distinguish between different uses and behaviors
            of a single markup annotation type. If this entry is not present or its value is the same as the annotation type,
            the annotation shall have no explicit intent and should behave in a generic manner in a conforming reader.
            <p>
            See ISO-320001, free text annotations (Table 174), line annotations (Table 175), polygon annotations (Table 178),
            and polyline annotations (Table 178) for the specific intent values for those types.
            </p>
            </remarks>
            <param name="intent">
            a
            <see cref="T:iText.Kernel.Pdf.PdfName"/>
            describing the intent of the markup annotation.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfMarkupAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfMarkupAnnotation.GetExternalData">
            <summary>An external data dictionary specifying data that shall be associated with the annotation.</summary>
            <remarks>
            An external data dictionary specifying data that shall be associated with the annotation.
            This dictionary contains the following entries:
            <ul>
            <li>
            <see cref="F:iText.Kernel.Pdf.PdfName.Type"/>
            - (optional) If present, shall be
            <see cref="F:iText.Kernel.Pdf.PdfName.ExData"/>
            .</li>
            <li>
            <see cref="F:iText.Kernel.Pdf.PdfName.Subtype"/>
            - (required) a name specifying the type of data that the markup annotation
            shall be associated with. The only defined value is
            <see cref="F:iText.Kernel.Pdf.PdfName.Markup3D"/>
            . Table 298 (ISO-320001)
            lists the values that correspond to a subtype of Markup3D (See also
            <see cref="T:iText.Kernel.Pdf.Annot.Pdf3DAnnotation"/>
            ).</li>
            </ul>
            </remarks>
            <returns>
            An external data
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            , or null if not specified.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfMarkupAnnotation.SetExternalData(iText.Kernel.Pdf.PdfName)">
            <summary>Sets an external data dictionary specifying data that shall be associated with the annotation.</summary>
            <remarks>
            Sets an external data dictionary specifying data that shall be associated with the annotation.
            This dictionary should contain the following entries:
            <ul>
            <li>
            <see cref="F:iText.Kernel.Pdf.PdfName.Type"/>
            - (optional) If present, shall be
            <see cref="F:iText.Kernel.Pdf.PdfName.ExData"/>
            .</li>
            <li>
            <see cref="F:iText.Kernel.Pdf.PdfName.Subtype"/>
            - (required) a name specifying the type of data that the markup annotation
            shall be associated with. The only defined value is
            <see cref="F:iText.Kernel.Pdf.PdfName.Markup3D"/>
            . Table 298 (ISO-320001)
            lists the values that correspond to a subtype of Markup3D (See also
            <see cref="T:iText.Kernel.Pdf.Annot.Pdf3DAnnotation"/>
            ).</li>
            </ul>
            </remarks>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfMarkupAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="F:iText.Kernel.Pdf.Annot.PdfPolyGeomAnnotation.Polygon">
            <summary>Subtypes</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfPolyGeomAnnotation.#ctor(iText.Kernel.Pdf.PdfDictionary)">
            <summary>
            see
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.MakeAnnotation(iText.Kernel.Pdf.PdfObject)"/>
            </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfPolyGeomAnnotation.GetPath">
            <summary>PDF 2.0.</summary>
            <remarks>
            PDF 2.0. An array of n arrays, each supplying the operands for a
            path building operator (m, l or c).
            Each of the n arrays shall contain pairs of values specifying the points (x and
            y values) for a path drawing operation.
            The first array shall be of length 2 and specifies the operand of a moveto
            operator which establishes a current point.
            Subsequent arrays of length 2 specify the operands of lineto operators.
            Arrays of length 6 specify the operands for curveto operators.
            Each array is processed in sequence to construct the path.
            </remarks>
            <returns>path, or <code>null</code> if path is not set</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfPolyGeomAnnotation.SetPath(iText.Kernel.Pdf.PdfArray)">
            <summary>PDF 2.0.</summary>
            <remarks>
            PDF 2.0. An array of n arrays, each supplying the operands for a
            path building operator (m, l or c).
            Each of the n arrays shall contain pairs of values specifying the points (x and
            y values) for a path drawing operation.
            The first array shall be of length 2 and specifies the operand of a moveto
            operator which establishes a current point.
            Subsequent arrays of length 2 specify the operands of lineto operators.
            Arrays of length 6 specify the operands for curveto operators.
            Each array is processed in sequence to construct the path.
            </remarks>
            <param name="path">the path to set</param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfPolyGeomAnnotation"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfPolyGeomAnnotation.GetBorderStyle">
            <summary>The dictionaries for some annotation types (such as free text and polygon annotations) can include the BS entry.
                </summary>
            <remarks>
            The dictionaries for some annotation types (such as free text and polygon annotations) can include the BS entry.
            That entry specifies a border style dictionary that has more settings than the array specified for the Border
            entry (see
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.GetBorder"/>
            ). If an annotation dictionary includes the BS entry, then the Border
            entry is ignored. If annotation includes AP (see
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.GetAppearanceDictionary"/>
            ) it takes
            precedence over the BS entry. For more info on BS entry see ISO-320001, Table 166.
            </remarks>
            <returns>
            
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            which is a border style dictionary or null if it is not specified.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfPolyGeomAnnotation.SetBorderStyle(iText.Kernel.Pdf.PdfDictionary)">
            <summary>
            Sets border style dictionary that has more settings than the array specified for the Border entry (
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.GetBorder"/>
            ).
            See ISO-320001, Table 166 and
            <see cref="M:iText.Kernel.Pdf.Annot.PdfPolyGeomAnnotation.GetBorderStyle"/>
            for more info.
            </summary>
            <param name="borderStyle">
            a border style dictionary specifying the line width and dash pattern that shall be used
            in drawing the annotation’s border.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfPolyGeomAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfPolyGeomAnnotation.SetBorderStyle(iText.Kernel.Pdf.PdfName)">
            <summary>Setter for the annotation's preset border style.</summary>
            <remarks>
            Setter for the annotation's preset border style. Possible values are
            <ul>
            <li>
            <see cref="F:iText.Kernel.Pdf.Annot.PdfAnnotation.STYLE_SOLID"/>
            - A solid rectangle surrounding the annotation.</li>
            <li>
            <see cref="F:iText.Kernel.Pdf.Annot.PdfAnnotation.STYLE_DASHED"/>
            - A dashed rectangle surrounding the annotation.</li>
            <li>
            <see cref="F:iText.Kernel.Pdf.Annot.PdfAnnotation.STYLE_BEVELED"/>
            - A simulated embossed rectangle that appears to be raised above the surface of the page.</li>
            <li>
            <see cref="F:iText.Kernel.Pdf.Annot.PdfAnnotation.STYLE_INSET"/>
            - A simulated engraved rectangle that appears to be recessed below the surface of the page.</li>
            <li>
            <see cref="F:iText.Kernel.Pdf.Annot.PdfAnnotation.STYLE_UNDERLINE"/>
            - A single line along the bottom of the annotation rectangle.</li>
            </ul>
            See also ISO-320001, Table 166.
            </remarks>
            <param name="style">The new value for the annotation's border style.</param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfPolyGeomAnnotation"/>
            instance.
            </returns>
            <seealso cref="M:iText.Kernel.Pdf.Annot.PdfPolyGeomAnnotation.GetBorderStyle"/>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfPolyGeomAnnotation.SetDashPattern(iText.Kernel.Pdf.PdfArray)">
            <summary>Setter for the annotation's preset dashed border style.</summary>
            <remarks>
            Setter for the annotation's preset dashed border style. This property has affect only if
            <see cref="F:iText.Kernel.Pdf.Annot.PdfAnnotation.STYLE_DASHED"/>
            style was used for the annotation border style (see
            <see cref="M:iText.Kernel.Pdf.Annot.PdfPolyGeomAnnotation.SetBorderStyle(iText.Kernel.Pdf.PdfName)"/>
            .
            See ISO-320001 8.4.3.6, "Line Dash Pattern" for the format in which dash pattern shall be specified.
            </remarks>
            <param name="dashPattern">
            a dash array defining a pattern of dashes and gaps that
            shall be used in drawing a dashed border.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfPolyGeomAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfPolyGeomAnnotation.GetBorderEffect">
            <summary>Gets a border effect dictionary that specifies an effect that shall be applied to the border of the annotations.
                </summary>
            <returns>
            a
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            , which is a border effect dictionary (see ISO-320001, Table 167).
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfPolyGeomAnnotation.SetBorderEffect(iText.Kernel.Pdf.PdfDictionary)">
            <summary>Sets a border effect dictionary that specifies an effect that shall be applied to the border of the annotations.
                </summary>
            <param name="borderEffect">
            a
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            which contents shall be specified in accordance to ISO-320001, Table 167.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfPolyGeomAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfPolyGeomAnnotation.GetInteriorColor">
            <summary>The interior color which is used to fill the annotation's line endings.</summary>
            <returns>
            
            <see cref="T:iText.Kernel.Colors.Color"/>
            of either
            <see cref="T:iText.Kernel.Colors.DeviceGray"/>
            ,
            <see cref="T:iText.Kernel.Colors.DeviceRgb"/>
            or
            <see cref="T:iText.Kernel.Colors.DeviceCmyk"/>
            type which defines
            interior color of the annotation, or null if interior color is not specified.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfPolyGeomAnnotation.SetInteriorColor(iText.Kernel.Pdf.PdfArray)">
            <summary>
            An array of numbers in the range 0.0 to 1.0 specifying the interior color
            which is used to fill the annotation's line endings.
            </summary>
            <param name="interiorColor">
            a
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            of numbers in the range 0.0 to 1.0. The number of array elements determines
            the colour space in which the colour is defined: 0 - No colour, transparent; 1 - DeviceGray,
            3 - DeviceRGB, 4 - DeviceCMYK. For the
            <see cref="T:iText.Kernel.Pdf.Annot.PdfRedactAnnotation"/>
            number of elements shall be
            equal to 3 (which defines DeviceRGB colour space).
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfPolyGeomAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfPolyGeomAnnotation.SetInteriorColor(System.Single[])">
            <summary>
            An array of numbers in the range 0.0 to 1.0 specifying the interior color
            which is used to fill the annotation's line endings.
            </summary>
            <param name="interiorColor">an array of floats in the range 0.0 to 1.0.</param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfPolyGeomAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfPopupAnnotation.#ctor(iText.Kernel.Pdf.PdfDictionary)">
            <summary>
            see
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.MakeAnnotation(iText.Kernel.Pdf.PdfObject)"/>
            </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfPopupAnnotation.GetOpen">
            <summary>A flag specifying whether the annotation shall initially be displayed open.</summary>
            <remarks>
            A flag specifying whether the annotation shall initially be displayed open.
            This flag has affect to not all kinds of annotations.
            </remarks>
            <returns>true if annotation is initially open, false - if closed.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfPopupAnnotation.SetOpen(System.Boolean)">
            <summary>Sets a flag specifying whether the annotation shall initially be displayed open.</summary>
            <remarks>
            Sets a flag specifying whether the annotation shall initially be displayed open.
            This flag has affect to not all kinds of annotations.
            </remarks>
            <param name="open">true if annotation shall initially be open, false - if closed.</param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfPopupAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfPrinterMarkAnnotation.#ctor(iText.Kernel.Pdf.PdfDictionary)">
            <summary>
            see
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.MakeAnnotation(iText.Kernel.Pdf.PdfObject)"/>
            </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfRedactAnnotation.#ctor(iText.Kernel.Pdf.PdfDictionary)">
            <summary>
            see
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.MakeAnnotation(iText.Kernel.Pdf.PdfObject)"/>
            </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfRedactAnnotation.GetDefaultAppearance">
            <summary>The default appearance string that shall be used in formatting the text.</summary>
            <remarks>The default appearance string that shall be used in formatting the text. See ISO-32001 12.7.3.3, "Variable Text".
                </remarks>
            <returns>
            a
            <see cref="T:iText.Kernel.Pdf.PdfString"/>
            that specifies the default appearance, or null if default appereance is not specified.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfRedactAnnotation.SetDefaultAppearance(iText.Kernel.Pdf.PdfString)">
            <summary>The default appearance string that shall be used in formatting the text.</summary>
            <remarks>The default appearance string that shall be used in formatting the text. See ISO-32001 12.7.3.3, "Variable Text".
                </remarks>
            <param name="appearanceString">
            a
            <see cref="T:iText.Kernel.Pdf.PdfString"/>
            that specifies the default appearance.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfMarkupAnnotation"/>
            instance.+
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfRedactAnnotation.GetQuadPoints">
            <summary>An array of 8 × n numbers specifying the coordinates of n quadrilaterals in default user space.</summary>
            <remarks>
            An array of 8 × n numbers specifying the coordinates of n quadrilaterals in default user space.
            Quadrilaterals are used to define the content region that is intended to be removed for a redaction annotation.
            </remarks>
            <returns>
            an
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            of 8 × n numbers specifying the coordinates of n quadrilaterals.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfRedactAnnotation.SetQuadPoints(iText.Kernel.Pdf.PdfArray)">
            <summary>
            Sets n quadrilaterals in default user space by passing an
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            of 8 × n numbers.
            Quadrilaterals are used to define the content region that is intended to be removed for a redaction annotation.
            </summary>
            <param name="quadPoints">
            an
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            of 8 × n numbers specifying the coordinates of n quadrilaterals.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfRedactAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfRedactAnnotation.GetInteriorColor">
            <summary>The interior color which is used to fill the redacted region after the affected content has been removed.
                </summary>
            <returns>
            
            <see cref="T:iText.Kernel.Colors.Color"/>
            of either
            <see cref="T:iText.Kernel.Colors.DeviceGray"/>
            ,
            <see cref="T:iText.Kernel.Colors.DeviceRgb"/>
            or
            <see cref="T:iText.Kernel.Colors.DeviceCmyk"/>
            type which defines
            interior color of the annotation, or null if interior color is not specified.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfRedactAnnotation.SetInteriorColor(iText.Kernel.Pdf.PdfArray)">
            <summary>
            An array of numbers in the range 0.0 to 1.0 specifying the interior color which
            is used to fill the redacted region after the affected content has been removed.
            </summary>
            <param name="interiorColor">
            a
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            of numbers in the range 0.0 to 1.0. The number of array elements determines
            the colour space in which the colour is defined: 0 - No colour, transparent; 1 - DeviceGray,
            3 - DeviceRGB, 4 - DeviceCMYK. For the
            <see cref="T:iText.Kernel.Pdf.Annot.PdfRedactAnnotation"/>
            number of elements shall be
            equal to 3 (which defines DeviceRGB colour space).
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfRedactAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfRedactAnnotation.SetInteriorColor(System.Single[])">
            <summary>
            An array of numbers in the range 0.0 to 1.0 specifying the interior color which
            is used to fill the redacted region after the affected content has been removed.
            </summary>
            <param name="interiorColor">an array of floats in the range 0.0 to 1.0.</param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfRedactAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfRedactAnnotation.GetJustification">
            <summary>
            A code specifying the form of quadding (justification) that is used in displaying the annotation's text:
            0 - Left-justified, 1 - Centered, 2 - Right-justified.
            </summary>
            <remarks>
            A code specifying the form of quadding (justification) that is used in displaying the annotation's text:
            0 - Left-justified, 1 - Centered, 2 - Right-justified. Default value: 0 (left-justified).
            </remarks>
            <returns>a code specifying the form of quadding (justification), returns the default value if not explicitly specified.
                </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfRedactAnnotation.SetJustification(System.Int32)">
            <summary>
            A code specifying the form of quadding (justification) that is used in displaying the annotation's text:
            0 - Left-justified, 1 - Centered, 2 - Right-justified.
            </summary>
            <remarks>
            A code specifying the form of quadding (justification) that is used in displaying the annotation's text:
            0 - Left-justified, 1 - Centered, 2 - Right-justified. Default value: 0 (left-justified).
            </remarks>
            <param name="justification">a code specifying the form of quadding (justification).</param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfRedactAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfScreenAnnotation.#ctor(iText.Kernel.Pdf.PdfDictionary)">
            <summary>
            see
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.MakeAnnotation(iText.Kernel.Pdf.PdfObject)"/>
            </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfScreenAnnotation.GetAction">
            <summary>
            An
            <see cref="T:iText.Kernel.Pdf.Action.PdfAction"/>
            to perform, such as launching an application, playing a sound,
            changing an annotation’s appearance state etc, when the annotation is activated.
            </summary>
            <returns>
            
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            which defines the characteristics and behaviour of an action.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfScreenAnnotation.SetAction(iText.Kernel.Pdf.Action.PdfAction)">
            <summary>
            Sets a
            <see cref="T:iText.Kernel.Pdf.Action.PdfAction"/>
            to this annotation which will be performed when the annotation is activated.
            </summary>
            <param name="action">
            
            <see cref="T:iText.Kernel.Pdf.Action.PdfAction"/>
            to set to this annotation.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfScreenAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfScreenAnnotation.GetAdditionalAction">
            <summary>An additional actions dictionary that extends the set of events that can trigger the execution of an action.
                </summary>
            <remarks>
            An additional actions dictionary that extends the set of events that can trigger the execution of an action.
            See ISO-320001 12.6.3 Trigger Events.
            </remarks>
            <returns>
            an additional actions
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            .
            </returns>
            <seealso cref="M:iText.Kernel.Pdf.Annot.PdfScreenAnnotation.GetAction"/>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfScreenAnnotation.SetAdditionalAction(iText.Kernel.Pdf.PdfName,iText.Kernel.Pdf.Action.PdfAction)">
            <summary>
            Sets an additional
            <see cref="T:iText.Kernel.Pdf.Action.PdfAction"/>
            to this annotation which will be performed in response to
            the specific trigger event defined by
            <paramref name="key"/>
            . See ISO-320001 12.6.3, "Trigger Events".
            </summary>
            <param name="key">
            a
            <see cref="T:iText.Kernel.Pdf.PdfName"/>
            that denotes a type of the additional action to set.
            </param>
            <param name="action">
            
            <see cref="T:iText.Kernel.Pdf.Action.PdfAction"/>
            to set as additional to this annotation.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfScreenAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfScreenAnnotation.GetAppearanceCharacteristics">
            <summary>
            An appearance characteristics dictionary containing additional information for constructing the
            annotation’s appearance stream.
            </summary>
            <remarks>
            An appearance characteristics dictionary containing additional information for constructing the
            annotation’s appearance stream. See ISO-320001, Table 189.
            </remarks>
            <returns>an appearance characteristics dictionary or null if it isn't specified.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfScreenAnnotation.SetAppearanceCharacteristics(iText.Kernel.Pdf.PdfDictionary)">
            <summary>
            Sets an appearance characteristics dictionary containing additional information for constructing the
            annotation’s appearance stream.
            </summary>
            <remarks>
            Sets an appearance characteristics dictionary containing additional information for constructing the
            annotation’s appearance stream. See ISO-320001, Table 189.
            </remarks>
            <param name="characteristics">
            the
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            with additional information for appearance stream.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfScreenAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfSoundAnnotation.#ctor(iText.Kernel.Geom.Rectangle,iText.Kernel.Pdf.PdfStream)">
            <summary>Creates a new Sound annotation.</summary>
            <remarks>
            Creates a new Sound annotation.
            There is a problem playing *.wav files via internal player in Acrobat.
            The first byte of the audio stream data should be deleted, then wav file will be played correctly.
            Otherwise it will be broken. Other supporting file types don't have such problem.
            Sound annotations are deprecated in PDF 2.0.
            </remarks>
            <param name="rect"/>
            <param name="sound"/>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfSoundAnnotation.#ctor(iText.Kernel.Pdf.PdfDictionary)">
            <summary>
            see
            <see cref="!:PdfAnnotation#makeAnnotation(PdfObject)"/>
            </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfSoundAnnotation.#ctor(iText.Kernel.Pdf.PdfDocument,iText.Kernel.Geom.Rectangle,System.IO.Stream,System.Single,iText.Kernel.Pdf.PdfName,System.Int32,System.Int32)">
            <summary>Creates a sound annotation.</summary>
            <remarks>Creates a sound annotation. Sound annotations are deprecated in PDF 2.0.</remarks>
            <param name="document"/>
            <param name="rect"/>
            <param name="soundStream"/>
            <param name="sampleRate"/>
            <param name="encoding"/>
            <param name="channels"/>
            <param name="sampleSizeInBits"/>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfSoundAnnotation.GetIconName">
            <summary>The name of an icon that is used in displaying the annotation.</summary>
            <remarks>
            The name of an icon that is used in displaying the annotation. Possible values are different for different
            annotation types. See
            <see cref="M:iText.Kernel.Pdf.Annot.PdfSoundAnnotation.SetIconName(iText.Kernel.Pdf.PdfName)"/>
            .
            </remarks>
            <returns>
            a
            <see cref="T:iText.Kernel.Pdf.PdfName"/>
            that specifies the icon for displaying annotation, or null if icon name is not specified.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfSoundAnnotation.SetIconName(iText.Kernel.Pdf.PdfName)">
            <summary>The name of an icon that is used in displaying the annotation.</summary>
            <param name="name">
            a
            <see cref="T:iText.Kernel.Pdf.PdfName"/>
            that specifies the icon for displaying annotation. Possible values are different
            for different annotation types:
            <ul>
            <li>Speaker</li>
            <li>Mic</li>
            </ul>
            Additional names may be supported as well.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfSoundAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfSquareAnnotation.#ctor(iText.Kernel.Pdf.PdfDictionary)">
            <summary>
            see
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.MakeAnnotation(iText.Kernel.Pdf.PdfObject)"/>
            </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfSquareAnnotation.GetBorderStyle">
            <summary>The dictionaries for some annotation types (such as free text and polygon annotations) can include the BS entry.
                </summary>
            <remarks>
            The dictionaries for some annotation types (such as free text and polygon annotations) can include the BS entry.
            That entry specifies a border style dictionary that has more settings than the array specified for the Border
            entry (see
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.GetBorder"/>
            ). If an annotation dictionary includes the BS entry, then the Border
            entry is ignored. If annotation includes AP (see
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.GetAppearanceDictionary"/>
            ) it takes
            precedence over the BS entry. For more info on BS entry see ISO-320001, Table 166.
            </remarks>
            <returns>
            
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            which is a border style dictionary or null if it is not specified.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfSquareAnnotation.SetBorderStyle(iText.Kernel.Pdf.PdfDictionary)">
            <summary>
            Sets border style dictionary that has more settings than the array specified for the Border entry (
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.GetBorder"/>
            ).
            See ISO-320001, Table 166 and
            <see cref="M:iText.Kernel.Pdf.Annot.PdfSquareAnnotation.GetBorderStyle"/>
            for more info.
            </summary>
            <param name="borderStyle">
            a border style dictionary specifying the line width and dash pattern that shall be used
            in drawing the annotation’s border.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfSquareAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfSquareAnnotation.SetBorderStyle(iText.Kernel.Pdf.PdfName)">
            <summary>Setter for the annotation's preset border style.</summary>
            <remarks>
            Setter for the annotation's preset border style. Possible values are
            <ul>
            <li>
            <see cref="F:iText.Kernel.Pdf.Annot.PdfAnnotation.STYLE_SOLID"/>
            - A solid rectangle surrounding the annotation.</li>
            <li>
            <see cref="F:iText.Kernel.Pdf.Annot.PdfAnnotation.STYLE_DASHED"/>
            - A dashed rectangle surrounding the annotation.</li>
            <li>
            <see cref="F:iText.Kernel.Pdf.Annot.PdfAnnotation.STYLE_BEVELED"/>
            - A simulated embossed rectangle that appears to be raised above the surface of the page.</li>
            <li>
            <see cref="F:iText.Kernel.Pdf.Annot.PdfAnnotation.STYLE_INSET"/>
            - A simulated engraved rectangle that appears to be recessed below the surface of the page.</li>
            <li>
            <see cref="F:iText.Kernel.Pdf.Annot.PdfAnnotation.STYLE_UNDERLINE"/>
            - A single line along the bottom of the annotation rectangle.</li>
            </ul>
            See also ISO-320001, Table 166.
            </remarks>
            <param name="style">The new value for the annotation's border style.</param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfSquareAnnotation"/>
            instance.
            </returns>
            <seealso cref="M:iText.Kernel.Pdf.Annot.PdfSquareAnnotation.GetBorderStyle"/>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfSquareAnnotation.SetDashPattern(iText.Kernel.Pdf.PdfArray)">
            <summary>Setter for the annotation's preset dashed border style.</summary>
            <remarks>
            Setter for the annotation's preset dashed border style. This property has affect only if
            <see cref="F:iText.Kernel.Pdf.Annot.PdfAnnotation.STYLE_DASHED"/>
            style was used for the annotation border style (see
            <see cref="M:iText.Kernel.Pdf.Annot.PdfSquareAnnotation.SetBorderStyle(iText.Kernel.Pdf.PdfName)"/>
            .
            See ISO-320001 8.4.3.6, "Line Dash Pattern" for the format in which dash pattern shall be specified.
            </remarks>
            <param name="dashPattern">
            a dash array defining a pattern of dashes and gaps that
            shall be used in drawing a dashed border.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfSquareAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfSquareAnnotation.GetRectangleDifferences">
            <summary>
            A set of four numbers describing the numerical differences between two rectangles:
            the Rect entry of the annotation and the actual boundaries of the underlying square.
            </summary>
            <returns>
            null if not specified, otherwise a
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            with four numbers which correspond to the
            differences in default user space between the left, top, right, and bottom coordinates of Rect and those
            of the inner rectangle, respectively.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfSquareAnnotation.SetRectangleDifferences(iText.Kernel.Pdf.PdfArray)">
            <summary>
            A set of four numbers describing the numerical differences between two rectangles:
            the Rect entry of the annotation and the actual boundaries of the underlying square.
            </summary>
            <param name="rect">
            a
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            with four numbers which correspond to the differences in default user space between
            the left, top, right, and bottom coordinates of Rect and those of the inner rectangle, respectively.
            Each value shall be greater than or equal to 0. The sum of the top and bottom differences shall be
            less than the height of Rect, and the sum of the left and right differences shall be less than
            the width of Rect.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfSquareAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfSquareAnnotation.GetBorderEffect">
            <summary>Gets a border effect dictionary that specifies an effect that shall be applied to the border of the annotations.
                </summary>
            <returns>
            a
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            , which is a border effect dictionary (see ISO-320001, Table 167).
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfSquareAnnotation.SetBorderEffect(iText.Kernel.Pdf.PdfDictionary)">
            <summary>Sets a border effect dictionary that specifies an effect that shall be applied to the border of the annotations.
                </summary>
            <param name="borderEffect">
            a
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            which contents shall be specified in accordance to ISO-320001, Table 167.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfSquareAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfSquareAnnotation.GetInteriorColor">
            <summary>The interior color which is used to fill the annotation's rectangle.</summary>
            <returns>
            
            <see cref="T:iText.Kernel.Colors.Color"/>
            of either
            <see cref="T:iText.Kernel.Colors.DeviceGray"/>
            ,
            <see cref="T:iText.Kernel.Colors.DeviceRgb"/>
            or
            <see cref="T:iText.Kernel.Colors.DeviceCmyk"/>
            type which defines
            interior color of the annotation, or null if interior color is not specified.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfSquareAnnotation.SetInteriorColor(iText.Kernel.Pdf.PdfArray)">
            <summary>
            An array of numbers in the range 0.0 to 1.0 specifying the interior color
            which is used to fill the annotation's rectangle.
            </summary>
            <param name="interiorColor">
            a
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            of numbers in the range 0.0 to 1.0. The number of array elements determines
            the colour space in which the colour is defined: 0 - No colour, transparent; 1 - DeviceGray,
            3 - DeviceRGB, 4 - DeviceCMYK. For the
            <see cref="T:iText.Kernel.Pdf.Annot.PdfRedactAnnotation"/>
            number of elements shall be
            equal to 3 (which defines DeviceRGB colour space).
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfSquareAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfSquareAnnotation.SetInteriorColor(System.Single[])">
            <summary>
            An array of numbers in the range 0.0 to 1.0 specifying the interior color
            which is used to fill the annotation's rectangle.
            </summary>
            <param name="interiorColor">an array of floats in the range 0.0 to 1.0.</param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfSquareAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfStampAnnotation.#ctor(iText.Kernel.Pdf.PdfDictionary)">
            <summary>
            see
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.MakeAnnotation(iText.Kernel.Pdf.PdfObject)"/>
            </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfStampAnnotation.GetIconName">
            <summary>The name of an icon that is used in displaying the annotation.</summary>
            <remarks>
            The name of an icon that is used in displaying the annotation.
            Possible values are described in
            <see cref="M:iText.Kernel.Pdf.Annot.PdfStampAnnotation.SetIconName(iText.Kernel.Pdf.PdfName)"/>
            .
            </remarks>
            <returns>
            a
            <see cref="T:iText.Kernel.Pdf.PdfName"/>
            that specifies the icon for displaying annotation, or null if icon name is not specified.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfStampAnnotation.SetIconName(iText.Kernel.Pdf.PdfName)">
            <summary>The name of an icon that is used in displaying the annotation.</summary>
            <param name="name">
            a
            <see cref="T:iText.Kernel.Pdf.PdfName"/>
            that specifies the icon for displaying annotation. Possible values are:
            <ul>
            <li>Approved</li>
            <li>Experimental</li>
            <li>NotApproved</li>
            <li>AsIs</li>
            <li>Expired</li>
            <li>NotForPublicRelease</li>
            <li>Confidential</li>
            <li>Final</li>
            <li>Sold</li>
            <li>Departmental</li>
            <li>ForComment</li>
            <li>TopSecret</li>
            <li>Draft</li>
            <li>ForPublicRelease.</li>
            </ul>
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfStampAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfTextAnnotation.#ctor(iText.Kernel.Pdf.PdfDictionary)">
            <summary>
            see
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.MakeAnnotation(iText.Kernel.Pdf.PdfObject)"/>
            </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfTextAnnotation.GetOpen">
            <summary>A flag specifying whether the annotation shall initially be displayed open.</summary>
            <remarks>
            A flag specifying whether the annotation shall initially be displayed open.
            This flag has affect to not all kinds of annotations.
            </remarks>
            <returns>true if annotation is initially open, false - if closed.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfTextAnnotation.SetOpen(System.Boolean)">
            <summary>Sets a flag specifying whether the annotation shall initially be displayed open.</summary>
            <remarks>
            Sets a flag specifying whether the annotation shall initially be displayed open.
            This flag has affect to not all kinds of annotations.
            </remarks>
            <param name="open">true if annotation shall initially be open, false - if closed.</param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfTextAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfTextAnnotation.GetIconName">
            <summary>The name of an icon that is used in displaying the annotation.</summary>
            <remarks>
            The name of an icon that is used in displaying the annotation.
            Possible values are described in
            <see cref="M:iText.Kernel.Pdf.Annot.PdfTextAnnotation.SetIconName(iText.Kernel.Pdf.PdfName)"/>
            .
            </remarks>
            <returns>
            a
            <see cref="T:iText.Kernel.Pdf.PdfName"/>
            that specifies the icon for displaying annotation, or null if icon name is not specified.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfTextAnnotation.SetIconName(iText.Kernel.Pdf.PdfName)">
            <summary>The name of an icon that is used in displaying the annotation.</summary>
            <param name="name">
            a
            <see cref="T:iText.Kernel.Pdf.PdfName"/>
            that specifies the icon for displaying annotation. Possible values are:
            <ul>
            <li>Comment</li>
            <li>Key</li>
            <li>Note</li>
            <li>Help</li>
            <li>NewParagraph</li>
            <li>Paragraph</li>
            <li>Insert</li>
            </ul>
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfTextAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="F:iText.Kernel.Pdf.Annot.PdfTextMarkupAnnotation.MarkupHighlight">
            <summary>Subtypes</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfTextMarkupAnnotation.#ctor(iText.Kernel.Pdf.PdfDictionary)">
            <summary>
            see
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.MakeAnnotation(iText.Kernel.Pdf.PdfObject)"/>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.Pdf.Annot.PdfTextMarkupAnnotation.CreateHighLight(iText.Kernel.Geom.Rectangle,System.Single[])" -->
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.Pdf.Annot.PdfTextMarkupAnnotation.CreateUnderline(iText.Kernel.Geom.Rectangle,System.Single[])" -->
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.Pdf.Annot.PdfTextMarkupAnnotation.CreateStrikeout(iText.Kernel.Geom.Rectangle,System.Single[])" -->
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.Pdf.Annot.PdfTextMarkupAnnotation.CreateSquiggly(iText.Kernel.Geom.Rectangle,System.Single[])" -->
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.Pdf.Annot.PdfTextMarkupAnnotation.GetQuadPoints" -->
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.Pdf.Annot.PdfTextMarkupAnnotation.SetQuadPoints(iText.Kernel.Pdf.PdfArray)" -->
        <!-- Badly formed XML comment ignored for member "T:iText.Kernel.Pdf.Annot.PdfTrapNetworkAnnotation" -->
        <member name="M:iText.Kernel.Pdf.Annot.PdfTrapNetworkAnnotation.#ctor(iText.Kernel.Geom.Rectangle,iText.Kernel.Pdf.Xobject.PdfFormXObject)">
            <summary>
            Creates a
            <see cref="T:iText.Kernel.Pdf.Annot.PdfTrapNetworkAnnotation"/>
            instance. Note that there shall be at most one trap network annotation
            per page, which shall be the last element in the page’s Annots array.
            TrapNet annotations are deprecated in PDF 2.0.
            </summary>
            <param name="rect">
            the annotation rectangle, defining the location of the annotation on the page
            in default user space units. See
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.SetRectangle(iText.Kernel.Pdf.PdfArray)"/>
            .
            </param>
            <param name="appearanceStream">
            the form XObject defining a trap network which body contains the graphics objects needed
            to paint the traps making up the trap network. Process colour model shall be defined for the
            appearance stream (see
            <see cref="M:iText.Kernel.Pdf.Xobject.PdfFormXObject.SetProcessColorModel(iText.Kernel.Pdf.PdfName)"/>
            .
            See also ISO-320001 Table 367 "Additional entries specific to a trap network appearance stream".
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfTrapNetworkAnnotation.#ctor(iText.Kernel.Pdf.PdfDictionary)">
            <summary>
            Creates a
            <see cref="T:iText.Kernel.Pdf.Annot.PdfLineAnnotation"/>
            instance from the given
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            that represents annotation object. This method is useful for property reading in reading mode or
            modifying in stamping mode.
            TrapNet annotations are deprecated in PDF 2.0.
            </summary>
            <param name="pdfObject">
            a
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            that represents existing annotation in the document.
            see
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.MakeAnnotation(iText.Kernel.Pdf.PdfObject)"/>
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfTrapNetworkAnnotation.GetSubtype">
            <summary><inheritDoc/></summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.Pdf.Annot.PdfTrapNetworkAnnotation.SetLastModified(iText.Kernel.Pdf.PdfDate)" -->
        <member name="M:iText.Kernel.Pdf.Annot.PdfTrapNetworkAnnotation.GetLastModified">
            <summary>The date and time when the trap network was most recently modified.</summary>
            <returns>
            a
            <see cref="T:iText.Kernel.Pdf.PdfString"/>
            with date. The format should be a date string as described
            in ISO-320001 7.9.4, "Dates". See also
            <see cref="M:iText.Kernel.Pdf.PdfDate.Decode(System.String)"/>
            .
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.Pdf.Annot.PdfTrapNetworkAnnotation.SetVersion(iText.Kernel.Pdf.PdfArray)" -->
        <member name="M:iText.Kernel.Pdf.Annot.PdfTrapNetworkAnnotation.GetVersion">
            <summary>
            An unordered array of all objects present in the page description at the time the trap networks were generated
            and that, if changed, could affect the appearance of the page.
            </summary>
            <returns>
            an unordered
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            of all objects present in the page description at the time the trap networks
            were generated.
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.Pdf.Annot.PdfTrapNetworkAnnotation.SetAnnotStates(iText.Kernel.Pdf.PdfArray)" -->
        <member name="M:iText.Kernel.Pdf.Annot.PdfTrapNetworkAnnotation.GetAnnotStates">
            <summary>An array of name objects representing the appearance states for annotations associated with the page.
                </summary>
            <remarks>
            An array of name objects representing the appearance states for annotations associated with the page.
            See also
            <see cref="M:iText.Kernel.Pdf.Annot.PdfTrapNetworkAnnotation.SetAnnotStates(iText.Kernel.Pdf.PdfArray)"/>
            .
            </remarks>
            <returns>
            a
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            of name objects representing the appearance states for annotations associated with the page,
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfTrapNetworkAnnotation.SetFauxedFonts(iText.Kernel.Pdf.PdfArray)">
            <summary>
            An array of font dictionaries representing fonts that were fauxed (replaced by substitute fonts) during the
            generation of trap networks for the page.
            </summary>
            <param name="fauxedFonts">
            a
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            of
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            each of which represent font in the document.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfTrapNetworkAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfTrapNetworkAnnotation.SetFauxedFonts(System.Collections.Generic.IList{iText.Kernel.Font.PdfFont})">
            <summary>
            A list of font dictionaries representing fonts that were fauxed (replaced by substitute fonts) during the
            generation of trap networks for the page.
            </summary>
            <param name="fauxedFonts">
            a
            <see cref="!:System.Collections.IList&lt;E&gt;"/>
            of
            <see cref="T:iText.Kernel.Font.PdfFont"/>
            objects.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfTrapNetworkAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfTrapNetworkAnnotation.GetFauxedFonts">
            <summary>
            An array of font dictionaries representing fonts that were fauxed (replaced by substitute fonts) during the
            generation of trap networks for the page.
            </summary>
            <returns>
            a
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            of
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            each of which represent font in the document.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfWatermarkAnnotation.#ctor(iText.Kernel.Pdf.PdfDictionary)">
            <summary>
            see
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.MakeAnnotation(iText.Kernel.Pdf.PdfObject)"/>
            </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfWidgetAnnotation.#ctor(iText.Kernel.Pdf.PdfDictionary)">
            <summary>
            see
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.MakeAnnotation(iText.Kernel.Pdf.PdfObject)"/>
            </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfWidgetAnnotation.SetHighlightMode(iText.Kernel.Pdf.PdfName)">
            <summary>Setter for the annotation's highlighting mode.</summary>
            <remarks>
            Setter for the annotation's highlighting mode. Possible values are
            <ul>
            <li>
            <see cref="F:iText.Kernel.Pdf.Annot.PdfAnnotation.HIGHLIGHT_NONE"/>
            - No highlighting.</li>
            <li>
            <see cref="F:iText.Kernel.Pdf.Annot.PdfAnnotation.HIGHLIGHT_INVERT"/>
            - Invert the contents of the annotation rectangle.</li>
            <li>
            <see cref="F:iText.Kernel.Pdf.Annot.PdfAnnotation.HIGHLIGHT_OUTLINE"/>
            - Invert the annotation's border.</li>
            <li>
            <see cref="F:iText.Kernel.Pdf.Annot.PdfAnnotation.HIGHLIGHT_PUSH"/>
            - Display the annotation?s down appearance, if any.</li>
            <li>
            <see cref="F:iText.Kernel.Pdf.Annot.PdfAnnotation.HIGHLIGHT_TOGGLE"/>
            - Same as P.</li>
            </ul>
            </remarks>
            <param name="mode">The new value for the annotation's highlighting mode.</param>
            <returns>The widget annotation which this method was called on.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfWidgetAnnotation.GetHighlightMode">
            <summary>Getter for the annotation's highlighting mode.</summary>
            <returns>Current value of the annotation's highlighting mode.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfWidgetAnnotation.ReleaseFormFieldFromWidgetAnnotation">
            <summary>This method removes all widget annotation entries from the form field  the given annotation merged with.
                </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfWidgetAnnotation.SetVisibility(System.Int32)">
            <summary>
            Set the visibility flags of the Widget annotation
            Options are: HIDDEN, HIDDEN_BUT_PRINTABLE, VISIBLE, VISIBLE_BUT_DOES_NOT_PRINT
            </summary>
            <param name="visibility">visibility option</param>
            <returns>the edited widget annotation</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfWidgetAnnotation.GetAction">
            <summary>
            An
            <see cref="T:iText.Kernel.Pdf.Action.PdfAction"/>
            to perform, such as launching an application, playing a sound,
            changing an annotation’s appearance state etc, when the annotation is activated.
            </summary>
            <returns>
            
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            which defines the characteristics and behaviour of an action.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfWidgetAnnotation.SetAction(iText.Kernel.Pdf.Action.PdfAction)">
            <summary>
            Sets a
            <see cref="T:iText.Kernel.Pdf.Action.PdfAction"/>
            to this annotation which will be performed when the annotation is activated.
            </summary>
            <param name="action">
            
            <see cref="T:iText.Kernel.Pdf.Action.PdfAction"/>
            to set to this annotation.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfWidgetAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfWidgetAnnotation.GetAdditionalAction">
            <summary>An additional actions dictionary that extends the set of events that can trigger the execution of an action.
                </summary>
            <remarks>
            An additional actions dictionary that extends the set of events that can trigger the execution of an action.
            See ISO-320001 12.6.3 Trigger Events.
            </remarks>
            <returns>
            an additional actions
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            .
            </returns>
            <seealso cref="M:iText.Kernel.Pdf.Annot.PdfWidgetAnnotation.GetAction"/>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfWidgetAnnotation.SetAdditionalAction(iText.Kernel.Pdf.PdfName,iText.Kernel.Pdf.Action.PdfAction)">
            <summary>
            Sets an additional
            <see cref="T:iText.Kernel.Pdf.Action.PdfAction"/>
            to this annotation which will be performed in response to
            the specific trigger event defined by
            <paramref name="key"/>
            . See ISO-320001 12.6.3, "Trigger Events".
            </summary>
            <param name="key">
            a
            <see cref="T:iText.Kernel.Pdf.PdfName"/>
            that denotes a type of the additional action to set.
            </param>
            <param name="action">
            
            <see cref="T:iText.Kernel.Pdf.Action.PdfAction"/>
            to set as additional to this annotation.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfWidgetAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfWidgetAnnotation.GetAppearanceCharacteristics">
            <summary>
            An appearance characteristics dictionary containing additional information for constructing the
            annotation’s appearance stream.
            </summary>
            <remarks>
            An appearance characteristics dictionary containing additional information for constructing the
            annotation’s appearance stream. See ISO-320001, Table 189.
            </remarks>
            <returns>an appearance characteristics dictionary or null if it isn't specified.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfWidgetAnnotation.SetAppearanceCharacteristics(iText.Kernel.Pdf.PdfDictionary)">
            <summary>
            Sets an appearance characteristics dictionary containing additional information for constructing the
            annotation’s appearance stream.
            </summary>
            <remarks>
            Sets an appearance characteristics dictionary containing additional information for constructing the
            annotation’s appearance stream. See ISO-320001, Table 189.
            </remarks>
            <param name="characteristics">
            the
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            with additional information for appearance stream.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfWidgetAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfWidgetAnnotation.GetBorderStyle">
            <summary>The dictionaries for some annotation types (such as free text and polygon annotations) can include the BS entry.
                </summary>
            <remarks>
            The dictionaries for some annotation types (such as free text and polygon annotations) can include the BS entry.
            That entry specifies a border style dictionary that has more settings than the array specified for the Border
            entry (see
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.GetBorder"/>
            ). If an annotation dictionary includes the BS entry, then the Border
            entry is ignored. If annotation includes AP (see
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.GetAppearanceDictionary"/>
            ) it takes
            precedence over the BS entry. For more info on BS entry see ISO-320001, Table 166.
            </remarks>
            <returns>
            
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            which is a border style dictionary or null if it is not specified.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfWidgetAnnotation.SetBorderStyle(iText.Kernel.Pdf.PdfDictionary)">
            <summary>
            Sets border style dictionary that has more settings than the array specified for the Border entry (
            <see cref="M:iText.Kernel.Pdf.Annot.PdfAnnotation.GetBorder"/>
            ).
            See ISO-320001, Table 166 and
            <see cref="M:iText.Kernel.Pdf.Annot.PdfWidgetAnnotation.GetBorderStyle"/>
            for more info.
            </summary>
            <param name="borderStyle">
            a border style dictionary specifying the line width and dash pattern that shall be used
            in drawing the annotation’s border.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfWidgetAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfWidgetAnnotation.SetBorderStyle(iText.Kernel.Pdf.PdfName)">
            <summary>Setter for the annotation's preset border style.</summary>
            <remarks>
            Setter for the annotation's preset border style. Possible values are
            <ul>
            <li>
            <see cref="F:iText.Kernel.Pdf.Annot.PdfAnnotation.STYLE_SOLID"/>
            - A solid rectangle surrounding the annotation.</li>
            <li>
            <see cref="F:iText.Kernel.Pdf.Annot.PdfAnnotation.STYLE_DASHED"/>
            - A dashed rectangle surrounding the annotation.</li>
            <li>
            <see cref="F:iText.Kernel.Pdf.Annot.PdfAnnotation.STYLE_BEVELED"/>
            - A simulated embossed rectangle that appears to be raised above the surface of the page.</li>
            <li>
            <see cref="F:iText.Kernel.Pdf.Annot.PdfAnnotation.STYLE_INSET"/>
            - A simulated engraved rectangle that appears to be recessed below the surface of the page.</li>
            <li>
            <see cref="F:iText.Kernel.Pdf.Annot.PdfAnnotation.STYLE_UNDERLINE"/>
            - A single line along the bottom of the annotation rectangle.</li>
            </ul>
            See also ISO-320001, Table 166.
            </remarks>
            <param name="style">The new value for the annotation's border style.</param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfWidgetAnnotation"/>
            instance.
            </returns>
            <seealso cref="M:iText.Kernel.Pdf.Annot.PdfWidgetAnnotation.GetBorderStyle"/>
        </member>
        <member name="M:iText.Kernel.Pdf.Annot.PdfWidgetAnnotation.SetDashPattern(iText.Kernel.Pdf.PdfArray)">
            <summary>Setter for the annotation's preset dashed border style.</summary>
            <remarks>
            Setter for the annotation's preset dashed border style. This property has affect only if
            <see cref="F:iText.Kernel.Pdf.Annot.PdfAnnotation.STYLE_DASHED"/>
            style was used for the annotation border style (see
            <see cref="M:iText.Kernel.Pdf.Annot.PdfWidgetAnnotation.SetBorderStyle(iText.Kernel.Pdf.PdfName)"/>
            .
            See ISO-320001 8.4.3.6, "Line Dash Pattern" for the format in which dash pattern shall be specified.
            </remarks>
            <param name="dashPattern">
            a dash array defining a pattern of dashes and gaps that
            shall be used in drawing a dashed border.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Annot.PdfWidgetAnnotation"/>
            instance.
            </returns>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.CanvasArtifact">
            <summary>
            A subclass of
            <see cref="T:iText.Kernel.Pdf.Canvas.CanvasTag"/>
            for Artifacts.
            In Tagged PDF, an object can be marked as an Artifact in order to signify
            that it is more part of the document structure than of the document content.
            Examples are page headers, layout features, etc. Screen readers can choose to
            ignore Artifacts.
            </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.CanvasArtifact.#ctor">
            <summary>
            Creates a CanvasArtifact object, which is a
            <see cref="T:iText.Kernel.Pdf.Canvas.CanvasTag"/>
            with a role
            of
            <see cref="F:iText.Kernel.Pdf.PdfName.Artifact">Artifact</see>
            .
            </summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.CanvasGraphicsState">
            <summary>This class is designed for internal usage.</summary>
            <remarks>
            This class is designed for internal usage. <br />
            Use <code>PdfExtGState</code> class and <code>PdfCanvas#setExtGState()</code> method for setting extended graphics properties.
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "F:iText.Kernel.Pdf.Canvas.CanvasGraphicsState.ctm" -->
        <!-- Badly formed XML comment ignored for member "F:iText.Kernel.Pdf.Canvas.CanvasGraphicsState.dashPattern" -->
        <member name="M:iText.Kernel.Pdf.Canvas.CanvasGraphicsState.#ctor">
            <summary>Internal empty and default constructor.</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.CanvasGraphicsState.#ctor(iText.Kernel.Pdf.Canvas.CanvasGraphicsState)">
            <summary>Copy constructor.</summary>
            <param name="source">the Graphics State to copy from</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.CanvasGraphicsState.UpdateFromExtGState(iText.Kernel.Pdf.PdfDictionary)">
            <summary>Updates this object with the values from a dictionary.</summary>
            <param name="extGState">the dictionary containing source parameters</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.CanvasGraphicsState.GetCtm">
            <returns>current transformation matrix.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.CanvasGraphicsState.UpdateCtm(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>Updates current transformation matrix.</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.CanvasGraphicsState.UpdateCtm(iText.Kernel.Geom.Matrix)">
            <summary>Updates current transformation matrix.</summary>
            <param name="newCtm">new current transformation matrix.</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.CanvasGraphicsState.UpdateFromExtGState(iText.Kernel.Pdf.Extgstate.PdfExtGState)">
            <summary>Updates current graphic state with values from extended graphic state dictionary.</summary>
            <param name="extGState">the wrapper around the extended graphic state dictionary</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.CanvasGraphicsState.UpdateFromExtGState(iText.Kernel.Pdf.Extgstate.PdfExtGState,iText.Kernel.Pdf.PdfDocument)">
            <summary>Updates current graphic state with values from extended graphic state dictionary.</summary>
            <param name="extGState">the wrapper around the extended graphic state dictionary</param>
            <param name="pdfDocument">the document to retrieve fonts from. Needed when the newly created fonts are used
                </param>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.CanvasTag">
            <summary>This class represents a single tag on a single piece of marked content.</summary>
            <remarks>
            This class represents a single tag on a single piece of marked content.
            <p>
            In Tagged PDF, a tag is the basic structure unit for marking content. The tag
            structure and hierarchy is largely comparable to HTML. As in HTML, every tag
            type has a name, defined here in the <code>role</code> attribute. The tagging
            mechanism in Tagged PDF is extensible, so PDF creators can choose to create
            custom tags.</p>
            </remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.CanvasTag.role">
            <summary>The type of the tag.</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.CanvasTag.properties">
            <summary>The properties of the tag.</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.CanvasTag.#ctor(iText.Kernel.Pdf.PdfName)">
            <summary>Creates a tag that is referenced to the document's tag structure (i.e.</summary>
            <remarks>
            Creates a tag that is referenced to the document's tag structure (i.e.
            logical structure).
            </remarks>
            <param name="role">the type of tag</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.CanvasTag.#ctor(iText.Kernel.Pdf.PdfName,System.Int32)">
            <summary>Creates a tag that is referenced to the document's tag structure (i.e.</summary>
            <remarks>
            Creates a tag that is referenced to the document's tag structure (i.e.
            logical structure).
            </remarks>
            <param name="role">the type of tag</param>
            <param name="mcid">marked content id which serves as a reference to the document's logical structure</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.CanvasTag.#ctor(iText.Kernel.Pdf.Tagging.PdfMcr)">
            <summary>Creates a tag that is referenced to the document's tag structure (i.e.</summary>
            <remarks>
            Creates a tag that is referenced to the document's tag structure (i.e.
            logical structure).
            </remarks>
            <param name="mcr">
            the
            <see cref="T:iText.Kernel.Pdf.Tagging.PdfMcr">Marked Content Reference</see>
            wrapper object
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.CanvasTag.GetRole">
            <summary>Get the role of the tag.</summary>
            <returns>the role of the tag as a PdfName</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.CanvasTag.GetMcid">
            <summary>Get the marked content id of the tag.</summary>
            <returns>marked content id</returns>
            <exception cref="T:System.InvalidOperationException">if there is no MCID</exception>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.CanvasTag.HasMcid">
            <summary>Determine if an MCID is available</summary>
            <returns>true if the MCID is available, false otherwise</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.CanvasTag.SetProperties(iText.Kernel.Pdf.PdfDictionary)">
            <summary>
            Sets a dictionary of properties to the
            <see cref="T:iText.Kernel.Pdf.Canvas.CanvasTag">tag</see>
            's properties. All existing properties (if any) will be lost.
            </summary>
            <param name="properties">a dictionary</param>
            <returns>
            current
            <see cref="T:iText.Kernel.Pdf.Canvas.CanvasTag"/>
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.CanvasTag.AddProperty(iText.Kernel.Pdf.PdfName,iText.Kernel.Pdf.PdfObject)">
            <summary>
            Adds a single property to the
            <see cref="T:iText.Kernel.Pdf.Canvas.CanvasTag">tag</see>
            's properties.
            </summary>
            <param name="name">a key</param>
            <param name="value">the value for the key</param>
            <returns>
            current
            <see cref="T:iText.Kernel.Pdf.Canvas.CanvasTag"/>
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.CanvasTag.RemoveProperty(iText.Kernel.Pdf.PdfName)">
            <summary>
            Removes a single property from the
            <see cref="T:iText.Kernel.Pdf.Canvas.CanvasTag">tag</see>
            's properties.
            </summary>
            <param name="name">the key of the key-value pair to be removed</param>
            <returns>
            current
            <see cref="T:iText.Kernel.Pdf.Canvas.CanvasTag"/>
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.CanvasTag.GetProperty(iText.Kernel.Pdf.PdfName)">
            <summary>
            Gets a property from the
            <see cref="T:iText.Kernel.Pdf.Canvas.CanvasTag">tag</see>
            's properties dictionary.
            </summary>
            <param name="name">the key of the key-value pair to be retrieved</param>
            <returns>the value corresponding to the key</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.CanvasTag.GetProperties">
            <summary>Get the properties of the tag.</summary>
            <returns>properties of the tag</returns>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Draw.DashedLine">
            <summary>
            Implementation of
            <see cref="T:iText.Kernel.Pdf.Canvas.Draw.ILineDrawer"/>
            which draws a dashed horizontal line over
            the middle of the specified rectangle.
            </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Draw.DashedLine.#ctor(System.Single)">
            <summary>
            Creates an instance of
            <see cref="T:iText.Kernel.Pdf.Canvas.Draw.DashedLine"/>
            with the specified line width.
            </summary>
            <param name="lineWidth"/>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Draw.DashedLine.GetLineWidth">
            <summary>Gets line width in points</summary>
            <returns>line thickness</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Draw.DashedLine.SetLineWidth(System.Single)">
            <summary>Sets line width in points</summary>
            <param name="lineWidth">new line width</param>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Draw.DottedLine">
            <summary>
            Implementation of
            <see cref="T:iText.Kernel.Pdf.Canvas.Draw.ILineDrawer"/>
            which draws a dotted horizontal line along
            the bottom edge of the specified rectangle.
            </summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.Draw.DottedLine.gap">
            <summary>the gap between the dots.</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Draw.DottedLine.#ctor">
            <summary>Constructs a dotted horizontal line which will be drawn along the bottom edge of the specified rectangle.
                </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Draw.DottedLine.#ctor(System.Single,System.Single)">
            <summary>Constructs a dotted horizontal line which will be drawn along the bottom edge of the specified rectangle.
                </summary>
            <param name="lineWidth">the width of the line</param>
            <param name="gap">the gap between the center of the dots of the dotted line.</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Draw.DottedLine.#ctor(System.Single)">
            <summary>Constructs a dotted horizontal line which will be drawn along the bottom edge of the specified rectangle.
                </summary>
            <param name="lineWidth">the width of the line</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Draw.DottedLine.GetGap">
            <summary>Getter for the gap between the center of the dots of the dotted line.</summary>
            <returns>the gap between the center of the dots</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Draw.DottedLine.SetGap(System.Single)">
            <summary>Setter for the gap between the center of the dots of the dotted line.</summary>
            <param name="gap">the gap between the center of the dots</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Draw.DottedLine.GetLineWidth">
            <summary>Gets line width in points</summary>
            <returns>line thickness</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Draw.DottedLine.SetLineWidth(System.Single)">
            <summary>Sets line width in points</summary>
            <param name="lineWidth">new line width</param>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Draw.ILineDrawer">
            <summary>
            The
            <see cref="T:iText.Kernel.Pdf.Canvas.Draw.ILineDrawer"/>
            defines a drawing operation on a
            <see cref="T:iText.Kernel.Pdf.Canvas.PdfCanvas"/>
            <br />
            This interface allows to customize the 'empty' space in a
            <c>com.itextpdf.layout.element.TabStop</c>
            through a Strategy design
            pattern
            </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Draw.ILineDrawer.Draw(iText.Kernel.Pdf.Canvas.PdfCanvas,iText.Kernel.Geom.Rectangle)">
            <summary>
            Performs configurable drawing operations related to specific region
            coordinates on a canvas.
            </summary>
            <param name="canvas">the canvas to draw on</param>
            <param name="drawArea">
            the rectangle in relation to which to fulfill drawing
            instructions
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Draw.ILineDrawer.GetLineWidth">
            <summary>Gets the width of the line</summary>
            <returns>width of the line</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Draw.ILineDrawer.SetLineWidth(System.Single)">
            <summary>Sets line width in points</summary>
            <param name="lineWidth">new line width</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Draw.ILineDrawer.GetColor">
            <summary>Gets the color of the line</summary>
            <returns>color of the line</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Draw.ILineDrawer.SetColor(iText.Kernel.Colors.Color)">
            <summary>Sets line color</summary>
            <param name="color">new line color</param>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Draw.SolidLine">
            <summary>
            Implementation of
            <see cref="T:iText.Kernel.Pdf.Canvas.Draw.ILineDrawer"/>
            which draws a solid horizontal line along
            the bottom edge of the specified rectangle.
            </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Draw.SolidLine.#ctor">
            <summary>Constructs an instance of solid line drawer</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Draw.SolidLine.#ctor(System.Single)">
            <summary>Constructs an instance of solid line drawer with the specified line thickness</summary>
            <param name="lineWidth">line width</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Draw.SolidLine.GetLineWidth">
            <summary>Gets line width in points</summary>
            <returns>line thickness</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Draw.SolidLine.SetLineWidth(System.Single)">
            <summary>Sets line width in points</summary>
            <param name="lineWidth">new line width</param>
        </member>
        <!-- Badly formed XML comment ignored for member "T:iText.Kernel.Pdf.Canvas.Parser.ClipperLib.ClipperBridge" -->
        <member name="F:iText.Kernel.Pdf.Canvas.Parser.ClipperLib.ClipperBridge.floatMultiplier">
            <summary>
            Since the clipper library uses integer coordinates, we should convert
            our floating point numbers into fixed point numbers by multiplying by
            this coefficient.
            </summary>
            <remarks>
            Since the clipper library uses integer coordinates, we should convert
            our floating point numbers into fixed point numbers by multiplying by
            this coefficient. Vary it to adjust the preciseness of the calculations.
            </remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.ClipperLib.ClipperBridge.ConvertToPath(iText.Kernel.Pdf.Canvas.Parser.ClipperLib.PolyTree)">
            <summary>
            Converts Clipper library
            <see cref="T:iText.Kernel.Pdf.Canvas.Parser.ClipperLib.PolyTree"/>
            abstraction into iText
            <see cref="T:iText.Kernel.Geom.Path"/>
            object.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.Pdf.Canvas.Parser.ClipperLib.ClipperBridge.AddPath(iText.Kernel.Pdf.Canvas.Parser.ClipperLib.Clipper,iText.Kernel.Geom.Path,iText.Kernel.Pdf.Canvas.Parser.ClipperLib.PolyType)" -->
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.Pdf.Canvas.Parser.ClipperLib.ClipperBridge.AddPath(iText.Kernel.Pdf.Canvas.Parser.ClipperLib.ClipperOffset,iText.Kernel.Geom.Path,iText.Kernel.Pdf.Canvas.Parser.ClipperLib.JoinType,iText.Kernel.Pdf.Canvas.Parser.ClipperLib.EndType)" -->
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.ClipperLib.ClipperBridge.ConvertToFloatPoints(System.Collections.Generic.IList{iText.Kernel.Pdf.Canvas.Parser.ClipperLib.IntPoint})">
            <summary>
            Converts list of
            <see cref="T:iText.Kernel.Pdf.Canvas.Parser.ClipperLib.IntPoint"/>
            objects into list of
            <see cref="T:iText.Kernel.Geom.Point"/>
            objects.
            </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.ClipperLib.ClipperBridge.ConvertToLongPoints(System.Collections.Generic.IList{iText.Kernel.Geom.Point})">
            <summary>
            Converts list of
            <see cref="T:iText.Kernel.Geom.Point"/>
            objects into list of
            <see cref="T:iText.Kernel.Pdf.Canvas.Parser.ClipperLib.IntPoint"/>
            objects.
            </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.ClipperLib.ClipperBridge.GetJoinType(System.Int32)">
            <summary>
            Converts iText line join style constant into the corresponding constant
            of the Clipper library.
            </summary>
            <param name="lineJoinStyle">
            iText line join style constant. See
            <see cref="T:iText.Kernel.Pdf.Canvas.PdfCanvasConstants"/>
            </param>
            <returns>Clipper line join style constant.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.ClipperLib.ClipperBridge.GetEndType(System.Int32)">
            <summary>
            Converts iText line cap style constant into the corresponding constant
            of the Clipper library.
            </summary>
            <param name="lineCapStyle">
            iText line cap style constant. See
            <see cref="T:iText.Kernel.Pdf.Canvas.PdfCanvasConstants"/>
            </param>
            <returns>Clipper line cap (end type) style constant.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.ClipperLib.ClipperBridge.GetFillType(System.Int32)">
            <summary>
            Converts iText filling rule constant into the corresponding constant
            of the Clipper library.
            </summary>
            <param name="fillingRule">
            Either
            <see cref="F:iText.Kernel.Pdf.Canvas.PdfCanvasConstants.FillingRule.NONZERO_WINDING"/>
            or
            <see cref="F:iText.Kernel.Pdf.Canvas.PdfCanvasConstants.FillingRule.EVEN_ODD"/>
            .
            </param>
            <returns>Clipper fill type constant.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.Pdf.Canvas.Parser.ClipperLib.ClipperBridge.AddPolygonToClipper(iText.Kernel.Pdf.Canvas.Parser.ClipperLib.Clipper,iText.Kernel.Geom.Point[],iText.Kernel.Pdf.Canvas.Parser.ClipperLib.PolyType)" -->
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.Pdf.Canvas.Parser.ClipperLib.ClipperBridge.AddPolylineSubjectToClipper(iText.Kernel.Pdf.Canvas.Parser.ClipperLib.Clipper,iText.Kernel.Geom.Point[])" -->
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Data.ClippingPathInfo.#ctor(iText.Kernel.Pdf.Canvas.CanvasGraphicsState,iText.Kernel.Geom.Path,iText.Kernel.Geom.Matrix)">
            <param name="path">The path to be rendered.</param>
            <param name="ctm">The path to be rendered.</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Data.ClippingPathInfo.GetClippingPath">
            <returns>
            The
            <see cref="T:iText.Kernel.Geom.Path"/>
            which represents current clipping path.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Data.ClippingPathInfo.GetCtm">
            <returns>Current transformation matrix.</returns>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.Data.IEventData">
            <summary>
            Marker interface for the set of classes used to combine
            parameters required for different types of events.
            </summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.Data.ImageRenderInfo">
            <summary>Represents image data from a PDF</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.Parser.Data.ImageRenderInfo.ctm">
            <summary>The coordinate transformation matrix that was in effect when the image was rendered</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.Parser.Data.ImageRenderInfo.colorSpaceDictionary">
            <summary>the color space dictionary from resources which are associated with the image</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.Parser.Data.ImageRenderInfo.isInline">
            <summary>defines if the encountered image was inline</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.Parser.Data.ImageRenderInfo.canvasTagHierarchy">
            <summary>Hierarchy of nested canvas tags for the text from the most inner (nearest to text) tag to the most outer.
                </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Data.ImageRenderInfo.#ctor(System.Collections.Generic.Stack{iText.Kernel.Pdf.Canvas.CanvasTag},iText.Kernel.Pdf.Canvas.CanvasGraphicsState,iText.Kernel.Geom.Matrix,iText.Kernel.Pdf.PdfStream,iText.Kernel.Pdf.PdfName,iText.Kernel.Pdf.PdfDictionary,System.Boolean)">
            <summary>Create an ImageRenderInfo</summary>
            <param name="ctm">the coordinate transformation matrix at the time the image is rendered</param>
            <param name="imageStream">image stream object</param>
            <param name="resourceName"/>
            <param name="colorSpaceDictionary">the color space dictionary from resources which are associated with the image
                </param>
            <param name="isInline">defines if the encountered image was inline</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Data.ImageRenderInfo.GetImage">
            <summary>Gets an image wrapped in ImageXObject.</summary>
            <remarks>
            Gets an image wrapped in ImageXObject.
            You can:
            <ul>
            <li>get image bytes with
            <see cref="M:iText.Kernel.Pdf.Xobject.PdfImageXObject.GetImageBytes(System.Boolean)"/>
            , these image bytes
            represent native image, i.e you can write these bytes to disk and get just an usual image;</li>
            <li>obtain PdfStream object which contains image dictionary with
            <see cref="M:iText.Kernel.Pdf.PdfObjectWrapper`1.GetPdfObject"/>
            method;</li>
            <li>convert image to
            <see cref="!:Java.Awt.Image.BufferedImage"/>
            with
            <see cref="!:iText.Kernel.Pdf.Xobject.PdfImageXObject.GetBufferedImage()"/>
            ;</li>
            </ul>
            </remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Data.ImageRenderInfo.GetStartPoint">
            <returns>a vector in User space representing the start point of the image</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Data.ImageRenderInfo.GetImageCtm">
            <returns>The coordinate transformation matrix which was active when this image was rendered. Coordinates are in User space.
                </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Data.ImageRenderInfo.GetArea">
            <returns>the size of the image, in User space units</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Data.ImageRenderInfo.IsInline">
            <returns>true if image was inlined in original stream.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Data.ImageRenderInfo.GetColorSpaceDictionary">
            <returns>the color space dictionary from resources which are associated with the image</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Data.ImageRenderInfo.GetCanvasTagHierarchy">
            <summary>Gets hierarchy of the canvas tags that wraps given text.</summary>
            <returns>list of the wrapping canvas tags. The first tag is the innermost (nearest to the text).</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Data.ImageRenderInfo.GetMcid">
            <returns>the marked content associated with the TextRenderInfo instance.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Data.ImageRenderInfo.HasMcid(System.Int32)">
            <summary>
            Checks if the text belongs to a marked content sequence
            with a given mcid.
            </summary>
            <param name="mcid">a marked content id</param>
            <returns>true if the text is marked with this id</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Data.ImageRenderInfo.HasMcid(System.Int32,System.Boolean)">
            <summary>
            Checks if the text belongs to a marked content sequence
            with a given mcid.
            </summary>
            <param name="mcid">a marked content id</param>
            <param name="checkTheTopmostLevelOnly">indicates whether to check the topmost level of marked content stack only
                </param>
            <returns>true if the text is marked with this id</returns>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.Data.PathRenderInfo">
            <summary>Contains information relating to painting current path.</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.Parser.Data.PathRenderInfo.NO_OP">
            <summary>End the path object without filling or stroking it.</summary>
            <remarks>
            End the path object without filling or stroking it. This operator shall be a path-painting no-op,
            used primarily for the side effect of changing the current clipping path
            </remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.Parser.Data.PathRenderInfo.STROKE">
            <summary>Value specifying stroke operation to perform on the current path.</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.Parser.Data.PathRenderInfo.FILL">
            <summary>Value specifying fill operation to perform on the current path.</summary>
            <remarks>
            Value specifying fill operation to perform on the current path. When the fill operation
            is performed it should use either nonzero winding or even-odd rule.
            </remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.Parser.Data.PathRenderInfo.canvasTagHierarchy">
            <summary>Hierarchy of nested canvas tags for the text from the most inner (nearest to text) tag to the most outer.
                </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Data.PathRenderInfo.#ctor(System.Collections.Generic.Stack{iText.Kernel.Pdf.Canvas.CanvasTag},iText.Kernel.Pdf.Canvas.CanvasGraphicsState,iText.Kernel.Geom.Path,System.Int32,System.Int32,System.Boolean,System.Int32)">
            <param name="gs">The graphics state.</param>
            <param name="path">The path to be rendered.</param>
            <param name="operation">
            One of the possible combinations of
            <see cref="F:iText.Kernel.Pdf.Canvas.Parser.Data.PathRenderInfo.STROKE"/>
            and
            <see cref="F:iText.Kernel.Pdf.Canvas.Parser.Data.PathRenderInfo.FILL"/>
            values or
            <see cref="F:iText.Kernel.Pdf.Canvas.Parser.Data.PathRenderInfo.NO_OP"/>
            </param>
            <param name="rule">
            Either
            <see cref="F:iText.Kernel.Pdf.Canvas.PdfCanvasConstants.FillingRule.NONZERO_WINDING"/>
            or
            <see cref="F:iText.Kernel.Pdf.Canvas.PdfCanvasConstants.FillingRule.EVEN_ODD"/>
            .
            </param>
            <param name="isClip">True indicates that current path modifies the clipping path, false - if not.</param>
            <param name="clipRule">
            Either
            <see cref="F:iText.Kernel.Pdf.Canvas.PdfCanvasConstants.FillingRule.NONZERO_WINDING"/>
            or
            <see cref="F:iText.Kernel.Pdf.Canvas.PdfCanvasConstants.FillingRule.EVEN_ODD"/>
            .
            </param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.Pdf.Canvas.Parser.Data.PathRenderInfo.#ctor(System.Collections.Generic.Stack{iText.Kernel.Pdf.Canvas.CanvasTag},iText.Kernel.Pdf.Canvas.CanvasGraphicsState,iText.Kernel.Geom.Path,System.Int32)" -->
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Data.PathRenderInfo.GetPath">
            <returns>
            The
            <see cref="T:iText.Kernel.Geom.Path"/>
            to be rendered.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Data.PathRenderInfo.GetOperation">
            <returns>
            <CODE>int</CODE> value which is either
            <see cref="F:iText.Kernel.Pdf.Canvas.Parser.Data.PathRenderInfo.NO_OP"/>
            or one of possible
            combinations of
            <see cref="F:iText.Kernel.Pdf.Canvas.Parser.Data.PathRenderInfo.STROKE"/>
            and
            <see cref="F:iText.Kernel.Pdf.Canvas.Parser.Data.PathRenderInfo.FILL"/>
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Data.PathRenderInfo.GetRule">
            <returns>
            Either
            <see cref="F:iText.Kernel.Pdf.Canvas.PdfCanvasConstants.FillingRule.NONZERO_WINDING"/>
            or
            <see cref="F:iText.Kernel.Pdf.Canvas.PdfCanvasConstants.FillingRule.EVEN_ODD"/>
            .
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Data.PathRenderInfo.IsPathModifiesClippingPath">
            <returns>true indicates that current path modifies the clipping path, false - if not.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Data.PathRenderInfo.GetClippingRule">
            <returns>
            Either
            <see cref="F:iText.Kernel.Pdf.Canvas.PdfCanvasConstants.FillingRule.NONZERO_WINDING"/>
            or
            <see cref="F:iText.Kernel.Pdf.Canvas.PdfCanvasConstants.FillingRule.EVEN_ODD"/>
            .
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Data.PathRenderInfo.GetCtm">
            <returns>Current transformation matrix.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Data.PathRenderInfo.GetCanvasTagHierarchy">
            <summary>Gets hierarchy of the canvas tags that wraps given text.</summary>
            <returns>list of the wrapping canvas tags. The first tag is the innermost (nearest to the text).</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Data.PathRenderInfo.GetMcid">
            <returns>the marked content associated with the TextRenderInfo instance.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Data.PathRenderInfo.HasMcid(System.Int32)">
            <summary>
            Checks if the text belongs to a marked content sequence
            with a given mcid.
            </summary>
            <param name="mcid">a marked content id</param>
            <returns>true if the text is marked with this id</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Data.PathRenderInfo.HasMcid(System.Int32,System.Boolean)">
            <summary>
            Checks if the text belongs to a marked content sequence
            with a given mcid.
            </summary>
            <param name="mcid">a marked content id</param>
            <param name="checkTheTopmostLevelOnly">indicates whether to check the topmost level of marked content stack only
                </param>
            <returns>true if the text is marked with this id</returns>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.Data.TextRenderInfo">
            <summary>
            Provides information and calculations needed by render listeners
            to display/evaluate text render operations.
            </summary>
            <remarks>
            Provides information and calculations needed by render listeners
            to display/evaluate text render operations.
            <br /><br />
            This is passed between the
            <see cref="T:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor"/>
            and
            <see cref="T:iText.Kernel.Pdf.Canvas.Parser.Listener.IEventListener"/>
            objects as text rendering operations are
            discovered
            </remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.Parser.Data.TextRenderInfo.canvasTagHierarchy">
            <summary>Hierarchy of nested canvas tags for the text from the most inner (nearest to text) tag to the most outer.
                </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Data.TextRenderInfo.#ctor(iText.Kernel.Pdf.PdfString,iText.Kernel.Pdf.Canvas.CanvasGraphicsState,iText.Kernel.Geom.Matrix,System.Collections.Generic.Stack{iText.Kernel.Pdf.Canvas.CanvasTag})">
            <summary>Creates a new TextRenderInfo object</summary>
            <param name="str">the PDF string that should be displayed</param>
            <param name="gs">the graphics state (note: at this time, this is not immutable, so don't cache it)</param>
            <param name="textMatrix">the text matrix at the time of the render operation</param>
            <param name="canvasTagHierarchy">the marked content tags sequence, if available</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Data.TextRenderInfo.#ctor(iText.Kernel.Pdf.Canvas.Parser.Data.TextRenderInfo,iText.Kernel.Pdf.PdfString,System.Single)">
            <summary>Used for creating sub-TextRenderInfos for each individual character</summary>
            <param name="parent">the parent TextRenderInfo</param>
            <param name="str">the content of a TextRenderInfo</param>
            <param name="horizontalOffset">the unscaled horizontal offset of the character that this TextRenderInfo represents
                </param>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Data.TextRenderInfo.GetText">
            <returns>the text to render</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Data.TextRenderInfo.GetPdfString">
            <returns>original PDF string</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Data.TextRenderInfo.GetTextMatrix">
            <summary>Gets original Text matrix.</summary>
            <returns>text matrix.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Data.TextRenderInfo.HasMcid(System.Int32)">
            <summary>
            Checks if the text belongs to a marked content sequence
            with a given mcid.
            </summary>
            <param name="mcid">a marked content id</param>
            <returns>true if the text is marked with this id</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Data.TextRenderInfo.HasMcid(System.Int32,System.Boolean)">
            <summary>
            Checks if the text belongs to a marked content sequence
            with a given mcid.
            </summary>
            <param name="mcid">a marked content id</param>
            <param name="checkTheTopmostLevelOnly">indicates whether to check the topmost level of marked content stack only
                </param>
            <returns>true if the text is marked with this id</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Data.TextRenderInfo.GetMcid">
            <returns>the marked content associated with the TextRenderInfo instance.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Data.TextRenderInfo.GetBaseline">
            <summary>Gets the baseline for the text (i.e.</summary>
            <remarks>
            Gets the baseline for the text (i.e. the line that the text 'sits' on)
            This value includes the Rise of the draw operation - see
            <see cref="M:iText.Kernel.Pdf.Canvas.Parser.Data.TextRenderInfo.GetRise"/>
            for the amount added by Rise
            </remarks>
            <returns>the baseline line segment</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Data.TextRenderInfo.GetAscentLine">
            <summary>Gets the ascentline for the text (i.e.</summary>
            <remarks>
            Gets the ascentline for the text (i.e. the line that represents the topmost extent that a string of the current font could have)
            This value includes the Rise of the draw operation - see
            <see cref="M:iText.Kernel.Pdf.Canvas.Parser.Data.TextRenderInfo.GetRise"/>
            for the amount added by Rise
            </remarks>
            <returns>the ascentline line segment</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Data.TextRenderInfo.GetDescentLine">
            <summary>Gets the descentline for the text (i.e.</summary>
            <remarks>
            Gets the descentline for the text (i.e. the line that represents the bottom most extent that a string of the current font could have).
            This value includes the Rise of the draw operation - see
            <see cref="M:iText.Kernel.Pdf.Canvas.Parser.Data.TextRenderInfo.GetRise"/>
            for the amount added by Rise
            </remarks>
            <returns>the descentline line segment</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Data.TextRenderInfo.GetFont">
            <summary>Getter for the font</summary>
            <returns>the font</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Data.TextRenderInfo.GetRise">
            <summary>The rise represents how far above the nominal baseline the text should be rendered.</summary>
            <remarks>
            The rise represents how far above the nominal baseline the text should be rendered.  The
            <see cref="M:iText.Kernel.Pdf.Canvas.Parser.Data.TextRenderInfo.GetBaseline"/>
            ,
            <see cref="M:iText.Kernel.Pdf.Canvas.Parser.Data.TextRenderInfo.GetAscentLine"/>
            and
            <see cref="M:iText.Kernel.Pdf.Canvas.Parser.Data.TextRenderInfo.GetDescentLine"/>
            methods already include Rise.
            This method is exposed to allow listeners to determine if an explicit rise was involved in the computation of the baseline (this might be useful, for example, for identifying superscript rendering)
            </remarks>
            <returns>The Rise for the text draw operation, in user space units (Ts value, scaled to user space)</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Data.TextRenderInfo.GetCharacterRenderInfos">
            <summary>Provides detail useful if a listener needs access to the position of each individual glyph in the text render operation
                </summary>
            <returns>
            A list of
            <see cref="T:iText.Kernel.Pdf.Canvas.Parser.Data.TextRenderInfo"/>
            objects that represent each glyph used in the draw operation. The next effect is if there was a separate Tj opertion for each character in the rendered string
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Data.TextRenderInfo.GetSingleSpaceWidth">
            <returns>The width, in user space units, of a single space character in the current font</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Data.TextRenderInfo.GetTextRenderMode">
            <returns>
            the text render mode that should be used for the text.  From the
            PDF specification, this means:
            <ul>
            <li>0 = Fill text</li>
            <li>1 = Stroke text</li>
            <li>2 = Fill, then stroke text</li>
            <li>3 = Invisible</li>
            <li>4 = Fill text and add to path for clipping</li>
            <li>5 = Stroke text and add to path for clipping</li>
            <li>6 = Fill, then stroke text and add to path for clipping</li>
            <li>7 = Add text to padd for clipping</li>
            </ul>
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Data.TextRenderInfo.GetFillColor">
            <returns>the current fill color.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Data.TextRenderInfo.GetStrokeColor">
            <returns>the current stroke color.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Data.TextRenderInfo.GetActualText">
            <summary>Gets /ActualText tag entry value if this text chunk is marked content.</summary>
            <returns>/ActualText value or <code>null</code> if none found</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Data.TextRenderInfo.GetExpansionText">
            <summary>Gets /E tag (expansion text) entry value if this text chunk is marked content.</summary>
            <returns>/E value or <code>null</code> if none found</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Data.TextRenderInfo.IsReversedChars">
            <summary>
            Determines if the text represented by this
            <see cref="T:iText.Kernel.Pdf.Canvas.Parser.Data.TextRenderInfo"/>
            instance is written in a text showing operator
            wrapped by /ReversedChars marked content sequence
            </summary>
            <returns><code>true</code> if this text block lies within /ReversedChars block, <code>false</code> otherwise
                </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Data.TextRenderInfo.GetCanvasTagHierarchy">
            <summary>Gets hierarchy of the canvas tags that wraps given text.</summary>
            <returns>list of the wrapping canvas tags. The first tag is the innermost (nearest to the text).</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Data.TextRenderInfo.GetUnscaledWidth">
            <returns>the unscaled (i.e. in Text space) width of the text</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Data.TextRenderInfo.ConvertWidthFromTextSpaceToUserSpace(System.Single)">
            <param name="width">the width, in text space</param>
            <returns>the width in user space</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Data.TextRenderInfo.ConvertHeightFromTextSpaceToUserSpace(System.Single)">
            <param name="height">the height, in text space</param>
            <returns>the height in user space</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Data.TextRenderInfo.GetUnscaledFontSpaceWidth">
            <summary>Calculates the width of a space character.</summary>
            <remarks>
            Calculates the width of a space character.  If the font does not define
            a width for a standard space character \u0020, we also attempt to use
            the width of \u00A0 (a non-breaking space in many fonts)
            </remarks>
            <returns>the width of a single space character in text space units</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Data.TextRenderInfo.GetStringWidth(System.String)">
            <summary>Gets the width of a String in text space units</summary>
            <param name="string">the string that needs measuring</param>
            <returns>the width of a String in text space units</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Data.TextRenderInfo.GetPdfStringWidth(iText.Kernel.Pdf.PdfString,System.Boolean)">
            <summary>Gets the width of a PDF string in text space units</summary>
            <param name="string">the string that needs measuring</param>
            <returns>the width of a String in text space units</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Data.TextRenderInfo.GetWidthAndWordSpacing(iText.Kernel.Pdf.PdfString)">
            <summary>Calculates width and word spacing of a single character PDF string.</summary>
            <remarks>
            Calculates width and word spacing of a single character PDF string.
            IMPORTANT: Shall ONLY be used for a single character pdf strings.
            </remarks>
            <param name="string">a character to calculate width.</param>
            <returns>array of 2 items: first item is a character width, second item is a calculated word spacing.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Data.TextRenderInfo.GetCharCode(System.String)">
            <summary>Converts a single character string to char code.</summary>
            <param name="string">single character string to convert to.</param>
            <returns>char code.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Data.TextRenderInfo.SplitString(iText.Kernel.Pdf.PdfString)">
            <summary>Split PDF string into array of single character PDF strings.</summary>
            <param name="string">PDF string to be split.</param>
            <returns>split PDF string.</returns>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.EventType">
            <summary>Specifies different types of events where a callback should be notified.</summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.Filter.IEventFilter">
            <summary>This is an interface which helps to filter events.</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Filter.IEventFilter.Accept(iText.Kernel.Pdf.Canvas.Parser.Data.IEventData,iText.Kernel.Pdf.Canvas.Parser.EventType)">
            <summary>
            This method checks an event and decides whether it should be processed further (corresponds to
            <see langword="true"/>
            return value), or filtered out (corresponds to
            <see langword="false"/>
            return value).
            </summary>
            <param name="data">event data</param>
            <param name="type">event type</param>
            <returns>true to process event further, false to filter event out</returns>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.Filter.TextRegionEventFilter">
            <summary>
            This
            <see cref="T:iText.Kernel.Pdf.Canvas.Parser.Filter.IEventFilter"/>
            implementation only accepts text render events within the specified
            rectangular region.
            </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Filter.TextRegionEventFilter.#ctor(iText.Kernel.Geom.Rectangle)">
            <summary>Constructs a filter instance.</summary>
            <param name="filterRect">the rectangle to filter text against</param>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.IContentOperator">
            <summary>Root interface for a series of handlers for content stream operators.</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.IContentOperator.Invoke(iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor,iText.Kernel.Pdf.PdfLiteral,System.Collections.Generic.IList{iText.Kernel.Pdf.PdfObject})">
            <summary>Called when a content operator should be processed.</summary>
            <param name="processor">The processor that is dealing with the PDF content stream.</param>
            <param name="operator">The literal PDF syntax of the operator.</param>
            <param name="operands">The operands that come with the operator.</param>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.Listener.CharacterRenderInfo">
            <summary>This class represents a single character and its bounding box</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.Pdf.Canvas.Parser.Listener.CharacterRenderInfo.MapString(System.Collections.Generic.IList{iText.Kernel.Pdf.Canvas.Parser.Listener.CharacterRenderInfo})" -->
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.Listener.DefaultPdfTextLocation">
            <summary>This class acts as a default implementation of IPdfTextLocation</summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.Listener.FilteredEventListener">
            <summary>An event listener which filters events on the fly before passing them on to the delegate.</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Listener.FilteredEventListener.#ctor">
            <summary>
            Constructs a
            <see cref="T:iText.Kernel.Pdf.Canvas.Parser.Listener.FilteredEventListener"/>
            empty instance.
            Use
            <see cref="!:AttachEventListener&lt;T&gt;(IEventListener, iText.Kernel.Pdf.Canvas.Parser.Filter.IEventFilter[])"/>
            to add an event listener along with its filters.
            </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Listener.FilteredEventListener.#ctor(iText.Kernel.Pdf.Canvas.Parser.Listener.IEventListener,iText.Kernel.Pdf.Canvas.Parser.Filter.IEventFilter[])">
            <summary>
            Constructs a
            <see cref="T:iText.Kernel.Pdf.Canvas.Parser.Listener.FilteredEventListener"/>
            instance with one delegate.
            Use
            <see cref="!:AttachEventListener&lt;T&gt;(IEventListener, iText.Kernel.Pdf.Canvas.Parser.Filter.IEventFilter[])"/>
            to add more
            <see cref="T:iText.Kernel.Pdf.Canvas.Parser.Listener.IEventListener"/>
            delegates
            along with their filters.
            </summary>
            <param name="delegate_">a delegate that fill be called when all the corresponding filters for an event pass
                </param>
            <param name="filterSet">filters attached to the delegate that will be tested before passing an event on to the delegate
                </param>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Listener.FilteredEventListener.AttachEventListener``1(``0,iText.Kernel.Pdf.Canvas.Parser.Filter.IEventFilter[])">
            <summary>
            Attaches another
            <see cref="T:iText.Kernel.Pdf.Canvas.Parser.Listener.IEventListener"/>
            delegate with its filters.
            When all the filters attached to the delegate for an event accept the event, the event will be passed on to
            the delegate.
            You can attach multiple delegates to this
            <see cref="T:iText.Kernel.Pdf.Canvas.Parser.Listener.FilteredEventListener"/>
            instance. The content stream will
            be parsed just once, so it is better for performance than creating multiple
            <see cref="T:iText.Kernel.Pdf.Canvas.Parser.Listener.FilteredEventListener"/>
            instances and parsing the content stream multiple times. This is useful, for instance, when you want
            to extract content from multiple regions of a page.
            </summary>
            <param name="delegate_">a delegate that fill be called when all the corresponding filters for an event pass
                </param>
            <param name="filterSet">filters attached to the delegate that will be tested before passing an event on to the delegate
                </param>
            <returns>delegate that has been passed to the method, used for convenient call chaining</returns>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.Listener.FilteredTextEventListener">
            <summary>A text event listener which filters events on the fly before passing them on to the delegate.</summary>
            <remarks>
            A text event listener which filters events on the fly before passing them on to the delegate.
            The only difference from
            <see cref="T:iText.Kernel.Pdf.Canvas.Parser.Listener.FilteredEventListener"/>
            is that this class conveniently implements
            <see cref="T:iText.Kernel.Pdf.Canvas.Parser.Listener.ITextExtractionStrategy"/>
            and can therefore used as a strategy on its own, apart from the inherited
            function of filtering event appropriately to its delegates.
            </remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Listener.FilteredTextEventListener.#ctor(iText.Kernel.Pdf.Canvas.Parser.Listener.ITextExtractionStrategy,iText.Kernel.Pdf.Canvas.Parser.Filter.IEventFilter[])">
            <summary>
            Constructs a
            <see cref="T:iText.Kernel.Pdf.Canvas.Parser.Listener.FilteredTextEventListener"/>
            instance with a
            <see cref="T:iText.Kernel.Pdf.Canvas.Parser.Listener.ITextExtractionStrategy"/>
            delegate.
            </summary>
            <param name="delegate_">a delegate that fill be called when all the corresponding filters for an event pass
                </param>
            <param name="filterSet">filters attached to the delegate that will be tested before passing an event on to the delegate
                </param>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Listener.FilteredTextEventListener.GetResultantText">
            <summary>
            As an resultant text we use the concatenation of all the resultant text of all the delegates that implement
            <see cref="T:iText.Kernel.Pdf.Canvas.Parser.Listener.ITextExtractionStrategy"/>
            .
            </summary>
            <returns>the resulting concatenation of the text extracted from the delegates</returns>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.Listener.GlyphEventListener">
            <summary>
            This class expands each
            <see cref="T:iText.Kernel.Pdf.Canvas.Parser.Data.TextRenderInfo"/>
            for
            <see cref="F:iText.Kernel.Pdf.Canvas.Parser.EventType.RENDER_TEXT"/>
            event types into
            multiple
            <see cref="T:iText.Kernel.Pdf.Canvas.Parser.Data.TextRenderInfo"/>
            instances for each glyph occurred.
            </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Listener.GlyphEventListener.#ctor(iText.Kernel.Pdf.Canvas.Parser.Listener.IEventListener)">
            <summary>
            Constructs a
            <see cref="T:iText.Kernel.Pdf.Canvas.Parser.Listener.GlyphEventListener"/>
            instance by a delegate to which the expanded text events for each
            glyph occurred will be passed on.
            </summary>
            <param name="delegate_">delegate to pass the expanded glyph render events to.</param>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.Listener.GlyphTextEventListener">
            <summary>
            This class expands each
            <see cref="T:iText.Kernel.Pdf.Canvas.Parser.Data.TextRenderInfo"/>
            for
            <see cref="F:iText.Kernel.Pdf.Canvas.Parser.EventType.RENDER_TEXT"/>
            event types into
            multiple
            <see cref="T:iText.Kernel.Pdf.Canvas.Parser.Data.TextRenderInfo"/>
            instances for each glyph occurred.
            The only difference from
            <see cref="T:iText.Kernel.Pdf.Canvas.Parser.Listener.GlyphEventListener"/>
            is that this class conveniently implements
            <see cref="T:iText.Kernel.Pdf.Canvas.Parser.Listener.ITextExtractionStrategy"/>
            and can therefore used as a strategy on its own.
            </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Listener.GlyphTextEventListener.#ctor(iText.Kernel.Pdf.Canvas.Parser.Listener.ITextExtractionStrategy)">
            <summary>
            Constructs a
            <see cref="T:iText.Kernel.Pdf.Canvas.Parser.Listener.GlyphEventListener"/>
            instance by a
            <see cref="T:iText.Kernel.Pdf.Canvas.Parser.Listener.ITextExtractionStrategy"/>
            delegate to which
            the expanded text events for each glyph occurred will be passed on.
            </summary>
            <param name="delegate_">delegate to pass the expanded glyph render events to.</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Listener.GlyphTextEventListener.GetResultantText">
            <summary>
            As an resultant text we use the the resultant text of the delegate that implement
            <see cref="T:iText.Kernel.Pdf.Canvas.Parser.Listener.ITextExtractionStrategy"/>
            and was passed to this class.
            </summary>
            <returns>the resulting text extracted from the delegate</returns>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.Listener.IEventListener">
            <summary>
            A callback interface that receives notifications from the
            <see cref="T:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor"/>
            as various events occur (see
            <see cref="T:iText.Kernel.Pdf.Canvas.Parser.EventType"/>
            ).
            </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Listener.IEventListener.EventOccurred(iText.Kernel.Pdf.Canvas.Parser.Data.IEventData,iText.Kernel.Pdf.Canvas.Parser.EventType)">
            <summary>Called when some event occurs during parsing a content stream.</summary>
            <param name="data">Combines the data required for processing corresponding event type.</param>
            <param name="type">Event type.</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Listener.IEventListener.GetSupportedEvents">
            <summary>Provides the set of event types this listener supports.</summary>
            <remarks>
            Provides the set of event types this listener supports.
            Returns null if all possible event types are supported.
            </remarks>
            <returns>
            Set of event types supported by this listener or
            null if all possible event types are supported.
            </returns>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.Listener.ILocationExtractionStrategy">
            <summary>
            This is a special interface for
            <see cref="T:iText.Kernel.Pdf.Canvas.Parser.Filter.IEventFilter"/>
            that returns a collection of rectangles as result of its work.
            </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Listener.ILocationExtractionStrategy.GetResultantLocations">
            <summary>
            Returns the
            <see cref="T:iText.Kernel.Geom.Rectangle"/>
            s that have been processed so far.
            </summary>
            <returns>
            
            <see cref="!:System.Collections.ICollection&lt;E&gt;"/>
            &lt;
            <see cref="T:iText.Kernel.Pdf.Canvas.Parser.Listener.IPdfTextLocation"/>
            &gt; instance with the current resultant IPdfTextLocations
            </returns>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.Listener.IPdfTextLocation">
            <summary>
            Instances of this interface represent a piece of text,
            somewhere on a page in a pdf document.
            </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Listener.IPdfTextLocation.GetRectangle">
            <returns>
            the visual
            <see cref="T:iText.Kernel.Geom.Rectangle"/>
            in which the text is located
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Listener.IPdfTextLocation.GetText">
            <returns>the text</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Listener.IPdfTextLocation.GetPageNumber">
            <summary>Get the page number of the page on which the text is located</summary>
            <returns>the page number, or 0 if no page number was set</returns>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.Listener.ITextExtractionStrategy">
            <summary>
            This is a special interface for
            <see cref="T:iText.Kernel.Pdf.Canvas.Parser.Filter.IEventFilter"/>
            that returns text as result of its work.
            </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Listener.ITextExtractionStrategy.GetResultantText">
            <summary>Returns the text that has been processed so far.</summary>
            <returns>
            
            <see cref="T:System.String"/>
            instance with the current resultant text
            </returns>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.Parser.Listener.LocationTextExtractionStrategy.DUMP_STATE">
            <summary>set to true for debugging</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.Parser.Listener.LocationTextExtractionStrategy.locationalResult">
            <summary>a summary of all found text</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Listener.LocationTextExtractionStrategy.#ctor">
            <summary>Creates a new text extraction renderer.</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Listener.LocationTextExtractionStrategy.#ctor(iText.Kernel.Pdf.Canvas.Parser.Listener.LocationTextExtractionStrategy.ITextChunkLocationStrategy)">
            <summary>
            Creates a new text extraction renderer, with a custom strategy for
            creating new TextChunkLocation objects based on the input of the
            TextRenderInfo.
            </summary>
            <param name="strat">the custom strategy</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Listener.LocationTextExtractionStrategy.SetUseActualText(System.Boolean)">
            <summary>
            Changes the behavior of text extraction so that if the parameter is set to
            <see langword="true"/>
            ,
            /ActualText marked content property will be used instead of raw decoded bytes.
            Beware: the logic is not stable yet.
            </summary>
            <param name="useActualText">true to use /ActualText, false otherwise</param>
            <returns>this object</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Listener.LocationTextExtractionStrategy.SetRightToLeftRunDirection(System.Boolean)">
            <summary>Sets if text flows from left to right or from right to left.</summary>
            <remarks>
            Sets if text flows from left to right or from right to left.
            Call this method with <code>true</code> argument for extracting Arabic, Hebrew or other
            text with right-to-left writing direction.
            </remarks>
            <param name="rightToLeftRunDirection">value specifying whether the direction should be right to left</param>
            <returns>this object</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Listener.LocationTextExtractionStrategy.IsUseActualText">
            <summary>
            Gets the value of the property which determines if /ActualText will be used when extracting
            the text
            </summary>
            <returns>true if /ActualText value is used, false otherwise</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Listener.LocationTextExtractionStrategy.IsChunkAtWordBoundary(iText.Kernel.Pdf.Canvas.Parser.Listener.TextChunk,iText.Kernel.Pdf.Canvas.Parser.Listener.TextChunk)">
            <summary>Determines if a space character should be inserted between a previous chunk and the current chunk.
                </summary>
            <remarks>
            Determines if a space character should be inserted between a previous chunk and the current chunk.
            This method is exposed as a callback so subclasses can fine time the algorithm for determining whether a space should be inserted or not.
            By default, this method will insert a space if the there is a gap of more than half the font space character width between the end of the
            previous chunk and the beginning of the current chunk.  It will also indicate that a space is needed if the starting point of the new chunk
            appears *before* the end of the previous chunk (i.e. overlapping text).
            </remarks>
            <param name="chunk">the new chunk being evaluated</param>
            <param name="previousChunk">the chunk that appeared immediately before the current chunk</param>
            <returns>true if the two chunks represent different words (i.e. should have a space between them).  False otherwise.
                </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Listener.LocationTextExtractionStrategy.StartsWithSpace(System.String)">
            <summary>Checks if the string starts with a space character, false if the string is empty or starts with a non-space character.
                </summary>
            <param name="str">the string to be checked</param>
            <returns>true if the string starts with a space character, false if the string is empty or starts with a non-space character
                </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Listener.LocationTextExtractionStrategy.EndsWithSpace(System.String)">
            <summary>Checks if the string ends with a space character, false if the string is empty or ends with a non-space character
                </summary>
            <param name="str">the string to be checked</param>
            <returns>true if the string ends with a space character, false if the string is empty or ends with a non-space character
                </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Listener.LocationTextExtractionStrategy.DumpState">
            <summary>Used for debugging only</summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.Listener.RegexBasedLocationExtractionStrategy">
            <summary>This class is designed to search for the occurrences of a regular expression and return the resultant rectangles.
                </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Listener.RegexBasedLocationExtractionStrategy.ToCRI(iText.Kernel.Pdf.Canvas.Parser.Data.TextRenderInfo)">
            <summary>
            Convert
            <c>TextRenderInfo</c>
            to
            <c>CharacterRenderInfo</c>
            This method is public and not final so that custom implementations can choose to override it.
            Other implementations of
            <c>CharacterRenderInfo</c>
            may choose to store different properties than
            merely the
            <c>Rectangle</c>
            describing the bounding box. E.g. a custom implementation might choose to
            store
            <c>Color</c>
            information as well, to better match the content surrounding the redaction
            <c>Rectangle</c>
            .
            </summary>
            <param name="tri"/>
            <returns/>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Listener.RegexBasedLocationExtractionStrategy.ToRectangles(System.Collections.Generic.IList{iText.Kernel.Pdf.Canvas.Parser.Listener.CharacterRenderInfo})">
            <summary>
            Converts
            <c>CharacterRenderInfo</c>
            objects to
            <c>Rectangles</c>
            This method is protected and not final so that custom implementations can choose to override it.
            E.g. other implementations may choose to add padding/margin to the Rectangles.
            This method also offers a convenient access point to the mapping of
            <c>CharacterRenderInfo</c>
            to
            <c>Rectangle</c>
            .
            This mapping enables (custom implementations) to match color of text in redacted Rectangles,
            or match color of background, by the mere virtue of offering access to the
            <c>CharacterRenderInfo</c>
            objects
            that generated the
            <c>Rectangle</c>
            .
            </summary>
            <param name="cris"/>
            <returns/>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.Parser.Listener.SimpleTextExtractionStrategy.result">
            <summary>used to store the resulting String.</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Listener.SimpleTextExtractionStrategy.GetResultantText">
            <summary>Returns the result so far.</summary>
            <returns>a String with the resulting text.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Listener.SimpleTextExtractionStrategy.AppendTextChunk(System.String)">
            <summary>Used to actually append text to the text results.</summary>
            <remarks>
            Used to actually append text to the text results.  Subclasses can use this to insert
            text that wouldn't normally be included in text parsing (e.g. result of OCR performed against
            image content)
            </remarks>
            <param name="text">the text to append to the text results accumulated so far</param>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.Listener.TextChunk">
            <summary>Represents a chunk of text, it's orientation, and location relative to the orientation vector</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.Parser.Listener.TextChunk.text">
            <summary>the text of the chunk</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Listener.TextChunk.GetText">
            <returns>the text captured by this chunk</returns>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.Parser.Listener.TextChunkLocationDefaultImp.startLocation">
            <summary>the starting location of the chunk</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.Parser.Listener.TextChunkLocationDefaultImp.endLocation">
            <summary>the ending location of the chunk</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.Parser.Listener.TextChunkLocationDefaultImp.orientationVector">
            <summary>unit vector in the orientation of the chunk</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.Parser.Listener.TextChunkLocationDefaultImp.orientationMagnitude">
            <summary>the orientation as a scalar for quick sorting</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.Parser.Listener.TextChunkLocationDefaultImp.distPerpendicular">
            <summary>perpendicular distance to the orientation unit vector (i.e.</summary>
            <remarks>
            perpendicular distance to the orientation unit vector (i.e. the Y position in an unrotated coordinate system)
            we round to the nearest integer to handle the fuzziness of comparing floats
            </remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.Parser.Listener.TextChunkLocationDefaultImp.distParallelStart">
            <summary>distance of the start of the chunk parallel to the orientation unit vector (i.e.</summary>
            <remarks>distance of the start of the chunk parallel to the orientation unit vector (i.e. the X position in an unrotated coordinate system)
                </remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.Parser.Listener.TextChunkLocationDefaultImp.distParallelEnd">
            <summary>distance of the end of the chunk parallel to the orientation unit vector (i.e.</summary>
            <remarks>distance of the end of the chunk parallel to the orientation unit vector (i.e. the X position in an unrotated coordinate system)
                </remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.Parser.Listener.TextChunkLocationDefaultImp.charSpaceWidth">
            <summary>the width of a single space character in the font of the chunk</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Listener.TextChunkLocationDefaultImp.GetStartLocation">
            <returns>the start location of the text</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Listener.TextChunkLocationDefaultImp.GetEndLocation">
            <returns>the end location of the text</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Listener.TextChunkLocationDefaultImp.GetCharSpaceWidth">
            <returns>the width of a single space character as rendered by this chunk</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Listener.TextChunkLocationDefaultImp.SameLine(iText.Kernel.Pdf.Canvas.Parser.Listener.ITextChunkLocation)">
            <param name="as">the location to compare to</param>
            <returns>true is this location is on the the same line as the other</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Listener.TextChunkLocationDefaultImp.DistanceFromEndOf(iText.Kernel.Pdf.Canvas.Parser.Listener.ITextChunkLocation)">
            <summary>
            Computes the distance between the end of 'other' and the beginning of this chunk
            in the direction of this chunk's orientation vector.
            </summary>
            <remarks>
            Computes the distance between the end of 'other' and the beginning of this chunk
            in the direction of this chunk's orientation vector.  Note that it's a bad idea
            to call this for chunks that aren't on the same line and orientation, but we don't
            explicitly check for that condition for performance reasons.
            </remarks>
            <param name="other"/>
            <returns>the number of spaces between the end of 'other' and the beginning of this chunk</returns>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.Listener.TextMarginFinder">
            <summary>This class allows you to find the rectangle which contains all the text in the given content stream.
                </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Listener.TextMarginFinder.GetTextRectangle">
            <summary>
            Returns the common text rectangle, containing all the text found in the stream so far, ot
            <see langword="null"/>
            , if no
            text has been found yet.
            </summary>
            <returns>common text rectangle</returns>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.ParserGraphicsState">
            <summary>
            Internal class which is essentially a
            <see cref="T:iText.Kernel.Pdf.Canvas.CanvasGraphicsState"/>
            which supports tracking of
            clipping path state and changes.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.Pdf.Canvas.Parser.ParserGraphicsState.#ctor" -->
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.ParserGraphicsState.#ctor(iText.Kernel.Pdf.Canvas.Parser.ParserGraphicsState)">
            <summary>Copy constructor.</summary>
            <param name="source">the Graphics State to copy from</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.ParserGraphicsState.Clip(iText.Kernel.Geom.Path,System.Int32)">
            <summary>Intersects the current clipping path with the given path.</summary>
            <remarks>
            Intersects the current clipping path with the given path.
            <strong>Note:</strong> Coordinates of the given path should be in
            the transformed user space.
            </remarks>
            <param name="path">The path to be intersected with the current clipping path.</param>
            <param name="fillingRule">
            The filling rule which should be applied to the given path.
            It should be either
            <see cref="F:iText.Kernel.Pdf.Canvas.PdfCanvasConstants.FillingRule.EVEN_ODD"/>
            or
            <see cref="F:iText.Kernel.Pdf.Canvas.PdfCanvasConstants.FillingRule.NONZERO_WINDING"/>
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.ParserGraphicsState.GetClippingPath">
            <summary>Getter for the current clipping path.</summary>
            <remarks>
            Getter for the current clipping path.
            <strong>Note:</strong> The returned clipping path is in the transformed user space, so
            if you want to get it in default user space, apply transformation matrix (
            <see cref="M:iText.Kernel.Pdf.Canvas.CanvasGraphicsState.GetCtm"/>
            ).
            </remarks>
            <returns>The current clipping path.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.ParserGraphicsState.SetClippingPath(iText.Kernel.Geom.Path)">
            <summary>Sets the current clipping path to the specified path.</summary>
            <remarks>
            Sets the current clipping path to the specified path.
            <strong>Note:</strong>This method doesn't modify existing clipping path,
            it simply replaces it with the new one instead.
            </remarks>
            <param name="clippingPath">New clipping path.</param>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor">
            <summary>Processor for a PDF content stream.</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.eventListener">
            <summary>Listener that will be notified of render events</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.supportedEvents">
            <summary>
            Cache supported events in case the user's
            <see cref="M:iText.Kernel.Pdf.Canvas.Parser.Listener.IEventListener.GetSupportedEvents"/>
            method is not very efficient
            </summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.isClip">
            <summary>
            Indicates whether the current clipping path should be modified by
            intersecting it with the current path.
            </summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.clippingRule">
            <summary>
            Specifies the filling rule which should be applied while calculating
            new clipping path.
            </summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.operators">
            <summary>A map with all supported operators (PDF syntax).</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.resourcesStack">
            <summary>Resources for the content stream.</summary>
            <remarks>
            Resources for the content stream.
            Current resources are always at the top of the stack.
            Stack is needed in case if some "inner" content stream with it's own resources
            is encountered (like Form XObject).
            </remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.gsStack">
            <summary>Stack keeping track of the graphics state.</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.xobjectDoHandlers">
            <summary>A map with all supported XObject handlers</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.cachedFonts">
            <summary>The font cache</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.markedContentStack">
            <summary>A stack containing marked content info.</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.#ctor(iText.Kernel.Pdf.Canvas.Parser.Listener.IEventListener)">
            <summary>
            Creates a new PDF Content Stream Processor that will send its output to the
            designated render listener.
            </summary>
            <param name="eventListener">
            the
            <see cref="T:iText.Kernel.Pdf.Canvas.Parser.Listener.IEventListener"/>
            that will receive rendering notifications
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.#ctor(iText.Kernel.Pdf.Canvas.Parser.Listener.IEventListener,System.Collections.Generic.IDictionary{System.String,iText.Kernel.Pdf.Canvas.Parser.IContentOperator})">
            <summary>
            Creates a new PDF Content Stream Processor that will send its output to the
            designated render listener.
            </summary>
            <remarks>
            Creates a new PDF Content Stream Processor that will send its output to the
            designated render listener.
            Also allows registration of custom IContentOperators that can influence
            how (and whether or not) the PDF instructions will be parsed.
            </remarks>
            <param name="eventListener">
            the
            <see cref="T:iText.Kernel.Pdf.Canvas.Parser.Listener.IEventListener"/>
            that will receive rendering notifications
            </param>
            <param name="additionalContentOperators">
            an optional map of custom
            <see cref="T:iText.Kernel.Pdf.Canvas.Parser.IContentOperator"/>
            s for rendering instructions
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.RegisterXObjectDoHandler(iText.Kernel.Pdf.PdfName,iText.Kernel.Pdf.Canvas.Parser.IXObjectDoHandler)">
            <summary>Registers a Do handler that will be called when Do for the provided XObject subtype is encountered during content processing.
                </summary>
            <remarks>
            Registers a Do handler that will be called when Do for the provided XObject subtype is encountered during content processing.
            <br />
            If you register a handler, it is a very good idea to pass the call on to the existing registered handler (returned by this call), otherwise you
            may inadvertently change the internal behavior of the processor.
            </remarks>
            <param name="xobjectSubType">the XObject subtype this handler will process, or PdfName.DEFAULT for a catch-all handler
                </param>
            <param name="handler">the handler that will receive notification when the Do operator for the specified subtype is encountered
                </param>
            <returns>the existing registered handler, if any</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.RegisterContentOperator(System.String,iText.Kernel.Pdf.Canvas.Parser.IContentOperator)">
            <summary>Registers a content operator that will be called when the specified operator string is encountered during content processing.
                </summary>
            <remarks>
            Registers a content operator that will be called when the specified operator string is encountered during content processing.
            <br />
            If you register an operator, it is a very good idea to pass the call on to the existing registered operator (returned by this call), otherwise you
            may inadvertently change the internal behavior of the processor.
            </remarks>
            <param name="operatorString">the operator id, or DEFAULT_OPERATOR for a catch-all operator</param>
            <param name="operator">the operator that will receive notification when the operator is encountered</param>
            <returns>the existing registered operator, if any</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.GetRegisteredOperatorStrings">
            <summary>
            Gets the
            <see cref="!:System.Collections.ICollection&lt;E&gt;"/>
            containing all the registered operators strings.
            </summary>
            <returns>
            
            <see cref="!:System.Collections.ICollection&lt;E&gt;"/>
            containing all the registered operators strings.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.Reset">
            <summary>Resets the graphics state stack, matrices and resources.</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.GetGraphicsState">
            <summary>
            Gets the current
            <see cref="T:iText.Kernel.Pdf.Canvas.Parser.ParserGraphicsState"/>
            </summary>
            <returns>
            the current
            <see cref="T:iText.Kernel.Pdf.Canvas.Parser.ParserGraphicsState"/>
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.ProcessContent(System.Byte[],iText.Kernel.Pdf.PdfResources)">
            <summary>Processes PDF syntax.</summary>
            <remarks>
            Processes PDF syntax.
            <b>Note:</b> If you re-use a given
            <see cref="T:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor"/>
            , you must call
            <see cref="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.Reset"/>
            </remarks>
            <param name="contentBytes">the bytes of a content stream</param>
            <param name="resources">the resources of the content stream. Must not be null.</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.ProcessPageContent(iText.Kernel.Pdf.PdfPage)">
            <summary>Processes PDF syntax.</summary>
            <remarks>
            Processes PDF syntax.
            <strong>Note:</strong> If you re-use a given
            <see cref="T:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor"/>
            , you must call
            <see cref="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.Reset"/>
            </remarks>
            <param name="page">the page to process</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.GetEventListener">
            <summary>
            Accessor method for the
            <see cref="T:iText.Kernel.Pdf.Canvas.Parser.Listener.IEventListener"/>
            object maintained in this class.
            Necessary for implementing custom ContentOperator implementations.
            </summary>
            <returns>the renderListener</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.PopulateOperators">
            <summary>Loads all the supported graphics and text state operators in a map.</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.PaintPath(System.Int32,System.Int32)">
            <summary>Displays the current path.</summary>
            <param name="operation">
            One of the possible combinations of
            <see cref="F:iText.Kernel.Pdf.Canvas.Parser.Data.PathRenderInfo.STROKE"/>
            and
            <see cref="F:iText.Kernel.Pdf.Canvas.Parser.Data.PathRenderInfo.FILL"/>
            values or
            <see cref="F:iText.Kernel.Pdf.Canvas.Parser.Data.PathRenderInfo.NO_OP"/>
            </param>
            <param name="rule">
            Either
            <see cref="F:iText.Kernel.Pdf.Canvas.PdfCanvasConstants.FillingRule.NONZERO_WINDING"/>
            or
            <see cref="F:iText.Kernel.Pdf.Canvas.PdfCanvasConstants.FillingRule.EVEN_ODD"/>
            In case it isn't applicable pass any <CODE>byte</CODE> value.
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.InvokeOperator(iText.Kernel.Pdf.PdfLiteral,System.Collections.Generic.IList{iText.Kernel.Pdf.PdfObject})">
            <summary>Invokes an operator.</summary>
            <param name="operator">the PDF Syntax of the operator</param>
            <param name="operands">a list with operands</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.GetFont(iText.Kernel.Pdf.PdfDictionary)">
            <summary>
            Creates a
            <see cref="T:iText.Kernel.Font.PdfFont"/>
            object by a font dictionary. The font may have been cached in case it is an indirect object.
            </summary>
            <param name="fontDict"/>
            <returns>the font</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.BeginMarkedContent(iText.Kernel.Pdf.PdfName,iText.Kernel.Pdf.PdfDictionary)">
            <summary>Add to the marked content stack</summary>
            <param name="tag">the tag of the marked content</param>
            <param name="dict">the PdfDictionary associated with the marked content</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.EndMarkedContent">
            <summary>Remove the latest marked content from the stack.</summary>
            <remarks>Remove the latest marked content from the stack.  Keeps track of the BMC, BDC and EMC operators.</remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.BeginText">
            <summary>Used to trigger beginTextBlock on the renderListener</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.EndText">
            <summary>Used to trigger endTextBlock on the renderListener</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.EventOccurred(iText.Kernel.Pdf.Canvas.Parser.Data.IEventData,iText.Kernel.Pdf.Canvas.Parser.EventType)">
            <summary>This is a proxy to pass only those events to the event listener which are supported by it.</summary>
            <param name="data">event data</param>
            <param name="type">event type</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.DisplayPdfString(iText.Kernel.Pdf.PdfString)">
            <summary>Displays text.</summary>
            <param name="string">the text to display</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.DisplayXObject(iText.Kernel.Pdf.PdfName)">
            <summary>Displays an XObject using the registered handler for this XObject's subtype</summary>
            <param name="resourceName">the name of the XObject to retrieve from the resource dictionary</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.ApplyTextAdjust(System.Single)">
            <summary>Adjusts the text matrix for the specified adjustment value (see TJ operator in the PDF spec for information)
                </summary>
            <param name="tj">the text adjustment</param>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.IgnoreOperator">
            <summary>A handler that implements operator (unregistered).</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.IgnoreOperator.Invoke(iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor,iText.Kernel.Pdf.PdfLiteral,System.Collections.Generic.IList{iText.Kernel.Pdf.PdfObject})">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.ShowTextArrayOperator">
            <summary>A handler that implements operator (TJ).</summary>
            <remarks>A handler that implements operator (TJ). For more information see Table 51 ISO-32000-1</remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.ShowTextArrayOperator.Invoke(iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor,iText.Kernel.Pdf.PdfLiteral,System.Collections.Generic.IList{iText.Kernel.Pdf.PdfObject})">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.MoveNextLineAndShowTextWithSpacingOperator">
            <summary>A handler that implements operator (").</summary>
            <remarks>A handler that implements operator ("). For more information see Table 51 ISO-32000-1</remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.MoveNextLineAndShowTextWithSpacingOperator.#ctor(iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.SetTextWordSpacingOperator,iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.SetTextCharacterSpacingOperator,iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.MoveNextLineAndShowTextOperator)">
            <summary>Create new instance of this handler.</summary>
            <param name="setTextWordSpacing">the handler for Tw operator</param>
            <param name="setTextCharacterSpacing">the handler for Tc operator</param>
            <param name="moveNextLineAndShowText">the handler for ' operator</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.MoveNextLineAndShowTextWithSpacingOperator.Invoke(iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor,iText.Kernel.Pdf.PdfLiteral,System.Collections.Generic.IList{iText.Kernel.Pdf.PdfObject})">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.MoveNextLineAndShowTextOperator">
            <summary>A handler that implements operator (').</summary>
            <remarks>A handler that implements operator ('). For more information see Table 51 ISO-32000-1</remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.MoveNextLineAndShowTextOperator.#ctor(iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.TextMoveNextLineOperator,iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.ShowTextOperator)">
            <summary>Creates the new instance of this handler</summary>
            <param name="textMoveNextLine">the handler for T* operator</param>
            <param name="showText">the handler for Tj operator</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.MoveNextLineAndShowTextOperator.Invoke(iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor,iText.Kernel.Pdf.PdfLiteral,System.Collections.Generic.IList{iText.Kernel.Pdf.PdfObject})">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.ShowTextOperator">
            <summary>A handler that implements operator (Tj).</summary>
            <remarks>A handler that implements operator (Tj). For more information see Table 51 ISO-32000-1</remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.ShowTextOperator.Invoke(iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor,iText.Kernel.Pdf.PdfLiteral,System.Collections.Generic.IList{iText.Kernel.Pdf.PdfObject})">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.TextMoveNextLineOperator">
            <summary>A handler that implements operator (T*).</summary>
            <remarks>A handler that implements operator (T*). For more information see Table 51 ISO-32000-1</remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.TextMoveNextLineOperator.Invoke(iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor,iText.Kernel.Pdf.PdfLiteral,System.Collections.Generic.IList{iText.Kernel.Pdf.PdfObject})">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.TextSetTextMatrixOperator">
            <summary>A handler that implements operator (Tm).</summary>
            <remarks>A handler that implements operator (Tm). For more information see Table 51 ISO-32000-1</remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.TextSetTextMatrixOperator.Invoke(iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor,iText.Kernel.Pdf.PdfLiteral,System.Collections.Generic.IList{iText.Kernel.Pdf.PdfObject})">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.TextMoveStartNextLineWithLeadingOperator">
            <summary>A handler that implements operator (TD).</summary>
            <remarks>A handler that implements operator (TD). For more information see Table 51 ISO-32000-1</remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.TextMoveStartNextLineWithLeadingOperator.Invoke(iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor,iText.Kernel.Pdf.PdfLiteral,System.Collections.Generic.IList{iText.Kernel.Pdf.PdfObject})">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.TextMoveStartNextLineOperator">
            <summary>A handler that implements operator (Td).</summary>
            <remarks>A handler that implements operator (Td). For more information see Table 51 ISO-32000-1</remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.TextMoveStartNextLineOperator.Invoke(iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor,iText.Kernel.Pdf.PdfLiteral,System.Collections.Generic.IList{iText.Kernel.Pdf.PdfObject})">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.SetTextFontOperator">
            <summary>A handler that implements operator (Tf).</summary>
            <remarks>A handler that implements operator (Tf). For more information see Table 51 ISO-32000-1</remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.SetTextFontOperator.Invoke(iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor,iText.Kernel.Pdf.PdfLiteral,System.Collections.Generic.IList{iText.Kernel.Pdf.PdfObject})">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.SetTextRenderModeOperator">
            <summary>A handler that implements operator (Tr).</summary>
            <remarks>A handler that implements operator (Tr). For more information see Table 51 ISO-32000-1</remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.SetTextRenderModeOperator.Invoke(iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor,iText.Kernel.Pdf.PdfLiteral,System.Collections.Generic.IList{iText.Kernel.Pdf.PdfObject})">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.SetTextRiseOperator">
            <summary>A handler that implements operator (Ts).</summary>
            <remarks>A handler that implements operator (Ts). For more information see Table 51 ISO-32000-1</remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.SetTextRiseOperator.Invoke(iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor,iText.Kernel.Pdf.PdfLiteral,System.Collections.Generic.IList{iText.Kernel.Pdf.PdfObject})">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.SetTextLeadingOperator">
            <summary>A handler that implements operator (TL).</summary>
            <remarks>A handler that implements operator (TL). For more information see Table 51 ISO-32000-1</remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.SetTextLeadingOperator.Invoke(iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor,iText.Kernel.Pdf.PdfLiteral,System.Collections.Generic.IList{iText.Kernel.Pdf.PdfObject})">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.SetTextHorizontalScalingOperator">
            <summary>A handler that implements operator (Tz).</summary>
            <remarks>A handler that implements operator (Tz). For more information see Table 51 ISO-32000-1</remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.SetTextHorizontalScalingOperator.Invoke(iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor,iText.Kernel.Pdf.PdfLiteral,System.Collections.Generic.IList{iText.Kernel.Pdf.PdfObject})">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.SetTextCharacterSpacingOperator">
            <summary>A handler that implements operator (Tc).</summary>
            <remarks>A handler that implements operator (Tc). For more information see Table 51 ISO-32000-1</remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.SetTextCharacterSpacingOperator.Invoke(iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor,iText.Kernel.Pdf.PdfLiteral,System.Collections.Generic.IList{iText.Kernel.Pdf.PdfObject})">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.SetTextWordSpacingOperator">
            <summary>A handler that implements operator (Tw).</summary>
            <remarks>A handler that implements operator (Tw). For more information see Table 51 ISO-32000-1</remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.SetTextWordSpacingOperator.Invoke(iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor,iText.Kernel.Pdf.PdfLiteral,System.Collections.Generic.IList{iText.Kernel.Pdf.PdfObject})">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.ProcessGraphicsStateResourceOperator">
            <summary>A handler that implements operator (gs).</summary>
            <remarks>A handler that implements operator (gs). For more information see Table 51 ISO-32000-1</remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.ProcessGraphicsStateResourceOperator.Invoke(iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor,iText.Kernel.Pdf.PdfLiteral,System.Collections.Generic.IList{iText.Kernel.Pdf.PdfObject})">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.PushGraphicsStateOperator">
            <summary>A handler that implements operator (q).</summary>
            <remarks>A handler that implements operator (q). For more information see Table 51 ISO-32000-1</remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.PushGraphicsStateOperator.Invoke(iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor,iText.Kernel.Pdf.PdfLiteral,System.Collections.Generic.IList{iText.Kernel.Pdf.PdfObject})">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.ModifyCurrentTransformationMatrixOperator">
            <summary>A handler that implements operator (cm).</summary>
            <remarks>A handler that implements operator (cm). For more information see Table 51 ISO-32000-1</remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.ModifyCurrentTransformationMatrixOperator.Invoke(iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor,iText.Kernel.Pdf.PdfLiteral,System.Collections.Generic.IList{iText.Kernel.Pdf.PdfObject})">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.GetColor(iText.Kernel.Pdf.Colorspace.PdfColorSpace,System.Collections.Generic.IList{iText.Kernel.Pdf.PdfObject},iText.Kernel.Pdf.PdfResources)">
            <summary>Gets a color based on a list of operands and Color space.</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.GetColor(System.Int32,System.Collections.Generic.IList{iText.Kernel.Pdf.PdfObject})">
            <summary>Gets a color based on a list of operands.</summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.PopGraphicsStateOperator">
            <summary>A handler that implements operator (Q).</summary>
            <remarks>A handler that implements operator (Q). For more information see Table 51 ISO-32000-1</remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.PopGraphicsStateOperator.Invoke(iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor,iText.Kernel.Pdf.PdfLiteral,System.Collections.Generic.IList{iText.Kernel.Pdf.PdfObject})">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.SetGrayFillOperator">
            <summary>A handler that implements operator (g).</summary>
            <remarks>A handler that implements operator (g). For more information see Table 51 ISO-32000-1</remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.SetGrayFillOperator.Invoke(iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor,iText.Kernel.Pdf.PdfLiteral,System.Collections.Generic.IList{iText.Kernel.Pdf.PdfObject})">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.SetGrayStrokeOperator">
            <summary>A handler that implements operator (G).</summary>
            <remarks>A handler that implements operator (G). For more information see Table 51 ISO-32000-1</remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.SetGrayStrokeOperator.Invoke(iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor,iText.Kernel.Pdf.PdfLiteral,System.Collections.Generic.IList{iText.Kernel.Pdf.PdfObject})">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.SetRGBFillOperator">
            <summary>A handler that implements operator (rg).</summary>
            <remarks>A handler that implements operator (rg). For more information see Table 51 ISO-32000-1</remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.SetRGBFillOperator.Invoke(iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor,iText.Kernel.Pdf.PdfLiteral,System.Collections.Generic.IList{iText.Kernel.Pdf.PdfObject})">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.SetRGBStrokeOperator">
            <summary>A handler that implements operator (RG).</summary>
            <remarks>A handler that implements operator (RG). For more information see Table 51 ISO-32000-1</remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.SetRGBStrokeOperator.Invoke(iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor,iText.Kernel.Pdf.PdfLiteral,System.Collections.Generic.IList{iText.Kernel.Pdf.PdfObject})">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.SetCMYKFillOperator">
            <summary>A handler that implements operator (k).</summary>
            <remarks>A handler that implements operator (k). For more information see Table 51 ISO-32000-1</remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.SetCMYKFillOperator.Invoke(iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor,iText.Kernel.Pdf.PdfLiteral,System.Collections.Generic.IList{iText.Kernel.Pdf.PdfObject})">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.SetCMYKStrokeOperator">
            <summary>A handler that implements operator (K).</summary>
            <remarks>A handler that implements operator (K). For more information see Table 51 ISO-32000-1</remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.SetCMYKStrokeOperator.Invoke(iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor,iText.Kernel.Pdf.PdfLiteral,System.Collections.Generic.IList{iText.Kernel.Pdf.PdfObject})">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.SetColorSpaceFillOperator">
            <summary>A handler that implements operator (CS).</summary>
            <remarks>A handler that implements operator (CS). For more information see Table 51 ISO-32000-1</remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.SetColorSpaceFillOperator.Invoke(iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor,iText.Kernel.Pdf.PdfLiteral,System.Collections.Generic.IList{iText.Kernel.Pdf.PdfObject})">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.SetColorSpaceStrokeOperator">
            <summary>A handler that implements operator (cs).</summary>
            <remarks>A handler that implements operator (cs). For more information see Table 51 ISO-32000-1</remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.SetColorSpaceStrokeOperator.Invoke(iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor,iText.Kernel.Pdf.PdfLiteral,System.Collections.Generic.IList{iText.Kernel.Pdf.PdfObject})">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.SetColorFillOperator">
            <summary>A handler that implements operator (sc / scn).</summary>
            <remarks>A handler that implements operator (sc / scn). For more information see Table 51 ISO-32000-1</remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.SetColorFillOperator.Invoke(iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor,iText.Kernel.Pdf.PdfLiteral,System.Collections.Generic.IList{iText.Kernel.Pdf.PdfObject})">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.SetColorStrokeOperator">
            <summary>A handler that implements operator (SC / SCN).</summary>
            <remarks>A handler that implements operator (SC / SCN). For more information see Table 51 ISO-32000-1</remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.SetColorStrokeOperator.Invoke(iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor,iText.Kernel.Pdf.PdfLiteral,System.Collections.Generic.IList{iText.Kernel.Pdf.PdfObject})">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.BeginTextOperator">
            <summary>A handler that implements operator (BT).</summary>
            <remarks>A handler that implements operator (BT). For more information see Table 51 ISO-32000-1</remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.BeginTextOperator.Invoke(iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor,iText.Kernel.Pdf.PdfLiteral,System.Collections.Generic.IList{iText.Kernel.Pdf.PdfObject})">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.EndTextOperator">
            <summary>A handler that implements operator (ET).</summary>
            <remarks>A handler that implements operator (ET). For more information see Table 51 ISO-32000-1</remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.EndTextOperator.Invoke(iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor,iText.Kernel.Pdf.PdfLiteral,System.Collections.Generic.IList{iText.Kernel.Pdf.PdfObject})">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.BeginMarkedContentOperator">
            <summary>A handler that implements operator (BMC).</summary>
            <remarks>A handler that implements operator (BMC). For more information see Table 51 ISO-32000-1</remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.BeginMarkedContentOperator.Invoke(iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor,iText.Kernel.Pdf.PdfLiteral,System.Collections.Generic.IList{iText.Kernel.Pdf.PdfObject})">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.BeginMarkedContentDictionaryOperator">
            <summary>A handler that implements operator (BDC).</summary>
            <remarks>A handler that implements operator (BDC). For more information see Table 51 ISO-32000-1</remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.BeginMarkedContentDictionaryOperator.Invoke(iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor,iText.Kernel.Pdf.PdfLiteral,System.Collections.Generic.IList{iText.Kernel.Pdf.PdfObject})">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.EndMarkedContentOperator">
            <summary>A handler that implements operator (EMC).</summary>
            <remarks>A handler that implements operator (EMC). For more information see Table 51 ISO-32000-1</remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.EndMarkedContentOperator.Invoke(iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor,iText.Kernel.Pdf.PdfLiteral,System.Collections.Generic.IList{iText.Kernel.Pdf.PdfObject})">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.DoOperator">
            <summary>A handler that implements operator (Do).</summary>
            <remarks>A handler that implements operator (Do). For more information see Table 51 ISO-32000-1</remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.DoOperator.Invoke(iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor,iText.Kernel.Pdf.PdfLiteral,System.Collections.Generic.IList{iText.Kernel.Pdf.PdfObject})">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.EndImageOperator">
            <summary>A handler that implements operator (EI).</summary>
            <remarks>
            A handler that implements operator (EI). For more information see Table 51 ISO-32000-1
            BI and ID operators are parsed along with this operator.
            This not a usual operator, it will have a single operand, which will be a PdfStream object which
            encapsulates inline image dictionary and bytes
            </remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.EndImageOperator.Invoke(iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor,iText.Kernel.Pdf.PdfLiteral,System.Collections.Generic.IList{iText.Kernel.Pdf.PdfObject})">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.SetLineWidthOperator">
            <summary>A handler that implements operator (w).</summary>
            <remarks>A handler that implements operator (w). For more information see Table 51 ISO-32000-1</remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.SetLineWidthOperator.Invoke(iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor,iText.Kernel.Pdf.PdfLiteral,System.Collections.Generic.IList{iText.Kernel.Pdf.PdfObject})">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.SetLineCapOperator">
            <summary>A handler that implements operator (J).</summary>
            <remarks>A handler that implements operator (J). For more information see Table 51 ISO-32000-1</remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.SetLineCapOperator.Invoke(iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor,iText.Kernel.Pdf.PdfLiteral,System.Collections.Generic.IList{iText.Kernel.Pdf.PdfObject})">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.SetLineJoinOperator">
            <summary>A handler that implements operator (j).</summary>
            <remarks>A handler that implements operator (j). For more information see Table 51 ISO-32000-1</remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.SetLineJoinOperator.Invoke(iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor,iText.Kernel.Pdf.PdfLiteral,System.Collections.Generic.IList{iText.Kernel.Pdf.PdfObject})">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.SetMiterLimitOperator">
            <summary>A handler that implements operator (M).</summary>
            <remarks>A handler that implements operator (M). For more information see Table 51 ISO-32000-1</remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.SetMiterLimitOperator.Invoke(iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor,iText.Kernel.Pdf.PdfLiteral,System.Collections.Generic.IList{iText.Kernel.Pdf.PdfObject})">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.SetLineDashPatternOperator">
            <summary>A handler that implements operator (d).</summary>
            <remarks>A handler that implements operator (d). For more information see Table 51 ISO-32000-1</remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.SetLineDashPatternOperator.Invoke(iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor,iText.Kernel.Pdf.PdfLiteral,System.Collections.Generic.IList{iText.Kernel.Pdf.PdfObject})">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.FormXObjectDoHandler">
            <summary>An XObject subtype handler for FORM</summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.ImageXObjectDoHandler">
            <summary>An XObject subtype handler for IMAGE</summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.IgnoreXObjectDoHandler">
            <summary>An XObject subtype handler that does nothing</summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.MoveToOperator">
            <summary>A handler that implements operator (m).</summary>
            <remarks>A handler that implements operator (m). For more information see Table 51 ISO-32000-1</remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.MoveToOperator.Invoke(iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor,iText.Kernel.Pdf.PdfLiteral,System.Collections.Generic.IList{iText.Kernel.Pdf.PdfObject})">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.LineToOperator">
            <summary>A handler that implements operator (l).</summary>
            <remarks>A handler that implements operator (l). For more information see Table 51 ISO-32000-1</remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.LineToOperator.Invoke(iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor,iText.Kernel.Pdf.PdfLiteral,System.Collections.Generic.IList{iText.Kernel.Pdf.PdfObject})">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.CurveOperator">
            <summary>A handler that implements operator (c).</summary>
            <remarks>A handler that implements operator (c). For more information see Table 51 ISO-32000-1</remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.CurveOperator.Invoke(iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor,iText.Kernel.Pdf.PdfLiteral,System.Collections.Generic.IList{iText.Kernel.Pdf.PdfObject})">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.CurveFirstPointDuplicatedOperator">
            <summary>A handler that implements operator (v).</summary>
            <remarks>A handler that implements operator (v). For more information see Table 51 ISO-32000-1</remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.CurveFirstPointDuplicatedOperator.Invoke(iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor,iText.Kernel.Pdf.PdfLiteral,System.Collections.Generic.IList{iText.Kernel.Pdf.PdfObject})">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.CurveFourhPointDuplicatedOperator">
            <summary>A handler that implements operator (y).</summary>
            <remarks>A handler that implements operator (y). For more information see Table 51 ISO-32000-1</remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.CurveFourhPointDuplicatedOperator.Invoke(iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor,iText.Kernel.Pdf.PdfLiteral,System.Collections.Generic.IList{iText.Kernel.Pdf.PdfObject})">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.CloseSubpathOperator">
            <summary>A handler that implements operator (h).</summary>
            <remarks>A handler that implements operator (h). For more information see Table 51 ISO-32000-1</remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.CloseSubpathOperator.Invoke(iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor,iText.Kernel.Pdf.PdfLiteral,System.Collections.Generic.IList{iText.Kernel.Pdf.PdfObject})">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.RectangleOperator">
            <summary>A handler that implements operator (re).</summary>
            <remarks>A handler that implements operator (re). For more information see Table 51 ISO-32000-1</remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.RectangleOperator.Invoke(iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor,iText.Kernel.Pdf.PdfLiteral,System.Collections.Generic.IList{iText.Kernel.Pdf.PdfObject})">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.PaintPathOperator">
            <summary>A handler that implements operator (S, s, f, F, f*, B, B*, b, b*).</summary>
            <remarks>A handler that implements operator (S, s, f, F, f*, B, B*, b, b*). For more information see Table 51 ISO-32000-1
                </remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.PaintPathOperator.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>Constructs PainPath object.</summary>
            <param name="operation">
            One of the possible combinations of
            <see cref="F:iText.Kernel.Pdf.Canvas.Parser.Data.PathRenderInfo.STROKE"/>
            and
            <see cref="F:iText.Kernel.Pdf.Canvas.Parser.Data.PathRenderInfo.FILL"/>
            values or
            <see cref="F:iText.Kernel.Pdf.Canvas.Parser.Data.PathRenderInfo.NO_OP"/>
            </param>
            <param name="rule">
            Either
            <see cref="F:iText.Kernel.Pdf.Canvas.PdfCanvasConstants.FillingRule.NONZERO_WINDING"/>
            or
            <see cref="F:iText.Kernel.Pdf.Canvas.PdfCanvasConstants.FillingRule.EVEN_ODD"/>
            In case it isn't applicable pass any value.
            </param>
            <param name="close">Indicates whether the path should be closed or not.</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.PaintPathOperator.Invoke(iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor,iText.Kernel.Pdf.PdfLiteral,System.Collections.Generic.IList{iText.Kernel.Pdf.PdfObject})">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.ClipPathOperator">
            <summary>A handler that implements operator (W, W*).</summary>
            <remarks>A handler that implements operator (W, W*). For more information see Table 51 ISO-32000-1</remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor.ClipPathOperator.Invoke(iText.Kernel.Pdf.Canvas.Parser.PdfCanvasProcessor,iText.Kernel.Pdf.PdfLiteral,System.Collections.Generic.IList{iText.Kernel.Pdf.PdfObject})">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.PdfDocumentContentParser">
            <summary>
            A utility class that makes it cleaner to process content from pages of a
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            through a specified RenderListener.
            </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfDocumentContentParser.ProcessContent``1(System.Int32,``0,System.Collections.Generic.IDictionary{System.String,iText.Kernel.Pdf.Canvas.Parser.IContentOperator})">
            <summary>Processes content from the specified page number using the specified listener.</summary>
            <remarks>
            Processes content from the specified page number using the specified listener.
            Also allows registration of custom IContentOperators that can influence
            how (and whether or not) the PDF instructions will be parsed.
            </remarks>
            
            <param name="pageNumber">the page number to process</param>
            <param name="renderListener">the listener that will receive render callbacks</param>
            <param name="additionalContentOperators">an optional map of custom ContentOperators for rendering instructions
                </param>
            <returns>the provided renderListener</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfDocumentContentParser.ProcessContent``1(System.Int32,``0)">
            <summary>Processes content from the specified page number using the specified listener</summary>
            
            <param name="pageNumber">the page number to process</param>
            <param name="renderListener">the listener that will receive render callbacks</param>
            <returns>the provided renderListener</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfTextExtractor.GetTextFromPage(iText.Kernel.Pdf.PdfPage,iText.Kernel.Pdf.Canvas.Parser.Listener.ITextExtractionStrategy,System.Collections.Generic.IDictionary{System.String,iText.Kernel.Pdf.Canvas.Parser.IContentOperator})">
            <summary>Extract text from a specified page using an extraction strategy.</summary>
            <remarks>
            Extract text from a specified page using an extraction strategy.
            Also allows registration of custom IContentOperators that can influence
            how (and whether or not) the PDF instructions will be parsed.
            Extraction strategy must be passed as a new object for every single page.
            </remarks>
            <param name="page">the page for the text to be extracted from</param>
            <param name="strategy">the strategy to use for extracting text</param>
            <param name="additionalContentOperators">
            an optional map of custom
            <see cref="T:iText.Kernel.Pdf.Canvas.Parser.IContentOperator"/>
            s for rendering instructions
            </param>
            <returns>the extracted text</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfTextExtractor.GetTextFromPage(iText.Kernel.Pdf.PdfPage,iText.Kernel.Pdf.Canvas.Parser.Listener.ITextExtractionStrategy)">
            <summary>Extract text from a specified page using an extraction strategy.</summary>
            <remarks>
            Extract text from a specified page using an extraction strategy.
            Extraction strategy must be passed as a new object for every single page.
            </remarks>
            <param name="page">the page for the text to be extracted from</param>
            <param name="strategy">the strategy to use for extracting text</param>
            <returns>the extracted text</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.PdfTextExtractor.GetTextFromPage(iText.Kernel.Pdf.PdfPage)">
            <summary>Extract text from a specified page using the default strategy.</summary>
            <remarks>
            Extract text from a specified page using the default strategy.
            Node: the default strategy is subject to change. If using a specific strategy
            is important, please use
            <see cref="M:iText.Kernel.Pdf.Canvas.Parser.PdfTextExtractor.GetTextFromPage(iText.Kernel.Pdf.PdfPage,iText.Kernel.Pdf.Canvas.Parser.Listener.ITextExtractionStrategy)"/>
            .
            </remarks>
            <param name="page">the page for the text to be extracted from</param>
            <returns>the extracted text</returns>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.Util.InlineImageParsingUtils">
            <summary>Utility methods to help with processing of inline images</summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.Util.InlineImageParsingUtils.InlineImageParseException">
            <summary>
            Simple class in case users need to differentiate an exception from processing
            inline images vs other exceptions
            </summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.Parser.Util.InlineImageParsingUtils.inlineImageEntryAbbreviationMap">
            <summary>
            Map between key abbreviations allowed in dictionary of inline images and their
            equivalent image dictionary keys
            </summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.Parser.Util.InlineImageParsingUtils.inlineImageColorSpaceAbbreviationMap">
            <summary>Map between value abbreviations allowed in dictionary of inline images for COLORSPACE</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.Parser.Util.InlineImageParsingUtils.inlineImageFilterAbbreviationMap">
            <summary>Map between value abbreviations allowed in dictionary of inline images for FILTER</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Util.InlineImageParsingUtils.Parse(iText.Kernel.Pdf.Canvas.Parser.Util.PdfCanvasParser,iText.Kernel.Pdf.PdfDictionary)">
            <summary>Parses an inline image from the provided content parser.</summary>
            <remarks>
            Parses an inline image from the provided content parser.  The parser must be positioned immediately following the BI operator in the content stream.
            The parser will be left with current position immediately following the EI operator that terminates the inline image
            </remarks>
            <param name="ps">the content parser to use for reading the image.</param>
            <param name="colorSpaceDic">a color space dictionary</param>
            <returns>the parsed image</returns>
            <exception cref="T:System.IO.IOException">if anything goes wring with the parsing</exception>
            <exception cref="T:iText.Kernel.Pdf.Canvas.Parser.Util.InlineImageParsingUtils.InlineImageParseException">if parsing of the inline image failed due to issues specific to inline image processing
                </exception>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Util.InlineImageParsingUtils.ParseDictionary(iText.Kernel.Pdf.Canvas.Parser.Util.PdfCanvasParser)">
            <summary>Parses the next inline image dictionary from the parser.</summary>
            <remarks>
            Parses the next inline image dictionary from the parser.  The parser must be positioned immediately following the BI operator.
            The parser will be left with position immediately following the whitespace character that follows the ID operator that ends the inline image dictionary.
            </remarks>
            <param name="ps">the parser to extract the embedded image information from</param>
            <returns>the dictionary for the inline image, with any abbreviations converted to regular image dictionary keys and values
                </returns>
            <exception cref="T:System.IO.IOException">if the parse fails</exception>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Util.InlineImageParsingUtils.GetAlternateValue(iText.Kernel.Pdf.PdfName,iText.Kernel.Pdf.PdfObject)">
            <summary>Transforms value abbreviations into their corresponding real value</summary>
            <param name="key">the key that the value is for</param>
            <param name="value">the value that might be an abbreviation</param>
            <returns>if value is an allowed abbreviation for the key, the expanded value for that abbreviation.  Otherwise, value is returned without modification
                </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Util.InlineImageParsingUtils.GetComponentsPerPixel(iText.Kernel.Pdf.PdfName,iText.Kernel.Pdf.PdfDictionary)">
            <param name="colorSpaceName">the name of the color space. If null, a bi-tonal (black and white) color space is assumed.
                </param>
            <returns>the components per pixel for the specified color space</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Util.InlineImageParsingUtils.ComputeBytesPerRow(iText.Kernel.Pdf.PdfDictionary,iText.Kernel.Pdf.PdfDictionary)">
            <summary>Computes the number of unfiltered bytes that each row of the image will contain.</summary>
            <remarks>
            Computes the number of unfiltered bytes that each row of the image will contain.
            If the number of bytes results in a partial terminating byte, this number is rounded up
            per the PDF specification
            </remarks>
            <param name="imageDictionary">the dictionary of the inline image</param>
            <returns>the number of bytes per row of the image</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Util.InlineImageParsingUtils.ParseUnfilteredSamples(iText.Kernel.Pdf.PdfDictionary,iText.Kernel.Pdf.PdfDictionary,iText.Kernel.Pdf.Canvas.Parser.Util.PdfCanvasParser)">
            <summary>Parses the samples of the image from the underlying content parser, ignoring all filters.</summary>
            <remarks>
            Parses the samples of the image from the underlying content parser, ignoring all filters.
            The parser must be positioned immediately after the ID operator that ends the inline image's dictionary.
            The parser will be left positioned immediately following the EI operator.
            This is primarily useful if no filters have been applied.
            </remarks>
            <param name="imageDictionary">the dictionary of the inline image</param>
            <param name="ps">the content parser</param>
            <returns>the samples of the image</returns>
            <exception cref="T:System.IO.IOException">if anything bad happens during parsing</exception>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Util.InlineImageParsingUtils.ParseSamples(iText.Kernel.Pdf.PdfDictionary,iText.Kernel.Pdf.PdfDictionary,iText.Kernel.Pdf.Canvas.Parser.Util.PdfCanvasParser)">
            <summary>
            Parses the samples of the image from the underlying content parser, accounting for filters
            The parser must be positioned immediately after the ID operator that ends the inline image's dictionary.
            </summary>
            <remarks>
            Parses the samples of the image from the underlying content parser, accounting for filters
            The parser must be positioned immediately after the ID operator that ends the inline image's dictionary.
            The parser will be left positioned immediately following the EI operator.
            <b>Note:</b>This implementation does not actually apply the filters at this time
            </remarks>
            <param name="imageDictionary">the dictionary of the inline image</param>
            <param name="ps">the content parser</param>
            <returns>the samples of the image</returns>
            <exception cref="T:System.IO.IOException">if anything bad happens during parsing</exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.Pdf.Canvas.Parser.Util.InlineImageParsingUtils.InlineImageStreamBytesAreComplete(System.Byte[],iText.Kernel.Pdf.PdfDictionary)" -->
        <member name="T:iText.Kernel.Pdf.Canvas.Parser.Util.PdfCanvasParser">
            <summary>Parses the page or form XObject content.</summary>
            <author>Paulo Soares</author>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.Parser.Util.PdfCanvasParser.tokeniser">
            <summary>Holds value of property tokeniser.</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Util.PdfCanvasParser.#ctor(iText.IO.Source.PdfTokenizer)">
            <summary>Creates a new instance of PdfContentParser</summary>
            <param name="tokeniser">the tokeniser with the content</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Util.PdfCanvasParser.#ctor(iText.IO.Source.PdfTokenizer,iText.Kernel.Pdf.PdfResources)">
            <summary>Creates a new instance of PdfContentParser</summary>
            <param name="tokeniser">the tokeniser with the content</param>
            <param name="currentResources">
            current resources of the content stream.
            It is optional parameter, which is used for performance improvements of specific cases of
            inline images parsing.
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Util.PdfCanvasParser.Parse(System.Collections.Generic.IList{iText.Kernel.Pdf.PdfObject})">
            <summary>Parses a single command from the content.</summary>
            <remarks>
            Parses a single command from the content. Each command is output as an array of arguments
            having the command itself as the last element. The returned array will be empty if the
            end of content was reached.
            <br />
            A specific behaviour occurs when inline image is encountered (BI command):
            in that case, parser would continue parsing until it meets EI - end of the inline image;
            as a result in this case it will return an array with inline image dictionary and image bytes
            encapsulated in PdfStream object as first element and EI command as second element.
            </remarks>
            <param name="ls">
            an <CODE>ArrayList</CODE> to use. It will be cleared before using. If it's
            <CODE>null</CODE> will create a new <CODE>ArrayList</CODE>
            </param>
            <returns>the same <CODE>ArrayList</CODE> given as argument or a new one</returns>
            <exception cref="T:System.IO.IOException">on error</exception>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Util.PdfCanvasParser.GetTokeniser">
            <summary>Gets the tokeniser.</summary>
            <returns>the tokeniser.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Util.PdfCanvasParser.SetTokeniser(iText.IO.Source.PdfTokenizer)">
            <summary>Sets the tokeniser.</summary>
            <param name="tokeniser">the tokeniser</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Util.PdfCanvasParser.ReadDictionary">
            <summary>Reads a dictionary.</summary>
            <remarks>Reads a dictionary. The tokeniser must be positioned past the "&lt;&lt;" token.</remarks>
            <returns>the dictionary</returns>
            <exception cref="T:System.IO.IOException">on error</exception>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Util.PdfCanvasParser.ReadArray">
            <summary>Reads an array.</summary>
            <remarks>Reads an array. The tokeniser must be positioned past the "[" token.</remarks>
            <returns>an array</returns>
            <exception cref="T:System.IO.IOException">on error</exception>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Util.PdfCanvasParser.ReadObject">
            <summary>Reads a pdf object.</summary>
            <returns>the pdf object</returns>
            <exception cref="T:System.IO.IOException">on error</exception>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Parser.Util.PdfCanvasParser.NextValidToken">
            <summary>Reads the next token skipping over the comments.</summary>
            <returns><CODE>true</CODE> if a token was read, <CODE>false</CODE> if the end of content was reached</returns>
            <exception cref="T:System.IO.IOException">on error</exception>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.PdfCanvas">
            <summary>PdfCanvas class represents an algorithm for writing data into content stream.</summary>
            <remarks>
            PdfCanvas class represents an algorithm for writing data into content stream.
            To write into page content, create PdfCanvas from a page instance.
            To write into form XObject, create PdfCanvas from a form XObject instance.
            Make sure to call PdfCanvas.release() after you finished writing to the canvas.
            It will save some memory.
            </remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.PdfCanvas.gsStack">
            <summary>a LIFO stack of graphics state saved states.</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.PdfCanvas.currentGs">
            <summary>the current graphics state.</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.PdfCanvas.contentStream">
            <summary>the content stream for this canvas object.</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.PdfCanvas.resources">
            <summary>the resources for the page that this canvas belongs to.</summary>
            <seealso cref="T:iText.Kernel.Pdf.PdfResources"/>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.PdfCanvas.document">
            <summary>the document that the resulting content stream of this canvas will be written to.</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.PdfCanvas.mcDepth">
            <summary>a counter variable for the marked content stack.</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.PdfCanvas.layerDepth">
            <summary>The list where we save/restore the layer depth.</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.#ctor(iText.Kernel.Pdf.PdfStream,iText.Kernel.Pdf.PdfResources,iText.Kernel.Pdf.PdfDocument)">
            <summary>Creates PdfCanvas from content stream of page, form XObject, pattern etc.</summary>
            <param name="contentStream">The content stream</param>
            <param name="resources">The resources, a specialized dictionary that can be used by PDF instructions in the content stream
                </param>
            <param name="document">The document that the resulting content stream will be written to</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.#ctor(iText.Kernel.Pdf.PdfPage)">
            <summary>Convenience method for fast PdfCanvas creation by a certain page.</summary>
            <param name="page">page to create canvas from.</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.#ctor(iText.Kernel.Pdf.PdfPage,System.Boolean)">
            <summary>Convenience method for fast PdfCanvas creation by a certain page.</summary>
            <param name="page">page to create canvas from.</param>
            <param name="wrapOldContent">
            true to wrap all old content streams into q/Q operators so that the state of old
            content streams would not affect the new one
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.#ctor(iText.Kernel.Pdf.Xobject.PdfFormXObject,iText.Kernel.Pdf.PdfDocument)">
            <summary>Creates a PdfCanvas from a PdfFormXObject.</summary>
            <param name="xObj">the PdfFormXObject used to create the PdfCanvas</param>
            <param name="document">the document to which the resulting content stream will be written</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.#ctor(iText.Kernel.Pdf.PdfDocument,System.Int32)">
            <summary>Convenience method for fast PdfCanvas creation by a certain page.</summary>
            <param name="doc">The document</param>
            <param name="pageNum">The page number</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.GetResources">
            <summary>Get the resources of the page that this canvas belongs to..</summary>
            <returns>PdfResources of the page that this canvas belongs to..</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.GetDocument">
            <summary>Get the document this canvas belongs to</summary>
            <returns>PdfDocument the document that this canvas belongs to</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.AttachContentStream(iText.Kernel.Pdf.PdfStream)">
            <summary>Attaches new content stream to the canvas.</summary>
            <remarks>
            Attaches new content stream to the canvas.
            This method is supposed to be used when you want to write in different PdfStream keeping context (gsStack, currentGs, ...) the same.
            </remarks>
            <param name="contentStream">a content stream to attach.</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.GetGraphicsState">
            <summary>
            Gets current
            <see cref="T:iText.Kernel.Pdf.Canvas.CanvasGraphicsState"/>
            .
            </summary>
            <returns>container containing properties for the current state of the canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.Release">
            <summary>Releases the canvas.</summary>
            <remarks>
            Releases the canvas.
            Use this method after you finished working with canvas.
            </remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.SaveState">
            <summary>Saves graphics state.</summary>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.RestoreState">
            <summary>Restores graphics state.</summary>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.ConcatMatrix(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Concatenates the 2x3 affine transformation matrix to the current matrix
            in the content stream managed by this Canvas.
            </summary>
            <remarks>
            Concatenates the 2x3 affine transformation matrix to the current matrix
            in the content stream managed by this Canvas.
            Contrast with
            <see cref="M:iText.Kernel.Pdf.Canvas.PdfCanvas.SetTextMatrix(iText.Kernel.Geom.AffineTransform)"/>
            </remarks>
            <param name="a">operand 1,1 in the matrix.</param>
            <param name="b">operand 1,2 in the matrix.</param>
            <param name="c">operand 2,1 in the matrix.</param>
            <param name="d">operand 2,2 in the matrix.</param>
            <param name="e">operand 3,1 in the matrix.</param>
            <param name="f">operand 3,2 in the matrix.</param>
            <returns>current canvas</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.ConcatMatrix(iText.Kernel.Pdf.PdfArray)">
            <summary>
            Concatenates the 2x3 affine transformation matrix to the current matrix
            in the content stream managed by this Canvas.
            </summary>
            <remarks>
            Concatenates the 2x3 affine transformation matrix to the current matrix
            in the content stream managed by this Canvas.
            If an array not containing the 6 values of the matrix is passed,
            The current canvas is returned unchanged.
            </remarks>
            <param name="array">affine transformation stored as a PdfArray with 6 values</param>
            <returns>current canvas</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.ConcatMatrix(iText.Kernel.Geom.AffineTransform)">
            <summary>
            Concatenates the affine transformation matrix to the current matrix
            in the content stream managed by this Canvas.
            </summary>
            <remarks>
            Concatenates the affine transformation matrix to the current matrix
            in the content stream managed by this Canvas.
            See also
            <see cref="M:iText.Kernel.Pdf.Canvas.PdfCanvas.ConcatMatrix(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)"/>
            </remarks>
            <param name="transform"/>
            <returns>current canvas</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.BeginText">
            <summary>Begins text block (PDF BT operator).</summary>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.EndText">
            <summary>Ends text block (PDF ET operator).</summary>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.BeginVariableText">
            <summary>Begins variable text block</summary>
            <returns>current canvas</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.EndVariableText">
            <summary>Ends variable text block</summary>
            <returns>current canvas</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.SetFontAndSize(iText.Kernel.Font.PdfFont,System.Single)">
            <summary>Sets font and size (PDF Tf operator).</summary>
            <param name="font">The font</param>
            <param name="size">The font size.</param>
            <returns>The edited canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.MoveText(System.Double,System.Double)">
            <summary>Moves text by shifting text line matrix (PDF Td operator).</summary>
            <param name="x">x coordinate.</param>
            <param name="y">y coordinate.</param>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.SetLeading(System.Single)">
            <summary>Sets the text leading parameter.</summary>
            <remarks>
            Sets the text leading parameter.
            <br />
            The leading parameter is measured in text space units. It specifies the vertical distance
            between the baselines of adjacent lines of text.
            <br />
            </remarks>
            <param name="leading">the new leading.</param>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.MoveTextWithLeading(System.Single,System.Single)">
            <summary>Moves to the start of the next line, offset from the start of the current line.</summary>
            <remarks>
            Moves to the start of the next line, offset from the start of the current line.
            <br />
            As a side effect, this sets the leading parameter in the text state.
            <br />
            </remarks>
            <param name="x">offset of the new current point</param>
            <param name="y">y-coordinate of the new current point</param>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.NewlineText">
            <summary>Moves to the start of the next line.</summary>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.NewlineShowText(System.String)">
            <summary>
            Moves to the next line and shows
            <paramref name="text"/>
            .
            </summary>
            <param name="text">the text to write</param>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.NewlineShowText(System.Single,System.Single,System.String)">
            <summary>Moves to the next line and shows text string, using the given values of the character and word spacing parameters.
                </summary>
            <param name="wordSpacing">a parameter</param>
            <param name="charSpacing">a parameter</param>
            <param name="text">the text to write</param>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.SetTextRenderingMode(System.Int32)">
            <summary>Sets text rendering mode.</summary>
            <param name="textRenderingMode">text rendering mode @see PdfCanvasConstants.</param>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.SetTextRise(System.Single)">
            <summary>Sets the text rise parameter.</summary>
            <remarks>
            Sets the text rise parameter.
            <br />
            This allows to write text in subscript or superscript mode.
            <br />
            </remarks>
            <param name="textRise">a parameter</param>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.SetWordSpacing(System.Single)">
            <summary>Sets the word spacing parameter.</summary>
            <param name="wordSpacing">a parameter</param>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.SetCharacterSpacing(System.Single)">
            <summary>Sets the character spacing parameter.</summary>
            <param name="charSpacing">a parameter</param>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.SetHorizontalScaling(System.Single)">
            <summary>Sets the horizontal scaling parameter.</summary>
            <param name="scale">a parameter.</param>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.SetTextMatrix(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>Replaces the text matrix.</summary>
            <remarks>
            Replaces the text matrix. Contrast with
            <see cref="M:iText.Kernel.Pdf.Canvas.PdfCanvas.ConcatMatrix(iText.Kernel.Pdf.PdfArray)"/>
            </remarks>
            <param name="a">operand 1,1 in the matrix.</param>
            <param name="b">operand 1,2 in the matrix.</param>
            <param name="c">operand 2,1 in the matrix.</param>
            <param name="d">operand 2,2 in the matrix.</param>
            <param name="x">operand 3,1 in the matrix.</param>
            <param name="y">operand 3,2 in the matrix.</param>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.SetTextMatrix(iText.Kernel.Geom.AffineTransform)">
            <summary>Replaces the text matrix.</summary>
            <remarks>
            Replaces the text matrix. Contrast with
            <see cref="M:iText.Kernel.Pdf.Canvas.PdfCanvas.ConcatMatrix(iText.Kernel.Pdf.PdfArray)"/>
            </remarks>
            <param name="transform">new textmatrix as transformation</param>
            <returns>current canvas</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.SetTextMatrix(System.Single,System.Single)">
            <summary>Changes the text matrix.</summary>
            <param name="x">operand 3,1 in the matrix.</param>
            <param name="y">operand 3,2 in the matrix.</param>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.ShowText(System.String)">
            <summary>Shows text (operator Tj).</summary>
            <param name="text">text to show.</param>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.ShowText(iText.IO.Font.Otf.GlyphLine)">
            <summary>Shows text (operator Tj).</summary>
            <param name="text">text to show.</param>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.ShowText(iText.IO.Font.Otf.GlyphLine,System.Collections.Generic.IEnumerator{iText.IO.Font.Otf.GlyphLine.GlyphLinePart})">
            <summary>Shows text (operator Tj).</summary>
            <param name="text">text to show.</param>
            <param name="iterator">
            iterator over parts of the glyph line that should be wrapped into some marked content groups,
            e.g. /ActualText or /ReversedChars
            </param>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.GetSubrangeWidth(iText.IO.Font.Otf.GlyphLine,System.Int32,System.Int32)">
            <summary>Finds horizontal distance between the start of the `from` glyph and end of `to` glyph.</summary>
            <remarks>
            Finds horizontal distance between the start of the `from` glyph and end of `to` glyph.
            Glyphs with placement are ignored.
            XAdvance is not taken into account neither before `from` nor after `to` glyphs.
            </remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.ShowText(iText.Kernel.Pdf.PdfArray)">
            <summary>Shows text (operator TJ)</summary>
            <param name="textArray">
            the text array. Each element of array can be a string or a number.
            If the element is a string, this operator shows the string.
            If it is a number, the operator adjusts the text position by that amount.
            The number is expressed in thousandths of a unit of text space.
            This amount is subtracted from the current horizontal or vertical coordinate, depending on the writing mode.
            </param>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.MoveTo(System.Double,System.Double)">
            <summary>Move the current point <i>(x, y)</i>, omitting any connecting line segment.</summary>
            <param name="x">x coordinate.</param>
            <param name="y">y coordinate.</param>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.LineTo(System.Double,System.Double)">
            <summary>Appends a straight line segment from the current point <i>(x, y)</i>.</summary>
            <remarks>
            Appends a straight line segment from the current point <i>(x, y)</i>. The new current
            point is <i>(x, y)</i>.
            </remarks>
            <param name="x">x coordinate.</param>
            <param name="y">y coordinate.</param>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.CurveTo(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>Appends a B&#xea;zier curve to the path, starting from the current point.</summary>
            <param name="x1">x coordinate of the first control point.</param>
            <param name="y1">y coordinate of the first control point.</param>
            <param name="x2">x coordinate of the second control point.</param>
            <param name="y2">y coordinate of the second control point.</param>
            <param name="x3">x coordinate of the ending point.</param>
            <param name="y3">y coordinate of the ending point.</param>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.CurveTo(System.Double,System.Double,System.Double,System.Double)">
            <summary>Appends a Bezier curve to the path, starting from the current point.</summary>
            <param name="x2">x coordinate of the second control point.</param>
            <param name="y2">y coordinate of the second control point.</param>
            <param name="x3">x coordinate of the ending point.</param>
            <param name="y3">y coordinate of the ending point.</param>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.CurveFromTo(System.Double,System.Double,System.Double,System.Double)">
            <summary>Appends a Bezier curve to the path, starting from the current point.</summary>
            <param name="x1">x coordinate of the first control point.</param>
            <param name="y1">y coordinate of the first control point.</param>
            <param name="x3">x coordinate of the ending point.</param>
            <param name="y3">y coordinate of the ending point.</param>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.Arc(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draws a partial ellipse inscribed within the rectangle x1,y1,x2,y2,
            starting at startAng degrees and covering extent degrees.
            </summary>
            <remarks>
            Draws a partial ellipse inscribed within the rectangle x1,y1,x2,y2,
            starting at startAng degrees and covering extent degrees. Angles
            start with 0 to the right (+x) and increase counter-clockwise.
            </remarks>
            <param name="x1">a corner of the enclosing rectangle.</param>
            <param name="y1">a corner of the enclosing rectangle.</param>
            <param name="x2">a corner of the enclosing rectangle.</param>
            <param name="y2">a corner of the enclosing rectangle.</param>
            <param name="startAng">starting angle in degrees.</param>
            <param name="extent">angle extent in degrees.</param>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.Ellipse(System.Double,System.Double,System.Double,System.Double)">
            <summary>Draws an ellipse inscribed within the rectangle x1,y1,x2,y2.</summary>
            <param name="x1">a corner of the enclosing rectangle</param>
            <param name="y1">a corner of the enclosing rectangle</param>
            <param name="x2">a corner of the enclosing rectangle</param>
            <param name="y2">a corner of the enclosing rectangle</param>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.BezierArc(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>Generates an array of bezier curves to draw an arc.</summary>
            <remarks>
            Generates an array of bezier curves to draw an arc.
            <br />
            (x1, y1) and (x2, y2) are the corners of the enclosing rectangle.
            Angles, measured in degrees, start with 0 to the right (the positive X
            axis) and increase counter-clockwise.  The arc extends from startAng
            to startAng+extent.  i.e. startAng=0 and extent=180 yields an openside-down
            semi-circle.
            <br />
            The resulting coordinates are of the form double[]{x1,y1,x2,y2,x3,y3, x4,y4}
            such that the curve goes from (x1, y1) to (x4, y4) with (x2, y2) and
            (x3, y3) as their respective Bezier control points.
            <br />
            Note: this code was taken from ReportLab (www.reportlab.org), an excellent
            PDF generator for Python (BSD license: http://www.reportlab.org/devfaq.html#1.3 ).
            </remarks>
            <param name="x1">a corner of the enclosing rectangle.</param>
            <param name="y1">a corner of the enclosing rectangle.</param>
            <param name="x2">a corner of the enclosing rectangle.</param>
            <param name="y2">a corner of the enclosing rectangle.</param>
            <param name="startAng">starting angle in degrees.</param>
            <param name="extent">angle extent in degrees.</param>
            <returns>a list of double[] with the bezier curves.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.Rectangle(System.Double,System.Double,System.Double,System.Double)">
            <summary>Draws a rectangle.</summary>
            <param name="x">x coordinate of the starting point.</param>
            <param name="y">y coordinate of the starting point.</param>
            <param name="width">width.</param>
            <param name="height">height.</param>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.Rectangle(iText.Kernel.Geom.Rectangle)">
            <summary>Draws a rectangle.</summary>
            <param name="rectangle">a rectangle to be drawn</param>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.RoundRectangle(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>Draws rounded rectangle.</summary>
            <param name="x">x coordinate of the starting point.</param>
            <param name="y">y coordinate of the starting point.</param>
            <param name="width">width.</param>
            <param name="height">height.</param>
            <param name="radius">radius of the arc corner.</param>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.Circle(System.Double,System.Double,System.Double)">
            <summary>Draws a circle.</summary>
            <remarks>Draws a circle. The endpoint will (x+r, y).</remarks>
            <param name="x">x center of circle.</param>
            <param name="y">y center of circle.</param>
            <param name="r">radius of circle.</param>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.PaintShading(iText.Kernel.Pdf.Colorspace.PdfShading)">
            <summary>Paints a shading object and adds it to the resources of this canvas</summary>
            <param name="shading"/>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.ClosePath">
            <summary>
            Closes the current subpath by appending a straight line segment from the current point
            to the starting point of the subpath.
            </summary>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.ClosePathEoFillStroke">
            <summary>Closes the path, fills it using the even-odd rule to determine the region to fill and strokes it.
                </summary>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.ClosePathFillStroke">
            <summary>Closes the path, fills it using the non-zero winding number rule to determine the region to fill and strokes it.
                </summary>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.NewPath">
            <summary>Ends the path without filling or stroking it.</summary>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.Stroke">
            <summary>Strokes the path.</summary>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.Clip">
            <summary>
            Modify the current clipping path by intersecting it with the current path, using the
            nonzero winding rule to determine which regions lie inside the clipping path.
            </summary>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.EoClip">
            <summary>
            Modify the current clipping path by intersecting it with the current path, using the
            even-odd rule to determine which regions lie inside the clipping path.
            </summary>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.ClosePathStroke">
            <summary>Closes the path and strokes it.</summary>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.Fill">
            <summary>Fills current path.</summary>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.FillStroke">
            <summary>Fills the path using the non-zero winding number rule to determine the region to fill and strokes it.
                </summary>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.EoFill">
            <summary>EOFills current path.</summary>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.EoFillStroke">
            <summary>Fills the path, using the even-odd rule to determine the region to fill and strokes it.</summary>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.SetLineWidth(System.Single)">
            <summary>Sets line width.</summary>
            <param name="lineWidth">line width.</param>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.SetLineCapStyle(System.Int32)">
            <summary>
            Sets the line cap style, the shape to be used at the ends of open subpaths
            when they are stroked.
            </summary>
            <param name="lineCapStyle"/>
            <returns>current canvas.</returns>
            <seealso cref="!:LineCapStyle">for possible values.</seealso>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.SetLineJoinStyle(System.Int32)">
            <summary>
            Sets the line join style, the shape to be used at the corners of paths
            when they are stroked.
            </summary>
            <param name="lineJoinStyle"/>
            <returns>current canvas.</returns>
            <seealso cref="!:LineJoinStyle">for possible values.</seealso>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.SetMiterLimit(System.Single)">
            <summary>
            Sets the miter limit, a parameter specifying the maximum length a miter join
            may extend beyond the join point, relative to the angle of the line segments.
            </summary>
            <param name="miterLimit"/>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.SetLineDash(System.Single)">
            <summary>Changes the value of the <VAR>line dash pattern</VAR>.</summary>
            <remarks>
            Changes the value of the <VAR>line dash pattern</VAR>.
            <br />
            The line dash pattern controls the pattern of dashes and gaps used to stroke paths.
            It is specified by an <I>array</I> and a <I>phase</I>. The array specifies the length
            of the alternating dashes and gaps. The phase specifies the distance into the dash
            pattern to start the dash.
            </remarks>
            <param name="phase">the value of the phase</param>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.SetLineDash(System.Single,System.Single)">
            <summary>Changes the value of the <VAR>line dash pattern</VAR>.</summary>
            <remarks>
            Changes the value of the <VAR>line dash pattern</VAR>.
            <br />
            The line dash pattern controls the pattern of dashes and gaps used to stroke paths.
            It is specified by an <I>array</I> and a <I>phase</I>. The array specifies the length
            of the alternating dashes and gaps. The phase specifies the distance into the dash
            pattern to start the dash.
            </remarks>
            <param name="phase">the value of the phase</param>
            <param name="unitsOn">the number of units that must be 'on' (equals the number of units that must be 'off').
                </param>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.SetLineDash(System.Single,System.Single,System.Single)">
            <summary>Changes the value of the <VAR>line dash pattern</VAR>.</summary>
            <remarks>
            Changes the value of the <VAR>line dash pattern</VAR>.
            <br />
            The line dash pattern controls the pattern of dashes and gaps used to stroke paths.
            It is specified by an <I>array</I> and a <I>phase</I>. The array specifies the length
            of the alternating dashes and gaps. The phase specifies the distance into the dash
            pattern to start the dash.
            </remarks>
            <param name="phase">the value of the phase</param>
            <param name="unitsOn">the number of units that must be 'on'</param>
            <param name="unitsOff">the number of units that must be 'off'</param>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.SetLineDash(System.Single[],System.Single)">
            <summary>Changes the value of the <VAR>line dash pattern</VAR>.</summary>
            <remarks>
            Changes the value of the <VAR>line dash pattern</VAR>.
            <br />
            The line dash pattern controls the pattern of dashes and gaps used to stroke paths.
            It is specified by an <I>array</I> and a <I>phase</I>. The array specifies the length
            of the alternating dashes and gaps. The phase specifies the distance into the dash
            pattern to start the dash.
            </remarks>
            <param name="array">length of the alternating dashes and gaps</param>
            <param name="phase">the value of the phase</param>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.SetRenderingIntent(iText.Kernel.Pdf.PdfName)">
            <summary>Set the rendering intent.</summary>
            <remarks>
            Set the rendering intent. possible values are: PdfName.AbsoluteColorimetric,
            PdfName.RelativeColorimetric, PdfName.Saturation, PdfName.Perceptual.
            </remarks>
            <param name="renderingIntent">a PdfName containing a color metric</param>
            <returns>current canvas.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.Pdf.Canvas.PdfCanvas.SetFlatnessTolerance(System.Single)" -->
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.SetFillColor(iText.Kernel.Colors.Color)">
            <summary>Changes the current color for filling paths.</summary>
            <param name="color">fill color.</param>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.SetStrokeColor(iText.Kernel.Colors.Color)">
            <summary>Changes the current color for stroking paths.</summary>
            <param name="color">stroke color.</param>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.SetColor(iText.Kernel.Colors.Color,System.Boolean)">
            <summary>Changes the current color for paths.</summary>
            <param name="color">the new color.</param>
            <param name="fill">set fill color (<code>true</code>) or stroke color (<code>false</code>)</param>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.SetColor(iText.Kernel.Pdf.Colorspace.PdfColorSpace,System.Single[],System.Boolean)">
            <summary>Changes the current color for paths.</summary>
            <param name="colorSpace">the color space of the new color</param>
            <param name="colorValue">a list of numerical values with a length corresponding to the specs of the color space. Values should be in the range [0,1]
                </param>
            <param name="fill">set fill color (<code>true</code>) or stroke color (<code>false</code>)</param>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.SetColor(iText.Kernel.Pdf.Colorspace.PdfColorSpace,System.Single[],iText.Kernel.Pdf.Colorspace.PdfPattern,System.Boolean)">
            <summary>Changes the current color for paths with an explicitly defined pattern.</summary>
            <param name="colorSpace">the color space of the new color</param>
            <param name="colorValue">a list of numerical values with a length corresponding to the specs of the color space. Values should be in the range [0,1]
                </param>
            <param name="pattern">a pattern for the colored line or area</param>
            <param name="fill">set fill color (<code>true</code>) or stroke color (<code>false</code>)</param>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.SetFillColorGray(System.Single)">
            <summary>Changes the current color for filling paths to a grayscale value.</summary>
            <param name="g">a grayscale value in the range [0,1]</param>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.SetStrokeColorGray(System.Single)">
            <summary>Changes the current color for stroking paths to a grayscale value.</summary>
            <param name="g">a grayscale value in the range [0,1]</param>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.ResetFillColorGray">
            <summary>Changes the current color for filling paths to black.</summary>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.ResetStrokeColorGray">
            <summary>Changes the current color for stroking paths to black.</summary>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.SetFillColorRgb(System.Single,System.Single,System.Single)">
            <summary>Changes the current color for filling paths to an RGB value.</summary>
            <param name="r">a red value in the range [0,1]</param>
            <param name="g">a green value in the range [0,1]</param>
            <param name="b">a blue value in the range [0,1]</param>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.SetStrokeColorRgb(System.Single,System.Single,System.Single)">
            <summary>Changes the current color for stroking paths to an RGB value.</summary>
            <param name="r">a red value in the range [0,1]</param>
            <param name="g">a green value in the range [0,1]</param>
            <param name="b">a blue value in the range [0,1]</param>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.SetFillColorShading(iText.Kernel.Pdf.Colorspace.PdfPattern.Shading)">
            <summary>Adds or changes the shading of the current fill color path.</summary>
            <param name="shading">the shading</param>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.SetStrokeColorShading(iText.Kernel.Pdf.Colorspace.PdfPattern.Shading)">
            <summary>Adds or changes the shading of the current stroke color path.</summary>
            <param name="shading">the shading</param>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.ResetFillColorRgb">
            <summary>Changes the current color for filling paths to black.</summary>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.ResetStrokeColorRgb">
            <summary>Changes the current color for stroking paths to black.</summary>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.SetFillColorCmyk(System.Single,System.Single,System.Single,System.Single)">
            <summary>Changes the current color for filling paths to a CMYK value.</summary>
            <param name="c">a cyan value in the range [0,1]</param>
            <param name="m">a magenta value in the range [0,1]</param>
            <param name="y">a yellow value in the range [0,1]</param>
            <param name="k">a key (black) value in the range [0,1]</param>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.SetStrokeColorCmyk(System.Single,System.Single,System.Single,System.Single)">
            <summary>Changes the current color for stroking paths to a CMYK value.</summary>
            <param name="c">a cyan value in the range [0,1]</param>
            <param name="m">a magenta value in the range [0,1]</param>
            <param name="y">a yellow value in the range [0,1]</param>
            <param name="k">a key (black) value in the range [0,1]</param>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.ResetFillColorCmyk">
            <summary>Changes the current color for filling paths to black.</summary>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.ResetStrokeColorCmyk">
            <summary>Changes the current color for stroking paths to black.</summary>
            <returns>current canvas.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.Pdf.Canvas.PdfCanvas.BeginLayer(iText.Kernel.Pdf.Layer.IPdfOCG)" -->
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.EndLayer">
            <summary>Ends OCG layer.</summary>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.AddImage(iText.IO.Image.ImageData,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>Creates Image XObject from image and adds it to canvas (as Image XObject).</summary>
            <param name="image">
            the
            <c>PdfImageXObject</c>
            object
            </param>
            <param name="a">an element of the transformation matrix</param>
            <param name="b">an element of the transformation matrix</param>
            <param name="c">an element of the transformation matrix</param>
            <param name="d">an element of the transformation matrix</param>
            <param name="e">an element of the transformation matrix</param>
            <param name="f">an element of the transformation matrix</param>
            <returns>created Image XObject.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.AddImage(iText.IO.Image.ImageData,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>Creates Image XObject from image and adds it to canvas.</summary>
            <param name="image">
            the
            <c>PdfImageXObject</c>
            object
            </param>
            <param name="a">an element of the transformation matrix</param>
            <param name="b">an element of the transformation matrix</param>
            <param name="c">an element of the transformation matrix</param>
            <param name="d">an element of the transformation matrix</param>
            <param name="e">an element of the transformation matrix</param>
            <param name="f">an element of the transformation matrix</param>
            <param name="asInline">true if to add image as in-line.</param>
            <returns>created Image XObject or null in case of in-line image (asInline = true).</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.AddImage(iText.IO.Image.ImageData,iText.Kernel.Geom.Rectangle,System.Boolean)">
            <summary>Creates Image XObject from image and adds it to canvas.</summary>
            <param name="image"/>
            <param name="rect"/>
            <param name="asInline">true if to add image as in-line.</param>
            <returns>created XObject or null in case of in-line image (asInline = true).</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.AddImage(iText.IO.Image.ImageData,System.Single,System.Single,System.Boolean)">
            <summary>Creates Image XObject from image and adds it to canvas.</summary>
            <param name="image"/>
            <param name="x"/>
            <param name="y"/>
            <param name="asInline">true if to add image as in-line.</param>
            <returns>created XObject or null in case of in-line image (asInline = true).</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.AddImage(iText.IO.Image.ImageData,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>Creates Image XObject from image and adds it to the specified position with specified width preserving aspect ratio.
                </summary>
            <param name="image"/>
            <param name="x"/>
            <param name="y"/>
            <param name="width"/>
            <param name="asInline">true if to add image as in-line.</param>
            <returns>created XObject or null in case of in-line image (asInline = true).</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.AddImage(iText.IO.Image.ImageData,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>Creates Image XObject from image and adds it to the specified position with specified width preserving aspect ratio.
                </summary>
            <param name="image"/>
            <param name="x"/>
            <param name="y"/>
            <param name="height"/>
            <param name="asInline">true if to add image as in-line.</param>
            <param name="dummy"/>
            <returns>created XObject or null in case of in-line image (asInline = true).</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.AddXObject(iText.Kernel.Pdf.Xobject.PdfXObject,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Adds
            <c>PdfXObject</c>
            to canvas.
            </summary>
            <param name="xObject">
            the
            <c>PdfImageXObject</c>
            object
            </param>
            <param name="a">an element of the transformation matrix</param>
            <param name="b">an element of the transformation matrix</param>
            <param name="c">an element of the transformation matrix</param>
            <param name="d">an element of the transformation matrix</param>
            <param name="e">an element of the transformation matrix</param>
            <param name="f">an element of the transformation matrix</param>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.AddXObject(iText.Kernel.Pdf.Xobject.PdfXObject,System.Single,System.Single)">
            <summary>
            Adds
            <c>PdfXObject</c>
            to the specified position.
            </summary>
            <param name="xObject"/>
            <param name="x"/>
            <param name="y"/>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.AddXObject(iText.Kernel.Pdf.Xobject.PdfXObject,iText.Kernel.Geom.Rectangle)">
            <summary>
            Adds
            <c>PdfXObject</c>
            to specified rectangle on canvas.
            Do note that using this method of adding an XObject <b>will scale</b> the XObject using the width and the height
            of the provided Rectangle. If you don't wish to scale the XObject, use
            <see cref="M:iText.Kernel.Pdf.Canvas.PdfCanvas.AddXObject(iText.Kernel.Pdf.Xobject.PdfXObject,System.Single,System.Single)"/>
            ,
            <see cref="M:iText.Kernel.Pdf.Canvas.PdfCanvas.AddXObject(iText.Kernel.Pdf.Xobject.PdfXObject,System.Single,System.Single,System.Single)"/>
            ,
            <see cref="M:iText.Kernel.Pdf.Canvas.PdfCanvas.AddXObject(iText.Kernel.Pdf.Xobject.PdfXObject,System.Single,System.Single,System.Single,System.Boolean)"/>
            ,
            or
            <see cref="M:iText.Kernel.Pdf.Canvas.PdfCanvas.AddXObject(iText.Kernel.Pdf.Xobject.PdfXObject,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)"/>
            .
            </summary>
            <param name="xObject">the XObject to add</param>
            <param name="rect">rectangle containing x and y coordinates and scaling information</param>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.AddXObject(iText.Kernel.Pdf.Xobject.PdfXObject,System.Single,System.Single,System.Single)">
            <summary>
            Adds
            <c>PdfXObject</c>
            to the specified position with specified width preserving aspect ratio.
            </summary>
            <param name="xObject"/>
            <param name="x"/>
            <param name="y"/>
            <param name="width"/>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.AddXObject(iText.Kernel.Pdf.Xobject.PdfXObject,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Adds
            <c>PdfXObject</c>
            to the specified position with specified height preserving aspect ratio.
            </summary>
            <param name="xObject"/>
            <param name="x"/>
            <param name="y"/>
            <param name="height"/>
            <param name="dummy"/>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.SetExtGState(iText.Kernel.Pdf.Extgstate.PdfExtGState)">
            <summary>Sets the ExtGState dictionary for the current graphics state</summary>
            <param name="extGState">a dictionary that maps resource names to graphics state parameter dictionaries</param>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.SetExtGState(iText.Kernel.Pdf.PdfDictionary)">
            <summary>Sets the ExtGState dictionary for the current graphics state</summary>
            <param name="extGState">a dictionary that maps resource names to graphics state parameter dictionaries</param>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.BeginMarkedContent(iText.Kernel.Pdf.PdfName)">
            <summary>Manually start a Marked Content sequence.</summary>
            <remarks>Manually start a Marked Content sequence. Used primarily for Tagged PDF</remarks>
            <param name="tag">the type of content contained</param>
            <returns>current canvas</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.BeginMarkedContent(iText.Kernel.Pdf.PdfName,iText.Kernel.Pdf.PdfDictionary)">
            <summary>Manually start a Marked Content sequence with properties.</summary>
            <remarks>Manually start a Marked Content sequence with properties. Used primarily for Tagged PDF</remarks>
            <param name="tag">the type of content that will be contained</param>
            <param name="properties">the properties of the content, including Marked Content ID. If null, the PDF marker is BMC, else it is BDC
                </param>
            <returns>current canvas</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.EndMarkedContent">
            <summary>Manually end a Marked Content sequence.</summary>
            <remarks>Manually end a Marked Content sequence. Used primarily for Tagged PDF</remarks>
            <returns>current canvas</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.OpenTag(iText.Kernel.Pdf.Canvas.CanvasTag)">
            <summary>Manually open a canvas tag, beginning a Marked Content sequence.</summary>
            <remarks>Manually open a canvas tag, beginning a Marked Content sequence. Used primarily for Tagged PDF</remarks>
            <param name="tag">the type of content that will be contained</param>
            <returns>current canvas</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.OpenTag(iText.Kernel.Pdf.Tagutils.TagReference)">
            <summary>Open a tag, beginning a Marked Content sequence.</summary>
            <remarks>
            Open a tag, beginning a Marked Content sequence. This MC sequence will belong to the tag from the document
            logical structure.
            <br />
            CanvasTag will be automatically created with assigned mcid(Marked Content id) to it. Mcid serves as a reference
            between Marked Content sequence and logical structure element.
            </remarks>
            <param name="tagReference">reference to the tag from the document logical structure</param>
            <returns>current canvas</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.CloseTag">
            <summary>Manually close a tag, ending a Marked Content sequence.</summary>
            <remarks>Manually close a tag, ending a Marked Content sequence. Used primarily for Tagged PDF</remarks>
            <returns>current canvas</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.WriteLiteral(System.String)">
            <summary>
            Outputs a
            <c>String</c>
            directly to the content.
            </summary>
            <param name="s">
            the
            <c>String</c>
            </param>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.WriteLiteral(System.Char)">
            <summary>
            Outputs a
            <c>char</c>
            directly to the content.
            </summary>
            <param name="c">
            the
            <c>char</c>
            </param>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.WriteLiteral(System.Single)">
            <summary>
            Outputs a
            <c>float</c>
            directly to the content.
            </summary>
            <param name="n">
            the
            <c>float</c>
            </param>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.GetContentStream">
            <summary>Please, use this method with caution and only if you know what you are doing.</summary>
            <remarks>
            Please, use this method with caution and only if you know what you are doing.
            Manipulating with underlying stream object of canvas could lead to corruption of it's data.
            </remarks>
            <returns>the content stream to which this canvas object writes.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.AddInlineImage(iText.Kernel.Pdf.Xobject.PdfImageXObject,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Adds
            <c>PdfImageXObject</c>
            to canvas.
            </summary>
            <param name="imageXObject">
            the
            <c>PdfImageXObject</c>
            object
            </param>
            <param name="a">an element of the transformation matrix</param>
            <param name="b">an element of the transformation matrix</param>
            <param name="c">an element of the transformation matrix</param>
            <param name="d">an element of the transformation matrix</param>
            <param name="e">an element of the transformation matrix</param>
            <param name="f">an element of the transformation matrix</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.AddForm(iText.Kernel.Pdf.Xobject.PdfFormXObject,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Adds
            <c>PdfFormXObject</c>
            to canvas.
            </summary>
            <param name="form">
            the
            <c>PdfImageXObject</c>
            object
            </param>
            <param name="a">an element of the transformation matrix</param>
            <param name="b">an element of the transformation matrix</param>
            <param name="c">an element of the transformation matrix</param>
            <param name="d">an element of the transformation matrix</param>
            <param name="e">an element of the transformation matrix</param>
            <param name="f">an element of the transformation matrix</param>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.AddForm(iText.Kernel.Pdf.Xobject.PdfFormXObject,System.Single,System.Single)">
            <summary>
            Adds
            <c>PdfFormXObject</c>
            to the specified position.
            </summary>
            <param name="form"/>
            <param name="x"/>
            <param name="y"/>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.AddForm(iText.Kernel.Pdf.Xobject.PdfFormXObject,iText.Kernel.Geom.Rectangle)">
            <summary>
            Adds
            <c>PdfFormXObject</c>
            to specified rectangle on canvas and scale it using the rectangle's width and height.
            </summary>
            <param name="form">PdfFormXObject to add</param>
            <param name="rect">rectangle containing x and y coordinates and scaling information</param>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.AddForm(iText.Kernel.Pdf.Xobject.PdfFormXObject,System.Single,System.Single,System.Single)">
            <summary>
            Adds I
            <c>PdfFormXObject</c>
            to the specified position with specified width preserving aspect ratio.
            </summary>
            <param name="form"/>
            <param name="x"/>
            <param name="y"/>
            <param name="width"/>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.AddForm(iText.Kernel.Pdf.Xobject.PdfFormXObject,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Adds
            <c>PdfFormXObject</c>
            to the specified position with specified height preserving aspect ratio.
            </summary>
            <param name="form"/>
            <param name="x"/>
            <param name="y"/>
            <param name="height"/>
            <param name="dummy"/>
            <returns>current canvas</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.AddImage(iText.Kernel.Pdf.Xobject.PdfImageXObject,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Adds
            <c>PdfImageXObject</c>
            to canvas.
            </summary>
            <param name="image">
            the
            <c>PdfImageXObject</c>
            object
            </param>
            <param name="a">an element of the transformation matrix</param>
            <param name="b">an element of the transformation matrix</param>
            <param name="c">an element of the transformation matrix</param>
            <param name="d">an element of the transformation matrix</param>
            <param name="e">an element of the transformation matrix</param>
            <param name="f">an element of the transformation matrix</param>
            <returns>canvas a reference to this object.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.AddImage(iText.Kernel.Pdf.Xobject.PdfImageXObject,System.Single,System.Single)">
            <summary>
            Adds
            <c>PdfImageXObject</c>
            to the specified position.
            </summary>
            <param name="image"/>
            <param name="x"/>
            <param name="y"/>
            <returns>current canvas</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.AddImage(iText.Kernel.Pdf.Xobject.PdfImageXObject,iText.Kernel.Geom.Rectangle)">
            <summary>
            Adds
            <c>PdfImageXObject</c>
            to specified rectangle on canvas and scale it using the rectangle's width and height.
            </summary>
            <param name="image">PdfImageXObject to add</param>
            <param name="rect">rectangle containing x and y coordinates and scaling information</param>
            <returns>current canvas</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.AddImage(iText.Kernel.Pdf.Xobject.PdfImageXObject,System.Single,System.Single,System.Single)">
            <summary>
            Adds
            <c>PdfImageXObject</c>
            to the specified position with specified width preserving aspect ratio.
            </summary>
            <param name="image"/>
            <param name="x"/>
            <param name="y"/>
            <param name="width"/>
            <returns>current canvas</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.AddImage(iText.Kernel.Pdf.Xobject.PdfImageXObject,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Adds
            <c>PdfImageXObject</c>
            to the specified position with specified height preserving aspect ratio.
            </summary>
            <param name="image"/>
            <param name="x"/>
            <param name="y"/>
            <param name="height"/>
            <param name="dummy"/>
            <returns>current canvas.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfCanvas.ShowTextInt(System.String)">
            <summary>
            A helper to insert into the content stream the
            <paramref name="text"/>
            converted to bytes according to the font's encoding.
            </summary>
            <param name="text">the text to write.</param>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.PdfCanvasConstants">
            <summary>A container for constants defined in the PDF specification (ISO 32000-1).</summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.PdfCanvasConstants.TextRenderingMode">
            <summary>
            The text rendering mode determines whether showing text causes glyph
            outlines to be stroked, filled, used as a clipping boundary, or some
            combination of the three.
            </summary>
            <remarks>
            The text rendering mode determines whether showing text causes glyph
            outlines to be stroked, filled, used as a clipping boundary, or some
            combination of the three. Stroking, filling, and clipping have the same
            effects for a text object as they do for a path object, although they are
            specified in an entirely different way.
            If the text rendering mode calls for filling, the current nonstroking
            color in the graphics state is used; if it calls for stroking, the
            current stroking color is used.
            All documentation for this class is taken from ISO 32000-1, section 9.3.6
            "Text Rendering Mode".
            </remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.PdfCanvasConstants.TextRenderingMode.FILL">
            <summary>Fill text</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.PdfCanvasConstants.TextRenderingMode.STROKE">
            <summary>Stroke text, providing the outline of the glyphs</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.PdfCanvasConstants.TextRenderingMode.FILL_STROKE">
            <summary>Fill and stroke text</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.PdfCanvasConstants.TextRenderingMode.INVISIBLE">
            <summary>Neither fill nor stroke, i.e.</summary>
            <remarks>Neither fill nor stroke, i.e. render invisibly</remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.PdfCanvasConstants.TextRenderingMode.FILL_CLIP">
            <summary>Fill text and add to path for clipping</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.PdfCanvasConstants.TextRenderingMode.STROKE_CLIP">
            <summary>Stroke text and add to path for clipping</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.PdfCanvasConstants.TextRenderingMode.FILL_STROKE_CLIP">
            <summary>Fill, then stroke text and add to path for clipping</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.PdfCanvasConstants.TextRenderingMode.CLIP">
            <summary>Add text to path for clipping</summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.PdfCanvasConstants.LineCapStyle">
            <summary>
            The line cap style specifies the shape to be used at the ends of open
            subpaths (and dashes, if any) when they are stroked.
            </summary>
            <remarks>
            The line cap style specifies the shape to be used at the ends of open
            subpaths (and dashes, if any) when they are stroked.
            All documentation for this class is taken from ISO 32000-1, section
            8.4.3.3 "Line Cap Style".
            </remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.PdfCanvasConstants.LineCapStyle.BUTT">
            <summary>The stroke is squared of at the endpoint of the path.</summary>
            <remarks>
            The stroke is squared of at the endpoint of the path. There is no
            projection beyond the end of the path.
            </remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.PdfCanvasConstants.LineCapStyle.ROUND">
            <summary>
            A semicircular arc with a diameter equal to the line width is drawn
            around the endpoint and filled in.
            </summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.PdfCanvasConstants.LineCapStyle.PROJECTING_SQUARE">
            <summary>
            The stroke continues beyond the endpoint of the path for a distance
            equal to half the line width and is squared off.
            </summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.PdfCanvasConstants.LineJoinStyle">
            <summary>
            The line join style specifies the shape to be used at the corners of
            paths that are stroked.
            </summary>
            <remarks>
            The line join style specifies the shape to be used at the corners of
            paths that are stroked. Join styles are significant only at points where
            consecutive segments of a path connect at an angle; segments that meet or
            intersect fortuitously receive no special treatment.
            All documentation for this class is taken from ISO 32000-1, section
            8.4.3.4 "Line Join Style".
            </remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.PdfCanvasConstants.LineJoinStyle.MITER">
            <summary>
            The outer edges of the strokes for the two segments are extended
            until they meet at an angle, as in a picture frame.
            </summary>
            <remarks>
            The outer edges of the strokes for the two segments are extended
            until they meet at an angle, as in a picture frame. If the segments
            meet at too sharp an angle, a bevel join is used instead.
            </remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.PdfCanvasConstants.LineJoinStyle.ROUND">
            <summary>
            An arc of a circle with a diameter equal to the line width is drawn
            around the point where the two segments meet, connecting the outer
            edges of the strokes for the two segments.
            </summary>
            <remarks>
            An arc of a circle with a diameter equal to the line width is drawn
            around the point where the two segments meet, connecting the outer
            edges of the strokes for the two segments. This pieslice-shaped
            figure is filled in, producing a rounded corner.
            </remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.PdfCanvasConstants.LineJoinStyle.BEVEL">
            <summary>
            The two segments are finished with butt caps (@see LineCapStyle#BUTT)
            and the resulting notch beyond the ends of the segments is filled
            with a triangle.
            </summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.PdfPatternCanvas">
            <summary>A PdfCanvas instance with an inherent tiling pattern.</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfPatternCanvas.#ctor(iText.Kernel.Pdf.PdfStream,iText.Kernel.Pdf.PdfResources,iText.Kernel.Pdf.PdfDocument)">
            <summary>Creates PdfPatternCanvas from content stream of page, form XObject, pattern etc.</summary>
            <param name="contentStream">The content stream</param>
            <param name="resources">The resources, a specialized dictionary that can be used by PDF instructions in the content stream
                </param>
            <param name="document">The document that the resulting content stream will be written to</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.PdfPatternCanvas.#ctor(iText.Kernel.Pdf.Colorspace.PdfPattern.Tiling,iText.Kernel.Pdf.PdfDocument)">
            <summary>Creates PdfPatternCanvas for a document from a provided Tiling pattern</summary>
            <param name="pattern">The Tiling pattern must be colored</param>
            <param name="document">The document that the resulting content stream will be written to</param>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Wmf.InputMeta">
            <summary>Helper class to read nt, short, words, etc.</summary>
            <remarks>Helper class to read nt, short, words, etc. from an InputStream.</remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.InputMeta.#ctor(System.IO.Stream)">
            <summary>Creates an InputMeta object.</summary>
            <param name="in">InputStream containing the WMF data</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.InputMeta.ReadWord">
            <summary>Read the next word from the InputStream.</summary>
            <returns>the next word or 0 if the end of the stream has been reached</returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.InputMeta.ReadShort">
            <summary>Read the next short from the InputStream.</summary>
            <returns>the next short value</returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.InputMeta.ReadInt">
            <summary>Read the next int from the InputStream.</summary>
            <returns>the next int</returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.InputMeta.ReadByte">
            <summary>Read the next byte from the InputStream.</summary>
            <returns>the next byte</returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.InputMeta.Skip(System.Int32)">
            <summary>Skips "len" amount of bytes from the InputStream.</summary>
            <remarks>Skips "len" amount of bytes from the InputStream. If len is &lt; 0, nothing is skipped.</remarks>
            <param name="len">amount of bytes needed to skip</param>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.InputMeta.GetLength">
            <summary>Get the amount of bytes read and/or skipped from the InputStream.</summary>
            <returns>number of bytes read</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.InputMeta.ReadColor">
            <summary>
            Read the next
            <see cref="T:iText.Kernel.Colors.Color"/>
            from the InputStream. This reads 4 bytes.
            </summary>
            <returns>the next Color</returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Wmf.MetaBrush">
            <summary>
            A Brush bject that holds information about the style, the hatch and the color of
            the brush.
            </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.MetaBrush.#ctor">
            <summary>Creates a MetaBrush object.</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.MetaBrush.Init(iText.Kernel.Pdf.Canvas.Wmf.InputMeta)">
            <summary>Initializes this MetaBrush object.</summary>
            <param name="in">the InputMeta</param>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.MetaBrush.GetStyle">
            <summary>Get the style of the MetaBrush.</summary>
            <returns>style of the brush</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.MetaBrush.GetHatch">
            <summary>Get the hatch pattern of the MetaBrush</summary>
            <returns>hatch of the brush</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.MetaBrush.GetColor">
            <summary>Get the color of the MetaBrush.</summary>
            <returns>color of the brush</returns>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Wmf.MetaDo">
            <summary>A class to process WMF files.</summary>
            <remarks>
            A class to process WMF files. Used internally by
            <see cref="T:iText.Kernel.Pdf.Canvas.Wmf.WmfImageHelper"/>
            .
            </remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.Wmf.MetaDo.cb">
            <summary>PdfCanvas of the MetaDo object.</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.Wmf.MetaDo.in">
            <summary>The InputMeta instance containing the data.</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.MetaDo.#ctor(System.IO.Stream,iText.Kernel.Pdf.Canvas.PdfCanvas)">
            <summary>Creates a MetaDo instance.</summary>
            <param name="in">inputstream containing the data</param>
            <param name="cb">PdfCanvas</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.MetaDo.ReadAll">
            <summary>Reads and processes all the data of the InputMeta.</summary>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.MetaDo.OutputText(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>Output Text at a certain x and y coordinate.</summary>
            <remarks>Output Text at a certain x and y coordinate. Clipped or opaque text isn't supported as of yet.</remarks>
            <param name="x">x-coordinate</param>
            <param name="y">y-coordinate</param>
            <param name="flag">flag indicating clipped or opaque</param>
            <param name="x1">x1-coordinate of the rectangle if clipped or opaque</param>
            <param name="y1">y1-coordinate of the rectangle if clipped or opaque</param>
            <param name="x2">x2-coordinate of the rectangle if clipped or opaque</param>
            <param name="y2">y1-coordinate of the rectangle if clipped or opaque</param>
            <param name="text">text to output</param>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.MetaDo.IsNullStrokeFill(System.Boolean)">
            <summary>Return true if the pen style is null and if it isn't a brush.</summary>
            <param name="isRectangle">
            value to decide how to change the state. If true state.setLineJoinRectangle(cb) is called,
            if false state.setLineJoinPolygon(cb) is called.
            </param>
            <returns>true if the pen style is null and if it isn't a brush</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.MetaDo.StrokeAndFill">
            <summary>Stroke and fill the MetaPen and MetaBrush paths.</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.MetaDo.WrapBMP(iText.IO.Image.ImageData)">
            <summary>Wrap a BMP image in an WMF.</summary>
            <param name="image">the BMP image to be wrapped</param>
            <returns>the wrapped BMP</returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.MetaDo.WriteWord(System.IO.Stream,System.Int32)">
            <summary>Writes the specified value to the specified outputstream as a word.</summary>
            <param name="os">outputstream to write the word to</param>
            <param name="v">value to be written</param>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.MetaDo.WriteDWord(System.IO.Stream,System.Int32)">
            <summary>Writes the specified value to the specified outputstream as a dword.</summary>
            <param name="os">outputstream to write the dword to</param>
            <param name="v">value to be written</param>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Wmf.MetaFont">
            <summary>A Meta Font.</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.MetaFont.#ctor">
            <summary>Creates a MetaFont instance.</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.MetaFont.Init(iText.Kernel.Pdf.Canvas.Wmf.InputMeta)">
            <summary>Initializes the MetaFont instance.</summary>
            <param name="in">InputMeta containing the WMF data</param>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.MetaFont.GetFont">
            <summary>Returns the Font.</summary>
            <returns>the font</returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.MetaFont.GetEncoding">
            <summary>Returns the encoding used in the MetaFont.</summary>
            <returns>the font encoding</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.MetaFont.GetAngle">
            <summary>Returns the angle of the MetaFont.</summary>
            <returns>the angle</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.MetaFont.IsUnderline">
            <summary>Returns a boolean value indicating if the font is underlined or not.</summary>
            <returns>true if the font is underlined</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.MetaFont.IsStrikeout">
            <summary>Returns a boolean value indicating if a font has a strikeout.</summary>
            <returns>true if the font set strikeout</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.MetaFont.GetFontSize(iText.Kernel.Pdf.Canvas.Wmf.MetaState)">
            <summary>Returns the font size.</summary>
            <param name="state">the MetaState</param>
            <returns>font size</returns>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Wmf.MetaObject">
            <summary>A meta object.</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.MetaObject.#ctor">
            <summary>Creates a new MetaObject.</summary>
            <remarks>Creates a new MetaObject. This constructor doesn't set the type.</remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.MetaObject.#ctor(System.Int32)">
            <summary>Creates a MetaObject with a type.</summary>
            <param name="type">the type of meta object</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.MetaObject.GetObjectType">
            <summary>Get the type of this MetaObject.</summary>
            <returns>type of MetaObject</returns>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Wmf.MetaPen">
            <summary>A Pen object of the WMF format.</summary>
            <remarks>A Pen object of the WMF format. Holds the color, style and width information of the pen.</remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.MetaPen.#ctor">
            <summary>Creates a MetaPen object.</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.MetaPen.Init(iText.Kernel.Pdf.Canvas.Wmf.InputMeta)">
            <summary>Initializes a MetaPen object.</summary>
            <param name="in">the InputMeta object that holds the inputstream of the WMF image</param>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.MetaPen.GetStyle">
            <summary>Get the style of the MetaPen.</summary>
            <returns>style of the pen</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.MetaPen.GetPenWidth">
            <summary>Get the width of the MetaPen.</summary>
            <returns>width of the pen</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.MetaPen.GetColor">
            <summary>Get the color of the MetaPen.</summary>
            <returns>color of the pen</returns>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Wmf.MetaState">
            <summary>Class to keep the state.</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.Wmf.MetaState.savedStates">
            <summary>Stack of saved states.</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.Wmf.MetaState.MetaObjects">
            <summary>List of MetaObjects.</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.Wmf.MetaState.currentPoint">
            <summary>Current Point.</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.Wmf.MetaState.currentPen">
            <summary>Current Pen.</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.Wmf.MetaState.currentBrush">
            <summary>Current Brush.</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.Wmf.MetaState.currentFont">
            <summary>Current Font.</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.Wmf.MetaState.currentBackgroundColor">
            <summary>The current background color.</summary>
            <remarks>The current background color. Default value is DeviceRgb#WHITE.</remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.Wmf.MetaState.currentTextColor">
            <summary>Current text color.</summary>
            <remarks>Current text color. Default value is DeviceRgb#BLACK.</remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.Wmf.MetaState.backgroundMode">
            <summary>The current background mode.</summary>
            <remarks>The current background mode. Default value is OPAQUE.</remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.Wmf.MetaState.polyFillMode">
            <summary>Current polygon fill mode.</summary>
            <remarks>Current polygon fill mode. Default value is ALTERNATE.</remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.Wmf.MetaState.lineJoin">
            <summary>Curent line join.</summary>
            <remarks>Curent line join. Default value is 1.</remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.Wmf.MetaState.textAlign">
            <summary>Current text alignment.</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.Wmf.MetaState.offsetWx">
            <summary>Current offset for Wx.</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.Wmf.MetaState.offsetWy">
            <summary>Current offset for Wy.</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.Wmf.MetaState.extentWx">
            <summary>Current extent for Wx.</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.Wmf.MetaState.extentWy">
            <summary>Current extent for Wy.</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.Wmf.MetaState.scalingX">
            <summary>Current x value for scaling.</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.Wmf.MetaState.scalingY">
            <summary>Current y value for scaling.</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.MetaState.#ctor">
            <summary>Creates new MetaState</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.MetaState.#ctor(iText.Kernel.Pdf.Canvas.Wmf.MetaState)">
            <summary>Clones a new MetaState from the specified MetaState.</summary>
            <param name="state">the state to clone</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.MetaState.SetMetaState(iText.Kernel.Pdf.Canvas.Wmf.MetaState)">
            <summary>Sets every field of this MetaState to the values of the fields of the specified MetaState.</summary>
            <param name="state">state to copy</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.MetaState.AddMetaObject(iText.Kernel.Pdf.Canvas.Wmf.MetaObject)">
            <summary>Add a MetaObject to the State.</summary>
            <param name="object">MetaObject to be added</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.MetaState.SelectMetaObject(System.Int32,iText.Kernel.Pdf.Canvas.PdfCanvas)">
            <summary>Select the MetaObject at the specified index and prepare the PdfCanvas.</summary>
            <param name="index">position of the MetaObject</param>
            <param name="cb">PdfCanvas to prepare</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.MetaState.DeleteMetaObject(System.Int32)">
            <summary>Deletes the MetaObject at the specified index.</summary>
            <param name="index">index of the MetaObject to delete</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.MetaState.SaveState(iText.Kernel.Pdf.Canvas.PdfCanvas)">
            <summary>Saves the state of this MetaState object.</summary>
            <param name="cb">PdfCanvas object on which saveState() will be called</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.MetaState.RestoreState(System.Int32,iText.Kernel.Pdf.Canvas.PdfCanvas)">
            <summary>Restores the state to the next state on the saved states stack.</summary>
            <param name="index">index of the state to be restored</param>
            <param name="cb">PdfCanvas object on which restoreState() will be called</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.MetaState.Cleanup(iText.Kernel.Pdf.Canvas.PdfCanvas)">
            <summary>Restres the state of the specified PdfCanvas object for as many times as there are saved states on the stack.
                </summary>
            <param name="cb">PdfCanvas object</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.MetaState.TransformX(System.Int32)">
            <summary>Transform the specified value.</summary>
            <param name="x">the value to transform</param>
            <returns>the transformed value</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.MetaState.TransformY(System.Int32)">
            <summary>Transform the specified value.</summary>
            <param name="y">the value to transform</param>
            <returns>transformed value</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.MetaState.SetScalingX(System.Single)">
            <summary>Sets the x value for scaling.</summary>
            <param name="scalingX">x value for scaling</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.MetaState.SetScalingY(System.Single)">
            <summary>Sets the y value for scaling.</summary>
            <param name="scalingY">y value for scaling</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.MetaState.SetOffsetWx(System.Int32)">
            <summary>Sets the Wx offset value.</summary>
            <param name="offsetWx">Wx offset value</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.MetaState.SetOffsetWy(System.Int32)">
            <summary>Sets the Wy offset value.</summary>
            <param name="offsetWy">Wy offset value</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.MetaState.SetExtentWx(System.Int32)">
            <summary>Sets the Wx extent value.</summary>
            <param name="extentWx">Wx extent value</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.MetaState.SetExtentWy(System.Int32)">
            <summary>Sets the Wy extent value.</summary>
            <param name="extentWy">Wy extent value</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.MetaState.TransformAngle(System.Single)">
            <summary>Transforms the specified angle.</summary>
            <remarks>
            Transforms the specified angle. If scalingY is less than 0, the angle is multiplied by -1. If scalingX is less
            than 0, the angle is subtracted from Math.PI.
            </remarks>
            <param name="angle">the angle to transform</param>
            <returns>the transformed angle</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.MetaState.SetCurrentPoint(iText.Kernel.Geom.Point)">
            <summary>Sets the current Point to the specified Point.</summary>
            <param name="p">Point to set</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.MetaState.GetCurrentPoint">
            <summary>Returns the current Point.</summary>
            <returns>current Point</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.MetaState.GetCurrentBrush">
            <summary>Returns the current MetaBrush object.</summary>
            <returns>current MetaBrush</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.MetaState.GetCurrentPen">
            <summary>Returns the current MetaPen object.</summary>
            <returns>current MetaPen</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.MetaState.GetCurrentFont">
            <summary>Returns the current MetaFont object.</summary>
            <returns>current MetaFont</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.MetaState.GetCurrentBackgroundColor">
            <summary>Getter for property currentBackgroundColor.</summary>
            <returns>Value of property currentBackgroundColor.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.MetaState.SetCurrentBackgroundColor(iText.Kernel.Colors.Color)">
            <summary>Setter for property currentBackgroundColor.</summary>
            <param name="currentBackgroundColor">New value of property currentBackgroundColor.</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.MetaState.GetCurrentTextColor">
            <summary>Getter for property currentTextColor.</summary>
            <returns>Value of property currentTextColor.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.MetaState.SetCurrentTextColor(iText.Kernel.Colors.Color)">
            <summary>Setter for property currentTextColor.</summary>
            <param name="currentTextColor">New value of property currentTextColor.</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.MetaState.GetBackgroundMode">
            <summary>Getter for property backgroundMode.</summary>
            <returns>Value of property backgroundMode.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.MetaState.SetBackgroundMode(System.Int32)">
            <summary>Setter for property backgroundMode.</summary>
            <param name="backgroundMode">New value of property backgroundMode.</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.MetaState.GetTextAlign">
            <summary>Getter for property textAlign.</summary>
            <returns>Value of property textAlign.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.MetaState.SetTextAlign(System.Int32)">
            <summary>Setter for property textAlign.</summary>
            <param name="textAlign">New value of property textAlign.</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.MetaState.GetPolyFillMode">
            <summary>Getter for property polyFillMode.</summary>
            <returns>Value of property polyFillMode.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.MetaState.SetPolyFillMode(System.Int32)">
            <summary>Setter for property polyFillMode.</summary>
            <param name="polyFillMode">New value of property polyFillMode.</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.MetaState.SetLineJoinRectangle(iText.Kernel.Pdf.Canvas.PdfCanvas)">
            <summary>
            Sets the line join style to
            <see cref="F:iText.Kernel.Pdf.Canvas.PdfCanvasConstants.LineJoinStyle.MITER"/>
            if lineJoin isn't 0.
            </summary>
            <param name="cb">PdfCanvas to set the line join style</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.MetaState.SetLineJoinPolygon(iText.Kernel.Pdf.Canvas.PdfCanvas)">
            <summary>
            Sets the line join style to
            <see cref="F:iText.Kernel.Pdf.Canvas.PdfCanvasConstants.LineJoinStyle.ROUND"/>
            if lineJoin is 0.
            </summary>
            <param name="cb">PdfCanvas to set the line join style</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.MetaState.GetLineNeutral">
            <summary>Returns true if lineJoin is 0.</summary>
            <returns>true if lineJoin is 0</returns>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Wmf.WmfImageData">
            <summary>Image implementation for WMF, Windows Metafile.</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.WmfImageData.#ctor(System.String)">
            <summary>Creates a WmfImage from a file.</summary>
            <param name="fileName">pah to the file</param>
            <exception cref="T:System.UriFormatException"/>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.WmfImageData.#ctor(System.Uri)">
            <summary>Creates a WmfImage from a URL.</summary>
            <param name="url">URL to the file</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.WmfImageData.#ctor(System.Byte[])">
            <summary>Creates a WmfImage from a byte[].</summary>
            <param name="bytes">the image bytes</param>
        </member>
        <member name="T:iText.Kernel.Pdf.Canvas.Wmf.WmfImageHelper">
            <summary>Helper class for the WmfImage implementation.</summary>
            <remarks>
            Helper class for the WmfImage implementation. Assists in the creation of a
            <see cref="T:iText.Kernel.Pdf.Xobject.PdfFormXObject"/>
            .
            </remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.Canvas.Wmf.WmfImageHelper.wmfFontCorrection">
            <summary>Scales the WMF font size.</summary>
            <remarks>Scales the WMF font size. The default value is 0.86.</remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.WmfImageHelper.#ctor(iText.IO.Image.ImageData)">
            <summary>Creates a helper instance.</summary>
            <param name="wmf">
            the
            <see cref="T:iText.Kernel.Pdf.Canvas.Wmf.WmfImageData"/>
            object
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.WmfImageHelper.ProcessParameters">
            <summary>This method checks if the image is a valid WMF and processes some parameters.</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Canvas.Wmf.WmfImageHelper.CreateFormXObject(iText.Kernel.Pdf.PdfDocument)">
            <summary>Create a PdfXObject based on the WMF image.</summary>
            <remarks>
            Create a PdfXObject based on the WMF image. The PdfXObject will have the dimensions of the
            WMF image.
            </remarks>
            <param name="document">PdfDocument to add the PdfXObject to</param>
            <returns>PdfXObject based on the WMF image</returns>
        </member>
        <member name="F:iText.Kernel.Pdf.Collection.PdfCollection.DETAILS">
            <summary>A type of initial view</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Collection.PdfCollection.TILE">
            <summary>A type of initial view</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Collection.PdfCollection.HIDDEN">
            <summary>A type of initial view</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Collection.PdfCollection.#ctor">
            <summary>Constructs a PDF Collection.</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Collection.PdfCollection.SetSchema(iText.Kernel.Pdf.Collection.PdfCollectionSchema)">
            <summary>Sets the Collection schema dictionary.</summary>
            <param name="schema">an overview of the collection fields</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Collection.PdfCollection.SetInitialDocument(System.String)">
            <summary>
            Identifies the document that will be initially presented
            in the user interface.
            </summary>
            <param name="documentName">a string that identifies an entry in the EmbeddedFiles name tree</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Collection.PdfCollection.SetView(System.Int32)">
            <summary>Sets the initial view.</summary>
            <param name="viewType"/>
        </member>
        <member name="M:iText.Kernel.Pdf.Collection.PdfCollection.SetSort(iText.Kernel.Pdf.Collection.PdfCollectionSort)">
            <summary>Sets the Collection sort dictionary.</summary>
            <param name="sort"/>
        </member>
        <member name="F:iText.Kernel.Pdf.Collection.PdfCollectionField.TEXT">
            <summary>A possible type of collection field.</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Collection.PdfCollectionField.DATE">
            <summary>A possible type of collection field.</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Collection.PdfCollectionField.NUMBER">
            <summary>A possible type of collection field.</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Collection.PdfCollectionField.FILENAME">
            <summary>A possible type of collection field.</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Collection.PdfCollectionField.DESC">
            <summary>A possible type of collection field.</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Collection.PdfCollectionField.MODDATE">
            <summary>A possible type of collection field.</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Collection.PdfCollectionField.CREATIONDATE">
            <summary>A possible type of collection field.</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Collection.PdfCollectionField.SIZE">
            <summary>A possible type of collection field.</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Collection.PdfCollectionField.#ctor(System.String,System.Int32)">
            <summary>Creates a PdfCollectionField.</summary>
            <param name="name">the field name</param>
            <param name="subType">the field subtype</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Collection.PdfCollectionField.SetOrder(System.Int32)">
            <summary>The relative order of the field name.</summary>
            <remarks>The relative order of the field name. Fields are sorted in ascending order.</remarks>
            <param name="order">a number indicating the order of the field</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Collection.PdfCollectionField.SetVisibility(System.Boolean)">
            <summary>Sets the initial visibility of the field.</summary>
            <param name="visible"/>
        </member>
        <member name="M:iText.Kernel.Pdf.Collection.PdfCollectionField.SetEditable(System.Boolean)">
            <summary>Indication if the field value should be editable in the viewer.</summary>
            <param name="editable"/>
        </member>
        <member name="M:iText.Kernel.Pdf.Collection.PdfCollectionItem.AddItem(System.String,System.String)">
            <summary>Sets the value of the collection item.</summary>
            <param name="key"/>
            <param name="value"/>
        </member>
        <member name="M:iText.Kernel.Pdf.Collection.PdfCollectionItem.AddItem(System.String,iText.Kernel.Pdf.PdfDate)">
            <summary>Sets the value of the collection item.</summary>
            <param name="d"/>
        </member>
        <member name="M:iText.Kernel.Pdf.Collection.PdfCollectionItem.AddItem(System.String,iText.Kernel.Pdf.PdfNumber)">
            <summary>Sets the value of the collection item.</summary>
            <param name="n"/>
        </member>
        <member name="M:iText.Kernel.Pdf.Collection.PdfCollectionItem.SetPrefix(System.String,System.String)">
            <summary>Adds a prefix for the Collection item.</summary>
            <remarks>
            Adds a prefix for the Collection item.
            You can only use this method after you have set the value of the item.
            </remarks>
            <param name="key"/>
            <param name="prefix"/>
        </member>
        <member name="M:iText.Kernel.Pdf.Collection.PdfCollectionSchema.#ctor">
            <summary>Creates a Collection Schema dictionary.</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Collection.PdfCollectionSchema.AddField(System.String,iText.Kernel.Pdf.Collection.PdfCollectionField)">
            <summary>Adds a Collection field to the Schema.</summary>
            <param name="name">the name of the collection field</param>
            <param name="field">a Collection Field</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Collection.PdfCollectionSort.#ctor(System.String)">
            <summary>Constructs a PDF Collection Sort Dictionary.</summary>
            <param name="key">the key of the field that will be used to sort entries</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Collection.PdfCollectionSort.#ctor(System.String[])">
            <summary>Constructs a PDF Collection Sort Dictionary.</summary>
            <param name="keys">the keys of the fields that will be used to sort entries</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Collection.PdfCollectionSort.SetSortOrder(System.Boolean)">
            <summary>Defines the sort order of the field (ascending or descending).</summary>
            <param name="ascending">true is the default, use false for descending order</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Collection.PdfCollectionSort.SetSortOrder(System.Boolean[])">
            <summary>Defines the sort order of the field (ascending or descending).</summary>
            <param name="ascending">an array with every element corresponding with a name of a field.</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfCieBasedCs.Flush">
            <summary>
            To manually flush a
            <c>PdfObject</c>
            behind this wrapper, you have to ensure
            that this object is added to the document, i.e. it has an indirect reference.
            Basically this means that before flushing you need to explicitly call
            <see cref="M:iText.Kernel.Pdf.PdfObjectWrapper`1.MakeIndirect(iText.Kernel.Pdf.PdfDocument)"/>
            .
            For example: wrapperInstance.makeIndirect(document).flush();
            Note that not every wrapper require this, only those that have such warning in documentation.
            </summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Colorspace.PdfColorSpace">
            <summary>Represents the most common properties of color spaces.</summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Colorspace.PdfPattern">
            <summary>
            Dictionary wrapper that represent special type of color space, that uses pattern objects
            as the equivalent of colour values instead of the numeric component values used with other spaces.
            </summary>
            <remarks>
            Dictionary wrapper that represent special type of color space, that uses pattern objects
            as the equivalent of colour values instead of the numeric component values used with other spaces.
            A pattern object shall be a dictionary or a stream, depending on the type of pattern.
            For mor information see paragraph 8.7 in ISO-32000-1.
            </remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfPattern.GetPatternInstance(iText.Kernel.Pdf.PdfDictionary)">
            <summary>
            Creates the instance wrapper of correct type from the
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            </summary>
            <param name="pdfObject">
            the
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            that represent Pattern
            </param>
            <returns>new wrapper instance.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfPattern.GetMatrix">
            <summary>
            Gets a transformation matrix that maps the pattern’s internal coordinate system
            to the default coordinate system of the pattern’s parent content stream.
            </summary>
            <remarks>
            Gets a transformation matrix that maps the pattern’s internal coordinate system
            to the default coordinate system of the pattern’s parent content stream.
            The concatenation of the pattern matrix with that of the parent content stream
            establishes the pattern coordinate space, within which all graphics objects in the pattern shall be interpreted.
            </remarks>
            <returns>pattern matrix</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfPattern.SetMatrix(iText.Kernel.Pdf.PdfArray)">
            <summary>
            Sets a transformation matrix that maps the pattern’s internal coordinate system
            to the default coordinate system of the pattern’s parent content stream.
            </summary>
            <remarks>
            Sets a transformation matrix that maps the pattern’s internal coordinate system
            to the default coordinate system of the pattern’s parent content stream.
            The concatenation of the pattern matrix with that of the parent content stream
            establishes the pattern coordinate space, within which all graphics objects in the pattern shall be interpreted.
            </remarks>
            <param name="matrix">pattern matrix to set</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfPattern.Flush">
            <summary>
            To manually flush a
            <c>PdfObject</c>
            behind this wrapper, you have to ensure
            that this object is added to the document, i.e. it has an indirect reference.
            Basically this means that before flushing you need to explicitly call
            <see cref="M:iText.Kernel.Pdf.PdfObjectWrapper`1.MakeIndirect(iText.Kernel.Pdf.PdfDocument)"/>
            .
            For example: wrapperInstance.makeIndirect(document).flush();
            Note that not every wrapper require this, only those that have such warning in documentation.
            </summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Colorspace.PdfPattern.Tiling">
            <summary>Wrapper that represents tiling pattern of color space.</summary>
            <remarks>
            Wrapper that represents tiling pattern of color space. This pattern consists of a small graphical figure (cells).
            Painting with the pattern replicates the cell at fixed horizontal and vertical intervals to fill an area.
            The pattern cell can include graphical elements such as filled areas, text, and sampled images.
            Its shape need not be rectangular, and the spacing of tiles can differ from the dimensions of the cell itself.
            The appearance of the pattern cell shall be defined by a content stream
            containing the painting operators needed to paint one instance of the cell
            </remarks>
        </member>
        <member name="T:iText.Kernel.Pdf.Colorspace.PdfPattern.Tiling.PaintType">
            <summary>A code that determines how the colour of the pattern cell shall be specified</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Colorspace.PdfPattern.Tiling.PaintType.COLORED">
            <summary>The pattern’s content stream shall specify the colours used to paint the pattern cell.</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Colorspace.PdfPattern.Tiling.PaintType.UNCOLORED">
            <summary>The pattern’s content stream shall not specify any colour information.</summary>
            <remarks>
            The pattern’s content stream shall not specify any colour information.
            Instead, the entire cell is painted with a separately specified colour each time the pattern is used.
            </remarks>
        </member>
        <member name="T:iText.Kernel.Pdf.Colorspace.PdfPattern.Tiling.TilingType">
            <summary>A code that controls adjustments to the spacing of tiles relative to the device pixel grid</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Colorspace.PdfPattern.Tiling.TilingType.CONSTANT_SPACING">
            <summary>Pattern cells shall be spaced consistently—that is, by a multiple of a device pixel.</summary>
            <remarks>
            Pattern cells shall be spaced consistently—that is, by a multiple of a device pixel.
            To achieve this, the conforming reader may need to distort the pattern cell slightly.
            </remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.Colorspace.PdfPattern.Tiling.TilingType.NO_DISTORTION">
            <summary>
            The pattern cell shall not be distorted,
            but the spacing between pattern cells may vary by as much as 1 device pixel.
            </summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Colorspace.PdfPattern.Tiling.TilingType.CONSTANT_SPACING_AND_FASTER_TILING">
            <summary>
            Pattern cells shall be spaced consistently as in tiling type 1,
            but with additional distortion permitted to enable a more efficient implementation.
            </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfPattern.Tiling.#ctor(iText.Kernel.Pdf.PdfStream)">
            <summary>
            Creates new instance from the
            <see cref="T:iText.Kernel.Pdf.PdfStream"/>
            object.
            This stream should have PatternType equals to 1.
            </summary>
            <param name="pdfObject">
            the
            <see cref="T:iText.Kernel.Pdf.PdfStream"/>
            that represents Tiling Pattern.
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfPattern.Tiling.IsColored">
            <summary>Checks if this pattern have colored paint type.</summary>
            <returns>
            
            <see langword="true"/>
            if this pattern's paint type is
            <see cref="F:iText.Kernel.Pdf.Colorspace.PdfPattern.Tiling.PaintType.COLORED"/>
            and
            <see langword="false"/>
            otherwise.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfPattern.Tiling.SetColored(System.Boolean)">
            <summary>Sets the paint type.</summary>
            <param name="colored">
            if
            <see langword="true"/>
            then the paint type will be set as
            <see cref="F:iText.Kernel.Pdf.Colorspace.PdfPattern.Tiling.PaintType.COLORED"/>
            ,
            and
            <see cref="F:iText.Kernel.Pdf.Colorspace.PdfPattern.Tiling.PaintType.UNCOLORED"/>
            otherwise.
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfPattern.Tiling.GetTilingType">
            <summary>Gets the tiling type.</summary>
            <returns>
            int value of
            <see cref="T:iText.Kernel.Pdf.Colorspace.PdfPattern.Tiling.TilingType"/>
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfPattern.Tiling.SetTilingType(System.Int32)">
            <summary>Sets the tiling type.</summary>
            <param name="tilingType">
            int value of
            <see cref="T:iText.Kernel.Pdf.Colorspace.PdfPattern.Tiling.TilingType"/>
            to set.
            </param>
            <exception cref="T:System.ArgumentException">in case of wrong value.</exception>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfPattern.Tiling.GetBBox">
            <summary>Gets the pattern cell's bounding box.</summary>
            <remarks>Gets the pattern cell's bounding box. These boundaries shall be used to clip the pattern cell.</remarks>
            <returns>pattern cell's bounding box.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfPattern.Tiling.SetBBox(iText.Kernel.Geom.Rectangle)">
            <summary>Sets the pattern cell's bounding box.</summary>
            <remarks>Sets the pattern cell's bounding box. These boundaries shall be used to clip the pattern cell.</remarks>
            <param name="bbox">pattern cell's bounding box to set.</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfPattern.Tiling.Flush">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Colorspace.PdfShading">
            <summary>The abstract PdfShading class that represents the Shading Dictionary PDF object.</summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Colorspace.PdfShading.ShadingType">
            <summary>constants of shading type (see ISO-320001 Table 78)</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Colorspace.PdfShading.ShadingType.FUNCTION_BASED">
            <summary>The int value of function-based shading type</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Colorspace.PdfShading.ShadingType.AXIAL">
            <summary>The int value of axial shading type</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Colorspace.PdfShading.ShadingType.RADIAL">
            <summary>The int value of radial shading type</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Colorspace.PdfShading.ShadingType.FREE_FORM_GOURAUD_SHADED_TRIANGLE_MESH">
            <summary>The int value of free-form Gouraud-shaded triangle mesh shading type</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Colorspace.PdfShading.ShadingType.LATTICE_FORM_GOURAUD_SHADED_TRIANGLE_MESH">
            <summary>The int value of lattice-form Gouraud-shaded triangle mesh shading type</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Colorspace.PdfShading.ShadingType.COONS_PATCH_MESH">
            <summary>The int value of coons patch meshes shading type</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Colorspace.PdfShading.ShadingType.TENSOR_PRODUCT_PATCH_MESH">
            <summary>The int value of tensor-product patch meshes shading type</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.MakeShading(iText.Kernel.Pdf.PdfDictionary)">
            <summary>
            Creates the
            <see cref="T:iText.Kernel.Pdf.Colorspace.PdfShading"/>
            object from the existing
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            with corresponding type.
            </summary>
            <param name="shadingDictionary">
            
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            from which the
            <see cref="T:iText.Kernel.Pdf.Colorspace.PdfShading"/>
            object will be created.
            </param>
            <returns>
            Created
            <see cref="T:iText.Kernel.Pdf.Colorspace.PdfShading"/>
            object.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.GetShadingType">
            <summary>Gets the shading type.</summary>
            <returns>
            int value of
            <see cref="F:iText.Kernel.Pdf.PdfName.ShadingType"/>
            .
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.GetColorSpace">
            <summary>Gets the color space in which colour values shall be expressed.</summary>
            <returns>
            
            <see cref="T:iText.Kernel.Pdf.PdfObject"/>
            Color space
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.GetFunction">
            <summary>
            Gets the function PdfObject that represents color transitions
            across the shading geometry.
            </summary>
            <returns>
            
            <see cref="T:iText.Kernel.Pdf.PdfObject"/>
            Function
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.SetFunction(iText.Kernel.Pdf.Function.PdfFunction)">
            <summary>
            Sets the function that represents color transitions
            across the shading geometry as one object.
            </summary>
            <param name="function">
            The
            <see cref="T:iText.Kernel.Pdf.Function.PdfFunction"/>
            to set.
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.SetFunction(iText.Kernel.Pdf.Function.PdfFunction[])">
            <summary>
            Sets the function object that represents color transitions
            across the shading geometry as an array of functions.
            </summary>
            <param name="functions">
            The array of
            <see cref="T:iText.Kernel.Pdf.Function.PdfFunction"/>
            to be set.
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.Flush">
            <summary>
            To manually flush a
            <c>PdfObject</c>
            behind this wrapper, you have to ensure
            that this object is added to the document, i.e. it has an indirect reference.
            Basically this means that before flushing you need to explicitly call
            <see cref="M:iText.Kernel.Pdf.PdfObjectWrapper`1.MakeIndirect(iText.Kernel.Pdf.PdfDocument)"/>
            .
            For example: wrapperInstance.makeIndirect(document).flush();
            Note that not every wrapper require this, only those that have such warning in documentation.
            </summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Colorspace.PdfShading.FunctionBased">
            <summary>
            The class that extends
            <see cref="T:iText.Kernel.Pdf.Colorspace.PdfShading"/>
            class and is in charge of Shading Dictionary with function-based type,
            that defines color at every point in the domain by a specified mathematical function.
            </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.FunctionBased.#ctor(iText.Kernel.Pdf.Colorspace.PdfColorSpace,iText.Kernel.Pdf.Function.PdfFunction)">
            <summary>Creates the new instance of the class.</summary>
            <param name="colorSpace">
            the
            <see cref="T:iText.Kernel.Pdf.Colorspace.PdfColorSpace"/>
            object in which colour values shall be expressed.
            </param>
            <param name="function">
            the
            <see cref="T:iText.Kernel.Pdf.Function.PdfFunction"/>
            , that is used to calculate color transitions.
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.FunctionBased.#ctor(iText.Kernel.Pdf.PdfObject,iText.Kernel.Pdf.Function.PdfFunction)">
            <summary>Creates the new instance of the class.</summary>
            <param name="colorSpace">
            the
            <see cref="T:iText.Kernel.Pdf.PdfObject"/>
            , that represents color space in which colour values shall be expressed.
            </param>
            <param name="function">
            the
            <see cref="T:iText.Kernel.Pdf.Function.PdfFunction"/>
            , that is used to calculate color transitions.
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.FunctionBased.GetDomain">
            <summary>
            Gets the
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            domain rectangle object that establishes an internal coordinate space
            for the shading that is independent of the target coordinate space in which it shall be painted.
            </summary>
            <returns>
            
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            domain rectangle.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.FunctionBased.SetDomain(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            domain rectangle object that establishes an internal coordinate space
            for the shading that is independent of the target coordinate space in which it shall be painted.
            </summary>
            <param name="xmin">the Xmin coordinate of rectangle.</param>
            <param name="xmax">the Xmax coordinate of rectangle.</param>
            <param name="ymin">the Ymin coordinate of rectangle.</param>
            <param name="ymax">the Ymax coordinate of rectangle.</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.FunctionBased.SetDomain(iText.Kernel.Pdf.PdfArray)">
            <summary>
            Sets the
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            domain rectangle object that establishes an internal coordinate space
            for the shading that is independent of the target coordinate space in which it shall be painted.
            </summary>
            <param name="domain">
            the
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            domain rectangle object to be set.
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.FunctionBased.GetMatrix">
            <summary>
            Gets the
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            of floats that represents the transformation matrix that maps the domain rectangle
            into a corresponding figure in the target coordinate space.
            </summary>
            <returns>
            the
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            of transformation matrix (identical matrix by default).
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.FunctionBased.SetMatrix(System.Single[])">
            <summary>
            Sets the array of floats that represents the transformation matrix that maps the domain rectangle
            into a corresponding figure in the target coordinate space.
            </summary>
            <param name="matrix">
            the
            <c>float[]</c>
            of transformation matrix to be set.
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.FunctionBased.SetMatrix(iText.Kernel.Pdf.PdfArray)">
            <summary>
            Sets the array of floats that represents the transformation matrix that maps the domain rectangle
            into a corresponding figure in the target coordinate space.
            </summary>
            <param name="matrix">
            the
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            transformation matrix object to be set.
            </param>
        </member>
        <member name="T:iText.Kernel.Pdf.Colorspace.PdfShading.Axial">
            <summary>
            The class that extends
            <see cref="T:iText.Kernel.Pdf.Colorspace.PdfShading"/>
            class and is in charge of Shading Dictionary with axial type,
            that define a colour blend that varies along a linear axis between two endpoints
            and extends indefinitely perpendicular to that axis.
            </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.Axial.#ctor(iText.Kernel.Pdf.Colorspace.PdfColorSpace,System.Single,System.Single,System.Single[],System.Single,System.Single,System.Single[])">
            <summary>Creates the new instance of the class.</summary>
            <param name="cs">
            the
            <see cref="T:iText.Kernel.Pdf.Colorspace.PdfColorSpace"/>
            object in which colour values shall be expressed.
            The special Pattern space isn't excepted.
            </param>
            <param name="x0">the start coordinate of X axis expressed in the shading's target coordinate space.</param>
            <param name="y0">the start coordinate of Y axis expressed in the shading's target coordinate space.</param>
            <param name="color0">
            the
            <c>float[]</c>
            that represents the color in the start point.
            </param>
            <param name="x1">the end coordinate of X axis expressed in the shading's target coordinate space.</param>
            <param name="y1">the end coordinate of Y axis expressed in the shading's target coordinate space.</param>
            <param name="color1">
            the
            <c>float[]</c>
            that represents the color in the end point.
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.Axial.#ctor(iText.Kernel.Pdf.Colorspace.PdfColorSpace,System.Single,System.Single,System.Single[],System.Single,System.Single,System.Single[],System.Boolean[])">
            <summary>Creates the new instance of the class.</summary>
            <param name="cs">
            the
            <see cref="T:iText.Kernel.Pdf.Colorspace.PdfColorSpace"/>
            object in which colour values shall be expressed.
            The special Pattern space isn't excepted.
            </param>
            <param name="x0">the start coordinate of X axis expressed in the shading's target coordinate space.</param>
            <param name="y0">the start coordinate of Y axis expressed in the shading's target coordinate space.</param>
            <param name="color0">
            the
            <c>float[]</c>
            that represents the color in the start point.
            </param>
            <param name="x1">the end coordinate of X axis expressed in the shading's target coordinate space.</param>
            <param name="y1">the end coordinate of Y axis expressed in the shading's target coordinate space.</param>
            <param name="color1">
            the
            <c>float[]</c>
            that represents the color in the end point.
            </param>
            <param name="extend">
            the array of two booleans that specified whether to extend the shading
            beyond the starting and ending points of the axis, respectively.
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.Axial.#ctor(iText.Kernel.Pdf.Colorspace.PdfColorSpace,iText.Kernel.Pdf.PdfArray,iText.Kernel.Pdf.Function.PdfFunction)">
            <summary>Creates the new instance of the class.</summary>
            <param name="cs">
            the
            <see cref="T:iText.Kernel.Pdf.Colorspace.PdfColorSpace"/>
            object in which colour values shall be expressed.
            The special Pattern space isn't excepted.
            </param>
            <param name="coords">
            the
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            of four number four numbers [x0 y0 x1 y1] that specified the starting
            and the endings coordinates of thew axis, expressed in the shading's target coordinate space.
            </param>
            <param name="function">
            the
            <see cref="T:iText.Kernel.Pdf.Function.PdfFunction"/>
            object, that is used to calculate color transitions.
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.Axial.GetCoords">
            <summary>
            Gets the Coords object - a
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            of four numbers [x0 y0 x1 y1] that specified the starting
            and the endings coordinates of thew axis, expressed in the shading's target coordinate space.
            </summary>
            <returns>
            the
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            Coords object.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.Axial.SetCoords(System.Single,System.Single,System.Single,System.Single)">
            <summary>Sets the Choords object with the four params expressed in the shading's target coordinate space.</summary>
            <param name="x0">the start coordinate of X axis to be set.</param>
            <param name="y0">the start coordinate of Y axis to be set.</param>
            <param name="x1">the end coordinate of X axis to be set.</param>
            <param name="y1">the end coordinate of Y axis to be set.</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.Axial.SetCoords(iText.Kernel.Pdf.PdfArray)">
            <summary>
            Sets the Choords object with the
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            of four numbers [x0 y0 x1 y1],
            that specified the starting and the endings coordinates of thew axis,
            expressed in the shading's target coordinate space.
            </summary>
            <param name="coords">
            the Chords
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            to be set.
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.Axial.GetDomain">
            <summary>
            Gets the
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            of two
            <c>float</c>
            [t0, t1] that represent the limiting values of a parametric
            variable t, that becomes an input of color function(s).
            </summary>
            <returns>
            the
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            of Domain object ([0.0 1.0] by default)
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.Axial.SetDomain(System.Single,System.Single)">
            <summary>
            Sets the Domain with the array of two
            <c>float</c>
            [t0, t1] that represent the limiting values
            of a parametric variable t, that becomes an input of color function(s).
            </summary>
            <param name="t0">first limit of variable t</param>
            <param name="t1">second limit of variable t</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.Axial.SetDomain(iText.Kernel.Pdf.PdfArray)">
            <summary>
            Sets the Domain with the
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            of two
            <c>float</c>
            [t0, t1] that represent the limiting values
            of a parametric variable t, that becomes an input of color function(s).
            </summary>
            <param name="domain">
            the
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            that represents domain
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.Axial.GetExtend">
            <summary>
            Gets the
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            of two
            <c>boolean</c>
            that specified whether to extend the shading
            beyond the starting and ending points of the axis, respectively.
            </summary>
            <returns>
            the
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            of Extended object ([false false] by default)
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.Axial.SetExtend(System.Boolean,System.Boolean)">
            <summary>
            Sets the Extend object with the two
            <c>boolean</c>
            value.
            </summary>
            <param name="extendStart">if true will extend shading beyond the starting point of Coords</param>
            <param name="extendEnd">if true will extend shading beyond the ending point of Coords</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.Axial.SetExtend(iText.Kernel.Pdf.PdfArray)">
            <summary>
            Sets the Extend object with the
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            of two
            <c>boolean</c>
            .
            If first is true shading will extend beyond the starting point of Coords.
            If second is true shading will extend beyond the ending point of Coords.
            </summary>
            <param name="extend">
            the
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            representing Extend object
            </param>
        </member>
        <member name="T:iText.Kernel.Pdf.Colorspace.PdfShading.Radial">
            <summary>
            The class that extends
            <see cref="T:iText.Kernel.Pdf.Colorspace.PdfShading"/>
            class and is in charge of Shading Dictionary with radial type,
            that define a colour blend that varies between two circles.
            This type of shading shall not be used with an Indexed colour space
            </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.Radial.#ctor(iText.Kernel.Pdf.Colorspace.PdfColorSpace,System.Single,System.Single,System.Single,System.Single[],System.Single,System.Single,System.Single,System.Single[])">
            <summary>Creates the new instance of the class.</summary>
            <param name="cs">
            the
            <see cref="T:iText.Kernel.Pdf.Colorspace.PdfColorSpace"/>
            object in which colour values shall be expressed.
            The Indexed color space isn't excepted.
            </param>
            <param name="x0">the X coordinate of starting circle's centre, expressed in in the shading’s target coordinate space.
                </param>
            <param name="y0">the Y coordinate of starting circle's centre, expressed in in the shading’s target coordinate space.
                </param>
            <param name="r0">
            the radius of starting circle's centre, should be greater or equal to 0.
            If 0 then starting circle is treated as point.
            If both radii are 0, nothing shall be painted.
            </param>
            <param name="color0">
            the
            <c>float[]</c>
            that represents the color in the start circle.
            </param>
            <param name="x1">the X coordinate of ending circle's centre, expressed in in the shading’s target coordinate space.
                </param>
            <param name="y1">the Y coordinate of ending circle's centre, expressed in in the shading’s target coordinate space.
                </param>
            <param name="r1">
            the radius of ending circle's centre, should be greater or equal to 0.
            If 0 then ending circle is treated as point.
            If both radii are 0, nothing shall be painted.
            </param>
            <param name="color1">
            the
            <c>float[]</c>
            that represents the color in the end circle.
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.Radial.#ctor(iText.Kernel.Pdf.Colorspace.PdfColorSpace,System.Single,System.Single,System.Single,System.Single[],System.Single,System.Single,System.Single,System.Single[],System.Boolean[])">
            <summary>Creates the new instance of the class.</summary>
            <param name="cs">
            the
            <see cref="T:iText.Kernel.Pdf.Colorspace.PdfColorSpace"/>
            object in which colour values shall be expressed.
            The Indexed color space isn't excepted.
            </param>
            <param name="x0">the X coordinate of starting circle's centre, expressed in in the shading’s target coordinate space.
                </param>
            <param name="y0">the Y coordinate of starting circle's centre, expressed in in the shading’s target coordinate space.
                </param>
            <param name="r0">
            the radius of starting circle's centre, should be greater or equal to 0.
            If 0 then starting circle is treated as point.
            If both radii are 0, nothing shall be painted.
            </param>
            <param name="color0">
            the
            <c>float[]</c>
            that represents the color in the start circle.
            </param>
            <param name="x1">the X coordinate of ending circle's centre, expressed in in the shading’s target coordinate space.
                </param>
            <param name="y1">the Y coordinate of ending circle's centre, expressed in in the shading’s target coordinate space.
                </param>
            <param name="r1">
            the radius of ending circle's centre, should be greater or equal to 0.
            If 0 then ending circle is treated as point.
            If both radii are 0, nothing shall be painted.
            </param>
            <param name="color1">
            the
            <c>float[]</c>
            that represents the color in the end circle.
            </param>
            <param name="extend">
            the array of two
            <c>boolean</c>
            that specified whether to extend the shading
            beyond the starting and ending points of the axis, respectively.
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.Radial.#ctor(iText.Kernel.Pdf.Colorspace.PdfColorSpace,iText.Kernel.Pdf.PdfArray,iText.Kernel.Pdf.Function.PdfFunction)">
            <summary>Creates the new instance of the class.</summary>
            <param name="cs">
            the
            <see cref="T:iText.Kernel.Pdf.Colorspace.PdfColorSpace"/>
            object in which colour values shall be expressed.
            The Indexed color space isn't excepted.
            </param>
            <param name="coords">
            the
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            of of six numbers [x0 y0 r0 x1 y1 r1],
            specifying the centres and radii of the starting and ending circles,
            expressed in the shading’s target coordinate space.
            The radii r0 and r1 shall both be greater than or equal to 0.
            If one radius is 0, the corresponding circle shall be treated as a point;
            if both are 0, nothing shall be painted.
            </param>
            <param name="function">
            the
            <see cref="T:iText.Kernel.Pdf.Function.PdfFunction"/>
            object, that is used to calculate color transitions.
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.Radial.GetCoords">
            <summary>
            Gets the coords
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            object - an array of six numbers [x0 y0 r0 x1 y1 r1],
            specifying the centres and radii of the starting and ending circles,
            expressed in the shading’s target coordinate space.
            The radii r0 and r1 shall both be greater than or equal to 0.
            If one radius is 0, the corresponding circle shall be treated as a point;
            if both are 0, nothing shall be painted.
            </summary>
            <returns>
            the
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            coords object.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.Radial.SetCoords(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>Sets the coords object.</summary>
            <param name="x0">the X coordinate of starting circle's centre, expressed in in the shading’s target coordinate space.
                </param>
            <param name="y0">the Y coordinate of starting circle's centre, expressed in in the shading’s target coordinate space.
                </param>
            <param name="r0">
            the radius of starting circle's centre, should be greater or equal to 0.
            If 0 then starting circle is treated as point.
            If both radii are 0, nothing shall be painted.
            </param>
            <param name="x1">the X coordinate of ending circle's centre, expressed in in the shading’s target coordinate space.
                </param>
            <param name="y1">the Y coordinate of ending circle's centre, expressed in in the shading’s target coordinate space.
                </param>
            <param name="r1">
            the radius of ending circle's centre, should be greater or equal to 0.
            If 0 then ending circle is treated as point.
            If both radii are 0, nothing shall be painted.
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.Radial.SetCoords(iText.Kernel.Pdf.PdfArray)">
            <summary>
            Sets the coords
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            object - an array of six numbers [x0 y0 r0 x1 y1 r1],
            specifying the centres and radii of the starting and ending circles,
            expressed in the shading’s target coordinate space.
            The radii r0 and r1 shall both be greater than or equal to 0.
            If one radius is 0, the corresponding circle shall be treated as a point;
            if both are 0, nothing shall be painted.
            </summary>
            <param name="coords">
            -
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            choords object to be set.
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.Radial.GetDomain">
            <summary>
            Gets the
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            of two
            <c>float</c>
            [t0, t1] that represent the limiting values of a parametric
            variable t, that becomes an input of color function(s).
            </summary>
            <returns>
            the
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            of Domain object ([0.0 1.0] by default)
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.Radial.SetDomain(System.Single,System.Single)">
            <summary>
            Sets the Domain with the array of two
            <c>float</c>
            [t0, t1] that represent the limiting values
            of a parametric variable t, that becomes an input of color function(s).
            </summary>
            <param name="t0">first limit of variable t</param>
            <param name="t1">second limit of variable t</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.Radial.SetDomain(iText.Kernel.Pdf.PdfArray)">
            <summary>
            Sets the Domain with the
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            of two
            <c>float</c>
            [t0, t1] that represent the limiting values
            of a parametric variable t, that becomes an input of color function(s).
            </summary>
            <param name="domain">
            the
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            that represents domain
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.Radial.GetExtend">
            <summary>
            Gets the
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            of two
            <c>boolean</c>
            that specified whether to extend the shading
            beyond the starting and ending circles of the axis, respectively.
            </summary>
            <returns>
            the
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            of Extended object ([false false] by default)
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.Radial.SetExtend(System.Boolean,System.Boolean)">
            <summary>
            Sets the Extend object with the two
            <c>boolean</c>
            value.
            </summary>
            <param name="extendStart">if true will extend shading beyond the starting circle of Coords.</param>
            <param name="extendEnd">if true will extend shading beyond the ending circle of Coords.</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.Radial.SetExtend(iText.Kernel.Pdf.PdfArray)">
            <summary>
            Sets the Extend object with the
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            of two
            <c>boolean</c>
            .
            If first is true shading will extend beyond the starting circle of Coords.
            If second is true shading will extend beyond the ending circle of Coords.
            </summary>
            <param name="extend">
            the
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            representing Extend object
            </param>
        </member>
        <member name="T:iText.Kernel.Pdf.Colorspace.PdfShading.FreeFormGouraudShadedTriangleMesh">
            <summary>
            The class that extends
            <see cref="T:iText.Kernel.Pdf.Colorspace.PdfShading"/>
            class and is in charge of Shading Dictionary with
            free-form Gouraud-shaded triangle mesh type.
            The area to be shaded is defined by a path composed entirely of triangles.
            The colour at each vertex of the triangles is specified,
            and a technique known as Gouraud interpolation is used to colour the interiors.
            The object shall be represented as stream containing a sequence of vertex data.
            Each vertex is specified by the following values, in the order shown:
            f x y c1 ... cn where:
            f -  the vertex's edge flag, that determines the vertex is connected to other vertices of the triangle mesh.
            For full description, see ISO-320001 Paragraph 8.7.4.5.5
            x, y - vertex's horizontal and vertical coordinates, expressed in the shading's target coordinate space.
            c1...cn - vertex's colour components.
            If the shading dictionary includes a Function entry, only a single parametric value, t,
            shall be specified for each vertex in place of the colour components c1...cn.
            </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.FreeFormGouraudShadedTriangleMesh.#ctor(iText.Kernel.Pdf.Colorspace.PdfColorSpace,System.Int32,System.Int32,System.Int32,System.Single[])">
            <summary>Creates the new instance of the class.</summary>
            <param name="cs">
            the
            <see cref="T:iText.Kernel.Pdf.Colorspace.PdfColorSpace"/>
            object in which colour values shall be expressed.
            The special Pattern space isn't excepted.
            </param>
            <param name="bitsPerCoordinate">
            the number of bits used to represent each vertex coordinate.
            The value shall be 1, 2, 4, 8, 12, 16, 24, or 32.
            </param>
            <param name="bitsPerComponent">
            the number of bits used to represent each colour component.
            The value shall be 1, 2, 4, 8, 12, or 16.
            </param>
            <param name="bitsPerFlag">
            the number of bits used to represent the edge flag for each vertex.
            The value of BitsPerFlag shall be 2, 4, or 8,
            but only the least significant 2 bits in each flag value shall be used.
            The value for the edge flag shall be 0, 1, or 2.
            </param>
            <param name="decode">
            the
            <c>int[]</c>
            of numbers specifying how to map vertex coordinates and colour components
            into the appropriate ranges of values. The ranges shall be specified as follows:
            [x_min x_max y_min y_max c1_min c1_max … cn_min cn_max].
            Only one pair of color values shall be specified if a Function entry is present.
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.FreeFormGouraudShadedTriangleMesh.#ctor(iText.Kernel.Pdf.Colorspace.PdfColorSpace,System.Int32,System.Int32,System.Int32,iText.Kernel.Pdf.PdfArray)">
            <summary>Creates the new instance of the class.</summary>
            <param name="cs">
            the
            <see cref="T:iText.Kernel.Pdf.Colorspace.PdfColorSpace"/>
            object in which colour values shall be expressed.
            The special Pattern space isn't excepted.
            </param>
            <param name="bitsPerCoordinate">
            the number of bits used to represent each vertex coordinate.
            The value shall be 1, 2, 4, 8, 12, 16, 24, or 32.
            </param>
            <param name="bitsPerComponent">
            the number of bits used to represent each colour component.
            The value shall be 1, 2, 4, 8, 12, or 16.
            </param>
            <param name="bitsPerFlag">
            the number of bits used to represent the edge flag for each vertex.
            The value of BitsPerFlag shall be 2, 4, or 8,
            but only the least significant 2 bits in each flag value shall be used.
            The value for the edge flag shall be 0, 1, or 2.
            </param>
            <param name="decode">
            the
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            of numbers specifying how to map vertex coordinates and colour components
            into the appropriate ranges of values. The ranges shall be specified as follows:
            [x_min x_max y_min y_max c1_min c1_max … cn_min cn_max].
            Only one pair of color values shall be specified if a Function entry is present.
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.FreeFormGouraudShadedTriangleMesh.GetBitsPerCoordinate">
            <summary>Gets the number of bits used to represent each vertex coordinate.</summary>
            <returns>the number of bits. Can be 1, 2, 4, 8, 12, 16, 24, or 32.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.FreeFormGouraudShadedTriangleMesh.SetBitsPerCoordinate(System.Int32)">
            <summary>Sets the number of bits used to represent each vertex coordinate.</summary>
            <param name="bitsPerCoordinate">the number of bits to be set. Shall be 1, 2, 4, 8, 12, 16, 24, or 32.</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.FreeFormGouraudShadedTriangleMesh.GetBitsPerComponent">
            <summary>Gets the number of bits used to represent each colour component.</summary>
            <returns>the number of bits. Can be 1, 2, 4, 8, 12, or 16.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.FreeFormGouraudShadedTriangleMesh.SetBitsPerComponent(System.Int32)">
            <summary>Sets the number of bits used to represent each colour component.</summary>
            <param name="bitsPerComponent">the number of bits to be set. Shall be 1, 2, 4, 8, 12, or 16.</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.FreeFormGouraudShadedTriangleMesh.GetBitsPerFlag">
            <summary>Gets the number of bits used to represent the edge flag for each vertex.</summary>
            <remarks>
            Gets the number of bits used to represent the edge flag for each vertex.
            But only the least significant 2 bits in each flag value shall be used.
            The valid flag values are 0, 1 or 2.
            </remarks>
            <returns>the number of bits. Can be 2, 4 or 8.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.FreeFormGouraudShadedTriangleMesh.SetBitsPerFlag(System.Int32)">
            <summary>Sets the number of bits used to represent the edge flag for each vertex.</summary>
            <remarks>
            Sets the number of bits used to represent the edge flag for each vertex.
            But only the least significant 2 bits in each flag value shall be used.
            The valid flag values are 0, 1 or 2.
            </remarks>
            <param name="bitsPerFlag">the number of bits to be set. Shall be 2, 4 or 8.</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.FreeFormGouraudShadedTriangleMesh.GetDecode">
            <summary>
            Gets the
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            of numbers specifying how to map vertex coordinates and colour components
            into the appropriate ranges of values. The ranges shall be specified as follows:
            [x_min x_max y_min y_max c1_min c1_max … cn_min cn_max].
            Only one pair of color values shall be specified if a Function entry is present.
            </summary>
            <returns>
            the
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            Decode object.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.FreeFormGouraudShadedTriangleMesh.SetDecode(System.Single[])">
            <summary>
            Sets the
            <c>float[]</c>
            of numbers specifying how to map vertex coordinates and colour components
            into the appropriate ranges of values. The ranges shall be specified as follows:
            [x_min x_max y_min y_max c1_min c1_max … cn_min cn_max].
            Only one pair of color values shall be specified if a Function entry is present.
            </summary>
            <param name="decode">
            the
            <c>float[]</c>
            of Decode object to set.
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.FreeFormGouraudShadedTriangleMesh.SetDecode(iText.Kernel.Pdf.PdfArray)">
            <summary>
            Sets the
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            of numbers specifying how to map vertex coordinates and colour components
            into the appropriate ranges of values. The ranges shall be specified as follows:
            [x_min x_max y_min y_max c1_min c1_max … cn_min cn_max].
            Only one pair of color values shall be specified if a Function entry is present.
            </summary>
            <param name="decode">
            the
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            Decode object to set.
            </param>
        </member>
        <member name="T:iText.Kernel.Pdf.Colorspace.PdfShading.LatticeFormGouraudShadedTriangleMesh">
            <summary>
            The class that extends
            <see cref="T:iText.Kernel.Pdf.Colorspace.PdfShading"/>
            class and is in charge of Shading Dictionary with
            lattice-form Gouraud-shaded triangle mesh type.
            This type is similar to
            <see cref="T:iText.Kernel.Pdf.Colorspace.PdfShading.FreeFormGouraudShadedTriangleMesh"/>
            but instead of using free-form geometry,
            the vertices are arranged in a pseudorectangular lattice,
            which is topologically equivalent to a rectangular grid.
            The vertices are organized into rows, which need not be geometrically linear.
            The verticals data in stream is similar to
            <see cref="T:iText.Kernel.Pdf.Colorspace.PdfShading.FreeFormGouraudShadedTriangleMesh"/>
            ,
            except there is no edge flag.
            </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.LatticeFormGouraudShadedTriangleMesh.#ctor(iText.Kernel.Pdf.Colorspace.PdfColorSpace,System.Int32,System.Int32,System.Int32,System.Single[])">
            <summary>Creates the new instance of the class.</summary>
            <param name="cs">
            the
            <see cref="T:iText.Kernel.Pdf.Colorspace.PdfColorSpace"/>
            object in which colour values shall be expressed.
            The special Pattern space isn't excepted.
            </param>
            <param name="bitsPerCoordinate">
            the number of bits used to represent each vertex coordinate.
            The value shall be 1, 2, 4, 8, 12, 16, 24, or 32.
            </param>
            <param name="bitsPerComponent">
            the number of bits used to represent each colour component.
            The value shall be 1, 2, 4, 8, 12, or 16.
            </param>
            <param name="verticesPerRow">
            the number of vertices in each row of the lattice (shall be &gt; 1).
            The number of rows need not be specified.
            </param>
            <param name="decode">
            the
            <c>int[]</c>
            of numbers specifying how to map vertex coordinates and colour components
            into the appropriate ranges of values. The ranges shall be specified as follows:
            [x_min x_max y_min y_max c1_min c1_max … cn_min cn_max].
            Only one pair of color values shall be specified if a Function entry is present.
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.LatticeFormGouraudShadedTriangleMesh.#ctor(iText.Kernel.Pdf.Colorspace.PdfColorSpace,System.Int32,System.Int32,System.Int32,iText.Kernel.Pdf.PdfArray)">
            <summary>Creates the new instance of the class.</summary>
            <param name="cs">
            the
            <see cref="T:iText.Kernel.Pdf.Colorspace.PdfColorSpace"/>
            object in which colour values shall be expressed.
            The special Pattern space isn't excepted.
            </param>
            <param name="bitsPerCoordinate">
            the number of bits used to represent each vertex coordinate.
            The value shall be 1, 2, 4, 8, 12, 16, 24, or 32.
            </param>
            <param name="bitsPerComponent">
            the number of bits used to represent each colour component.
            The value shall be 1, 2, 4, 8, 12, or 16.
            </param>
            <param name="verticesPerRow">
            the number of vertices in each row of the lattice (shall be &gt; 1).
            The number of rows need not be specified.
            </param>
            <param name="decode">
            the
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            of numbers specifying how to map vertex coordinates and colour components
            into the appropriate ranges of values. The ranges shall be specified as follows:
            [x_min x_max y_min y_max c1_min c1_max … cn_min cn_max].
            Only one pair of color values shall be specified if a Function entry is present.
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.LatticeFormGouraudShadedTriangleMesh.GetBitsPerCoordinate">
            <summary>Gets the number of bits used to represent each vertex coordinate.</summary>
            <returns>the number of bits. Can be 1, 2, 4, 8, 12, 16, 24, or 32.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.LatticeFormGouraudShadedTriangleMesh.SetBitsPerCoordinate(System.Int32)">
            <summary>Sets the number of bits used to represent each vertex coordinate.</summary>
            <param name="bitsPerCoordinate">the number of bits to be set. Shall be 1, 2, 4, 8, 12, 16, 24, or 32.</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.LatticeFormGouraudShadedTriangleMesh.GetBitsPerComponent">
            <summary>Gets the number of bits used to represent each colour component.</summary>
            <returns>the number of bits. Can be 1, 2, 4, 8, 12, or 16.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.LatticeFormGouraudShadedTriangleMesh.SetBitsPerComponent(System.Int32)">
            <summary>Sets the number of bits used to represent each colour component.</summary>
            <param name="bitsPerComponent">the number of bits to be set. Shall be 1, 2, 4, 8, 12, or 16.</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.LatticeFormGouraudShadedTriangleMesh.GetVerticesPerRow">
            <summary>Gets the number of vertices in each row of the lattice.</summary>
            <returns>the number of vertices. Can only be greater than 1.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.LatticeFormGouraudShadedTriangleMesh.SetVerticesPerRow(System.Int32)">
            <summary>Sets the number of vertices in each row of the lattice.</summary>
            <remarks>
            Sets the number of vertices in each row of the lattice.
            The number of rows need not be specified.
            </remarks>
            <param name="verticesPerRow">the number of vertices to be set. Shall be greater than 1.</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.LatticeFormGouraudShadedTriangleMesh.GetDecode">
            <summary>
            Gets the
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            of numbers specifying how to map vertex coordinates and colour components
            into the appropriate ranges of values. The ranges shall be specified as follows:
            [x_min x_max y_min y_max c1_min c1_max … cn_min cn_max].
            Only one pair of color values shall be specified if a Function entry is present.
            </summary>
            <returns>
            the
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            Decode object.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.LatticeFormGouraudShadedTriangleMesh.SetDecode(System.Single[])">
            <summary>
            Sets the
            <c>float[]</c>
            of numbers specifying how to map vertex coordinates and colour components
            into the appropriate ranges of values. The ranges shall be specified as follows:
            [x_min x_max y_min y_max c1_min c1_max … cn_min cn_max].
            Only one pair of color values shall be specified if a Function entry is present.
            </summary>
            <param name="decode">
            the
            <c>float[]</c>
            of Decode object to set.
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.LatticeFormGouraudShadedTriangleMesh.SetDecode(iText.Kernel.Pdf.PdfArray)">
            <summary>
            Sets the
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            of numbers specifying how to map vertex coordinates and colour components
            into the appropriate ranges of values. The ranges shall be specified as follows:
            [x_min x_max y_min y_max c1_min c1_max … cn_min cn_max].
            Only one pair of color values shall be specified if a Function entry is present.
            </summary>
            <param name="decode">
            the
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            Decode object to set.
            </param>
        </member>
        <member name="T:iText.Kernel.Pdf.Colorspace.PdfShading.CoonsPatchMesh">
            <summary>
            The class that extends
            <see cref="T:iText.Kernel.Pdf.Colorspace.PdfShading"/>
            class and is in charge of Shading Dictionary with
            Coons Patch mesh type.
            This type of shading is constructed from one or more colour patches, each bounded by four cubic Bézier curves.
            Degenerate Bézier curves are allowed and are useful for certain graphical effects.
            At least one complete patch shall be specified.
            The shape of patch is defined by 12 control points.
            Colours are specified for each corner of the unit square,
            and bilinear interpolation is used to fill in colours over the entire unit square.
            Coordinates are mapped from the unit square into a four-sided patch whose sides are not necessarily linear.
            The mapping is continuous: the corners of the unit square map to corners of the patch
            and the sides of the unit square map to sides of the patch.
            For the format of data stream, that defines patches (see ISO-320001 Table 85).
            If the shading dictionary contains a Function entry, the colour data for each corner of a patch
            shall be specified by a single parametric value t rather than by n separate colour components c1...cn.
            </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.CoonsPatchMesh.#ctor(iText.Kernel.Pdf.Colorspace.PdfColorSpace,System.Int32,System.Int32,System.Int32,System.Single[])">
            <summary>Creates the new instance of the class.</summary>
            <param name="cs">
            the
            <see cref="T:iText.Kernel.Pdf.Colorspace.PdfColorSpace"/>
            object in which colour values shall be expressed.
            The special Pattern space isn't excepted.
            </param>
            <param name="bitsPerCoordinate">
            the number of bits used to represent each vertex coordinate.
            The value shall be 1, 2, 4, 8, 12, 16, 24, or 32.
            </param>
            <param name="bitsPerComponent">
            the number of bits used to represent each colour component.
            The value shall be 1, 2, 4, 8, 12, or 16.
            </param>
            <param name="bitsPerFlag">
            the number of bits used to represent the edge flag for each vertex.
            The value of BitsPerFlag shall be 2, 4, or 8,
            but only the least significant 2 bits in each flag value shall be used.
            The value for the edge flag shall be 0, 1, 2 or 3.
            </param>
            <param name="decode">
            the
            <c>int[]</c>
            of numbers specifying how to map vertex coordinates and colour components
            into the appropriate ranges of values. The ranges shall be specified as follows:
            [x_min x_max y_min y_max c1_min c1_max … cn_min cn_max].
            Only one pair of color values shall be specified if a Function entry is present.
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.CoonsPatchMesh.#ctor(iText.Kernel.Pdf.Colorspace.PdfColorSpace,System.Int32,System.Int32,System.Int32,iText.Kernel.Pdf.PdfArray)">
            <summary>Creates the new instance of the class.</summary>
            <param name="cs">
            the
            <see cref="T:iText.Kernel.Pdf.Colorspace.PdfColorSpace"/>
            object in which colour values shall be expressed.
            The special Pattern space isn't excepted.
            </param>
            <param name="bitsPerCoordinate">
            the number of bits used to represent each vertex coordinate.
            The value shall be 1, 2, 4, 8, 12, 16, 24, or 32.
            </param>
            <param name="bitsPerComponent">
            the number of bits used to represent each colour component.
            The value shall be 1, 2, 4, 8, 12, or 16.
            </param>
            <param name="bitsPerFlag">
            the number of bits used to represent the edge flag for each vertex.
            The value of BitsPerFlag shall be 2, 4, or 8,
            but only the least significant 2 bits in each flag value shall be used.
            The value for the edge flag shall be 0, 1, 2 or 3.
            </param>
            <param name="decode">
            the
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            of numbers specifying how to map vertex coordinates and colour components
            into the appropriate ranges of values. The ranges shall be specified as follows:
            [x_min x_max y_min y_max c1_min c1_max … cn_min cn_max].
            Only one pair of color values shall be specified if a Function entry is present.
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.CoonsPatchMesh.GetBitsPerCoordinate">
            <summary>Gets the number of bits used to represent each vertex coordinate.</summary>
            <returns>the number of bits. Can be 1, 2, 4, 8, 12, 16, 24, or 32.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.CoonsPatchMesh.SetBitsPerCoordinate(System.Int32)">
            <summary>Sets the number of bits used to represent each vertex coordinate.</summary>
            <param name="bitsPerCoordinate">the number of bits to be set. Shall be 1, 2, 4, 8, 12, 16, 24, or 32.</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.CoonsPatchMesh.GetBitsPerComponent">
            <summary>Gets the number of bits used to represent each colour component.</summary>
            <returns>the number of bits. Can be 1, 2, 4, 8, 12, or 16.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.CoonsPatchMesh.SetBitsPerComponent(System.Int32)">
            <summary>Sets the number of bits used to represent each colour component.</summary>
            <param name="bitsPerComponent">the number of bits to be set. Shall be 1, 2, 4, 8, 12, or 16.</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.CoonsPatchMesh.GetBitsPerFlag">
            <summary>Gets the number of bits used to represent the edge flag for each vertex.</summary>
            <remarks>
            Gets the number of bits used to represent the edge flag for each vertex.
            But only the least significant 2 bits in each flag value shall be used.
            The valid flag values are 0, 1, 2 or 3.
            </remarks>
            <returns>the number of bits. Can be 2, 4 or 8.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.CoonsPatchMesh.SetBitsPerFlag(System.Int32)">
            <summary>Sets the number of bits used to represent the edge flag for each vertex.</summary>
            <remarks>
            Sets the number of bits used to represent the edge flag for each vertex.
            But only the least significant 2 bits in each flag value shall be used.
            The valid flag values are 0, 1, 2 or 3.
            </remarks>
            <param name="bitsPerFlag">the number of bits to be set. Shall be 2, 4 or 8.</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.CoonsPatchMesh.GetDecode">
            <summary>
            Gets the
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            of numbers specifying how to map vertex coordinates and colour components
            into the appropriate ranges of values. The ranges shall be specified as follows:
            [x_min x_max y_min y_max c1_min c1_max … cn_min cn_max].
            Only one pair of color values shall be specified if a Function entry is present.
            </summary>
            <returns>
            the
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            Decode object.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.CoonsPatchMesh.SetDecode(System.Single[])">
            <summary>
            Sets the
            <c>float[]</c>
            of numbers specifying how to map vertex coordinates and colour components
            into the appropriate ranges of values. The ranges shall be specified as follows:
            [x_min x_max y_min y_max c1_min c1_max … cn_min cn_max].
            Only one pair of color values shall be specified if a Function entry is present.
            </summary>
            <param name="decode">
            the
            <c>float[]</c>
            of Decode object to set.
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.CoonsPatchMesh.SetDecode(iText.Kernel.Pdf.PdfArray)">
            <summary>
            Sets the
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            of numbers specifying how to map vertex coordinates and colour components
            into the appropriate ranges of values. The ranges shall be specified as follows:
            [x_min x_max y_min y_max c1_min c1_max … cn_min cn_max].
            Only one pair of color values shall be specified if a Function entry is present.
            </summary>
            <param name="decode">
            the
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            Decode object to set.
            </param>
        </member>
        <member name="T:iText.Kernel.Pdf.Colorspace.PdfShading.TensorProductPatchMesh">
            <summary>
            The class that extends
            <see cref="T:iText.Kernel.Pdf.Colorspace.PdfShading"/>
            class and is in charge of Shading Dictionary with
            Tensor-Product Patch mesh type.
            This type of shading is identical to
            <see cref="T:iText.Kernel.Pdf.Colorspace.PdfShading.CoonsPatchMesh"/>
            , except that it's based on a
            bicubic tensor-product patch defined by 16 control points.
            For the format of data stream, that defines patches, see ISO-320001 Table 86.
            </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.TensorProductPatchMesh.#ctor(iText.Kernel.Pdf.Colorspace.PdfColorSpace,System.Int32,System.Int32,System.Int32,System.Single[])">
            <summary>Creates the new instance of the class.</summary>
            <param name="cs">
            the
            <see cref="T:iText.Kernel.Pdf.Colorspace.PdfColorSpace"/>
            object in which colour values shall be expressed.
            The special Pattern space isn't excepted.
            </param>
            <param name="bitsPerCoordinate">
            the number of bits used to represent each vertex coordinate.
            The value shall be 1, 2, 4, 8, 12, 16, 24, or 32.
            </param>
            <param name="bitsPerComponent">
            the number of bits used to represent each colour component.
            The value shall be 1, 2, 4, 8, 12, or 16.
            </param>
            <param name="bitsPerFlag">
            the number of bits used to represent the edge flag for each vertex.
            The value of BitsPerFlag shall be 2, 4, or 8,
            but only the least significant 2 bits in each flag value shall be used.
            The value for the edge flag shall be 0, 1, 2 or 3.
            </param>
            <param name="decode">
            the
            <c>int[]</c>
            of numbers specifying how to map vertex coordinates and colour components
            into the appropriate ranges of values. The ranges shall be specified as follows:
            [x_min x_max y_min y_max c1_min c1_max … cn_min cn_max].
            Only one pair of color values shall be specified if a Function entry is present.
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.TensorProductPatchMesh.#ctor(iText.Kernel.Pdf.Colorspace.PdfColorSpace,System.Int32,System.Int32,System.Int32,iText.Kernel.Pdf.PdfArray)">
            <summary>Creates the new instance of the class.</summary>
            <param name="cs">
            the
            <see cref="T:iText.Kernel.Pdf.Colorspace.PdfColorSpace"/>
            object in which colour values shall be expressed.
            The special Pattern space isn't excepted.
            </param>
            <param name="bitsPerCoordinate">
            the number of bits used to represent each vertex coordinate.
            The value shall be 1, 2, 4, 8, 12, 16, 24, or 32.
            </param>
            <param name="bitsPerComponent">
            the number of bits used to represent each colour component.
            The value shall be 1, 2, 4, 8, 12, or 16.
            </param>
            <param name="bitsPerFlag">
            the number of bits used to represent the edge flag for each vertex.
            The value of BitsPerFlag shall be 2, 4, or 8,
            but only the least significant 2 bits in each flag value shall be used.
            The value for the edge flag shall be 0, 1, 2 or 3.
            </param>
            <param name="decode">
            the
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            of numbers specifying how to map vertex coordinates and colour components
            into the appropriate ranges of values. The ranges shall be specified as follows:
            [x_min x_max y_min y_max c1_min c1_max … cn_min cn_max].
            Only one pair of color values shall be specified if a Function entry is present.
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.TensorProductPatchMesh.GetBitsPerCoordinate">
            <summary>Gets the number of bits used to represent each vertex coordinate.</summary>
            <returns>the number of bits. Can be 1, 2, 4, 8, 12, 16, 24, or 32.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.TensorProductPatchMesh.SetBitsPerCoordinate(System.Int32)">
            <summary>Sets the number of bits used to represent each vertex coordinate.</summary>
            <param name="bitsPerCoordinate">the number of bits to be set. Shall be 1, 2, 4, 8, 12, 16, 24, or 32.</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.TensorProductPatchMesh.GetBitsPerComponent">
            <summary>Gets the number of bits used to represent each colour component.</summary>
            <returns>the number of bits. Can be 1, 2, 4, 8, 12, or 16.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.TensorProductPatchMesh.SetBitsPerComponent(System.Int32)">
            <summary>Sets the number of bits used to represent each colour component.</summary>
            <param name="bitsPerComponent">the number of bits to be set. Shall be 1, 2, 4, 8, 12, or 16.</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.TensorProductPatchMesh.GetBitsPerFlag">
            <summary>Gets the number of bits used to represent the edge flag for each vertex.</summary>
            <remarks>
            Gets the number of bits used to represent the edge flag for each vertex.
            But only the least significant 2 bits in each flag value shall be used.
            The valid flag values are 0, 1, 2 or 3.
            </remarks>
            <returns>the number of bits. Can be 2, 4 or 8.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.TensorProductPatchMesh.SetBitsPerFlag(System.Int32)">
            <summary>Sets the number of bits used to represent the edge flag for each vertex.</summary>
            <remarks>
            Sets the number of bits used to represent the edge flag for each vertex.
            But only the least significant 2 bits in each flag value shall be used.
            The valid flag values are 0, 1, 2 or 3.
            </remarks>
            <param name="bitsPerFlag">the number of bits to be set. Shall be 2, 4 or 8.</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.TensorProductPatchMesh.GetDecode">
            <summary>
            Gets the
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            of numbers specifying how to map vertex coordinates and colour components
            into the appropriate ranges of values. The ranges shall be specified as follows:
            [x_min x_max y_min y_max c1_min c1_max … cn_min cn_max].
            Only one pair of color values shall be specified if a Function entry is present.
            </summary>
            <returns>
            the
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            Decode object.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.TensorProductPatchMesh.SetDecode(System.Single[])">
            <summary>
            Sets the
            <c>float[]</c>
            of numbers specifying how to map vertex coordinates and colour components
            into the appropriate ranges of values. The ranges shall be specified as follows:
            [x_min x_max y_min y_max c1_min c1_max … cn_min cn_max].
            Only one pair of color values shall be specified if a Function entry is present.
            </summary>
            <param name="decode">
            the
            <c>float[]</c>
            of Decode object to set.
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfShading.TensorProductPatchMesh.SetDecode(iText.Kernel.Pdf.PdfArray)">
            <summary>
            Sets the
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            of numbers specifying how to map vertex coordinates and colour components
            into the appropriate ranges of values. The ranges shall be specified as follows:
            [x_min x_max y_min y_max c1_min c1_max … cn_min cn_max].
            Only one pair of color values shall be specified if a Function entry is present.
            </summary>
            <param name="decode">
            the
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            Decode object to set.
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfSpecialCs.Flush">
            <summary>
            To manually flush a
            <c>PdfObject</c>
            behind this wrapper, you have to ensure
            that this object is added to the document, i.e. it has an indirect reference.
            Basically this means that before flushing you need to explicitly call
            <see cref="M:iText.Kernel.Pdf.PdfObjectWrapper`1.MakeIndirect(iText.Kernel.Pdf.PdfDocument)"/>
            .
            For example: wrapperInstance.makeIndirect(document).flush();
            Note that not every wrapper require this, only those that have such warning in documentation.
            </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Colorspace.PdfSpecialCs.UncoloredTilingPattern.Flush">
            <summary>
            To manually flush a
            <c>PdfObject</c>
            behind this wrapper, you have to ensure
            that this object is added to the document, i.e. it has an indirect reference.
            Basically this means that before flushing you need to explicitly call
            <see cref="M:iText.Kernel.Pdf.PdfObjectWrapper`1.MakeIndirect(iText.Kernel.Pdf.PdfDocument)"/>
            .
            For example: wrapperInstance.makeIndirect(document).flush();
            Note that not every wrapper require this, only those that have such warning in documentation.
            </summary>
        </member>
        <member name="T:iText.Kernel.Pdf.CompressionConstants">
            <summary>
            Compression constants for <see cref="T:iText.Kernel.Pdf.PdfStream"/>. 
            </summary>
        </member>
        <member name="F:iText.Kernel.Pdf.CompressionConstants.UNDEFINED_COMPRESSION">
            <summary>A possible compression level.</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.CompressionConstants.DEFAULT_COMPRESSION">
            <summary>A possible compression level.</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.CompressionConstants.NO_COMPRESSION">
            <summary>A possible compression level.</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.CompressionConstants.BEST_SPEED">
            <summary>A possible compression level.</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.CompressionConstants.BEST_COMPRESSION">
            <summary>A possible compression level.</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.DocumentProperties.SetEventCountingMetaInfo(iText.Kernel.Counter.Event.IMetaInfo)">
            <summary>Sets document meta info.</summary>
            <remarks>
            Sets document meta info. This meta info will be passed to the
            <see cref="T:iText.Kernel.Counter.EventCounter"/>
            with
            <see cref="T:iText.Kernel.Counter.Event.CoreEvent"/>
            and can be used to determine event origin.
            </remarks>
            <param name="metaInfo">meta info to set</param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.DocumentProperties"/>
            instance
            </returns>
        </member>
        <member name="T:iText.Kernel.Pdf.EncryptionConstants">
            <summary>
            Encryption constants for
            <see cref="M:iText.Kernel.Pdf.WriterProperties.SetStandardEncryption(System.Byte[],System.Byte[],System.Int32,System.Int32)"/>
            .
            </summary>
        </member>
        <member name="F:iText.Kernel.Pdf.EncryptionConstants.STANDARD_ENCRYPTION_40">
            <summary>Type of encryption.</summary>
            <remarks>Type of encryption. RC4 encryption algorithm will be used with the key length of 40 bits.</remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.EncryptionConstants.STANDARD_ENCRYPTION_128">
            <summary>Type of encryption.</summary>
            <remarks>Type of encryption. RC4 encryption algorithm will be used with the key length of 128 bits.</remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.EncryptionConstants.ENCRYPTION_AES_128">
            <summary>Type of encryption.</summary>
            <remarks>Type of encryption. AES encryption algorithm will be used with the key length of 128 bits.</remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.EncryptionConstants.ENCRYPTION_AES_256">
            <summary>Type of encryption.</summary>
            <remarks>Type of encryption. AES encryption algorithm will be used with the key length of 256 bits.</remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.EncryptionConstants.DO_NOT_ENCRYPT_METADATA">
            <summary>Add this to the mode to keep the metadata in clear text.</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.EncryptionConstants.EMBEDDED_FILES_ONLY">
            <summary>Add this to the mode to keep encrypt only the embedded files.</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.EncryptionConstants.ALLOW_PRINTING">
            <summary>The operation permitted when the document is opened with the user password.</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.EncryptionConstants.ALLOW_MODIFY_CONTENTS">
            <summary>The operation permitted when the document is opened with the user password.</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.EncryptionConstants.ALLOW_COPY">
            <summary>The operation permitted when the document is opened with the user password.</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.EncryptionConstants.ALLOW_MODIFY_ANNOTATIONS">
            <summary>The operation permitted when the document is opened with the user password.</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.EncryptionConstants.ALLOW_FILL_IN">
            <summary>The operation permitted when the document is opened with the user password.</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.EncryptionConstants.ALLOW_SCREENREADERS">
            <summary>The operation permitted when the document is opened with the user password.</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.EncryptionConstants.ALLOW_ASSEMBLY">
            <summary>The operation permitted when the document is opened with the user password.</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.EncryptionConstants.ALLOW_DEGRADED_PRINTING">
            <summary>The operation permitted when the document is opened with the user password.</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.EncryptionConstants.ENCRYPTION_MASK">
            <summary>Mask to separate the encryption type from the encryption mode.</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.EncryptionProperties.userPassword">
            <summary>StandardEncryption properties</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.EncryptionProperties.publicCertificates">
            <summary>PublicKeyEncryption properties</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.EncryptionProperties.SetStandardEncryption(System.Byte[],System.Byte[],System.Int32,System.Int32)">
            <summary>Sets the encryption options for the document.</summary>
            <remarks>
            Sets the encryption options for the document. The userPassword and the
            ownerPassword can be null or have zero length. In this case the ownerPassword
            is replaced by a random string. The open permissions for the document can be
            ALLOW_PRINTING, ALLOW_MODIFY_CONTENTS, ALLOW_COPY, ALLOW_MODIFY_ANNOTATIONS,
            ALLOW_FILL_IN, ALLOW_SCREENREADERS, ALLOW_ASSEMBLY and ALLOW_DEGRADED_PRINTING.
            The permissions can be combined by ORing them.
            See
            <see cref="T:iText.Kernel.Pdf.EncryptionConstants"/>
            .
            </remarks>
            <param name="userPassword">the user password. Can be null or empty</param>
            <param name="ownerPassword">the owner password. Can be null or empty</param>
            <param name="permissions">the user permissions</param>
            <param name="encryptionAlgorithm">
            the type of encryption. It can be one of STANDARD_ENCRYPTION_40, STANDARD_ENCRYPTION_128,
            ENCRYPTION_AES128 or ENCRYPTION_AES256
            Optionally DO_NOT_ENCRYPT_METADATA can be ored to output the metadata in cleartext
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.EncryptionProperties.SetPublicKeyEncryption(Org.BouncyCastle.X509.X509Certificate[],System.Int32[],System.Int32)">
            <summary>Sets the certificate encryption options for the document.</summary>
            <remarks>
            Sets the certificate encryption options for the document. An array of one or more public certificates
            must be provided together with an array of the same size for the permissions for each certificate.
            The open permissions for the document can be
            AllowPrinting, AllowModifyContents, AllowCopy, AllowModifyAnnotations,
            AllowFillIn, AllowScreenReaders, AllowAssembly and AllowDegradedPrinting.
            The permissions can be combined by ORing them.
            Optionally DO_NOT_ENCRYPT_METADATA can be ORed to output the metadata in cleartext
            See
            <see cref="T:iText.Kernel.Pdf.EncryptionConstants"/>
            .
            </remarks>
            <param name="certs">the public certificates to be used for the encryption</param>
            <param name="permissions">the user permissions for each of the certificates</param>
            <param name="encryptionAlgorithm">
            the type of encryption. It can be one of STANDARD_ENCRYPTION_40, STANDARD_ENCRYPTION_128,
            ENCRYPTION_AES128 or ENCRYPTION_AES256.
            </param>
        </member>
        <member name="T:iText.Kernel.Pdf.Extgstate.PdfExtGState">
            <summary>Graphics state parameter dictionary wrapper.</summary>
            <remarks>
            Graphics state parameter dictionary wrapper.
            See ISO-320001, 8.4.5 Graphics State Parameter Dictionaries.
            </remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.Extgstate.PdfExtGState.BM_NORMAL">
            <summary>Standard separable blend mode.</summary>
            <remarks>Standard separable blend mode. See ISO-320001, table 136</remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.Extgstate.PdfExtGState.BM_MULTIPLY">
            <summary>Standard separable blend mode.</summary>
            <remarks>Standard separable blend mode. See ISO-320001, table 136</remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.Extgstate.PdfExtGState.BM_SCREEN">
            <summary>Standard separable blend mode.</summary>
            <remarks>Standard separable blend mode. See ISO-320001, table 136</remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.Extgstate.PdfExtGState.BM_OVERLAY">
            <summary>Standard separable blend mode.</summary>
            <remarks>Standard separable blend mode. See ISO-320001, table 136</remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.Extgstate.PdfExtGState.BM_DARKEN">
            <summary>Standard separable blend mode.</summary>
            <remarks>Standard separable blend mode. See ISO-320001, table 136</remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.Extgstate.PdfExtGState.BM_LIGHTEN">
            <summary>Standard separable blend mode.</summary>
            <remarks>Standard separable blend mode. See ISO-320001, table 136</remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.Extgstate.PdfExtGState.BM_COLOR_DODGE">
            <summary>Standard separable blend mode.</summary>
            <remarks>Standard separable blend mode. See ISO-320001, table 136</remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.Extgstate.PdfExtGState.BM_COLOR_BURN">
            <summary>Standard separable blend mode.</summary>
            <remarks>Standard separable blend mode. See ISO-320001, table 136</remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.Extgstate.PdfExtGState.BM_HARD_LIGHT">
            <summary>Standard separable blend mode.</summary>
            <remarks>Standard separable blend mode. See ISO-320001, table 136</remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.Extgstate.PdfExtGState.BM_SOFT_LIGHT">
            <summary>Standard separable blend mode.</summary>
            <remarks>Standard separable blend mode. See ISO-320001, table 136</remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.Extgstate.PdfExtGState.BM_DIFFERENCE">
            <summary>Standard separable blend mode.</summary>
            <remarks>Standard separable blend mode. See ISO-320001, table 136</remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.Extgstate.PdfExtGState.BM_EXCLUSION">
            <summary>Standard separable blend mode.</summary>
            <remarks>Standard separable blend mode. See ISO-320001, table 136</remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.Extgstate.PdfExtGState.BM_HUE">
            <summary>Standard nonseparable blend mode.</summary>
            <remarks>Standard nonseparable blend mode. See ISO-320001, table 137</remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.Extgstate.PdfExtGState.BM_SATURATION">
            <summary>Standard nonseparable blend mode.</summary>
            <remarks>Standard nonseparable blend mode. See ISO-320001, table 137</remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.Extgstate.PdfExtGState.BM_COLOR">
            <summary>Standard nonseparable blend mode.</summary>
            <remarks>Standard nonseparable blend mode. See ISO-320001, table 137</remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.Extgstate.PdfExtGState.BM_LUMINOSITY">
            <summary>Standard nonseparable blend mode.</summary>
            <remarks>Standard nonseparable blend mode. See ISO-320001, table 137</remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Extgstate.PdfExtGState.#ctor(iText.Kernel.Pdf.PdfDictionary)">
            <summary>
            Create instance of graphics state parameter dictionary wrapper
            by existed
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            object
            </summary>
            <param name="pdfObject">instance of graphics state parameter dictionary</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Extgstate.PdfExtGState.#ctor">
            <summary>Create default instance of graphics state parameter dictionary</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Extgstate.PdfExtGState.GetLineWidth">
            <summary>
            Gets line width value,
            <c>LW</c>
            key.
            </summary>
            <returns>
            a
            <c>float</c>
            value if exist, otherwise
            <see langword="null"/>
            .
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Extgstate.PdfExtGState.SetLineWidth(System.Single)">
            <summary>
            Sets line width value,
            <c>LW</c>
            key.
            </summary>
            <param name="lineWidth">
            a
            <c>float</c>
            value.
            </param>
            <returns>object itself.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Extgstate.PdfExtGState.GetLineCapStyle">
            <summary>
            Gets line gap style value,
            <c>LC</c>
            key.
            </summary>
            <returns>0 - butt cap, 1 - round cap, 2 - projecting square cap.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Extgstate.PdfExtGState.SetLineCapStyle(System.Int32)">
            <summary>
            Sets line gap style value,
            <c>LC</c>
            key.
            </summary>
            <param name="lineCapStyle">0 - butt cap, 1 - round cap, 2 - projecting square cap.</param>
            <returns>object itself.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Extgstate.PdfExtGState.GetLineJoinStyle">
            <summary>
            Gets line join style value,
            <c>LJ</c>
            key.
            </summary>
            <returns>0 - miter join (see also miter limit), 1 - round join, 2 - bevel join.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Extgstate.PdfExtGState.SetLineJoinStyle(System.Int32)">
            <summary>
            Sets line join style value,
            <c>LJ</c>
            key.
            </summary>
            <param name="lineJoinStyle">0 - miter join (see also miter limit), 1 - round join, 2 - bevel join.</param>
            <returns>object itself.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Extgstate.PdfExtGState.GetMiterLimit">
            <summary>
            Gets miter limit value,
            <c>ML key</c>
            . See also line join style.
            </summary>
            <returns>
            a
            <c>float</c>
            value if exist, otherwise
            <see langword="null"/>
            .
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Extgstate.PdfExtGState.SetMiterLimit(System.Single)">
            <summary>
            Sets miter limit value,
            <c>ML key</c>
            . See also line join style.
            </summary>
            <param name="miterLimit">
            a
            <c>float</c>
            value.
            </param>
            <returns>object itself.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Extgstate.PdfExtGState.GetDashPattern">
            <summary>
            Gets line dash pattern value,
            <c>D</c>
            key.
            </summary>
            <returns>
            a
            <c>PdfArray</c>
            , that represents line dash pattern.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Extgstate.PdfExtGState.SetDashPattern(iText.Kernel.Pdf.PdfArray)">
            <summary>
            Sets line dash pattern value,
            <c>D</c>
            key.
            </summary>
            <param name="dashPattern">
            a
            <c>PdfArray</c>
            , that represents line dash pattern.
            </param>
            <returns>object itself.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Extgstate.PdfExtGState.GetRenderingIntent">
            <summary>
            Gets rendering intent value,
            <c>RI</c>
            key.
            Valid values are:
            <c>AbsoluteColorimetric</c>
            ,
            <c>RelativeColorimetric</c>
            ,
            <c>Saturation</c>
            ,
            <c>Perceptual</c>
            .
            </summary>
            <returns>
            a
            <c>PdfName</c>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Extgstate.PdfExtGState.SetRenderingIntent(iText.Kernel.Pdf.PdfName)">
            <summary>
            Sets rendering intent value,
            <c>RI</c>
            key.
            </summary>
            <param name="renderingIntent">
            a
            <c>PdfName</c>
            instance, Valid values are:
            <c>AbsoluteColorimetric</c>
            ,
            <c>RelativeColorimetric</c>
            ,
            <c>Saturation</c>
            ,
            <c>Perceptual</c>
            .
            </param>
            <returns>object itself.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Extgstate.PdfExtGState.GetStrokeOverprintFlag">
            <summary>
            Get overprint flag value for <b>stroking</b> operations,
            <c>OP</c>
            key.
            </summary>
            <returns>
            a
            <c>boolean</c>
            value if exist, otherwise
            <see langword="null"/>
            .
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Extgstate.PdfExtGState.SetStrokeOverPrintFlag(System.Boolean)">
            <summary>
            Set overprint flag value for <b>stroking</b> operations,
            <c>OP</c>
            key.
            </summary>
            <param name="strokeOverPrintFlag">
            
            <see langword="true"/>
            , for applying overprint for <b>stroking</b> operations.
            </param>
            <returns>object itself.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Extgstate.PdfExtGState.GetFillOverprintFlag">
            <summary>
            Get overprint flag value for <b>non-stroking</b> operations,
            <c>op</c>
            key.
            </summary>
            <returns>
            a
            <c>boolean</c>
            value if exist, otherwise
            <see langword="null"/>
            .
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Extgstate.PdfExtGState.SetFillOverPrintFlag(System.Boolean)">
            <summary>
            Set overprint flag value for <b>non-stroking</b> operations,
            <c>op</c>
            key.
            </summary>
            <param name="fillOverprintFlag">
            
            <see langword="true"/>
            , for applying overprint for <b>non-stroking</b> operations.
            </param>
            <returns>object itself.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Extgstate.PdfExtGState.GetOverprintMode">
            <summary>
            Get overprint control mode,
            <c>OPM</c>
            key.
            </summary>
            <returns>
            an
            <c>int</c>
            value if exist, otherwise
            <see langword="null"/>
            .
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Extgstate.PdfExtGState.SetOverprintMode(System.Int32)">
            <summary>
            Set overprint control mode,
            <c>OPM</c>
            key.
            </summary>
            <param name="overprintMode">
            an
            <c>int</c>
            value, see ISO-320001, 8.6.7 Overprint Control.
            </param>
            <returns>object itself.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Extgstate.PdfExtGState.GetFont">
            <summary>
            Gets font and size,
            <c>Font</c>
            key.
            </summary>
            <returns>
            a
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            of the form
            <c>[font size]</c>
            , where
            <c>font</c>
            shall be an indirect reference to a font dictionary and
            <c>size</c>
            shall be a number expressed in text space units.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Extgstate.PdfExtGState.SetFont(iText.Kernel.Pdf.PdfArray)">
            <summary>
            Sets font and size,
            <c>Font</c>
            key.
            NOTE: If you want add the font object which has just been created, make sure to register the font with
            <see cref="M:iText.Kernel.Pdf.PdfDocument.AddFont(iText.Kernel.Font.PdfFont)"/>
            method first.
            </summary>
            <param name="font">
            a
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            of the form
            <c>[font size]</c>
            , where
            <paramref name="font"/>
            shall be an indirect reference to a font dictionary and
            <c>size</c>
            shall be a number expressed in text space units.
            </param>
            <returns>object itself.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Extgstate.PdfExtGState.GetBlackGenerationFunction">
            <summary>
            Gets the black-generation function value,
            <c>BG</c>
            .
            </summary>
            <returns>
            a
            <see cref="T:iText.Kernel.Pdf.PdfObject"/>
            , should be
            <see cref="T:iText.Kernel.Pdf.Function.PdfFunction"/>
            .
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Extgstate.PdfExtGState.SetBlackGenerationFunction(iText.Kernel.Pdf.PdfObject)">
            <summary>
            Sets the black-generation function value,
            <c>BG</c>
            .
            </summary>
            <param name="blackGenerationFunction">
            a
            <see cref="T:iText.Kernel.Pdf.PdfObject"/>
            , shall be
            <see cref="T:iText.Kernel.Pdf.Function.PdfFunction"/>
            .
            </param>
            <returns>object itself.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Extgstate.PdfExtGState.GetBlackGenerationFunction2">
            <summary>
            Gets the black-generation function value or
            <c>Default</c>
            ,
            <c>BG2</c>
            key.
            </summary>
            <returns>
            a
            <see cref="T:iText.Kernel.Pdf.PdfObject"/>
            value, should be either
            <see cref="T:iText.Kernel.Pdf.Function.PdfFunction"/>
            or
            <see cref="T:iText.Kernel.Pdf.PdfName"/>
            .
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Extgstate.PdfExtGState.SetBlackGenerationFunction2(iText.Kernel.Pdf.PdfObject)">
            <summary>
            Sets the black-generation function value or
            <c>Default</c>
            ,
            <c>BG2</c>
            key.
            Note, if both
            <c>BG</c>
            and
            <c>BG2</c>
            are present in the same graphics state parameter dictionary,
            <c>BG2</c>
            takes precedence.
            </summary>
            <param name="blackGenerationFunction2">
            a
            <see cref="T:iText.Kernel.Pdf.PdfObject"/>
            value, shall be either
            <see cref="T:iText.Kernel.Pdf.Function.PdfFunction"/>
            or
            <c>Default</c>
            .
            </param>
            <returns>object itself.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Extgstate.PdfExtGState.GetUndercolorRemovalFunction">
            <summary>
            Gets the undercolor-removal function,
            <c>UCR</c>
            key.
            </summary>
            <returns>
            a
            <see cref="T:iText.Kernel.Pdf.PdfObject"/>
            , should be
            <see cref="T:iText.Kernel.Pdf.Function.PdfFunction"/>
            .
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Extgstate.PdfExtGState.SetUndercolorRemovalFunction(iText.Kernel.Pdf.PdfObject)">
            <summary>
            Sets the undercolor-removal function,
            <c>UCR</c>
            key.
            </summary>
            <param name="undercolorRemovalFunction">
            a
            <see cref="T:iText.Kernel.Pdf.PdfObject"/>
            , shall be
            <see cref="T:iText.Kernel.Pdf.Function.PdfFunction"/>
            .
            </param>
            <returns>object itself.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Extgstate.PdfExtGState.GetUndercolorRemovalFunction2">
            <summary>
            Gets the undercolor-removal function value or
            <c>Default</c>
            ,
            <c>UCR2</c>
            key.
            </summary>
            <returns>
            a
            <see cref="T:iText.Kernel.Pdf.PdfObject"/>
            value, should be either
            <see cref="T:iText.Kernel.Pdf.Function.PdfFunction"/>
            or
            <see cref="T:iText.Kernel.Pdf.PdfName"/>
            .
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Extgstate.PdfExtGState.SetUndercolorRemovalFunction2(iText.Kernel.Pdf.PdfObject)">
            <summary>
            Sets the undercolor-removal function value or
            <c>Default</c>
            ,
            <c>UCR2</c>
            key.
            Note, if both
            <c>UCR</c>
            and
            <c>UCR2</c>
            are present in the same graphics state parameter dictionary,
            <c>UCR2</c>
            takes precedence.
            </summary>
            <param name="undercolorRemovalFunction2">
            a
            <see cref="T:iText.Kernel.Pdf.PdfObject"/>
            value, shall be either
            <see cref="T:iText.Kernel.Pdf.Function.PdfFunction"/>
            or
            <c>Default</c>
            .
            </param>
            <returns>object itself.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Extgstate.PdfExtGState.GetTransferFunction">
            <summary>
            Gets the transfer function value,
            <c>TR</c>
            key.
            </summary>
            <returns>
            a
            <see cref="T:iText.Kernel.Pdf.PdfObject"/>
            , should be either
            <see cref="T:iText.Kernel.Pdf.Function.PdfFunction"/>
            ,
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            or
            <see cref="T:iText.Kernel.Pdf.PdfName"/>
            .
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Extgstate.PdfExtGState.SetTransferFunction(iText.Kernel.Pdf.PdfObject)">
            <summary>
            Sets the transfer function value,
            <c>TR</c>
            key.
            </summary>
            <param name="transferFunction">
            a
            <see cref="T:iText.Kernel.Pdf.PdfObject"/>
            , shall be either
            <see cref="T:iText.Kernel.Pdf.Function.PdfFunction"/>
            ,
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            or
            <see cref="T:iText.Kernel.Pdf.PdfName"/>
            .
            </param>
            <returns>object itself.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Extgstate.PdfExtGState.GetTransferFunction2">
            <summary>
            Gets the transfer function value or
            <c>Default</c>
            ,
            <c>TR2</c>
            key.
            </summary>
            <returns>
            a
            <see cref="T:iText.Kernel.Pdf.PdfObject"/>
            , should be either
            <see cref="T:iText.Kernel.Pdf.Function.PdfFunction"/>
            ,
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            or
            <see cref="T:iText.Kernel.Pdf.PdfName"/>
            .
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Extgstate.PdfExtGState.SetTransferFunction2(iText.Kernel.Pdf.PdfObject)">
            <summary>
            Sets the transfer function value or
            <c>Default</c>
            ,
            <c>TR2</c>
            key.
            Note, if both
            <c>TR</c>
            and
            <c>TR2</c>
            are present in the same graphics state parameter dictionary,
            <c>TR2</c>
            takes precedence.
            </summary>
            <param name="transferFunction2">
            a
            <see cref="T:iText.Kernel.Pdf.PdfObject"/>
            , shall be either
            <see cref="T:iText.Kernel.Pdf.Function.PdfFunction"/>
            ,
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            ,
            <see cref="T:iText.Kernel.Pdf.PdfName"/>
            or
            <c>Default</c>
            .
            </param>
            <returns>object itself.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Extgstate.PdfExtGState.GetHalftone">
            <summary>
            Gets the halftone dictionary, stream or
            <c>Default</c>
            ,
            <c>HT</c>
            key.
            </summary>
            <returns>
            a
            <see cref="T:iText.Kernel.Pdf.PdfObject"/>
            , should be either
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            ,
            <see cref="T:iText.Kernel.Pdf.PdfStream"/>
            or
            <see cref="T:iText.Kernel.Pdf.PdfName"/>
            .
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Extgstate.PdfExtGState.SetHalftone(iText.Kernel.Pdf.PdfObject)">
            <summary>
            Sets the halftone or
            <c>Default</c>
            ,
            <c>HT</c>
            key.
            </summary>
            <param name="halftone">
            a
            <see cref="T:iText.Kernel.Pdf.PdfObject"/>
            , shall be either
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            ,
            <see cref="T:iText.Kernel.Pdf.PdfStream"/>
            or
            <see cref="T:iText.Kernel.Pdf.PdfName"/>
            .
            </param>
            <returns>object itself.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Extgstate.PdfExtGState.GetFlatnessTolerance">
            <summary>
            Gets the flatness tolerance value,
            <c>FL</c>
            key.
            </summary>
            <returns>
            a
            <c>float</c>
            value if exist, otherwise
            <see langword="null"/>
            .
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Extgstate.PdfExtGState.SetFlatnessTolerance(System.Single)">
            <summary>
            Sets the flatness tolerance value,
            <c>FL</c>
            key.
            </summary>
            <param name="flatnessTolerance">
            a
            <c>float</c>
            value.
            </param>
            <returns>object itself.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Extgstate.PdfExtGState.GetSmothnessTolerance">
            <summary>
            Gets the smoothness tolerance value,
            <c>SM</c>
            key.
            </summary>
            <returns>
            a
            <c>float</c>
            value if exist, otherwise
            <see langword="null"/>
            .
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Extgstate.PdfExtGState.SetSmoothnessTolerance(System.Single)">
            <summary>
            Sets the smoothness tolerance value,
            <c>SM</c>
            key.
            </summary>
            <param name="smoothnessTolerance">
            a
            <c>float</c>
            value.
            </param>
            <returns>object itself.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Extgstate.PdfExtGState.GetAutomaticStrokeAdjustmentFlag">
            <summary>
            Gets value of an automatic stroke adjustment flag,
            <c>SA</c>
            key.
            </summary>
            <returns>
            a
            <c>boolean</c>
            value if exist, otherwise
            <see langword="null"/>
            .
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Extgstate.PdfExtGState.SetAutomaticStrokeAdjustmentFlag(System.Boolean)">
            <summary>
            Sets value of an automatic stroke adjustment flag,
            <c>SA</c>
            key.
            </summary>
            <param name="strokeAdjustment">
            a
            <c>boolean</c>
            value.
            </param>
            <returns>object itself.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Extgstate.PdfExtGState.GetBlendMode">
            <summary>
            Gets the current blend mode for the transparent imaging model,
            <c>BM</c>
            key.
            </summary>
            <returns>
            a
            <see cref="T:iText.Kernel.Pdf.PdfObject"/>
            , should be either
            <see cref="T:iText.Kernel.Pdf.PdfName"/>
            or
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            . array is deprecated in PDF 2.0.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Extgstate.PdfExtGState.SetBlendMode(iText.Kernel.Pdf.PdfObject)">
            <summary>
            Sets the current blend mode for the transparent imaging model,
            <c>BM</c>
            key.
            </summary>
            <param name="blendMode">
            a
            <see cref="T:iText.Kernel.Pdf.PdfObject"/>
            , shall be either
            <see cref="T:iText.Kernel.Pdf.PdfName"/>
            or
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            ; array is deprecated in PDF 2.0.
            </param>
            <returns>object itself.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Extgstate.PdfExtGState.GetSoftMask">
            <summary>
            Gets the current soft mask,
            <c>SMask</c>
            key.
            </summary>
            <returns>
            a
            <see cref="T:iText.Kernel.Pdf.PdfObject"/>
            , should be either
            <see cref="T:iText.Kernel.Pdf.PdfName"/>
            or
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            .
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Extgstate.PdfExtGState.SetSoftMask(iText.Kernel.Pdf.PdfObject)">
            <summary>
            Sets the current soft mask,
            <c>SMask</c>
            key.
            </summary>
            <param name="sMask">
            a
            <see cref="T:iText.Kernel.Pdf.PdfObject"/>
            , shall be either
            <see cref="T:iText.Kernel.Pdf.PdfName"/>
            or
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            .
            </param>
            <returns>object itself.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Extgstate.PdfExtGState.GetStrokeOpacity">
            <summary>
            Gets the current alpha constant, specifying the constant shape or constant opacity value
            for <b>stroking</b> operations in the transparent imaging model,
            <c>CA</c>
            key.
            </summary>
            <returns>
            a
            <c>float</c>
            value if exist, otherwise
            <see langword="null"/>
            .
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Extgstate.PdfExtGState.SetStrokeOpacity(System.Single)">
            <summary>
            Sets the current alpha constant, specifying the constant shape or constant opacity value
            for <b>stroking</b> operations in the transparent imaging model,
            <c>CA</c>
            key.
            </summary>
            <param name="strokingAlphaConstant">
            a
            <c>float</c>
            value.
            </param>
            <returns>object itself.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Extgstate.PdfExtGState.GetFillOpacity">
            <summary>
            Gets the current alpha constant, specifying the constant shape or constant opacity value
            for <b>non-stroking</b> operations in the transparent imaging model,
            <c>ca</c>
            key.
            </summary>
            <returns>
            a
            <c>float</c>
            value if exist, otherwise
            <see langword="null"/>
            .
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Extgstate.PdfExtGState.SetFillOpacity(System.Single)">
            <summary>
            Sets the current alpha constant, specifying the constant shape or constant opacity value
            for <b>non-stroking</b> operations in the transparent imaging model,
            <c>ca</c>
            key.
            </summary>
            <param name="fillingAlphaConstant">
            a
            <c>float</c>
            value.
            </param>
            <returns>object itself.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Extgstate.PdfExtGState.GetAlphaSourceFlag">
            <summary>
            Gets the alpha source flag ("alpha is shape"), specifying whether the current soft mask and alpha constant
            shall be interpreted as shape values (
            <see langword="true"/>
            ) or opacity values (
            <see langword="false"/>
            ),
            <c>AIS</c>
            key.
            </summary>
            <returns>
            a
            <c>boolean</c>
            value if exist, otherwise
            <see langword="null"/>
            .
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Extgstate.PdfExtGState.SetAlphaSourceFlag(System.Boolean)">
            <summary>
            Sets the alpha source flag ("alpha is shape"), specifying whether the current soft mask and alpha constant
            shall be interpreted as shape values (
            <see langword="true"/>
            ) or opacity values (
            <see langword="false"/>
            ),
            <c>AIS</c>
            key.
            </summary>
            <param name="alphaSourceFlag">
            if
            <see langword="true"/>
            - alpha as shape values, if
            <see langword="false"/>
            — as opacity values.
            </param>
            <returns>object itself.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Extgstate.PdfExtGState.GetTextKnockoutFlag">
            <summary>
            Gets the text knockout flag, which determine the behaviour of overlapping glyphs
            within a text object in the transparent imaging model,
            <c>TK</c>
            key.
            </summary>
            <returns>
            a
            <c>boolean</c>
            value if exist, otherwise
            <see langword="null"/>
            .
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Extgstate.PdfExtGState.SetTextKnockoutFlag(System.Boolean)">
            <summary>
            Sets the text knockout flag, which determine the behaviour of overlapping glyphs
            within a text object in the transparent imaging model,
            <c>TK</c>
            key.
            </summary>
            <param name="textKnockoutFlag">
            
            <see langword="true"/>
            if enabled.
            </param>
            <returns>object itself.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Extgstate.PdfExtGState.SetUseBlackPointCompensation(System.Boolean)">
            <summary>PDF 2.0.</summary>
            <remarks>
            PDF 2.0. This graphics state parameter controls whether black point
            compensation is performed while doing CIE-based colour conversions.
            </remarks>
            <param name="useBlackPointCompensation"><code>true</code> to enable, <code>false</code> to disable</param>
            <returns>object itself</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Extgstate.PdfExtGState.IsBlackPointCompensationUsed">
            <summary>PDF 2.0.</summary>
            <remarks>PDF 2.0. Checks whether the black point compensation is performed while doing CIE-based colour conversions.
                </remarks>
            <returns>
            <code>true</code> if black point compensation is used, <code>false</code> if it is not used, or
            <code>null</code> is the value is set to Default, or not set at all
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Extgstate.PdfExtGState.SetHalftoneOrigin(System.Single,System.Single)">
            <summary>PDF 2.0.</summary>
            <remarks>PDF 2.0. Sets halftone origin</remarks>
            <param name="x">X location of the halftone origin in the current coordinate system</param>
            <param name="y">Y location of the halftone origin in the current coordinate system</param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Extgstate.PdfExtGState"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Extgstate.PdfExtGState.GetHalftoneOrigin">
            <summary>PDF 2.0.</summary>
            <remarks>PDF 2.0. Gets halftone origin</remarks>
            <returns>
            an array of two values specifying X and Y values of the halftone origin in the current coordinate system,
            respectively, or <code>null</code> if halftone origin is not specified
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Extgstate.PdfExtGState.Put(iText.Kernel.Pdf.PdfName,iText.Kernel.Pdf.PdfObject)">
            <summary>Puts the value into Graphics state parameter dictionary and associates it with the specified key.
                </summary>
            <remarks>
            Puts the value into Graphics state parameter dictionary and associates it with the specified key.
            If the key is already present, it will override the old value with the specified one.
            </remarks>
            <param name="key">key to insert or to override</param>
            <param name="value">the value to associate with the specified key</param>
            <returns>object itself.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Extgstate.PdfExtGState.Flush">
            <summary>
            To manually flush a
            <c>PdfObject</c>
            behind this wrapper, you have to ensure
            that this object is added to the document, i.e. it has an indirect reference.
            Basically this means that before flushing you need to explicitly call
            <see cref="M:iText.Kernel.Pdf.PdfObjectWrapper`1.MakeIndirect(iText.Kernel.Pdf.PdfDocument)"/>
            .
            For example: wrapperInstance.makeIndirect(document).flush();
            Note that not every wrapper require this, only those that have such warning in documentation.
            </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Extgstate.PdfExtGState.IsWrappedObjectMustBeIndirect">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Filespec.PdfEncryptedPayloadFileSpecFactory.Create(iText.Kernel.Pdf.PdfDocument,System.Byte[],iText.Kernel.Pdf.PdfEncryptedPayload,iText.Kernel.Pdf.PdfName,iText.Kernel.Pdf.PdfDictionary)">
            <summary>Embed a encrypted payload to a PdfDocument.</summary>
            <param name="doc">PdfDocument to add the file to</param>
            <param name="fileStore">byte[] containing encrypted file</param>
            <param name="encryptedPayload">the encrypted payload dictionary</param>
            <param name="mimeType">mime-type of the file</param>
            <param name="fileParameter">Pdfdictionary containing file parameters</param>
            <returns>PdfFileSpec containing the file specification of the encrypted payload</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Filespec.PdfEncryptedPayloadFileSpecFactory.Create(iText.Kernel.Pdf.PdfDocument,System.Byte[],iText.Kernel.Pdf.PdfEncryptedPayload,iText.Kernel.Pdf.PdfDictionary)">
            <summary>Embed a encrypted payload to a PdfDocument.</summary>
            <param name="doc">PdfDocument to add the file to</param>
            <param name="fileStore">byte[] containing the file</param>
            <param name="encryptedPayload">the encrypted payload dictionary</param>
            <param name="fileParameter">Pdfdictionary containing file parameters</param>
            <returns>PdfFileSpec containing the file specification of the encrypted payload</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Filespec.PdfEncryptedPayloadFileSpecFactory.Create(iText.Kernel.Pdf.PdfDocument,System.Byte[],iText.Kernel.Pdf.PdfEncryptedPayload)">
            <summary>Embed a encrypted payload to a PdfDocument.</summary>
            <param name="doc">PdfDocument to add the file to</param>
            <param name="fileStore">byte[] containing the file</param>
            <param name="encryptedPayload">the encrypted payload dictionary</param>
            <returns>PdfFileSpec containing the file specification of the encrypted payload</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Filespec.PdfEncryptedPayloadFileSpecFactory.Create(iText.Kernel.Pdf.PdfDocument,System.String,iText.Kernel.Pdf.PdfEncryptedPayload,iText.Kernel.Pdf.PdfName,iText.Kernel.Pdf.PdfDictionary)">
            <summary>Embed a encrypted payload to a PdfDocument.</summary>
            <param name="doc">PdfDocument to add the file to</param>
            <param name="filePath">path to the encrypted file</param>
            <param name="encryptedPayload">the encrypted payload dictionary</param>
            <param name="mimeType">mime-type of the file</param>
            <param name="fileParameter">Pdfdictionary containing file parameters</param>
            <returns>PdfFileSpec containing the file specification of the encrypted payload</returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Kernel.Pdf.Filespec.PdfEncryptedPayloadFileSpecFactory.Create(iText.Kernel.Pdf.PdfDocument,System.String,iText.Kernel.Pdf.PdfEncryptedPayload,iText.Kernel.Pdf.PdfName)">
            <summary>Embed a encrypted payload to a PdfDocument.</summary>
            <param name="doc">PdfDocument to add the file to</param>
            <param name="filePath">path to the encrypted file</param>
            <param name="encryptedPayload">the encrypted payload dictionary</param>
            <param name="mimeType">mime-type of the file</param>
            <returns>PdfFileSpec containing the file specification of the encrypted payload</returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Kernel.Pdf.Filespec.PdfEncryptedPayloadFileSpecFactory.Create(iText.Kernel.Pdf.PdfDocument,System.String,iText.Kernel.Pdf.PdfEncryptedPayload)">
            <summary>Embed a encrypted payload to a PdfDocument.</summary>
            <param name="doc">PdfDocument to add the file to</param>
            <param name="filePath">path to the encrypted file</param>
            <param name="encryptedPayload">the encrypted payload dictionary</param>
            <returns>PdfFileSpec containing the file specification of the encrypted payload</returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Kernel.Pdf.Filespec.PdfEncryptedPayloadFileSpecFactory.Create(iText.Kernel.Pdf.PdfDocument,System.IO.Stream,iText.Kernel.Pdf.PdfEncryptedPayload,iText.Kernel.Pdf.PdfName,iText.Kernel.Pdf.PdfDictionary)">
            <summary>Embed a encrypted payload to a PdfDocument.</summary>
            <param name="doc">PdfDocument to add the file to</param>
            <param name="is">stream containing encrypted file</param>
            <param name="encryptedPayload">the encrypted payload dictionary</param>
            <param name="mimeType">mime-type of the file</param>
            <param name="fileParameter">Pdfdictionary containing file parameters</param>
            <returns>PdfFileSpec containing the file specification of the encrypted payload</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Filespec.PdfEncryptedPayloadFileSpecFactory.Create(iText.Kernel.Pdf.PdfDocument,System.IO.Stream,iText.Kernel.Pdf.PdfEncryptedPayload,iText.Kernel.Pdf.PdfName)">
            <summary>Embed a encrypted payload to a PdfDocument.</summary>
            <param name="doc">PdfDocument to add the file to</param>
            <param name="is">stream containing encrypted file</param>
            <param name="encryptedPayload">the encrypted payload dictionary</param>
            <param name="mimeType">mime-type of the file</param>
            <returns>PdfFileSpec containing the file specification of the encrypted payload</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Filespec.PdfEncryptedPayloadFileSpecFactory.Create(iText.Kernel.Pdf.PdfDocument,System.IO.Stream,iText.Kernel.Pdf.PdfEncryptedPayload)">
            <summary>Embed a encrypted payload to a PdfDocument.</summary>
            <param name="doc">PdfDocument to add the file to</param>
            <param name="is">stream containing encrypted file</param>
            <param name="encryptedPayload">the encrypted payload dictionary</param>
            <returns>PdfFileSpec containing the file specification of the encrypted payload</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Filespec.PdfFileSpec.CreateEmbeddedFileSpec(iText.Kernel.Pdf.PdfDocument,System.Byte[],System.String,System.String,iText.Kernel.Pdf.PdfName,iText.Kernel.Pdf.PdfDictionary,iText.Kernel.Pdf.PdfName)">
            <summary>Embed a file to a PdfDocument.</summary>
            <param name="doc">PdfDocument to add the file to</param>
            <param name="fileStore">byte[] containing the file</param>
            <param name="description">file description</param>
            <param name="fileDisplay">actual file name stored in the pdf</param>
            <param name="mimeType">mime-type of the file</param>
            <param name="fileParameter">Pdfdictionary containing fil parameters</param>
            <param name="afRelationshipValue">AFRelationship key value, @see AFRelationshipValue. If <CODE>null</CODE>, @see AFRelationshipValue.Unspecified will be added.
                </param>
            <returns>PdfFileSpec containing the file specification of the file as Pdfobject</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Filespec.PdfFileSpec.CreateEmbeddedFileSpec(iText.Kernel.Pdf.PdfDocument,System.Byte[],System.String,System.String,iText.Kernel.Pdf.PdfDictionary,iText.Kernel.Pdf.PdfName)">
            <summary>Embed a file to a PdfDocument.</summary>
            <param name="doc">PdfDocument to add the file to</param>
            <param name="fileStore">byte[] containing the file</param>
            <param name="fileDisplay">actual file name stored in the pdf</param>
            <param name="fileParameter">Pdfdictionary containing fil parameters</param>
            <param name="afRelationshipValue">AFRelationship key value, @see AFRelationshipValue. If <CODE>null</CODE>, @see AFRelationshipValue.Unspecified will be added.
                </param>
            <returns>PdfFileSpec containing the file specification of the file as Pdfobject</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Filespec.PdfFileSpec.CreateEmbeddedFileSpec(iText.Kernel.Pdf.PdfDocument,System.Byte[],System.String,iText.Kernel.Pdf.PdfDictionary,iText.Kernel.Pdf.PdfName)">
            <summary>Embed a file to a PdfDocument.</summary>
            <param name="doc">PdfDocument to add the file to</param>
            <param name="fileStore">byte[] containing the file</param>
            <param name="fileDisplay">actual file name stored in the pdf</param>
            <param name="fileParameter">Pdfdictionary containing fil parameters</param>
            <param name="afRelationshipValue">AFRelationship key value, @see AFRelationshipValue. If <CODE>null</CODE>, @see AFRelationshipValue.Unspecified will be added.
                </param>
            <returns>PdfFileSpec containing the file specification of the file as Pdfobject</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Filespec.PdfFileSpec.CreateEmbeddedFileSpec(iText.Kernel.Pdf.PdfDocument,System.Byte[],System.String,iText.Kernel.Pdf.PdfName)">
            <summary>Embed a file to a PdfDocument.</summary>
            <param name="doc">PdfDocument to add the file to</param>
            <param name="fileStore">byte[] containing the file</param>
            <param name="fileDisplay">actual file name stored in the pdf</param>
            <param name="afRelationshipValue">AFRelationship key value, @see AFRelationshipValue. If <CODE>null</CODE>, @see AFRelationshipValue.Unspecified will be added.
                </param>
            <returns>PdfFileSpec containing the file specification of the file as Pdfobject</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Filespec.PdfFileSpec.CreateEmbeddedFileSpec(iText.Kernel.Pdf.PdfDocument,System.Byte[],System.String,System.String,iText.Kernel.Pdf.PdfName)">
            <summary>Embed a file to a PdfDocument.</summary>
            <param name="doc">PdfDocument to add the file to</param>
            <param name="fileStore">byte[] containing the file</param>
            <param name="description">file description</param>
            <param name="fileDisplay">actual file name stored in the pdf</param>
            <param name="afRelationshipValue">AFRelationship key value, @see AFRelationshipValue. If <CODE>null</CODE>, @see AFRelationshipValue.Unspecified will be added.
                </param>
            <returns>PdfFileSpec containing the file specification of the file as Pdfobject</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Filespec.PdfFileSpec.CreateEmbeddedFileSpec(iText.Kernel.Pdf.PdfDocument,System.String,System.String,System.String,iText.Kernel.Pdf.PdfName,iText.Kernel.Pdf.PdfDictionary,iText.Kernel.Pdf.PdfName)">
            <summary>Embed a file to a PdfDocument.</summary>
            <param name="doc"/>
            <param name="filePath"/>
            <param name="description"/>
            <param name="fileDisplay"/>
            <param name="mimeType"/>
            <param name="fileParameter"/>
            <param name="afRelationshipValue"/>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Kernel.Pdf.Filespec.PdfFileSpec.CreateEmbeddedFileSpec(iText.Kernel.Pdf.PdfDocument,System.String,System.String,System.String,iText.Kernel.Pdf.PdfName,iText.Kernel.Pdf.PdfName)">
            <summary>Embed a file to a PdfDocument.</summary>
            <param name="doc"/>
            <param name="filePath"/>
            <param name="description"/>
            <param name="fileDisplay"/>
            <param name="mimeType"/>
            <param name="afRelationshipValue"/>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Kernel.Pdf.Filespec.PdfFileSpec.CreateEmbeddedFileSpec(iText.Kernel.Pdf.PdfDocument,System.String,System.String,System.String,iText.Kernel.Pdf.PdfName)">
            <summary>Embed a file to a PdfDocument.</summary>
            <param name="doc"/>
            <param name="filePath"/>
            <param name="description"/>
            <param name="fileDisplay"/>
            <param name="afRelationshipValue"/>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Kernel.Pdf.Filespec.PdfFileSpec.CreateEmbeddedFileSpec(iText.Kernel.Pdf.PdfDocument,System.String,System.String,iText.Kernel.Pdf.PdfName)">
            <summary>Embed a file to a PdfDocument.</summary>
            <param name="doc"/>
            <param name="filePath"/>
            <param name="fileDisplay"/>
            <param name="afRelationshipValue"/>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Kernel.Pdf.Filespec.PdfFileSpec.CreateEmbeddedFileSpec(iText.Kernel.Pdf.PdfDocument,System.IO.Stream,System.String,System.String,iText.Kernel.Pdf.PdfName,iText.Kernel.Pdf.PdfDictionary,iText.Kernel.Pdf.PdfName)">
            <summary>Embed a file to a PdfDocument.</summary>
            <param name="doc"/>
            <param name="is"/>
            <param name="description"/>
            <param name="fileDisplay"/>
            <param name="mimeType"/>
            <param name="fileParameter"/>
            <param name="afRelationshipValue"/>
        </member>
        <member name="M:iText.Kernel.Pdf.Filespec.PdfFileSpec.CreateEmbeddedFileSpec(iText.Kernel.Pdf.PdfDocument,System.IO.Stream,System.String,System.String,iText.Kernel.Pdf.PdfName,iText.Kernel.Pdf.PdfName)">
            <summary>Embed a file to a PdfDocument.</summary>
            <param name="doc"/>
            <param name="is"/>
            <param name="description"/>
            <param name="fileDisplay"/>
            <param name="mimeType"/>
            <param name="afRelationshipValue"/>
        </member>
        <member name="M:iText.Kernel.Pdf.Filespec.PdfFileSpec.CreateEmbeddedFileSpec(iText.Kernel.Pdf.PdfDocument,iText.Kernel.Pdf.PdfStream,System.String,System.String,iText.Kernel.Pdf.PdfName,iText.Kernel.Pdf.PdfName)">
            <summary>Embed a file to a PdfDocument.</summary>
            <param name="doc"/>
            <param name="stream"/>
            <param name="description"/>
            <param name="fileDisplay"/>
            <param name="mimeType"/>
            <param name="afRelationshipValue"/>
        </member>
        <member name="M:iText.Kernel.Pdf.Filespec.PdfFileSpec.CreateEmbeddedFileSpec(iText.Kernel.Pdf.PdfDocument,iText.Kernel.Pdf.PdfStream,System.String,System.String,iText.Kernel.Pdf.PdfName)">
            <summary>Embed a file to a PdfDocument.</summary>
            <param name="doc"/>
            <param name="stream"/>
            <param name="fileDisplay"/>
            <param name="afRelationshipValue"/>
        </member>
        <member name="M:iText.Kernel.Pdf.Filespec.PdfFileSpec.SetThumbnailImage(iText.Kernel.Pdf.Xobject.PdfImageXObject)">
            <summary>PDF 2.0.</summary>
            <remarks>PDF 2.0. Sets a stream object defining the thumbnail image for the file specification.</remarks>
            <param name="thumbnailImage">image used as a thumbnail</param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Filespec.PdfFileSpec"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Filespec.PdfFileSpec.GetThumbnailImage">
            <summary>PDF 2.0.</summary>
            <remarks>PDF 2.0. Gets a stream object defining the thumbnail image for the file specification.</remarks>
            <returns>image used as a thumbnail, or <code>null</code> if it is not set</returns>
        </member>
        <member name="T:iText.Kernel.Pdf.Filters.ASCII85DecodeFilter">
            <summary>Handles ASCII85Decode filter</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Filters.ASCII85DecodeFilter.ASCII85Decode(System.Byte[])">
            <summary>Decodes the input bytes according to ASCII85.</summary>
            <param name="in">the byte[] to be decoded</param>
            <returns>the decoded byte[]</returns>
        </member>
        <member name="T:iText.Kernel.Pdf.Filters.ASCIIHexDecodeFilter">
            <summary>Handles ASCIIHexDecode filter</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Filters.ASCIIHexDecodeFilter.ASCIIHexDecode(System.Byte[])">
            <summary>Decodes a byte[] according to ASCII Hex encoding.</summary>
            <param name="in">byte[] to be decoded</param>
            <returns>decoded byte[]</returns>
        </member>
        <member name="T:iText.Kernel.Pdf.Filters.CCITTFaxDecodeFilter">
            <summary>Handles CCITTFaxDecode filter</summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Filters.DoNothingFilter">
            <summary>A filter that doesn't modify the stream at all</summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Filters.FilterHandlers">
            <summary>Encapsulates filter behavior for PDF streams.</summary>
            <remarks>
            Encapsulates filter behavior for PDF streams.  Classes generally interace with this
            using the static getDefaultFilterHandlers() method, then obtain the desired
            <see cref="T:iText.Kernel.Pdf.Filters.IFilterHandler"/>
            via a lookup.
            </remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.Filters.FilterHandlers.defaults">
            <summary>
            The default
            <see cref="T:iText.Kernel.Pdf.Filters.IFilterHandler"/>
            s used by iText
            </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Filters.FilterHandlers.GetDefaultFilterHandlers">
            <returns>
            the default
            <see cref="T:iText.Kernel.Pdf.Filters.IFilterHandler"/>
            s used by iText
            </returns>
        </member>
        <member name="T:iText.Kernel.Pdf.Filters.FlateDecodeFilter">
            <summary>Handles FlateDecode filter.</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Filters.FlateDecodeFilter.strictDecoding">
            <summary>Defines how the corrupted streams should be treated.</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Filters.FlateDecodeFilter.#ctor">
            <summary>Creates a FlateDecodeFilter.</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Filters.FlateDecodeFilter.#ctor(System.Boolean)">
            <summary>Creates a FlateDecodeFilter.</summary>
            <param name="strictDecoding">defines whether the decoder will try to read a corrupted stream</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Filters.FlateDecodeFilter.IsStrictDecoding">
            <summary>Checks whether the decoder will try to read a corrupted stream (not strict) or not (strict)</summary>
            <returns>true if the decoder will try to read a corrupted stream otherwise false</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Filters.FlateDecodeFilter.SetStrictDecoding(System.Boolean)">
            <summary>Defines how the corrupted streams should be treated.</summary>
            <param name="strict">true if the decoder should try to read a corrupted stream otherwise false</param>
            <returns>the decoder</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Filters.FlateDecodeFilter.FlateDecode(System.Byte[],System.Boolean)">
            <summary>A helper to flateDecode.</summary>
            <param name="in">the input data</param>
            <param name="strict">
            
            <see langword="true"/>
            to read a correct stream.
            <see langword="false"/>
            to try to read a corrupted stream.
            </param>
            <returns>the decoded data</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Filters.FlateDecodeFilter.DecodePredictor(System.Byte[],iText.Kernel.Pdf.PdfObject)">
            <param name="in">Input byte array.</param>
            <param name="decodeParams">PdfDictionary of decodeParams.</param>
            <returns>a byte array</returns>
        </member>
        <member name="T:iText.Kernel.Pdf.Filters.IFilterHandler">
            <summary>
            The main interface for creating a new
            <c>FilterHandler</c>
            </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Filters.IFilterHandler.Decode(System.Byte[],iText.Kernel.Pdf.PdfName,iText.Kernel.Pdf.PdfObject,iText.Kernel.Pdf.PdfDictionary)">
            <summary>Decode the byte[] using the provided filterName.</summary>
            <param name="b">the bytes that need to be decoded</param>
            <param name="filterName">PdfName of the filter</param>
            <param name="decodeParams">decode parameters</param>
            <param name="streamDictionary">the dictionary of the stream. Can contain additional information needed to decode the byte[].
                </param>
            <returns>decoded byte array</returns>
        </member>
        <member name="T:iText.Kernel.Pdf.Filters.LZWDecodeFilter">
            <summary>Handles LZWDECODE filter</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Filters.LZWDecodeFilter.LZWDecode(System.Byte[])">
            <summary>Decodes a byte[] according to the LZW encoding.</summary>
            <param name="in">byte[] to be decoded</param>
            <returns>decoded byte[]</returns>
        </member>
        <member name="T:iText.Kernel.Pdf.Filters.LZWDecoder">
            <summary>A class for performing LZW decoding.</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Filters.LZWDecoder.#ctor">
            <summary>Creates an LZWDecoder instance.</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Filters.LZWDecoder.Decode(System.Byte[],System.IO.Stream)">
            <summary>Method to decode LZW compressed data.</summary>
            <param name="data">The compressed data.</param>
            <param name="uncompData">Array to return the uncompressed data in.</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Filters.LZWDecoder.InitializeStringTable">
            <summary>Initialize the string table.</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Filters.LZWDecoder.WriteString(System.Byte[])">
            <summary>Write out the string just uncompressed.</summary>
            <param name="string">content to write to the uncompressed data</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Filters.LZWDecoder.AddStringToTable(System.Byte[],System.Byte)">
            <summary>Add a new string to the string table.</summary>
            <param name="oldString">stored string</param>
            <param name="newString">string to be appended to the stored string</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Filters.LZWDecoder.AddStringToTable(System.Byte[])">
            <summary>Add a new string to the string table.</summary>
            <param name="string">byte[] to store in the string table</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Filters.LZWDecoder.ComposeString(System.Byte[],System.Byte)">
            <summary>Append <code>newString</code> to the end of <code>oldString</code>.</summary>
            <param name="oldString">string be appended to</param>
            <param name="newString">string that is to be appended to oldString</param>
            <returns>combined string</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Filters.LZWDecoder.GetNextCode">
            <summary>Attempt to get the next code.</summary>
            <remarks>
            Attempt to get the next code. Exceptions are caught to make
            this robust to cases wherein the EndOfInformation code has been
            omitted from a strip. Examples of such cases have been observed
            in practice.
            </remarks>
            <returns>next code</returns>
        </member>
        <member name="T:iText.Kernel.Pdf.Filters.RunLengthDecodeFilter">
            <summary>Handles RunLengthDecode filter.</summary>
        </member>
        <member name="T:iText.Kernel.Pdf.FingerPrint">
            <summary>Data container for debugging information.</summary>
            <remarks>
            Data container for debugging information. This class keeps a record of every registered product that
            was involved in the creation of a certain PDF file. This information can then be used to log to the
            logger or to the file.
            </remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.FingerPrint.#ctor">
            <summary>Default constructor.</summary>
            <remarks>Default constructor. Initializes the productInfoSet.</remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.FingerPrint.RegisterProduct(iText.Kernel.ProductInfo)">
            <summary>Registers a product to be added to the fingerprint or other debugging info.</summary>
            <param name="productInfo">ProductInfo to be added</param>
            <returns>true if the fingerprint did not already contain the specified element</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.FingerPrint.GetProducts">
            <summary>Returns the registered products.</summary>
            <returns>registered products.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Function.PdfFunction.Flush">
            <summary>
            To manually flush a
            <c>PdfObject</c>
            behind this wrapper, you have to ensure
            that this object is added to the document, i.e. it has an indirect reference.
            Basically this means that before flushing you need to explicitly call
            <see cref="M:iText.Kernel.Pdf.PdfObjectWrapper`1.MakeIndirect(iText.Kernel.Pdf.PdfDocument)"/>
            .
            For example: wrapperInstance.makeIndirect(document).flush();
            Note that not every wrapper require this, only those that have such warning in documentation.
            </summary>
        </member>
        <member name="T:iText.Kernel.Pdf.IPdfPageExtraCopier">
            <summary>
            This interface defines logic which can be used to perform a custom copying
            operation of a
            <see cref="T:iText.Kernel.Pdf.PdfPage"/>
            .
            </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.IPdfPageExtraCopier.Copy(iText.Kernel.Pdf.PdfPage,iText.Kernel.Pdf.PdfPage)">
            <summary>Copies a page.</summary>
            <remarks>
            Copies a page.
            The new page must already be created before calling this, either in a new
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            or in the same
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            as the old page.
            </remarks>
            <param name="fromPage">the source page</param>
            <param name="toPage">the target page in a target document</param>
        </member>
        <member name="T:iText.Kernel.Pdf.IsoKey">
            <summary>Type of object to conform.</summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Layer.IPdfOCG">
            <summary>The interface generalizing the layer types (PdfLayer, PdfLayerMembership).</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Layer.IPdfOCG.GetPdfObject">
            <summary>Gets the object representing the layer.</summary>
            <returns>the object representing the layer</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Layer.IPdfOCG.GetIndirectReference">
            <summary>Gets the <CODE>PdfIndirectReference</CODE> that represents this layer.</summary>
            <returns>the <CODE>PdfIndirectReference</CODE> that represents this layer</returns>
        </member>
        <member name="T:iText.Kernel.Pdf.Layer.PdfLayer">
            <summary>
            An optional content group is a dictionary representing a collection of graphics
            that can be made visible or invisible dynamically by users of viewer applications.
            </summary>
            <remarks>
            An optional content group is a dictionary representing a collection of graphics
            that can be made visible or invisible dynamically by users of viewer applications.
            In iText they are referenced as layers.
            <br /><br />
            To be able to be wrapped with this
            <see cref="T:iText.Kernel.Pdf.PdfObjectWrapper`1"/>
            the
            <see cref="T:iText.Kernel.Pdf.PdfObject"/>
            must be indirect.
            </remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.Layer.PdfLayer.title">
            <summary>Used for titling group of objects but not actually grouping them.</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Layer.PdfLayer.#ctor(iText.Kernel.Pdf.PdfDictionary)">
            <summary>Creates a new layer by existing dictionary, which must be an indirect object.</summary>
            <param name="layerDictionary">the layer dictionary, must have an indirect reference.</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Layer.PdfLayer.#ctor(System.String,iText.Kernel.Pdf.PdfDocument)">
            <summary>Creates a new layer by its name and document.</summary>
            <param name="name">the layer name</param>
            <param name="document">the PdfDocument which the layer belongs to</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Layer.PdfLayer.CreateTitle(System.String,iText.Kernel.Pdf.PdfDocument)">
            <summary>Creates a title layer.</summary>
            <remarks>
            Creates a title layer. A title layer is not really a layer but a collection of layers
            under the same title heading.
            </remarks>
            <param name="title">the title text</param>
            <param name="document">the <CODE>PdfDocument</CODE></param>
            <returns>the title layer</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Layer.PdfLayer.AddOCGRadioGroup(iText.Kernel.Pdf.PdfDocument,System.Collections.Generic.IList{iText.Kernel.Pdf.Layer.PdfLayer})">
            <summary>
            Use this method to set a collection of optional content groups
            whose states are intended to follow a "radio button" paradigm.
            </summary>
            <remarks>
            Use this method to set a collection of optional content groups
            whose states are intended to follow a "radio button" paradigm.
            That is, the state of at most one optional content group
            in the array should be ON at a time: if one group is turned
            ON, all others must be turned OFF.
            </remarks>
            <param name="document">the <CODE>PdfDocument</CODE></param>
            <param name="group">the radio group</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Layer.PdfLayer.AddChild(iText.Kernel.Pdf.Layer.PdfLayer)">
            <summary>Adds a child layer.</summary>
            <remarks>Adds a child layer. Nested layers can only have one parent.</remarks>
            <param name="childLayer">the child layer</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Layer.PdfLayer.GetParent">
            <summary>Gets the parent of this layer, be it a title layer, or a usual one.</summary>
            <returns>the parent of the layer, or null if it has no parent</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Layer.PdfLayer.SetName(System.String)">
            <summary>Sets the name of the layer to be displayed in the Layers panel.</summary>
            <param name="name">the name of the layer.</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Layer.PdfLayer.IsOn">
            <summary>Gets the initial visibility of the layer when the document is opened.</summary>
            <returns>the initial visibility of the layer</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Layer.PdfLayer.SetOn(System.Boolean)">
            <summary>Sets the initial visibility of the layer when the document is opened.</summary>
            <param name="on">the initial visibility of the layer</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Layer.PdfLayer.IsLocked">
            <summary>Gets whether the layer is currently locked or not.</summary>
            <remarks>
            Gets whether the layer is currently locked or not. If the layer is locked,
            it will not be possible to change its state (on/off) in a viewer.
            </remarks>
            <returns>true of the layer is currently locked, false otherwise.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Layer.PdfLayer.SetLocked(System.Boolean)">
            <summary>Use this method to lock an optional content group.</summary>
            <remarks>
            Use this method to lock an optional content group.
            The state of a locked group cannot be changed through the user interface
            of a viewer application. Producers can use this entry to prevent the visibility
            of content that depends on these groups from being changed by users.
            </remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Layer.PdfLayer.IsOnPanel">
            <summary>Gets the layer visibility in Acrobat's layer panel</summary>
            <returns>the layer visibility in Acrobat's layer panel</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Layer.PdfLayer.SetOnPanel(System.Boolean)">
            <summary>Sets the visibility of the layer in Acrobat's layer panel.</summary>
            <remarks>
            Sets the visibility of the layer in Acrobat's layer panel. If <CODE>false</CODE>
            the layer cannot be directly manipulated by the user. Note that any children layers will
            also be absent from the panel.
            </remarks>
            <param name="onPanel">the visibility of the layer in Acrobat's layer panel</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Layer.PdfLayer.GetIntents">
            <summary>Gets a collection of current intents specified for this layer.</summary>
            <remarks>
            Gets a collection of current intents specified for this layer.
            The default value is PdfName.View, so it will be the only element of the
            resultant colletion if no intents are currently specified.
            </remarks>
            <returns>the collection of intents.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Layer.PdfLayer.SetIntents(System.Collections.Generic.IList{iText.Kernel.Pdf.PdfName})">
            <summary>Sets the intents of the layer.</summary>
            <param name="intents">the list of intents.</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Layer.PdfLayer.SetCreatorInfo(System.String,System.String)">
            <summary>
            Used by the creating application to store application-specific
            data associated with this optional content group.
            </summary>
            <param name="creator">a text string specifying the application that created the group</param>
            <param name="subtype">
            a string defining the type of content controlled by the group. Suggested
            values include but are not limited to <B>Artwork</B>, for graphic-design or publishing
            applications, and <B>Technical</B>, for technical designs such as building plans or
            schematics
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.Layer.PdfLayer.SetLanguage(System.String,System.Boolean)">
            <summary>
            Specifies the language of the content controlled by this
            optional content group
            </summary>
            <param name="lang">
            a language string which specifies a language and possibly a locale
            (for example, <B>es-MX</B> represents Mexican Spanish)
            </param>
            <param name="preferred">
            used by viewer applications when there is a partial match but no exact
            match between the system language and the language strings in all usage dictionaries
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.Layer.PdfLayer.SetExport(System.Boolean)">
            <summary>
            Specifies the recommended state for content in this
            group when the document (or part of it) is saved by a viewer application to a format
            that does not support optional content (for example, an earlier version of
            PDF or a raster image format).
            </summary>
            <param name="export">the export state</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Layer.PdfLayer.SetZoom(System.Single,System.Single)">
            <summary>
            Specifies a range of magnifications at which the content
            in this optional content group is best viewed.
            </summary>
            <param name="min">
            the minimum recommended magnification factors at which the group
            should be ON. A negative value will set the default to 0
            </param>
            <param name="max">
            the maximum recommended magnification factor at which the group
            should be ON. A negative value will set the largest possible magnification supported by the
            viewer application
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.Layer.PdfLayer.SetPrint(System.String,System.Boolean)">
            <summary>
            Specifies that the content in this group is intended for
            use in printing
            </summary>
            <param name="subtype">
            a name specifying the kind of content controlled by the group;
            for example, <B>Trapping</B>, <B>PrintersMarks</B> and <B>Watermark</B>
            </param>
            <param name="printState">
            indicates that the group should be
            set to that state when the document is printed from a viewer application
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.Layer.PdfLayer.SetView(System.Boolean)">
            <summary>
            Indicates that the group should be set to that state when the
            document is opened in a viewer application.
            </summary>
            <param name="view">the view state</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Layer.PdfLayer.SetUser(System.String,System.String[])">
            <summary>
            Specifies one or more users for whom this optional content group
            is primarily intended.
            </summary>
            <param name="type">a name that can be Ind (individual), Ttl (title), or Org (organization).</param>
            <param name="names">
            one or more text strings representing
            the name(s) of the individual, position or organization
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.Layer.PdfLayer.SetPageElement(System.String)">
            <summary>Indicates that the group contains a pagination artifact.</summary>
            <param name="pe">
            one of the following names: "HF" (Header Footer),
            "FG" (Foreground), "BG" (Background), or "L" (Logo).
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.Layer.PdfLayer.GetIndirectReference">
            <summary>Gets the indirect reference to the current layer object.</summary>
            <returns>the indirect reference to the object representing the layer</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Layer.PdfLayer.GetTitle">
            <summary>Gets the title of the layer if it is a title layer, or null if it is a usual layer.</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Layer.PdfLayer.GetChildren">
            <summary>Gets the list of the current child layers of the layer.</summary>
            <remarks>
            Gets the list of the current child layers of the layer.
            BE CAREFUL! Do not try to add a child layer using the resultant child list,
            use #addChild method instead.
            </remarks>
            <returns>the list of the current child layers, null if the layer has no children.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Layer.PdfLayer.CreateTitleSilent(System.String,iText.Kernel.Pdf.PdfDocument)">
            <summary>Creates a title layer without registering it in PdfOCProperties.</summary>
            <param name="title">the title of the layer</param>
            <param name="document">the document this title layer belongs to</param>
            <returns>the created layer</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Layer.PdfLayer.GetUsage">
            <summary>Gets the /Usage dictionary, creating a new one if necessary.</summary>
            <returns>the /Usage dictionary</returns>
        </member>
        <member name="T:iText.Kernel.Pdf.Layer.PdfLayerMembership">
            <summary>
            Content typically belongs to a single optional content group,
            and is visible when the group is <B>ON</B> and invisible when it is <B>OFF</B>.
            </summary>
            <remarks>
            Content typically belongs to a single optional content group,
            and is visible when the group is <B>ON</B> and invisible when it is <B>OFF</B>. To express more
            complex visibility policies, content should not declare itself to belong to an optional
            content group directly, but rather to an optional content membership dictionary
            represented by this class.
            <br /><br />
            To be able to be wrapped with this
            <see cref="T:iText.Kernel.Pdf.PdfObjectWrapper`1"/>
            the
            <see cref="T:iText.Kernel.Pdf.PdfObject"/>
            must be indirect.
            </remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Layer.PdfLayerMembership.#ctor(iText.Kernel.Pdf.PdfDocument)">
            <summary>Creates a new, empty membership layer.</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Layer.PdfLayerMembership.#ctor(iText.Kernel.Pdf.PdfDictionary)">
            <summary>Creates a new PdfLayerMembership instance by its PdfDictionary, which must be an indirect object.
                </summary>
            <param name="membershipDictionary">the membership dictionary, must have an indirect reference.</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Layer.PdfLayerMembership.GetLayers">
            <summary>Gets the collection of the layers this layer membership operates with.</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Layer.PdfLayerMembership.AddLayer(iText.Kernel.Pdf.Layer.PdfLayer)">
            <summary>Adds a new layer to the current layer membership.</summary>
            <param name="layer">the layer to be added</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Layer.PdfLayerMembership.SetVisibilityPolicy(iText.Kernel.Pdf.PdfName)">
            <summary>
            Sets the visibility policy for content belonging to this
            membership dictionary.
            </summary>
            <remarks>
            Sets the visibility policy for content belonging to this
            membership dictionary. Possible values are AllOn, AnyOn, AnyOff and AllOff.
            AllOn - Visible only if all of the entries are <B>ON</B>.
            AnyOn - Visible if any of the entries are <B>ON</B>.
            AnyOff - Visible if any of the entries are <B>OFF</B>.
            AllOff - Visible only if all of the entries are <B>OFF</B>.
            The default value is AnyOn.
            </remarks>
            <param name="visibilityPolicy">the visibility policy</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Layer.PdfLayerMembership.GetVisibilityPolicy">
            <summary>
            Gets the visibility policy for content belonging to this
            optional content membership dictionary.
            </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Layer.PdfLayerMembership.SetVisibilityExpression(iText.Kernel.Pdf.Layer.PdfVisibilityExpression)">
            <summary>
            Sets the visibility expression for content belonging to this
            membership dictionary.
            </summary>
            <param name="visibilityExpression">
            A (nested) array of which the first value is /And, /Or, or /Not
            followed by a series of indirect references to OCGs or other visibility
            expressions.
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.Layer.PdfLayerMembership.GetVisibilityExpression">
            <summary>
            Gets the visibility expression for content belonging to this
            optional content membership dictionary.
            </summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Layer.PdfOCProperties">
            <summary>
            This class represents /OCProperties entry if pdf catalog and manages
            the layers of the pdf document.
            </summary>
            <remarks>
            This class represents /OCProperties entry if pdf catalog and manages
            the layers of the pdf document.
            <br /><br />
            To be able to be wrapped with this
            <see cref="T:iText.Kernel.Pdf.PdfObjectWrapper`1"/>
            the
            <see cref="T:iText.Kernel.Pdf.PdfObject"/>
            must be indirect.
            </remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Layer.PdfOCProperties.GetOCGOrder(iText.Kernel.Pdf.PdfArray,iText.Kernel.Pdf.Layer.PdfLayer)">
            <summary>
            Gets the order of the layers in which they will be displayed in the layer view panel,
            including nesting.
            </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Layer.PdfOCProperties.#ctor(iText.Kernel.Pdf.PdfDocument)">
            <summary>Creates a new PdfOCProperties instance.</summary>
            <param name="document">the document the optional content belongs to</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Layer.PdfOCProperties.#ctor(iText.Kernel.Pdf.PdfDictionary)">
            <summary>
            Creates a new PdfOCProperties instance by the dictionary it represents,
            the dictionary must be an indirect object.
            </summary>
            <param name="ocPropertiesDict">the dictionary of optional content properties, must have an indirect reference.
                </param>
        </member>
        <member name="M:iText.Kernel.Pdf.Layer.PdfOCProperties.AddOCGRadioGroup(System.Collections.Generic.IList{iText.Kernel.Pdf.Layer.PdfLayer})">
            <summary>
            Use this method to set a collection of optional content groups
            whose states are intended to follow a "radio button" paradigm.
            </summary>
            <remarks>
            Use this method to set a collection of optional content groups
            whose states are intended to follow a "radio button" paradigm.
            That is, the state of at most one optional content group
            in the array should be ON at a time: if one group is turned
            ON, all others must be turned OFF.
            </remarks>
            <param name="group">the radio group</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Layer.PdfOCProperties.FillDictionary">
            <summary>Fills the underlying PdfDictionary object with the current layers and their settings.</summary>
            <remarks>
            Fills the underlying PdfDictionary object with the current layers and their settings.
            Note that it completely regenerates the dictionary, so your direct changes to the dictionary
            will not take any affect.
            </remarks>
            <returns>the resultant dictionary</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Layer.PdfOCProperties.GetLayers">
            <summary>Gets the list of all the layers currently registered in the OCProperties.</summary>
            <remarks>
            Gets the list of all the layers currently registered in the OCProperties.
            Note that this is just a new list and modifications to it will not affect anything.
            </remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Layer.PdfOCProperties.RegisterLayer(iText.Kernel.Pdf.Layer.PdfLayer)">
            <summary>This method registers a new layer in the OCProperties.</summary>
            <param name="layer">the new layer</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Layer.PdfOCProperties.AddASEvent(iText.Kernel.Pdf.PdfName,iText.Kernel.Pdf.PdfName)">
            <summary>Populates the /AS entry in the /D dictionary.</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Layer.PdfOCProperties.ReadLayersFromDictionary">
            <summary>Reads the layers from the document to be able to modify them in the future.</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Layer.PdfOCProperties.ReadOrderFromDictionary(iText.Kernel.Pdf.Layer.PdfLayer,iText.Kernel.Pdf.PdfArray,System.Collections.Generic.IDictionary{iText.Kernel.Pdf.PdfIndirectReference,iText.Kernel.Pdf.Layer.PdfLayer})">
            <summary>Reads the /Order in the /D entry and initialized the parent-child hierarchy.</summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Layer.PdfVisibilityExpression">
            <summary>
            An array specifying a visibility expression, used to compute visibility
            of content based on a set of optional content groups.
            </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Layer.PdfVisibilityExpression.#ctor(iText.Kernel.Pdf.PdfArray)">
            <summary>Constructs a new PdfVisibilityExpression instance by its raw PdfArray.</summary>
            <param name="visibilityExpressionArray">the array representing the visibility expression</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Layer.PdfVisibilityExpression.#ctor(iText.Kernel.Pdf.PdfName)">
            <summary>Creates a visibility expression.</summary>
            <param name="operator">should be either PdfName#And, PdfName#Or, or PdfName#Not</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Layer.PdfVisibilityExpression.AddOperand(iText.Kernel.Pdf.Layer.PdfLayer)">
            <summary>Adds a new operand to the current visibility expression.</summary>
            <param name="layer">the layer operand to be added.</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Layer.PdfVisibilityExpression.AddOperand(iText.Kernel.Pdf.Layer.PdfVisibilityExpression)">
            <summary>Adds a new opeand to the current visibility expression.</summary>
            <param name="expression">the PdfVisibilityExpression instance operand to be added</param>
        </member>
        <member name="T:iText.Kernel.Pdf.Navigation.PdfExplicitDestination">
            <summary>
            This class shall be used for creation of destinations, associated with outline items, annotations
            or actions within current document.
            </summary>
            <remarks>
            This class shall be used for creation of destinations, associated with outline items, annotations
            or actions within current document.
            If you need to create a destination, associated with an object in another PDF
            (e.g. Remote Go-To actions or Embedded Go-To actions), you should use
            <see cref="T:iText.Kernel.Pdf.Navigation.PdfExplicitRemoteGoToDestination"/>
            class instead.
            Note that despite methods with integer value for page parameter are deprecated in this class,
            Adobe Acrobat handles such destinations correctly, but removes them completely from a PDF,
            when it is saved as an optimized pdf with the "discard-invalid-links" option.
            Therefore it is strongly recommended to use methods accepting pdfPage instance, if the destination is inside of the current document.
            </remarks>
        </member>
        <member name="T:iText.Kernel.Pdf.Navigation.PdfExplicitRemoteGoToDestination">
            <summary>
            This class shall be used for creation of destinations, associated Remote Go-To and Embedded Go-To actions only,
            i.e.
            </summary>
            <remarks>
            This class shall be used for creation of destinations, associated Remote Go-To and Embedded Go-To actions only,
            i.e. the destination point is in another PDF.
            If you need to create a destination, associated with an object inside current PDF, you should use
            <see cref="T:iText.Kernel.Pdf.Navigation.PdfExplicitDestination"/>
            class instead.
            </remarks>
        </member>
        <member name="T:iText.Kernel.Pdf.PdfAConformanceLevel">
            <summary>Enumeration of all the PDF/A conformance levels.</summary>
        </member>
        <member name="T:iText.Kernel.Pdf.PdfArray">
            <summary>A representation of an array as described in the PDF specification.</summary>
            <remarks>
            A representation of an array as described in the PDF specification. A PdfArray can contain any
            subclass of
            <see cref="T:iText.Kernel.Pdf.PdfObject"/>
            .
            </remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfArray.#ctor">
            <summary>Create a new, empty PdfArray.</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfArray.#ctor(iText.Kernel.Pdf.PdfObject)">
            <summary>
            Create a new PdfArray with the provided PdfObject as the first item in the
            array.
            </summary>
            <param name="obj">first item in the array</param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfArray.#ctor(iText.Kernel.Pdf.PdfArray)">
            <summary>Create a new PdfArray.</summary>
            <remarks>Create a new PdfArray. The array is filled with the items of the provided PdfArray.</remarks>
            <param name="arr">PdfArray containing items that will added to this PdfArray</param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfArray.#ctor(iText.Kernel.Geom.Rectangle)">
            <summary>Create a new PdfArray.</summary>
            <remarks>
            Create a new PdfArray. The array is filled with the four values of the Rectangle in the
            following order: left, bottom, right, top.
            </remarks>
            <param name="rectangle">Rectangle whose 4 values will be added to the PdfArray</param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfArray.#ctor(System.Collections.Generic.IList{iText.Kernel.Pdf.PdfObject})">
            <summary>Create a new PdfArray.</summary>
            <remarks>Create a new PdfArray. The PdfObjects in the list will be added to the PdfArray.</remarks>
            <param name="objects">List of PdfObjects to be added to this PdfArray</param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfArray.#ctor(System.Single[])">
            <summary>
            Create a new PdfArray filled with the values in the float[] as
            <see cref="T:iText.Kernel.Pdf.PdfNumber"/>
            .
            </summary>
            <param name="numbers">values to be added to this PdfArray</param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfArray.#ctor(System.Double[])">
            <summary>
            Create a new PdfArray filled with the values in the double[] as
            <see cref="T:iText.Kernel.Pdf.PdfNumber"/>
            .
            </summary>
            <param name="numbers">values to be added to this PdfArray</param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfArray.#ctor(System.Int32[])">
            <summary>
            Create a new PdfArray filled with the values in the int[] as
            <see cref="T:iText.Kernel.Pdf.PdfNumber"/>
            .
            </summary>
            <param name="numbers">values to be added to this PdfArray</param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfArray.#ctor(System.Boolean[])">
            <summary>
            Create a new PdfArray filled with the values in the boolean[] as
            <see cref="T:iText.Kernel.Pdf.PdfBoolean"/>
            .
            </summary>
            <param name="values">values to be added to this PdfArray</param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfArray.#ctor(System.Collections.Generic.IList{System.String},System.Boolean)">
            <summary>Create a new PdfArray filled with a list of Strings.</summary>
            <remarks>
            Create a new PdfArray filled with a list of Strings. The boolean value decides if the Strings
            should be added as
            <see cref="T:iText.Kernel.Pdf.PdfName"/>
            (true) or as
            <see cref="T:iText.Kernel.Pdf.PdfString"/>
            (false).
            </remarks>
            <param name="strings">list of strings to be added to the list</param>
            <param name="asNames">indicates whether the strings should be added as PdfName (true) or as PdfString (false)
                </param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfArray.#ctor(System.Collections.Generic.IEnumerable{iText.Kernel.Pdf.PdfObject},System.Int32)">
            <summary>Create a new PdfArray.</summary>
            <remarks>Create a new PdfArray. The PdfObjects in the iterable object will be added to the PdfArray.</remarks>
            <param name="objects">List of PdfObjects to be added to this PdfArray</param>
            <param name="initialCapacity">Initial capacity of this PdfArray</param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfArray.GetEnumerator">
            <summary>Returns an iterator over an array of PdfObject elements.</summary>
            <remarks>
            Returns an iterator over an array of PdfObject elements.
            <br />
            <b>NOTE:</b> since 7.0.1 it returns collection of direct objects.
            If you want to get
            <see cref="T:iText.Kernel.Pdf.PdfIndirectReference"/>
            instances for the indirect objects value,
            you shall use
            <see cref="M:iText.Kernel.Pdf.PdfArray.Get(System.Int32,System.Boolean)"/>
            method.
            </remarks>
            <returns>an Iterator.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfArray.Add(System.Int32,iText.Kernel.Pdf.PdfObject)">
            <summary>Adds the specified PdfObject at the specified index.</summary>
            <remarks>Adds the specified PdfObject at the specified index. All objects after this index will be shifted by 1.
                </remarks>
            <param name="index">position to insert the PdfObject</param>
            <param name="element">PdfObject to be added</param>
            <seealso cref="!:System.Collections.IList&lt;E&gt;.Add(int, System.Object)"/>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfArray.Set(System.Int32,iText.Kernel.Pdf.PdfObject)">
            <summary>Sets the PdfObject at the specified index in the PdfArray.</summary>
            <param name="index">the position to set the PdfObject</param>
            <param name="element">PdfObject to be added</param>
            <returns>true if the operation changed the PdfArray</returns>
            <seealso cref="!:System.Collections.IList&lt;E&gt;.Set(int, System.Object)"/>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfArray.AddAll(System.Collections.Generic.ICollection{iText.Kernel.Pdf.PdfObject})">
            <summary>Adds the Collection of PdfObjects.</summary>
            <param name="c">the Collection of PdfObjects to be added</param>
            <seealso cref="!:System.Collections.IList&lt;E&gt;.AddAll(System.Collections.ICollection&lt;E&gt;)"/>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfArray.AddAll(iText.Kernel.Pdf.PdfArray)">
            <summary>
            Adds content of the
            <c>PdfArray</c>
            .
            </summary>
            <param name="a">
            the
            <c>PdfArray</c>
            to be added
            </param>
            <seealso cref="!:System.Collections.IList&lt;E&gt;.AddAll(System.Collections.ICollection&lt;E&gt;)"/>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfArray.Get(System.Int32)">
            <summary>Gets the (direct) PdfObject at the specified index.</summary>
            <param name="index">index of the PdfObject in the PdfArray</param>
            <returns>the PdfObject at the position in the PdfArray</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfArray.Remove(System.Int32)">
            <summary>Removes the PdfObject at the specified index.</summary>
            <param name="index">position of the PdfObject to be removed</param>
            <seealso cref="!:System.Collections.IList&lt;E&gt;.JRemoveAt(int)"/>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfArray.Remove(iText.Kernel.Pdf.PdfObject)">
            <summary>Removes the first occurrence of the specified PdfObject, if it is present.</summary>
            <param name="o">a PdfObject to be removed</param>
            <seealso cref="!:System.Collections.IList&lt;E&gt;.Remove(System.Object)"/>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfArray.IndexOf(iText.Kernel.Pdf.PdfObject)">
            <summary>Gets the first index of the specified PdfObject.</summary>
            <param name="o">PdfObject to find the index of</param>
            <returns>index of the PdfObject</returns>
            <seealso cref="!:System.Collections.IList&lt;E&gt;.IndexOf(System.Object)"/>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfArray.SubList(System.Int32,System.Int32)">
            <summary>Returns a sublist of this PdfArray, starting at fromIndex (inclusive) and ending at toIndex (exclusive).
                </summary>
            <param name="fromIndex">the position of the first element in the sublist (inclusive)</param>
            <param name="toIndex">the position of the last element in the sublist (exclusive)</param>
            <returns>List of PdfObjects</returns>
            <seealso cref="!:System.Collections.IList&lt;E&gt;.SubList(int, int)"/>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfArray.Get(System.Int32,System.Boolean)">
            <param name="asDirect">true is to extract direct object always.</param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfArray.GetAsArray(System.Int32)">
            <summary>Returns the element at the specified index as a PdfArray.</summary>
            <remarks>Returns the element at the specified index as a PdfArray. If the element isn't a PdfArray, null is returned.
                </remarks>
            <param name="index">position of the element to be returned</param>
            <returns>the element at the index as a PdfArray</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfArray.GetAsDictionary(System.Int32)">
            <summary>Returns the element at the specified index as a PdfDictionary.</summary>
            <remarks>Returns the element at the specified index as a PdfDictionary. If the element isn't a PdfDictionary, null is returned.
                </remarks>
            <param name="index">position of the element to be returned</param>
            <returns>the element at the index as a PdfDictionary</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfArray.GetAsStream(System.Int32)">
            <summary>Returns the element at the specified index as a PdfStream.</summary>
            <remarks>Returns the element at the specified index as a PdfStream. If the element isn't a PdfStream, null is returned.
                </remarks>
            <param name="index">position of the element to be returned</param>
            <returns>the element at the index as a PdfStream</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfArray.GetAsNumber(System.Int32)">
            <summary>Returns the element at the specified index as a PdfNumber.</summary>
            <remarks>Returns the element at the specified index as a PdfNumber. If the element isn't a PdfNumber, null is returned.
                </remarks>
            <param name="index">position of the element to be returned</param>
            <returns>the element at the index as a PdfNumber</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfArray.GetAsName(System.Int32)">
            <summary>Returns the element at the specified index as a PdfName.</summary>
            <remarks>Returns the element at the specified index as a PdfName. If the element isn't a PdfName, null is returned.
                </remarks>
            <param name="index">position of the element to be returned</param>
            <returns>the element at the index as a PdfName</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfArray.GetAsString(System.Int32)">
            <summary>Returns the element at the specified index as a PdfString.</summary>
            <remarks>Returns the element at the specified index as a PdfString. If the element isn't a PdfString, null is returned.
                </remarks>
            <param name="index">position of the element to be returned</param>
            <returns>the element at the index as a PdfString</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfArray.GetAsBoolean(System.Int32)">
            <summary>Returns the element at the specified index as a PdfBoolean.</summary>
            <remarks>Returns the element at the specified index as a PdfBoolean. If the element isn't a PdfBoolean, null is returned.
                </remarks>
            <param name="index">position of the element to be returned</param>
            <returns>the element at the index as a PdfBoolean</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfArray.ToRectangle">
            <summary>Returns the first four elements of this array as a PdfArray.</summary>
            <remarks>
            Returns the first four elements of this array as a PdfArray. The first four values need to be
            PdfNumbers, if not a PdfException will be thrown.
            </remarks>
            <returns>Rectangle of the first four values</returns>
            <exception cref="T:iText.Kernel.PdfException">if one of the first values isn't a PdfNumber</exception>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfArray.ToFloatArray">
            <summary>Returns this array as an array of floats.</summary>
            <remarks>Returns this array as an array of floats. Will throw a PdfException when it encounters an issue.</remarks>
            <returns>this array as an array of floats</returns>
            <exception cref="T:iText.Kernel.PdfException">if one of the values isn't a number</exception>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfArray.ToDoubleArray">
            <summary>Returns this array as an array of doubles.</summary>
            <remarks>Returns this array as an array of doubles. Will throw a PdfException when it encounters an issue.
                </remarks>
            <returns>this array as an array of doubles</returns>
            <exception cref="T:iText.Kernel.PdfException">if one of the values isn't a number</exception>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfArray.ToLongArray">
            <summary>Returns this array as an array of longs.</summary>
            <remarks>Returns this array as an array of longs. Will throw a PdfException when it encounters an issue.</remarks>
            <returns>this array as an array of longs</returns>
            <exception cref="T:iText.Kernel.PdfException">if one of the values isn't a number</exception>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfArray.ToIntArray">
            <summary>Returns this array as an array of ints.</summary>
            <remarks>Returns this array as an array of ints. Will throw a PdfException when it encounters an issue.</remarks>
            <returns>this array as an array of ints</returns>
            <exception cref="T:iText.Kernel.PdfException">if one of the values isn't a number</exception>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfArray.ToBooleanArray">
            <summary>Returns this array as an array of booleans.</summary>
            <remarks>Returns this array as an array of booleans. Will throw a PdfException when it encounters an issue.
                </remarks>
            <returns>this array as an array of booleans</returns>
            <exception cref="T:iText.Kernel.PdfException">if one of the values isn't a boolean</exception>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfArray.ReleaseContent">
            <summary>Release content of PdfArray.</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfBoolean.#ctor(System.Boolean)">
            <summary>Store a boolean value</summary>
            <param name="value">value to store</param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfBoolean.ValueOf(System.Boolean)">
            <summary>Gets PdfBoolean existing static class variable equivalent for given boolean value.</summary>
            <remarks>
            Gets PdfBoolean existing static class variable equivalent for given boolean value.
            Note, returned object will be direct only, which means it is impossible to make in indirect.
            If required PdfBoolean has to be indirect,
            use
            <see cref="M:iText.Kernel.Pdf.PdfBoolean.#ctor(System.Boolean)"/>
            constructor instead.
            </remarks>
            <param name="value">boolean variable defining value of PdfBoolean to return.</param>
            <returns>existing static PdfBoolean class variable.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfCatalog.GetOCProperties(System.Boolean)">
            <summary>Use this method to get the <B>Optional Content Properties Dictionary</B>.</summary>
            <remarks>
            Use this method to get the <B>Optional Content Properties Dictionary</B>.
            Note that if you call this method, then the PdfDictionary with OCProperties will be
            generated from PdfOCProperties object right before closing the PdfDocument,
            so if you want to make low-level changes in Pdf structures themselves (PdfArray, PdfDictionary, etc),
            then you should address directly those objects, e.g.:
            <CODE>
            PdfCatalog pdfCatalog = pdfDoc.getCatalog();
            PdfDictionary ocProps = pdfCatalog.getAsDictionary(PdfName.OCProperties);
            // manipulate with ocProps.
            </CODE>
            Also note that this method is implicitly called when creating a new PdfLayer instance,
            so you should either use hi-level logic of operating with layers,
            or manipulate low-level Pdf objects by yourself.
            </remarks>
            <param name="createIfNotExists">
            true to create new /OCProperties entry in catalog if not exists,
            false to return null if /OCProperties entry in catalog is not present.
            </param>
            <returns>the Optional Content Properties Dictionary</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfCatalog.Flush">
            <summary>PdfCatalog will be flushed in PdfDocument.close().</summary>
            <remarks>PdfCatalog will be flushed in PdfDocument.close(). User mustn't flush PdfCatalog!</remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfCatalog.SetPageMode(iText.Kernel.Pdf.PdfName)">
            <summary>This method sets a page mode of the document.</summary>
            <remarks>
            This method sets a page mode of the document.
            <br />
            Valid values are:
            <c>PdfName.UseNone</c>
            ,
            <c>PdfName.UseOutlines</c>
            ,
            <c>PdfName.UseThumbs</c>
            ,
            <c>PdfName.FullScreen</c>
            ,
            <c>PdfName.UseOC</c>
            ,
            <c>PdfName.UseAttachments</c>
            .
            </remarks>
            <param name="pageMode">page mode.</param>
            <returns>current instance of PdfCatalog</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfCatalog.SetPageLayout(iText.Kernel.Pdf.PdfName)">
            <summary>This method sets a page layout of the document</summary>
            <param name="pageLayout"/>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfCatalog.SetViewerPreferences(iText.Kernel.Pdf.PdfViewerPreferences)">
            <summary>
            This method sets the document viewer preferences, specifying the way the document shall be displayed on the
            screen
            </summary>
            <param name="preferences"/>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfCatalog.GetNameTree(iText.Kernel.Pdf.PdfName)">
            <summary>This method gets Names tree from the catalog.</summary>
            <param name="treeType">type of the tree (Dests, AP, EmbeddedFiles etc).</param>
            <returns>
            returns
            <see cref="T:iText.Kernel.Pdf.PdfNameTree"/>
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfCatalog.GetPageLabelsTree(System.Boolean)">
            <summary>This method returns the NumberTree of Page Labels</summary>
            <returns>
            returns
            <see cref="T:iText.Kernel.Pdf.PdfNumTree"/>
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfCatalog.SetLang(iText.Kernel.Pdf.PdfString)">
            <summary>An entry specifying the natural language, and optionally locale.</summary>
            <remarks>
            An entry specifying the natural language, and optionally locale. Use this
            to specify the Language attribute on a Tagged Pdf element.
            For the content usage dictionary, use PdfName.Language
            </remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfCatalog.GetCollection">
            <summary>
            Gets collection dictionary that a conforming reader shall use to enhance the presentation of file attachments
            stored in the PDF document.
            </summary>
            <returns>
            
            <see cref="T:iText.Kernel.Pdf.Collection.PdfCollection"/>
            wrapper of collection dictionary.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfCatalog.SetCollection(iText.Kernel.Pdf.Collection.PdfCollection)">
            <summary>
            Sets collection dictionary that a conforming reader shall use to enhance the presentation of file attachments
            stored in the PDF document.
            </summary>
            <param name="collection"/>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfCatalog.IsOCPropertiesMayHaveChanged">
            <summary>
            True indicates that getOCProperties() was called, may have been modified,
            and thus its dictionary needs to be reconstructed.
            </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfCatalog.GetPagesWithOutlines">
            <summary>this method return map containing all pages of the document with associated outlines.</summary>
            <returns>map containing all pages of the document with associated outlines</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfCatalog.AddNamedDestination(System.String,iText.Kernel.Pdf.PdfObject)">
            <summary>This methods adds new name to the Dests NameTree.</summary>
            <remarks>This methods adds new name to the Dests NameTree. It throws an exception, if the name already exists.
                </remarks>
            <param name="key">Name of the destination.</param>
            <param name="value">
            An object destination refers to. Must be an array or a dictionary with key /D and array.
            See ISO 32000-1 12.3.2.3 for more info.
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfCatalog.AddNameToNameTree(System.String,iText.Kernel.Pdf.PdfObject,iText.Kernel.Pdf.PdfName)">
            <summary>This methods adds a new name to the specified NameTree.</summary>
            <remarks>This methods adds a new name to the specified NameTree. It throws an exception, if the name already exists.
                </remarks>
            <param name="key">key in the name tree</param>
            <param name="value">value in the name tree</param>
            <param name="treeType">type of the tree (Dests, AP, EmbeddedFiles etc).</param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfCatalog.GetOutlines(System.Boolean)">
            <summary>This method returns a complete outline tree of the whole document.</summary>
            <param name="updateOutlines">
            if the flag is true, the method read the whole document and creates outline tree.
            If false the method gets cached outline tree (if it was cached via calling getOutlines method before).
            </param>
            <returns>
            fully initialized
            <see cref="T:iText.Kernel.Pdf.PdfOutline"/>
            object.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfCatalog.HasOutlines">
            <summary>Indicates if the catalog has any outlines</summary>
            <returns>
            
            <see langword="true"/>
            , if there are outlines and
            <see langword="false"/>
            otherwise.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfCatalog.IsOutlineMode">
            <summary>This flag determines if Outline tree of the document has been built via calling getOutlines method.
                </summary>
            <remarks>This flag determines if Outline tree of the document has been built via calling getOutlines method. If this flag is false all outline operations will be ignored
                </remarks>
            <returns>state of outline mode.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfCatalog.RemoveOutlines(iText.Kernel.Pdf.PdfPage)">
            <summary>This method removes all outlines associated with a given page</summary>
            <param name="page"/>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfCatalog.AddRootOutline(iText.Kernel.Pdf.PdfOutline)">
            <summary>This method sets the root outline element in the catalog.</summary>
            <param name="outline"/>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfCatalog.GetNextOutline(iText.Kernel.Pdf.PdfDictionary,iText.Kernel.Pdf.PdfDictionary,iText.Kernel.Pdf.PdfDictionary)">
            <summary>Get the next outline of the current node in the outline tree by looking for a child or sibling node.
                </summary>
            <remarks>
            Get the next outline of the current node in the outline tree by looking for a child or sibling node.
            If there is no child or sibling of the current node
            <see cref="M:iText.Kernel.Pdf.PdfCatalog.GetParentNextOutline(iText.Kernel.Pdf.PdfDictionary)"/>
            is called to get a hierarchical parent's next node.
            <see langword="null"/>
            is returned if one does not exist.
            </remarks>
            <returns>
            the
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            object of the next outline if one exists,
            <see langword="null"/>
            otherwise.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfCatalog.GetParentNextOutline(iText.Kernel.Pdf.PdfDictionary)">
            <summary>Gets the parent's next outline of the current node.</summary>
            <remarks>
            Gets the parent's next outline of the current node.
            If the parent does not have a next we look at the grand parent, great-grand parent, etc until we find a next node or reach the root at which point
            <see langword="null"/>
            is returned to signify there is no next node present.
            </remarks>
            <returns>
            the
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            object of the next outline if one exists,
            <see langword="null"/>
            otherwise.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfCatalog.ConstructOutlines(iText.Kernel.Pdf.PdfDictionary,System.Collections.Generic.IDictionary{System.String,iText.Kernel.Pdf.PdfObject})">
            <summary>
            Constructs
            <see cref="F:iText.Kernel.Pdf.PdfCatalog.outlines"/>
            iteratively
            </summary>
        </member>
        <member name="F:iText.Kernel.Pdf.PdfDashPattern.dash">
            <summary>This is the length of a dash.</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.PdfDashPattern.gap">
            <summary>This is the length of a gap.</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.PdfDashPattern.phase">
            <summary>This is the phase.</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:iText.Kernel.Pdf.PdfDate" -->
        <member name="M:iText.Kernel.Pdf.PdfDate.#ctor(System.DateTime)">
            <summary>
            Constructs a
            <c>PdfDate</c>
            -object.
            </summary>
            <param name="d">
            the date that has to be turned into a
            <c>PdfDate</c>
            &gt;-object
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDate.#ctor">
            <summary>
            Constructs a
            <c>PdfDate</c>
            -object, representing the current day and time.
            </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDate.GetW3CDate">
            <summary>Gives the W3C format of the PdfDate.</summary>
            <returns>a formatted date</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDate.GetW3CDate(System.String)">
            <summary>
            Gives the W3C format of the
            <c>PdfDate</c>
            .
            </summary>
            <param name="d">the date in the format D:YYYYMMDDHHmmSSOHH'mm'</param>
            <returns>a formatted date</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDate.Decode(System.String)">
            <summary>
            Converts a PDF string representing a date into a
            <c>DateTime</c>
            .
            </summary>
            <param name="s">the PDF string representing a date</param>
            <returns>
            a
            <c>DateTime</c>
            representing the date
            </returns>
        </member>
        <member name="T:iText.Kernel.Pdf.PdfDeveloperExtension">
            <summary>
            Beginning with BaseVersion 1.7, the extensions dictionary lets developers
            designate that a given document contains extensions to PDF.
            </summary>
            <remarks>
            Beginning with BaseVersion 1.7, the extensions dictionary lets developers
            designate that a given document contains extensions to PDF. The presence
            of the extension dictionary in a document indicates that it may contain
            developer-specific PDF properties that extend a particular base version
            of the PDF specification.
            The extensions dictionary enables developers to identify their own extensions
            relative to a base version of PDF. Additionally, the convention identifies
            extension levels relative to that base version. The intent of this dictionary
            is to enable developers of PDF-producing applications to identify company-specific
            specifications that PDF-consuming applications use to interpret the extensions.
            </remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.PdfDeveloperExtension.ADOBE_1_7_EXTENSIONLEVEL3">
            <summary>An instance of this class for Adobe 1.7 Extension level 3.</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.PdfDeveloperExtension.ESIC_1_7_EXTENSIONLEVEL2">
            <summary>An instance of this class for ETSI 1.7 Extension level 2.</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.PdfDeveloperExtension.ESIC_1_7_EXTENSIONLEVEL5">
            <summary>An instance of this class for ETSI 1.7 Extension level 5.</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.PdfDeveloperExtension.prefix">
            <summary>The prefix used in the Extensions dictionary added to the Catalog.</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.PdfDeveloperExtension.baseVersion">
            <summary>The base version.</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.PdfDeveloperExtension.extensionLevel">
            <summary>The extension level within the base version.</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDeveloperExtension.#ctor(iText.Kernel.Pdf.PdfName,iText.Kernel.Pdf.PdfName,System.Int32)">
            <summary>Creates a PdfDeveloperExtension object.</summary>
            <param name="prefix">the prefix referring to the developer</param>
            <param name="baseVersion">the number of the base version</param>
            <param name="extensionLevel">the extension level within the baseverion.</param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDeveloperExtension.GetPrefix">
            <summary>Gets the prefix name.</summary>
            <returns>a PdfName</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDeveloperExtension.GetBaseVersion">
            <summary>Gets the baseVersion name.</summary>
            <returns>a PdfName</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDeveloperExtension.GetExtensionLevel">
            <summary>Gets the extension level within the baseVersion.</summary>
            <returns>an integer</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDeveloperExtension.GetDeveloperExtensions">
            <summary>
            Generations the developer extension dictionary corresponding
            with the prefix.
            </summary>
            <returns>a PdfDictionary</returns>
        </member>
        <member name="T:iText.Kernel.Pdf.PdfDictionary">
            <summary>A representation of a Dictionary as described by the PDF Specification.</summary>
            <remarks>
            A representation of a Dictionary as described by the PDF Specification. A Dictionary is a mapping between keys
            and values. Keys are
            <see cref="T:iText.Kernel.Pdf.PdfName">PdfNames</see>
            and the values are
            <see cref="T:iText.Kernel.Pdf.PdfObject">PdfObjects</see>
            . Each key can only be associated with one value and
            adding a new value to an existing key will override the previous value. A value of null should be ignored when
            the PdfDocument is closed.
            </remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDictionary.#ctor">
            <summary>Creates a new PdfDictionary instance.</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDictionary.#ctor(System.Collections.Generic.IDictionary{iText.Kernel.Pdf.PdfName,iText.Kernel.Pdf.PdfObject})">
            <summary>Creates a new PdfDictionary instance.</summary>
            <remarks>
            Creates a new PdfDictionary instance. This constructor inserts the content of the specified Map into this
            PdfDictionary instance.
            </remarks>
            <param name="map">Map containing values to be inserted into PdfDictionary</param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDictionary.#ctor(System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{iText.Kernel.Pdf.PdfName,iText.Kernel.Pdf.PdfObject}})">
            <summary>Creates a new PdfDictionary instance.</summary>
            <remarks>
            Creates a new PdfDictionary instance. This constructor inserts the content of the specified Set into this
            PdfDictionary instance.
            </remarks>
            <param name="entrySet">Set containing Map#Entries to be inserted into PdfDictionary</param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDictionary.#ctor(iText.Kernel.Pdf.PdfDictionary)">
            <summary>Creates a new PdfDictionary instance.</summary>
            <remarks>
            Creates a new PdfDictionary instance. This constructor inserts the content of the specified PdfDictionary
            into this PdfDictionary instance.
            </remarks>
            <param name="dictionary">PdfDictionary containing values to be inserted into PdfDictionary</param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDictionary.Size">
            <summary>Returns the number of key-value pairs in this PdfDictionary.</summary>
            <returns>number of key-value pairs</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDictionary.IsEmpty">
            <summary>Returns true if there are no key-value pairs in this PdfDictionary.</summary>
            <returns>true if there are no key-value pairs in this PdfDictionary</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDictionary.ContainsKey(iText.Kernel.Pdf.PdfName)">
            <summary>Returns true if this PdfDictionary contains the specified key.</summary>
            <param name="key">the key to check</param>
            <returns>true if key is present in the PdfDictionary</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDictionary.ContainsValue(iText.Kernel.Pdf.PdfObject)">
            <summary>Returns true if this PdfDictionary contains the specified value.</summary>
            <param name="value">the value to check</param>
            <returns>true if value is present in the PdfDictionary</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDictionary.Get(iText.Kernel.Pdf.PdfName)">
            <summary>Returns the value associated to this key.</summary>
            <param name="key">the key of which the associated value needs to be returned</param>
            <returns>the value associated with this key</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDictionary.GetAsArray(iText.Kernel.Pdf.PdfName)">
            <summary>Returns the value associated to this key as a PdfArray.</summary>
            <remarks>Returns the value associated to this key as a PdfArray. If the value isn't a PdfArray, null is returned.
                </remarks>
            <param name="key">the key of which the associated value needs to be returned</param>
            <returns>PdfArray associated with this key</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDictionary.GetAsDictionary(iText.Kernel.Pdf.PdfName)">
            <summary>Returns the value associated to this key as a PdfDictionary.</summary>
            <remarks>Returns the value associated to this key as a PdfDictionary. If the value isn't a PdfDictionary, null is returned.
                </remarks>
            <param name="key">the key of which the associated value needs to be returned</param>
            <returns>PdfDictionary associated with this key</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDictionary.GetAsStream(iText.Kernel.Pdf.PdfName)">
            <summary>Returns the value associated to this key as a PdfStream.</summary>
            <remarks>Returns the value associated to this key as a PdfStream. If the value isn't a PdfStream, null is returned.
                </remarks>
            <param name="key">the key of which the associated value needs to be returned</param>
            <returns>PdfStream associated with this key</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDictionary.GetAsNumber(iText.Kernel.Pdf.PdfName)">
            <summary>Returns the value associated to this key as a PdfNumber.</summary>
            <remarks>Returns the value associated to this key as a PdfNumber. If the value isn't a PdfNumber, null is returned.
                </remarks>
            <param name="key">the key of which the associated value needs to be returned</param>
            <returns>PdfNumber associated with this key</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDictionary.GetAsName(iText.Kernel.Pdf.PdfName)">
            <summary>Returns the value associated to this key as a PdfName.</summary>
            <remarks>Returns the value associated to this key as a PdfName. If the value isn't a PdfName, null is returned.
                </remarks>
            <param name="key">the key of which the associated value needs to be returned</param>
            <returns>PdfName associated with this key</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDictionary.GetAsString(iText.Kernel.Pdf.PdfName)">
            <summary>Returns the value associated to this key as a PdfString.</summary>
            <remarks>Returns the value associated to this key as a PdfString. If the value isn't a PdfString, null is returned.
                </remarks>
            <param name="key">the key of which the associated value needs to be returned</param>
            <returns>PdfString associated with this key</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDictionary.GetAsBoolean(iText.Kernel.Pdf.PdfName)">
            <summary>Returns the value associated to this key as a PdfBoolean.</summary>
            <remarks>Returns the value associated to this key as a PdfBoolean. If the value isn't a PdfBoolean, null is returned.
                </remarks>
            <param name="key">the key of which the associated value needs to be returned</param>
            <returns>PdfBoolean associated with this key</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDictionary.GetAsRectangle(iText.Kernel.Pdf.PdfName)">
            <summary>Returns the value associated to this key as a Rectangle.</summary>
            <remarks>
            Returns the value associated to this key as a Rectangle. If the value isn't a PdfArray of which the
            firt four elements are PdfNumbers, null is returned.
            </remarks>
            <param name="key">the key of which the associated value needs to be returned</param>
            <returns>PdfArray associated with this key</returns>
            <seealso cref="M:iText.Kernel.Pdf.PdfArray.ToRectangle"/>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDictionary.GetAsFloat(iText.Kernel.Pdf.PdfName)">
            <summary>Returns the value associated to this key as a Float.</summary>
            <remarks>Returns the value associated to this key as a Float. If the value isn't a Pdfnumber, null is returned.
                </remarks>
            <param name="key">the key of which the associated value needs to be returned</param>
            <returns>Float associated with this key</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDictionary.GetAsInt(iText.Kernel.Pdf.PdfName)">
            <summary>Returns the value associated to this key as an Integer.</summary>
            <remarks>Returns the value associated to this key as an Integer. If the value isn't a Pdfnumber, null is returned.
                </remarks>
            <param name="key">the key of which the associated value needs to be returned</param>
            <returns>Integer associated with this key</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDictionary.GetAsBool(iText.Kernel.Pdf.PdfName)">
            <summary>Returns the value associated to this key as a Boolean.</summary>
            <remarks>Returns the value associated to this key as a Boolean. If the value isn't a PdfBoolean, null is returned.
                </remarks>
            <param name="key">the key of which the associated value needs to be returned</param>
            <returns>Boolean associated with this key</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDictionary.Put(iText.Kernel.Pdf.PdfName,iText.Kernel.Pdf.PdfObject)">
            <summary>Inserts the value into this PdfDictionary and associates it with the specified key.</summary>
            <remarks>
            Inserts the value into this PdfDictionary and associates it with the specified key. If the key is already
            present in this PdfDictionary, this method will override the old value with the specified one.
            </remarks>
            <param name="key">key to insert or to override</param>
            <param name="value">the value to associate with the specified key</param>
            <returns>the previous PdfObject associated with this key</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDictionary.Remove(iText.Kernel.Pdf.PdfName)">
            <summary>Removes the specified key from this PdfDictionary.</summary>
            <param name="key">key to be removed</param>
            <returns>the removed value associated with the specified key</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDictionary.PutAll(iText.Kernel.Pdf.PdfDictionary)">
            <summary>Inserts all the key-value pairs into this PdfDictionary.</summary>
            <param name="d">PdfDictionary holding the key-value pairs to be copied</param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDictionary.Clear">
            <summary>Removes all key-value pairs from this PdfDictionary.</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDictionary.KeySet">
            <summary>Returns all the keys of this PdfDictionary as a Set.</summary>
            <returns>Set of keys</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDictionary.Values(System.Boolean)">
            <summary>Returns all the values of this map in a Collection.</summary>
            <param name="asDirects">
            if false, collection will contain
            <see cref="T:iText.Kernel.Pdf.PdfIndirectReference"/>
            instances
            for the indirect objects in dictionary, otherwise it will contain collection of direct objects.
            </param>
            <returns>a Collection holding all the values</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDictionary.Values">
            <summary>Returns all the values of this map in a Collection.</summary>
            <remarks>
            Returns all the values of this map in a Collection.
            <br />
            <b>NOTE:</b> since 7.0.1 it returns collection of direct objects.
            If you want to get
            <see cref="T:iText.Kernel.Pdf.PdfIndirectReference"/>
            instances for the indirect objects value,
            you shall use
            <see cref="M:iText.Kernel.Pdf.PdfDictionary.Values(System.Boolean)"/>
            method.
            </remarks>
            <returns>a Collection holding all the values</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDictionary.EntrySet">
            <summary>Returns a Set holding the key-value pairs as Map#Entry objects.</summary>
            <remarks>
            Returns a Set holding the key-value pairs as Map#Entry objects.
            <br />
            <b>NOTE:</b> since 7.0.1 it returns collection of direct objects.
            If you want to get
            <see cref="T:iText.Kernel.Pdf.PdfIndirectReference"/>
            instances for the indirect objects value,
            you shall use
            <see cref="M:iText.Kernel.Pdf.PdfDictionary.Get(iText.Kernel.Pdf.PdfName,System.Boolean)"/>
            method.
            </remarks>
            <returns>a Set of Map.Entry objects</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDictionary.Clone(System.Collections.Generic.IList{iText.Kernel.Pdf.PdfName})">
            <summary>Creates clones of the dictionary in the current document.</summary>
            <remarks>
            Creates clones of the dictionary in the current document.
            It's possible to pass a list of keys to exclude when cloning.
            </remarks>
            <param name="excludeKeys">list of objects to exclude when cloning dictionary.</param>
            <returns>cloned dictionary.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDictionary.CopyTo(iText.Kernel.Pdf.PdfDocument,System.Collections.Generic.IList{iText.Kernel.Pdf.PdfName},System.Boolean)">
            <summary>Copies dictionary to specified document.</summary>
            <remarks>
            Copies dictionary to specified document.
            It's possible to pass a list of keys to exclude when copying.
            </remarks>
            <param name="document">document to copy dictionary to.</param>
            <param name="excludeKeys">list of objects to exclude when copying dictionary.</param>
            <param name="allowDuplicating">
            
            <see cref="M:iText.Kernel.Pdf.PdfObject.CopyTo(iText.Kernel.Pdf.PdfDocument,System.Boolean)"/>
            </param>
            <returns>copied dictionary.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDictionary.Get(iText.Kernel.Pdf.PdfName,System.Boolean)">
            <param name="asDirect">true is to extract direct object always.</param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDictionary.MergeDifferent(iText.Kernel.Pdf.PdfDictionary)">
            <summary>This method merges different fields from two dictionaries into the current one</summary>
            <param name="other">a dictionary whose fields should be merged into the current dictionary.</param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDictionary.ReleaseContent">
            <summary>Release content of PdfDictionary.</summary>
        </member>
        <member name="T:iText.Kernel.Pdf.PdfDocument">
            <summary>Main enter point to work with PDF document.</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.PdfDocument.currentPage">
            <summary>Currently active page.</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.PdfDocument.defaultPageSize">
            <summary>Default page size.</summary>
            <remarks>
            Default page size.
            New page by default will be created with this size.
            </remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.PdfDocument.writer">
            <summary>PdfWriter associated with the document.</summary>
            <remarks>
            PdfWriter associated with the document.
            Not null if document opened either in writing or stamping mode.
            </remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.PdfDocument.reader">
            <summary>PdfReader associated with the document.</summary>
            <remarks>
            PdfReader associated with the document.
            Not null if document is opened either in reading or stamping mode.
            </remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.PdfDocument.xmpMetadata">
            <summary>XMP Metadata for the document.</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.PdfDocument.catalog">
            <summary>Document catalog.</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.PdfDocument.trailer">
            <summary>Document trailed.</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.PdfDocument.info">
            <summary>Document info.</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.PdfDocument.pdfVersion">
            <summary>Document version.</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.PdfDocument.originalModifiedDocumentId">
            <summary>The original second id when the document is read initially.</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.PdfDocument.xref">
            <summary>List of indirect objects used in the document.</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.PdfDocument.flushUnusedObjects">
            <summary>flag determines whether to write unused objects to result document</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.PdfDocument.linkAnnotations">
            <summary>Yet not copied link annotations from the other documents.</summary>
            <remarks>
            Yet not copied link annotations from the other documents.
            Key - page from the source document, which contains this annotation.
            Value - link annotation from the source document.
            </remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.PdfDocument.serializedObjectsCache">
            <summary>Cache of already serialized objects from this document for smart mode.</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.#ctor(iText.Kernel.Pdf.PdfReader)">
            <summary>Open PDF document in reading mode.</summary>
            <param name="reader">PDF reader.</param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.#ctor(iText.Kernel.Pdf.PdfReader,iText.Kernel.Pdf.DocumentProperties)">
            <summary>Open PDF document in reading mode.</summary>
            <param name="reader">PDF reader.</param>
            <param name="properties">document properties</param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.#ctor(iText.Kernel.Pdf.PdfWriter)">
            <summary>Open PDF document in writing mode.</summary>
            <remarks>
            Open PDF document in writing mode.
            Document has no pages when initialized.
            </remarks>
            <param name="writer">PDF writer</param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.#ctor(iText.Kernel.Pdf.PdfWriter,iText.Kernel.Pdf.DocumentProperties)">
            <summary>Open PDF document in writing mode.</summary>
            <remarks>
            Open PDF document in writing mode.
            Document has no pages when initialized.
            </remarks>
            <param name="writer">PDF writer</param>
            <param name="properties">document properties</param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.#ctor(iText.Kernel.Pdf.PdfReader,iText.Kernel.Pdf.PdfWriter)">
            <summary>Opens PDF document in the stamping mode.</summary>
            <remarks>
            Opens PDF document in the stamping mode.
            <br />
            </remarks>
            <param name="reader">PDF reader.</param>
            <param name="writer">PDF writer.</param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.#ctor(iText.Kernel.Pdf.PdfReader,iText.Kernel.Pdf.PdfWriter,iText.Kernel.Pdf.StampingProperties)">
            <summary>Open PDF document in stamping mode.</summary>
            <param name="reader">PDF reader.</param>
            <param name="writer">PDF writer.</param>
            <param name="properties">properties of the stamping process</param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.SetXmpMetadata(System.Byte[])">
            <summary>Use this method to set the XMP Metadata.</summary>
            <param name="xmpMetadata">The xmpMetadata to set.</param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.SetXmpMetadata(iText.Kernel.XMP.XMPMeta,iText.Kernel.XMP.Options.SerializeOptions)">
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.SetXmpMetadata(iText.Kernel.XMP.XMPMeta)">
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.GetXmpMetadata">
            <summary>Gets XMPMetadata.</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.GetXmpMetadata(System.Boolean)">
            <summary>Gets XMPMetadata or create a new one.</summary>
            <param name="createNew">if true, create a new empty XMPMetadata if it did not present.</param>
            <returns>existed or newly created XMPMetadata byte array.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.GetPdfObject(System.Int32)">
            <summary>Gets PdfObject by object number.</summary>
            <param name="objNum">object number.</param>
            <returns>
            
            <see cref="T:iText.Kernel.Pdf.PdfObject"/>
            or
            <see langword="null"/>
            , if object not found.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.GetNumberOfPdfObjects">
            <summary>Get number of indirect objects in the document.</summary>
            <returns>number of indirect objects.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.GetPage(System.Int32)">
            <summary>Gets the page by page number.</summary>
            <param name="pageNum">page number.</param>
            <returns>
            page by page number. may return
            <see langword="null"/>
            in case the page tree is broken
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.GetPage(iText.Kernel.Pdf.PdfDictionary)">
            <summary>
            Gets the
            <see cref="T:iText.Kernel.Pdf.PdfPage"/>
            instance by
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            .
            </summary>
            <param name="pageDictionary">
            
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            that present page.
            </param>
            <returns>
            page by
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            .
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.GetFirstPage">
            <summary>Get the first page of the document.</summary>
            <returns>first page of the document.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.GetLastPage">
            <summary>Gets the last page of the document.</summary>
            <returns>last page.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.AddNewPage">
            <summary>Creates and adds new page to the end of document.</summary>
            <returns>added page</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.AddNewPage(iText.Kernel.Geom.PageSize)">
            <summary>Creates and adds new page with the specified page size.</summary>
            <param name="pageSize">page size of the new page</param>
            <returns>added page</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.AddNewPage(System.Int32)">
            <summary>Creates and inserts new page to the document.</summary>
            <param name="index">position to addPage page to</param>
            <returns>inserted page</returns>
            <exception cref="T:iText.Kernel.PdfException">
            in case
            <c>page</c>
            is flushed
            </exception>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.AddNewPage(System.Int32,iText.Kernel.Geom.PageSize)">
            <summary>Creates and inserts new page to the document.</summary>
            <param name="index">position to addPage page to</param>
            <param name="pageSize">page size of the new page</param>
            <returns>inserted page</returns>
            <exception cref="T:iText.Kernel.PdfException">
            in case
            <c>page</c>
            is flushed
            </exception>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.AddPage(iText.Kernel.Pdf.PdfPage)">
            <summary>Adds page to the end of document.</summary>
            <param name="page">page to add.</param>
            <returns>added page.</returns>
            <exception cref="T:iText.Kernel.PdfException">
            in case
            <paramref name="page"/>
            is flushed
            </exception>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.AddPage(System.Int32,iText.Kernel.Pdf.PdfPage)">
            <summary>Inserts page to the document.</summary>
            <param name="index">position to addPage page to</param>
            <param name="page">page to addPage</param>
            <returns>inserted page</returns>
            <exception cref="T:iText.Kernel.PdfException">
            in case
            <paramref name="page"/>
            is flushed
            </exception>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.GetNumberOfPages">
            <summary>Gets number of pages of the document.</summary>
            <returns>number of pages.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.GetPageNumber(iText.Kernel.Pdf.PdfPage)">
            <summary>Gets page number by page.</summary>
            <param name="page">the page.</param>
            <returns>page number.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.GetPageNumber(iText.Kernel.Pdf.PdfDictionary)">
            <summary>
            Gets page number by
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            .
            </summary>
            <param name="pageDictionary">
            
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            that present page.
            </param>
            <returns>
            page number by
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            .
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.MovePage(iText.Kernel.Pdf.PdfPage,System.Int32)">
            <summary>Moves page to new place in same document with all it tag structure</summary>
            <param name="page">page to be moved in document if present</param>
            <param name="insertBefore">indicates before which page new one will be inserted to</param>
            <returns><tt>true</tt> if this document contained the specified page</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.MovePage(System.Int32,System.Int32)">
            <summary>Moves page to new place in same document with all it tag structure</summary>
            <param name="pageNumber">number of Page that will be moved</param>
            <param name="insertBefore">indicates before which page new one will be inserted to</param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.RemovePage(iText.Kernel.Pdf.PdfPage)">
            <summary>
            Removes the first occurrence of the specified page from this document,
            if it is present.
            </summary>
            <remarks>
            Removes the first occurrence of the specified page from this document,
            if it is present. Returns <tt>true</tt> if this document
            contained the specified element (or equivalently, if this document
            changed as a result of the call).
            </remarks>
            <param name="page">page to be removed from this document, if present</param>
            <returns><tt>true</tt> if this document contained the specified page</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.RemovePage(System.Int32)">
            <summary>Removes page from the document by page number.</summary>
            <param name="pageNum">the one-based index of the PdfPage to be removed</param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.GetDocumentInfo">
            <summary>Gets document information dictionary.</summary>
            <returns>document information dictionary.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.GetDefaultPageSize">
            <summary>Gets default page size.</summary>
            <returns>default page size.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.SetDefaultPageSize(iText.Kernel.Geom.PageSize)">
            <summary>Sets default page size.</summary>
            <param name="pageSize">page size to be set as default.</param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.AddEventHandler(System.String,iText.Kernel.Events.IEventHandler)">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.DispatchEvent(iText.Kernel.Events.Event)">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.DispatchEvent(iText.Kernel.Events.Event,System.Boolean)">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.HasEventHandler(System.String)">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.RemoveEventHandler(System.String,iText.Kernel.Events.IEventHandler)">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.RemoveAllHandlers">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.GetWriter">
            <summary>
            Gets
            <c>PdfWriter</c>
            associated with the document.
            </summary>
            <returns>PdfWriter associated with the document.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.GetReader">
            <summary>
            Gets
            <c>PdfReader</c>
            associated with the document.
            </summary>
            <returns>PdfReader associated with the document.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.IsAppendMode">
            <summary>
            Returns
            <see langword="true"/>
            if the document is opened in append mode, and
            <see langword="false"/>
            otherwise.
            </summary>
            <returns>
            
            <see langword="true"/>
            if the document is opened in append mode, and
            <see langword="false"/>
            otherwise.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.CreateNextIndirectReference">
            <summary>Creates next available indirect reference.</summary>
            <returns>created indirect reference.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.GetPdfVersion">
            <summary>Gets PDF version.</summary>
            <returns>PDF version.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.GetCatalog">
            <summary>Gets PDF catalog.</summary>
            <returns>PDF catalog.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.Close">
            <summary>Close PDF document.</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.IsClosed">
            <summary>Gets close status of the document.</summary>
            <returns>true, if the document has already been closed, otherwise false.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.IsTagged">
            <summary>Gets tagged status of the document.</summary>
            <returns>true, if the document has tag structure, otherwise false.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.SetTagged">
            <summary>Specifies that document shall contain tag structure.</summary>
            <remarks>
            Specifies that document shall contain tag structure.
            See ISO 32000-1, section 14.8 "Tagged PDF"
            </remarks>
            <returns>this PdfDocument</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.GetStructTreeRoot">
            <summary>
            Gets
            <see cref="T:iText.Kernel.Pdf.Tagging.PdfStructTreeRoot"/>
            of tagged document.
            </summary>
            <returns>
            
            <see cref="T:iText.Kernel.Pdf.Tagging.PdfStructTreeRoot"/>
            in case tagged document, otherwise false.
            </returns>
            <seealso cref="M:iText.Kernel.Pdf.PdfDocument.IsTagged"/>
            <seealso cref="M:iText.Kernel.Pdf.PdfDocument.GetNextStructParentIndex"/>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.GetNextStructParentIndex">
            <summary>Gets next parent index of tagged document.</summary>
            <returns>-1 if document is not tagged, or &gt;= 0 if tagged.</returns>
            <seealso cref="M:iText.Kernel.Pdf.PdfDocument.IsTagged"/>
            <seealso cref="M:iText.Kernel.Pdf.PdfDocument.GetNextStructParentIndex"/>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.GetTagStructureContext">
            <summary>
            Gets document
            <c>TagStructureContext</c>
            .
            The document must be tagged, otherwise an exception will be thrown.
            </summary>
            <returns>
            document
            <c>TagStructureContext</c>
            .
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.CopyPagesTo(System.Int32,System.Int32,iText.Kernel.Pdf.PdfDocument,System.Int32)">
            <summary>
            Copies a range of pages from current document to
            <paramref name="toDocument"/>
            .
            Use this method if you want to copy pages across tagged documents.
            This will keep resultant PDF structure consistent.
            </summary>
            <param name="pageFrom">start of the range of pages to be copied.</param>
            <param name="pageTo">end of the range of pages to be copied.</param>
            <param name="toDocument">a document to copy pages to.</param>
            <param name="insertBeforePage">a position where to insert copied pages.</param>
            <returns>list of copied pages</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.CopyPagesTo(System.Int32,System.Int32,iText.Kernel.Pdf.PdfDocument,System.Int32,iText.Kernel.Pdf.IPdfPageExtraCopier)">
            <summary>
            Copies a range of pages from current document to
            <paramref name="toDocument"/>
            . This range is inclusive, both
            <c>page</c>
            and
            <paramref name="pageTo"/>
            are included in list of copied pages.
            Use this method if you want to copy pages across tagged documents.
            This will keep resultant PDF structure consistent.
            </summary>
            <param name="pageFrom">1-based start of the range of pages to be copied.</param>
            <param name="pageTo">1-based end (inclusive) of the range of pages to be copied. This page is included in list of copied pages.
                </param>
            <param name="toDocument">a document to copy pages to.</param>
            <param name="insertBeforePage">a position where to insert copied pages.</param>
            <param name="copier">
            a copier which bears a special copy logic. May be null.
            It is recommended to use the same instance of
            <see cref="T:iText.Kernel.Pdf.IPdfPageExtraCopier"/>
            for the same output document.
            </param>
            <returns>list of new copied pages</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.CopyPagesTo(System.Int32,System.Int32,iText.Kernel.Pdf.PdfDocument)">
            <summary>
            Copies a range of pages from current document to
            <paramref name="toDocument"/>
            appending copied pages to the end. This range
            is inclusive, both
            <c>page</c>
            and
            <paramref name="pageTo"/>
            are included in list of copied pages.
            Use this method if you want to copy pages across tagged documents.
            This will keep resultant PDF structure consistent.
            </summary>
            <param name="pageFrom">1-based start of the range of pages to be copied.</param>
            <param name="pageTo">1-based end (inclusive) of the range of pages to be copied. This page is included in list of copied pages.
                </param>
            <param name="toDocument">a document to copy pages to.</param>
            <returns>list of new copied pages</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.CopyPagesTo(System.Int32,System.Int32,iText.Kernel.Pdf.PdfDocument,iText.Kernel.Pdf.IPdfPageExtraCopier)">
            <summary>
            Copies a range of pages from current document to
            <paramref name="toDocument"/>
            appending copied pages to the end. This range
            is inclusive, both
            <c>page</c>
            and
            <paramref name="pageTo"/>
            are included in list of copied pages.
            Use this method if you want to copy pages across tagged documents.
            This will keep resultant PDF structure consistent.
            </summary>
            <param name="pageFrom">1-based start of the range of pages to be copied.</param>
            <param name="pageTo">1-based end (inclusive) of the range of pages to be copied. This page is included in list of copied pages.
                </param>
            <param name="toDocument">a document to copy pages to.</param>
            <param name="copier">
            a copier which bears a special copy logic. May be null.
            It is recommended to use the same instance of
            <see cref="T:iText.Kernel.Pdf.IPdfPageExtraCopier"/>
            for the same output document.
            </param>
            <returns>list of new copied pages.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.CopyPagesTo(System.Collections.Generic.IList{System.Int32},iText.Kernel.Pdf.PdfDocument,System.Int32)">
            <summary>
            Copies a range of pages from current document to
            <paramref name="toDocument"/>
            .
            Use this method if you want to copy pages across tagged documents.
            This will keep resultant PDF structure consistent.
            </summary>
            <param name="pagesToCopy">list of pages to be copied.</param>
            <param name="toDocument">a document to copy pages to.</param>
            <param name="insertBeforePage">a position where to insert copied pages.</param>
            <returns>list of new copied pages</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.CopyPagesTo(System.Collections.Generic.IList{System.Int32},iText.Kernel.Pdf.PdfDocument,System.Int32,iText.Kernel.Pdf.IPdfPageExtraCopier)">
            <summary>
            Copies a range of pages from current document to
            <paramref name="toDocument"/>
            .
            Use this method if you want to copy pages across tagged documents.
            This will keep resultant PDF structure consistent.
            </summary>
            <param name="pagesToCopy">list of pages to be copied.</param>
            <param name="toDocument">a document to copy pages to.</param>
            <param name="insertBeforePage">a position where to insert copied pages.</param>
            <param name="copier">
            a copier which bears a special copy logic. May be null.
            It is recommended to use the same instance of
            <see cref="T:iText.Kernel.Pdf.IPdfPageExtraCopier"/>
            for the same output document.
            </param>
            <returns>list of new copied pages</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.CopyPagesTo(System.Collections.Generic.IList{System.Int32},iText.Kernel.Pdf.PdfDocument)">
            <summary>
            Copies a range of pages from current document to
            <paramref name="toDocument"/>
            appending copied pages to the end.
            Use this method if you want to copy pages across tagged documents.
            This will keep resultant PDF structure consistent.
            </summary>
            <param name="pagesToCopy">list of pages to be copied.</param>
            <param name="toDocument">a document to copy pages to.</param>
            <returns>list of copied pages</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.CopyPagesTo(System.Collections.Generic.IList{System.Int32},iText.Kernel.Pdf.PdfDocument,iText.Kernel.Pdf.IPdfPageExtraCopier)">
            <summary>
            Copies a range of pages from current document to
            <paramref name="toDocument"/>
            appending copied pages to the end.
            Use this method if you want to copy pages across tagged documents.
            This will keep resultant PDF structure consistent.
            </summary>
            <param name="pagesToCopy">list of pages to be copied.</param>
            <param name="toDocument">a document to copy pages to.</param>
            <param name="copier">
            a copier which bears a special copy logic. May be null.
            It is recommended to use the same instance of
            <see cref="T:iText.Kernel.Pdf.IPdfPageExtraCopier"/>
            for the same output document.
            </param>
            <returns>list of copied pages</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.FlushCopiedObjects(iText.Kernel.Pdf.PdfDocument)">
            <summary>Flush all copied objects and remove them from copied cache.</summary>
            <remarks>
            Flush all copied objects and remove them from copied cache.
            Note, if you will copy objects from the same document, doublicated objects will be created.
            </remarks>
            <param name="sourceDoc">source document</param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.IsCloseReader">
            <summary>
            Checks, whether
            <see cref="M:iText.Kernel.Pdf.PdfDocument.Close"/>
            method will close associated PdfReader.
            </summary>
            <returns>
            true,
            <see cref="M:iText.Kernel.Pdf.PdfDocument.Close"/>
            method is going to close associated PdfReader, otherwise false.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.SetCloseReader(System.Boolean)">
            <summary>
            Sets, whether
            <see cref="M:iText.Kernel.Pdf.PdfDocument.Close"/>
            method shall close associated PdfReader.
            </summary>
            <param name="closeReader">
            true,
            <see cref="M:iText.Kernel.Pdf.PdfDocument.Close"/>
            method shall close associated PdfReader, otherwise false.
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.IsCloseWriter">
            <summary>
            Checks, whether
            <see cref="M:iText.Kernel.Pdf.PdfDocument.Close"/>
            method will close associated PdfWriter.
            </summary>
            <returns>
            true,
            <see cref="M:iText.Kernel.Pdf.PdfDocument.Close"/>
            method is going to close associated PdfWriter, otherwise false.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.SetCloseWriter(System.Boolean)">
            <summary>
            Sets, whether
            <see cref="M:iText.Kernel.Pdf.PdfDocument.Close"/>
            method shall close associated PdfWriter.
            </summary>
            <param name="closeWriter">
            true,
            <see cref="M:iText.Kernel.Pdf.PdfDocument.Close"/>
            method shall close associated PdfWriter, otherwise false.
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.IsFlushUnusedObjects">
            <summary>
            Checks, whether
            <see cref="M:iText.Kernel.Pdf.PdfDocument.Close"/>
            will flush unused objects,
            e.g. unreachable from PDF Catalog. By default - false.
            </summary>
            <returns>
            false, if
            <see cref="M:iText.Kernel.Pdf.PdfDocument.Close"/>
            shall not flush unused objects, otherwise true.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.SetFlushUnusedObjects(System.Boolean)">
            <summary>
            Sets, whether
            <see cref="M:iText.Kernel.Pdf.PdfDocument.Close"/>
            shall flush unused objects,
            e.g. unreachable from PDF Catalog.
            </summary>
            <param name="flushUnusedObjects">
            false, if
            <see cref="M:iText.Kernel.Pdf.PdfDocument.Close"/>
            shall not flush unused objects, otherwise true.
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.GetOutlines(System.Boolean)">
            <summary>This method returns a complete outline tree of the whole document.</summary>
            <param name="updateOutlines">
            if the flag is true, the method read the whole document and creates outline tree.
            If false the method gets cached outline tree (if it was cached via calling getOutlines method before).
            </param>
            <returns>
            fully initialize
            <see cref="T:iText.Kernel.Pdf.PdfOutline"/>
            object.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.InitializeOutlines">
            <summary>This method initializes an outline tree of the document and sets outline mode to true.</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.AddNamedDestination(System.String,iText.Kernel.Pdf.PdfObject)">
            <summary>This methods adds new name in the Dests NameTree.</summary>
            <remarks>This methods adds new name in the Dests NameTree. It throws an exception, if the name already exists.
                </remarks>
            <param name="key">Name of the destination.</param>
            <param name="value">
            An object destination refers to. Must be an array or a dictionary with key /D and array.
            See ISO 32000-1 12.3.2.3 for more info.
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.ListIndirectReferences">
            <summary>Gets static copy of cross reference table.</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.GetTrailer">
            <summary>Gets document trailer.</summary>
            <returns>document trailer.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.AddOutputIntent(iText.Kernel.Pdf.PdfOutputIntent)">
            <summary>
            Adds
            <see cref="T:iText.Kernel.Pdf.PdfOutputIntent"/>
            that shall specify the colour characteristics of output devices
            on which the document might be rendered.
            </summary>
            <param name="outputIntent">
            
            <see cref="T:iText.Kernel.Pdf.PdfOutputIntent"/>
            to add.
            </param>
            <seealso cref="T:iText.Kernel.Pdf.PdfOutputIntent"/>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.CheckIsoConformance(System.Object,iText.Kernel.Pdf.IsoKey)">
            <summary>Checks whether PDF document conforms a specific standard.</summary>
            <remarks>
            Checks whether PDF document conforms a specific standard.
            Shall be override.
            </remarks>
            <param name="obj">An object to conform.</param>
            <param name="key">type of object to conform.</param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.CheckIsoConformance(System.Object,iText.Kernel.Pdf.IsoKey,iText.Kernel.Pdf.PdfResources)">
            <summary>Checks whether PDF document conforms a specific standard.</summary>
            <remarks>
            Checks whether PDF document conforms a specific standard.
            Shall be override.
            </remarks>
            <param name="obj">an object to conform.</param>
            <param name="key">type of object to conform.</param>
            <param name="resources">
            
            <see cref="T:iText.Kernel.Pdf.PdfResources"/>
            associated with an object to check.
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.CheckIsoConformance(System.Object,iText.Kernel.Pdf.IsoKey,iText.Kernel.Pdf.PdfResources,iText.Kernel.Pdf.PdfStream)">
            <summary>Checks whether PDF document conforms a specific standard.</summary>
            <remarks>
            Checks whether PDF document conforms a specific standard.
            Shall be override.
            </remarks>
            <param name="obj">an object to conform.</param>
            <param name="key">type of object to conform.</param>
            <param name="resources">
            
            <see cref="T:iText.Kernel.Pdf.PdfResources"/>
            associated with an object to check.
            </param>
            <param name="contentStream">current content stream</param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.CheckShowTextIsoConformance(iText.Kernel.Pdf.Canvas.CanvasGraphicsState,iText.Kernel.Pdf.PdfResources)">
            <summary>Checks whether PDF document conforms a specific standard.</summary>
            <remarks>
            Checks whether PDF document conforms a specific standard.
            Shall be override.
            </remarks>
            <param name="gState">
            a
            <see cref="T:iText.Kernel.Pdf.Canvas.CanvasGraphicsState"/>
            object to conform.
            </param>
            <param name="resources">
            
            <see cref="T:iText.Kernel.Pdf.PdfResources"/>
            associated with an object to check.
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.AddFileAttachment(System.String,iText.Kernel.Pdf.Filespec.PdfFileSpec)">
            <summary>Adds file attachment at document level.</summary>
            <param name="description">the file description</param>
            <param name="fs">
            
            <see cref="T:iText.Kernel.Pdf.Filespec.PdfFileSpec"/>
            object.
            </param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.Pdf.PdfDocument.AddAssociatedFile(System.String,iText.Kernel.Pdf.Filespec.PdfFileSpec)" -->
        <member name="M:iText.Kernel.Pdf.PdfDocument.GetAssociatedFiles">
            <summary>Returns files associated with PDF document.</summary>
            <returns>associated files array.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.GetEncryptedPayloadDocument">
            <summary>
            Gets the encrypted payload of this document,
            or returns
            <see langword="null"/>
            if this document isn't an unencrypted wrapper document.
            </summary>
            <returns>encrypted payload of this document.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.SetEncryptedPayload(iText.Kernel.Pdf.Filespec.PdfFileSpec)">
            <summary>Sets an encrypted payload, making this document an unencrypted wrapper document.</summary>
            <remarks>
            Sets an encrypted payload, making this document an unencrypted wrapper document.
            The file spec shall include the AFRelationship key with a value of EncryptedPayload,
            and shall include an encrypted payload dictionary.
            </remarks>
            <param name="fs">
            encrypted payload file spec.
            <see cref="T:iText.Kernel.Pdf.Filespec.PdfEncryptedPayloadFileSpecFactory"/>
            can produce one.
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.GetPageLabels">
            <summary>This method retrieves the page labels from a document as an array of String objects.</summary>
            <returns>
            
            <see cref="T:System.String"/>
            list of page labels if they were found, or
            <see langword="null"/>
            otherwise
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.HasOutlines">
            <summary>Indicates if the document has any outlines</summary>
            <returns>
            
            <see langword="true"/>
            , if there are outlines and
            <see langword="false"/>
            otherwise.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.SetUserProperties(System.Boolean)">
            <summary>Sets the flag indicating the presence of structure elements that contain user properties attributes.
                </summary>
            <param name="userProperties">the user properties flag</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.Pdf.PdfDocument.GetFont(iText.Kernel.Pdf.PdfDictionary)" -->
        <member name="M:iText.Kernel.Pdf.PdfDocument.GetDefaultFont">
            <summary>Gets default font for the document: Helvetica, WinAnsi.</summary>
            <remarks>
            Gets default font for the document: Helvetica, WinAnsi.
            One instance per document.
            </remarks>
            <returns>
            instance of
            <see cref="T:iText.Kernel.Font.PdfFont"/>
            or
            <see langword="null"/>
            on error.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.AddFont(iText.Kernel.Font.PdfFont)">
            <summary>
            Adds a
            <see cref="T:iText.Kernel.Font.PdfFont"/>
            instance to this document so that this font is flushed automatically
            on document close. As a side effect, the underlying font dictionary is made indirect if it wasn't the case yet
            </summary>
            <returns>the same PdfFont instance.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.RegisterProduct(iText.Kernel.ProductInfo)">
            <summary>Registers a product for debugging purposes.</summary>
            <param name="productInfo">product to be registered.</param>
            <returns>true if the product hadn't been registered before.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.GetFingerPrint">
            <summary>Returns the object containing the registered products.</summary>
            <returns>fingerprint object</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.GetXref">
            <summary>Gets list of indirect references.</summary>
            <returns>list of indirect references.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.InitTagStructureContext">
            <summary>
            Initialize
            <see cref="T:iText.Kernel.Pdf.Tagutils.TagStructureContext"/>
            .
            </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.StoreLinkAnnotation(iText.Kernel.Pdf.PdfPage,iText.Kernel.Pdf.Annot.PdfLinkAnnotation)">
            <summary>Save the link annotation in a temporary storage for further copying.</summary>
            <param name="page">
            just copied
            <see cref="T:iText.Kernel.Pdf.PdfPage"/>
            link annotation belongs to.
            </param>
            <param name="annotation">
            
            <see cref="T:iText.Kernel.Pdf.Annot.PdfLinkAnnotation"/>
            itself.
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.CheckIsoConformance">
            <summary>Checks whether PDF document conforms a specific standard.</summary>
            <remarks>
            Checks whether PDF document conforms a specific standard.
            Shall be override.
            </remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.MarkObjectAsMustBeFlushed(iText.Kernel.Pdf.PdfObject)">
            <summary>
            Mark an object with
            <see cref="F:iText.Kernel.Pdf.PdfObject.MUST_BE_FLUSHED"/>
            .
            </summary>
            <param name="pdfObject">an object to mark.</param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.FlushObject(iText.Kernel.Pdf.PdfObject,System.Boolean)">
            <summary>Flush an object.</summary>
            <param name="pdfObject">object to flush.</param>
            <param name="canBeInObjStm">indicates whether object can be placed into object stream.</param>
            <exception cref="T:System.IO.IOException">on error.</exception>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.Open(iText.Kernel.Pdf.PdfVersion)">
            <summary>Initializes document.</summary>
            <param name="newPdfVersion">
            new pdf version of the resultant file if stamper is used and the version needs to be changed,
            or
            <see langword="null"/>
            otherwise
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.AddCustomMetadataExtensions(iText.Kernel.XMP.XMPMeta)">
            <summary>Adds custom XMP metadata extension.</summary>
            <remarks>Adds custom XMP metadata extension. Useful for PDF/UA, ZUGFeRD, etc.</remarks>
            <param name="xmpMeta">
            
            <see cref="T:iText.Kernel.XMP.XMPMeta"/>
            to add custom metadata to.
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.UpdateXmpMetadata">
            <summary>Updates XMP metadata.</summary>
            <remarks>
            Updates XMP metadata.
            Shall be override.
            </remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.UpdateDefaultXmpMetadata">
            <summary>
            Update XMP metadata values from
            <see cref="T:iText.Kernel.Pdf.PdfDocumentInfo"/>
            .
            </summary>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.GetDocumentFonts">
            <summary>List all newly added or loaded fonts</summary>
            <returns>
            List of
            <see cref="T:iText.Kernel.Font.PdfFont"/>
            .
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.CheckAndAddPage(System.Int32,iText.Kernel.Pdf.PdfPage)">
            <summary>Checks page before adding and add.</summary>
            <param name="index">one-base index of the page.</param>
            <param name="page">
            
            <see cref="T:iText.Kernel.Pdf.PdfPage"/>
            to add.
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.CheckAndAddPage(iText.Kernel.Pdf.PdfPage)">
            <summary>Checks page before adding.</summary>
            <param name="page">
            
            <see cref="T:iText.Kernel.Pdf.PdfPage"/>
            to add.
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.CheckClosingStatus">
            <summary>checks whether a method is invoked at the closed document</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.GetCounters">
            <summary>
            Gets all
            <see cref="T:iText.Kernel.Log.ICounter"/>
            instances.
            </summary>
            <returns>
            list of
            <see cref="T:iText.Kernel.Log.ICounter"/>
            instances.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.GetVersionInfo">
            <summary>Gets iText version info.</summary>
            <returns>iText version info.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.RemoveUnusedWidgetsFromFields(iText.Kernel.Pdf.PdfPage)">
            <summary>This method removes all annotation entries from form fields associated with a given page.</summary>
            <param name="page">to remove from.</param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.CopyOutlines(System.Collections.Generic.ICollection{iText.Kernel.Pdf.PdfOutline},iText.Kernel.Pdf.PdfDocument,System.Collections.Generic.IDictionary{iText.Kernel.Pdf.PdfPage,iText.Kernel.Pdf.PdfPage})">
            <summary>This method copies all given outlines</summary>
            <param name="outlines">outlines to be copied</param>
            <param name="toDocument">document where outlines should be copied</param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.GetAllOutlinesToCopy(iText.Kernel.Pdf.PdfOutline,System.Collections.Generic.ICollection{iText.Kernel.Pdf.PdfOutline})">
            <summary>This method gets all outlines to be copied including parent outlines</summary>
            <param name="outline">current outline</param>
            <param name="outlinesToCopy">a Set of outlines to be copied</param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.CloneOutlines(System.Collections.Generic.ICollection{iText.Kernel.Pdf.PdfOutline},iText.Kernel.Pdf.PdfOutline,iText.Kernel.Pdf.PdfOutline,System.Collections.Generic.IDictionary{iText.Kernel.Pdf.PdfPage,iText.Kernel.Pdf.PdfPage},iText.Kernel.Pdf.PdfDocument)">
            <summary>This method copies create new outlines in the Document to copy.</summary>
            <param name="outlinesToCopy">- Set of outlines to be copied</param>
            <param name="newParent">- new parent outline</param>
            <param name="oldParent">- old parent outline</param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocument.IsXmpMetaHasProperty(iText.Kernel.XMP.XMPMeta,System.String,System.String)">
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="T:iText.Kernel.Pdf.PdfDocument.IndirectRefDescription">
            <summary>A structure storing documentId, object number and generation number.</summary>
            <remarks>
            A structure storing documentId, object number and generation number. This structure is using to calculate
            an unique object key during the copy process.
            </remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocumentInfo.#ctor(iText.Kernel.Pdf.PdfDictionary,iText.Kernel.Pdf.PdfDocument)">
            <summary>Create a PdfDocumentInfo based on the passed PdfDictionary.</summary>
            <param name="pdfObject">PdfDictionary containing PdfDocumentInfo</param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfDocumentInfo.#ctor(iText.Kernel.Pdf.PdfDocument)">
            <summary>Create a default, empty PdfDocumentInfo and link it to the passed PdfDocument</summary>
            <param name="pdfDocument">document the info will belong to</param>
        </member>
        <member name="T:iText.Kernel.Pdf.PdfEncryption">
            <author>Paulo Soares</author>
            <author>Kazuya Ujihara</author>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfEncryption.#ctor(System.Byte[],System.Byte[],System.Int32,System.Int32,System.Byte[],iText.Kernel.Pdf.PdfVersion)">
            <summary>Creates the encryption.</summary>
            <remarks>
            Creates the encryption. The userPassword and the
            ownerPassword can be null or have zero length. In this case the ownerPassword
            is replaced by a random string. The open permissions for the document can be
            <see cref="F:iText.Kernel.Pdf.EncryptionConstants.ALLOW_PRINTING"/>
            ,
            <see cref="F:iText.Kernel.Pdf.EncryptionConstants.ALLOW_MODIFY_CONTENTS"/>
            ,
            <see cref="F:iText.Kernel.Pdf.EncryptionConstants.ALLOW_COPY"/>
            ,
            <see cref="F:iText.Kernel.Pdf.EncryptionConstants.ALLOW_MODIFY_ANNOTATIONS"/>
            ,
            <see cref="F:iText.Kernel.Pdf.EncryptionConstants.ALLOW_FILL_IN"/>
            ,
            <see cref="F:iText.Kernel.Pdf.EncryptionConstants.ALLOW_SCREENREADERS"/>
            ,
            <see cref="F:iText.Kernel.Pdf.EncryptionConstants.ALLOW_ASSEMBLY"/>
            and
            <see cref="F:iText.Kernel.Pdf.EncryptionConstants.ALLOW_DEGRADED_PRINTING"/>
            .
            The permissions can be combined by ORing them.
            </remarks>
            <param name="userPassword">the user password. Can be null or empty</param>
            <param name="ownerPassword">the owner password. Can be null or empty</param>
            <param name="permissions">the user permissions</param>
            <param name="encryptionType">
            the type of encryption. It can be one of
            <see cref="F:iText.Kernel.Pdf.EncryptionConstants.STANDARD_ENCRYPTION_40"/>
            ,
            <see cref="F:iText.Kernel.Pdf.EncryptionConstants.STANDARD_ENCRYPTION_128"/>
            ,
            <see cref="F:iText.Kernel.Pdf.EncryptionConstants.ENCRYPTION_AES_128"/>
            or
            <see cref="F:iText.Kernel.Pdf.EncryptionConstants.ENCRYPTION_AES_256"/>
            .
            Optionally
            <see cref="F:iText.Kernel.Pdf.EncryptionConstants.DO_NOT_ENCRYPT_METADATA"/>
            can be ORed to output the metadata in cleartext
            </param>
            <param name="version">
            the
            <see cref="T:iText.Kernel.Pdf.PdfVersion"/>
            of the target document for encryption
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfEncryption.#ctor(Org.BouncyCastle.X509.X509Certificate[],System.Int32[],System.Int32,iText.Kernel.Pdf.PdfVersion)">
            <summary>Creates the certificate encryption.</summary>
            <remarks>
            Creates the certificate encryption. An array of one or more public certificates
            must be provided together with an array of the same size for the permissions for each certificate.
            The open permissions for the document can be
            <see cref="F:iText.Kernel.Pdf.EncryptionConstants.ALLOW_PRINTING"/>
            ,
            <see cref="F:iText.Kernel.Pdf.EncryptionConstants.ALLOW_MODIFY_CONTENTS"/>
            ,
            <see cref="F:iText.Kernel.Pdf.EncryptionConstants.ALLOW_COPY"/>
            ,
            <see cref="F:iText.Kernel.Pdf.EncryptionConstants.ALLOW_MODIFY_ANNOTATIONS"/>
            ,
            <see cref="F:iText.Kernel.Pdf.EncryptionConstants.ALLOW_FILL_IN"/>
            ,
            <see cref="F:iText.Kernel.Pdf.EncryptionConstants.ALLOW_SCREENREADERS"/>
            ,
            <see cref="F:iText.Kernel.Pdf.EncryptionConstants.ALLOW_ASSEMBLY"/>
            and
            <see cref="F:iText.Kernel.Pdf.EncryptionConstants.ALLOW_DEGRADED_PRINTING"/>
            .
            The permissions can be combined by ORing them.
            </remarks>
            <param name="certs">the public certificates to be used for the encryption</param>
            <param name="permissions">the user permissions for each of the certificates</param>
            <param name="encryptionType">
            the type of encryption. It can be one of
            <see cref="F:iText.Kernel.Pdf.EncryptionConstants.STANDARD_ENCRYPTION_40"/>
            ,
            <see cref="F:iText.Kernel.Pdf.EncryptionConstants.STANDARD_ENCRYPTION_128"/>
            ,
            <see cref="F:iText.Kernel.Pdf.EncryptionConstants.ENCRYPTION_AES_128"/>
            or
            <see cref="F:iText.Kernel.Pdf.EncryptionConstants.ENCRYPTION_AES_256"/>
            .
            Optionally
            <see cref="F:iText.Kernel.Pdf.EncryptionConstants.DO_NOT_ENCRYPT_METADATA"/>
            can be ORed to output the metadata in cleartext
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfEncryption.CreateInfoId(System.Byte[],System.Boolean)">
            <summary>Creates a PdfLiteral that contains an array of two id entries.</summary>
            <remarks>
            Creates a PdfLiteral that contains an array of two id entries. These entries are both hexadecimal
            strings containing 16 hex characters. The first entry is the original id, the second entry
            should be different from the first one if the document has changed.
            </remarks>
            <param name="id">the first id</param>
            <param name="modified">whether the document has been changed or not</param>
            <returns>PdfObject containing the two entries.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfEncryption.CreateInfoId(System.Byte[],System.Byte[])">
            <summary>Creates a PdfLiteral that contains an array of two id entries.</summary>
            <remarks>
            Creates a PdfLiteral that contains an array of two id entries. These entries are both hexadecimal
            strings containing 16 hex characters. The first entry is the original id, the second entry
            should be different from the first one if the document has changed.
            </remarks>
            <param name="firstId">the first id</param>
            <param name="secondId">the second id</param>
            <returns>PdfObject containing the two entries.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfEncryption.GetPermissions">
            <summary>Gets the encryption permissions.</summary>
            <remarks>
            Gets the encryption permissions. It can be used directly in
            <see cref="M:iText.Kernel.Pdf.WriterProperties.SetStandardEncryption(System.Byte[],System.Byte[],System.Int32,System.Int32)"/>
            .
            See ISO 32000-1, Table 22 for more details.
            </remarks>
            <returns>the encryption permissions, an unsigned 32-bit quantity.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfEncryption.GetCryptoMode">
            <summary>Gets encryption algorithm and access permissions.</summary>
            <seealso cref="T:iText.Kernel.Pdf.EncryptionConstants"/>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfEncryption.GetDocumentId">
            <returns>document id which was used for encryption. Could be null, if encryption doesn't rely on document id.
                </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfEncryption.ComputeUserPassword(System.Byte[])">
            <summary>Computes user password if standard encryption handler is used with Standard40, Standard128 or AES128 algorithm.
                </summary>
            <param name="ownerPassword">owner password of the encrypted document.</param>
            <returns>user password, or null if not a standard encryption handler was used.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfEncryption.Flush">
            <summary>
            To manually flush a
            <c>PdfObject</c>
            behind this wrapper, you have to ensure
            that this object is added to the document, i.e. it has an indirect reference.
            Basically this means that before flushing you need to explicitly call
            <see cref="M:iText.Kernel.Pdf.PdfObjectWrapper`1.MakeIndirect(iText.Kernel.Pdf.PdfDocument)"/>
            .
            For example: wrapperInstance.makeIndirect(document).flush();
            Note that not every wrapper require this, only those that have such warning in documentation.
            </summary>
        </member>
        <member name="T:iText.Kernel.Pdf.PdfEncryptor">
            <summary>
            This class takes any PDF and returns exactly the same but
            encrypted.
            </summary>
            <remarks>
            This class takes any PDF and returns exactly the same but
            encrypted. All the content, links, outlines, etc, are kept.
            It is also possible to change the info dictionary.
            </remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfEncryptor.Encrypt(iText.Kernel.Pdf.PdfReader,System.IO.Stream,iText.Kernel.Pdf.EncryptionProperties,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>Entry point to encrypt a PDF document.</summary>
            <param name="reader">the read PDF</param>
            <param name="os">the output destination</param>
            <param name="properties">
            encryption properties. See
            <see cref="T:iText.Kernel.Pdf.EncryptionProperties"/>
            .
            </param>
            <param name="newInfo">
            an optional
            <c>String</c>
            map to add or change
            the info dictionary. Entries with
            <see langword="null"/>
            values delete the key in the original info dictionary
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfEncryptor.Encrypt(iText.Kernel.Pdf.PdfReader,System.IO.Stream,iText.Kernel.Pdf.EncryptionProperties)">
            <summary>Entry point to encrypt a PDF document.</summary>
            <param name="reader">the read PDF</param>
            <param name="os">the output destination</param>
            <param name="properties">
            encryption properties. See
            <see cref="T:iText.Kernel.Pdf.EncryptionProperties"/>
            .
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfEncryptor.GetPermissionsVerbose(System.Int32)">
            <summary>Give you a verbose analysis of the permissions.</summary>
            <param name="permissions">the permissions value of a PDF file</param>
            <returns>a String that explains the meaning of the permissions value</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfEncryptor.IsPrintingAllowed(System.Int32)">
            <summary>Tells you if printing is allowed.</summary>
            <param name="permissions">the permissions value of a PDF file</param>
            <returns>true if printing is allowed</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfEncryptor.IsModifyContentsAllowed(System.Int32)">
            <summary>Tells you if modifying content is allowed.</summary>
            <param name="permissions">the permissions value of a PDF file</param>
            <returns>true if modifying content is allowed</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfEncryptor.IsCopyAllowed(System.Int32)">
            <summary>Tells you if copying is allowed.</summary>
            <param name="permissions">the permissions value of a PDF file</param>
            <returns>true if copying is allowed</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfEncryptor.IsModifyAnnotationsAllowed(System.Int32)">
            <summary>Tells you if modifying annotations is allowed.</summary>
            <param name="permissions">the permissions value of a PDF file</param>
            <returns>true if modifying annotations is allowed</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfEncryptor.IsFillInAllowed(System.Int32)">
            <summary>Tells you if filling in fields is allowed.</summary>
            <param name="permissions">the permissions value of a PDF file</param>
            <returns>true if filling in fields is allowed</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfEncryptor.IsScreenReadersAllowed(System.Int32)">
            <summary>Tells you if repurposing for screenreaders is allowed.</summary>
            <param name="permissions">the permissions value of a PDF file</param>
            <returns>true if repurposing for screenreaders is allowed</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfEncryptor.IsAssemblyAllowed(System.Int32)">
            <summary>Tells you if document assembly is allowed.</summary>
            <param name="permissions">the permissions value of a PDF file</param>
            <returns>true if document assembly is allowed</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfEncryptor.IsDegradedPrintingAllowed(System.Int32)">
            <summary>Tells you if degraded printing is allowed.</summary>
            <param name="permissions">the permissions value of a PDF file</param>
            <returns>true if degraded printing is allowed</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfEncryptor.SetEventCountingMetaInfo(iText.Kernel.Counter.Event.IMetaInfo)">
            <summary>
            Sets the
            <see cref="T:iText.Kernel.Counter.Event.IMetaInfo"/>
            that will be used during
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            creation.
            </summary>
            <param name="metaInfo">meta info to set</param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.PdfEncryptor"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfEncryptor.SetEncryptionProperties(iText.Kernel.Pdf.EncryptionProperties)">
            <summary>
            Sets the
            <see cref="T:iText.Kernel.Pdf.EncryptionProperties"/>
            </summary>
            <param name="properties">the properties to set</param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.PdfEncryptor"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfEncryptor.Encrypt(iText.Kernel.Pdf.PdfReader,System.IO.Stream,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>Entry point to encrypt a PDF document.</summary>
            <param name="reader">the read PDF</param>
            <param name="os">the output destination</param>
            <param name="newInfo">
            an optional
            <c>String</c>
            map to add or change
            the info dictionary. Entries with
            <see langword="null"/>
            values delete the key in the original info dictionary
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfEncryptor.Encrypt(iText.Kernel.Pdf.PdfReader,System.IO.Stream)">
            <summary>Entry point to encrypt a PDF document.</summary>
            <param name="reader">the read PDF</param>
            <param name="os">the output destination</param>
        </member>
        <member name="F:iText.Kernel.Pdf.PdfIndirectReference.objNr">
            <summary>Object number.</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.PdfIndirectReference.genNr">
            <summary>Object generation.</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.PdfIndirectReference.refersTo">
            <summary>PdfObject that current PdfIndirectReference instance refers to.</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.PdfIndirectReference.objectStreamNumber">
            <summary>Indirect reference number of object stream containing refersTo object.</summary>
            <remarks>
            Indirect reference number of object stream containing refersTo object.
            If refersTo is not placed into object stream - objectStreamNumber = 0.
            </remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.PdfIndirectReference.offsetOrIndex">
            <summary>
            Offset in a document of the
            <c>refersTo</c>
            object.
            If the object placed into object stream then it is an object index inside object stream.
            </summary>
        </member>
        <member name="F:iText.Kernel.Pdf.PdfIndirectReference.pdfDocument">
            <summary>PdfDocument object belongs to.</summary>
            <remarks>PdfDocument object belongs to. For direct objects it is null.</remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfIndirectReference.GetRefersTo(System.Boolean)">
            <summary>Gets direct object and try to resolve indirects chain.</summary>
            <remarks>
            Gets direct object and try to resolve indirects chain.
            <p>
            Note: If chain of references has length of more than 32,
            this method return 31st reference in chain.
            </p>
            </remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfIndirectReference.GetOffset">
            <summary>Gets refersTo object offset in a document.</summary>
            <returns>object offset in a document. If refersTo object is in object stream then -1.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfIndirectReference.GetIndex">
            <summary>Gets refersTo object index in the object stream.</summary>
            <returns>object index in a document. If refersTo object is not in object stream then -1.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfIndirectReference.SetFree">
            <summary>Marks indirect reference as free in the document.</summary>
            <remarks>
            Marks indirect reference as free in the document. This doesn't "remove" indirect objects from the document,
            it only ensures that corresponding xref entry is free and indirect object referred by this reference is no longer
            linked to it. Actual object still might be written to the resultant document (and would get a new corresponding
            indirect reference in this case) if it is still contained in some other object.
            <p>
            This method will not give any result if the corresponding indirect object or another object
            that contains a reference to this object is already flushed.
            </p>
            <p>
            Note: in some cases, removing a link of indirect object to it's indirect reference while
            leaving the actual object in the document structure might lead to errors, because some objects are expected
            to always have such explicit link (e.g. Catalog object, page objects, etc).
            </p>
            </remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfIndirectReference.IsFree">
            <summary>
            Checks if this
            <see cref="T:iText.Kernel.Pdf.PdfIndirectReference"/>
            instance corresponds to free indirect reference.
            Indirect reference might be in a free state either because it was read as such from the opened existing
            PDF document or because it was set free via
            <see cref="M:iText.Kernel.Pdf.PdfIndirectReference.SetFree"/>
            method.
            </summary>
            <returns>
            
            <see langword="true"/>
            if this
            <see cref="T:iText.Kernel.Pdf.PdfIndirectReference"/>
            is free,
            <see langword="false"/>
            otherwise.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfIndirectReference.GetWriter">
            <summary>Gets a PdfWriter associated with the document object belongs to.</summary>
            <returns>PdfWriter.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfIndirectReference.GetReader">
            <summary>Gets a PdfReader associated with the document object belongs to.</summary>
            <returns>PdfReader.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfIndirectReference.SetState(System.Int16)">
            <summary>Sets special states of current object.</summary>
            <param name="state">special flag of current object</param>
        </member>
        <member name="F:iText.Kernel.Pdf.PdfName.Fl">
            <summary>PdfName for the abbreviation of FlateDecode.</summary>
            <remarks>
            PdfName for the abbreviation of FlateDecode. For the Flatness Tolerance PdfName use
            <see cref="F:iText.Kernel.Pdf.PdfName.FL"/>
            (Uppercase 'L')
            </remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.PdfName.FL">
            <summary>PdfName for Flatness Tolerance.</summary>
            <remarks>
            PdfName for Flatness Tolerance. For the PdfName with the FlateDecode abbreviation use
            <see cref="F:iText.Kernel.Pdf.PdfName.Fl"/>
            (Lowercase 'L')
            </remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.PdfName.staticNames">
            <summary>map strings to all known static names</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfName.#ctor(System.String)">
            <summary>Create a PdfName from the passed string</summary>
            <param name="value">string value, shall not be null.</param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfName.#ctor(System.Byte[])">
            <summary>Create a PdfName from the passed bytes</summary>
            <param name="content">byte content, shall not be null.</param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfName.CompareTo(iText.Kernel.Pdf.PdfName)">
            <summary>Compare this PdfName to o.</summary>
            <param name="o">PdfName to compare this object to/</param>
            <returns>Comparison between both values or, if one of the values is null, Comparison between contents. If one of the values and one of the contents are equal to null, generate values and compare those.
                </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfNameTree.#ctor(iText.Kernel.Pdf.PdfCatalog,iText.Kernel.Pdf.PdfName)">
            <summary>Creates the NameTree of current Document</summary>
            <param name="catalog">Document catalog</param>
            <param name="treeType">the type of tree. Dests Tree, AP Tree etc.</param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfNameTree.GetNames">
            <summary>Retrieves the names stored in the name tree</summary>
            <returns>Map containing the PdfObjects stored in the tree</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfNameTree.AddEntry(System.String,iText.Kernel.Pdf.PdfObject)">
            <summary>Add an entry to the name tree</summary>
            <param name="key">key of the entry</param>
            <param name="value">object to add</param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfNameTree.IsModified">
            <returns>True if the object has been modified, false otherwise.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfNameTree.BuildTree">
            <summary>Build a PdfDictionary containing the name tree</summary>
            <returns>PdfDictionary containing the name tree</returns>
        </member>
        <member name="T:iText.Kernel.Pdf.PdfNull">
            <summary>Representation of the null object in the PDF specification.</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfNull.#ctor">
            <summary>Creates a PdfNull instance.</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfNumTree.#ctor(iText.Kernel.Pdf.PdfCatalog,iText.Kernel.Pdf.PdfName)">
            <summary>Creates the NumberTree of current Document</summary>
            <param name="catalog">Document catalog</param>
            <param name="treeType">the type of tree. ParentTree or PageLabels.</param>
        </member>
        <member name="F:iText.Kernel.Pdf.PdfObject.FLUSHED">
            <summary>Indicates if the object has been flushed.</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.PdfObject.FREE">
            <summary>Indicates that the indirect reference of the object could be reused or have to be marked as free.
                </summary>
        </member>
        <member name="F:iText.Kernel.Pdf.PdfObject.READING">
            <summary>Indicates that definition of the indirect reference of the object still not found (e.g.</summary>
            <remarks>Indicates that definition of the indirect reference of the object still not found (e.g. keys in XRefStm).
                </remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.PdfObject.MODIFIED">
            <summary>Indicates that object changed (is used in append mode).</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.PdfObject.ORIGINAL_OBJECT_STREAM">
            <summary>Indicates that the indirect reference of the object represents ObjectStream from original document.
                </summary>
            <remarks>
            Indicates that the indirect reference of the object represents ObjectStream from original document.
            When PdfReader read ObjectStream reference marked as OriginalObjectStream
            to avoid further reusing.
            </remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.PdfObject.MUST_BE_FLUSHED">
            <summary>For internal usage only.</summary>
            <remarks>
            For internal usage only. Marks objects that shall be written to the output document.
            Option is needed to build the correct PDF objects tree when closing the document.
            As a result it avoids writing unused (removed) objects.
            </remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.PdfObject.MUST_BE_INDIRECT">
            <summary>Indicates that the object shall be indirect when it is written to the document.</summary>
            <remarks>
            Indicates that the object shall be indirect when it is written to the document.
            It is used to postpone the creation of indirect reference for the objects that shall be indirect,
            so it is possible to create such objects without PdfDocument instance.
            </remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.PdfObject.FORBID_RELEASE">
            <summary>Indicates that the object is highly sensitive and we do not want to release it even if release() is called.
                </summary>
            <remarks>
            Indicates that the object is highly sensitive and we do not want to release it even if release() is called.
            This flag can be set in stamping mode in object wrapper constructors and is automatically set when setModified
            flag is set (we do not want to release changed objects).
            The flag is set automatically for some wrappers that need document even in reader mode (FormFields etc).
            </remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.PdfObject.READ_ONLY">
            <summary>
            Indicates that we do not want this object to be ever written into the resultant document
            (because of multiple objects read from the same reference inconsistency).
            </summary>
        </member>
        <member name="F:iText.Kernel.Pdf.PdfObject.UNENCRYPTED">
            <summary>Indicates that this object is not encrypted in the encrypted document.</summary>
            <remarks>
            Indicates that this object is not encrypted in the encrypted document.
            E.g. digital signature dictionary /Contents entry shall not be encrypted.
            </remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.PdfObject.indirectReference">
            <summary>If object is flushed the indirect reference is kept here.</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.PdfObject.state">
            <summary>Indicate same special states of PdfIndirectObject or PdfObject like @see Free, @see Reading, @see Modified.
                </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfObject.GetObjectType">
            <summary>Gets object type.</summary>
            <returns>object type.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfObject.Flush">
            <summary>Flushes the object to the document.</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfObject.Flush(System.Boolean)">
            <summary>Flushes the object to the document.</summary>
            <param name="canBeInObjStm">indicates whether object can be placed into object stream.</param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfObject.GetIndirectReference">
            <summary>Gets the indirect reference associated with the object.</summary>
            <remarks>
            Gets the indirect reference associated with the object.
            The indirect reference is used when flushing object to the document.
            </remarks>
            <returns>indirect reference.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfObject.IsIndirect">
            <summary>Checks if object is indirect.</summary>
            <remarks>
            Checks if object is indirect.
            <br />
            Note:
            Return value
            <see langword="true"/>
            doesn't necessarily mean that indirect reference of this object
            is not null at the moment. Object could be marked as indirect and
            be transformed to indirect on flushing.
            <br />
            E.g. all PdfStreams are transformed to indirect objects when they are written, but they don't always
            have indirect references at any given moment.
            </remarks>
            <returns>
            returns
            <see langword="true"/>
            if object is indirect or is to be indirect in the resultant document.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfObject.MakeIndirect(iText.Kernel.Pdf.PdfDocument,iText.Kernel.Pdf.PdfIndirectReference)">
            <summary>Marks object to be saved as indirect.</summary>
            <param name="document">a document the indirect reference will belong to.</param>
            <returns>object itself.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfObject.MakeIndirect(iText.Kernel.Pdf.PdfDocument)">
            <summary>Marks object to be saved as indirect.</summary>
            <param name="document">a document the indirect reference will belong to.</param>
            <returns>object itself.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfObject.IsFlushed">
            <summary>Indicates is the object has been flushed or not.</summary>
            <returns>true if object has been flushed, otherwise false.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfObject.IsModified">
            <summary>Indicates is the object has been set as modified or not.</summary>
            <remarks>Indicates is the object has been set as modified or not. Useful for incremental updates (e.g. appendMode).
                </remarks>
            <returns>true is object has been set as modified, otherwise false.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfObject.Clone">
            <summary>Creates clone of the object which belongs to the same document as original object.</summary>
            <remarks>
            Creates clone of the object which belongs to the same document as original object.
            New object shall not be used in other documents.
            </remarks>
            <returns>cloned object.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfObject.CopyTo(iText.Kernel.Pdf.PdfDocument)">
            <summary>Copies object to a specified document.</summary>
            <remarks>
            Copies object to a specified document.
            <br /><br />
            NOTE: Works only for objects that are read from document opened in reading mode, otherwise an exception is thrown.
            </remarks>
            <param name="document">document to copy object to.</param>
            <returns>copied object.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfObject.CopyTo(iText.Kernel.Pdf.PdfDocument,System.Boolean)">
            <summary>Copies object to a specified document.</summary>
            <remarks>
            Copies object to a specified document.
            <br /><br />
            NOTE: Works only for objects that are read from document opened in reading mode, otherwise an exception is thrown.
            </remarks>
            <param name="document">document to copy object to.</param>
            <param name="allowDuplicating">
            indicates if to allow copy objects which already have been copied.
            If object is associated with any indirect reference and allowDuplicating is false then already existing reference will be returned instead of copying object.
            If allowDuplicating is true then object will be copied and new indirect reference will be assigned.
            </param>
            <returns>copied object.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfObject.SetModified">
            <summary>Sets the 'modified' flag to the indirect object, the flag denotes that the object was modified since the document opening.
                </summary>
            <remarks>
            Sets the 'modified' flag to the indirect object, the flag denotes that the object was modified since the document opening.
            <p>
            This flag is meaningful only if the
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            is opened in append mode
            (see
            <see cref="M:iText.Kernel.Pdf.StampingProperties.UseAppendMode"/>
            ).
            </p>
            <p>
            In append mode the whole document is preserved as is, and only changes to the document are
            appended to the end of the document file. Because of this, only modified objects need to be flushed and are
            allowed to be flushed (i.e. to be written).
            </p>
            </remarks>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.PdfObject"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfObject.IsReleaseForbidden">
            <summary>
            Checks if it's forbidden to release this
            <see cref="T:iText.Kernel.Pdf.PdfObject"/>
            instance.
            Some objects are vital for the living period of
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            or may be
            prevented from releasing by high-level entities dealing with the objects.
            Also it's not possible to release the objects that have been modified.
            </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfObject.IsNull">
            <summary>
            Checks if this <CODE>PdfObject</CODE> is of the type
            <CODE>PdfNull</CODE>.
            </summary>
            <returns><CODE>true</CODE> or <CODE>false</CODE></returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfObject.IsBoolean">
            <summary>
            Checks if this <CODE>PdfObject</CODE> is of the type
            <CODE>PdfBoolean</CODE>.
            </summary>
            <returns><CODE>true</CODE> or <CODE>false</CODE></returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfObject.IsNumber">
            <summary>
            Checks if this <CODE>PdfObject</CODE> is of the type
            <CODE>PdfNumber</CODE>.
            </summary>
            <returns><CODE>true</CODE> or <CODE>false</CODE></returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfObject.IsString">
            <summary>
            Checks if this <CODE>PdfObject</CODE> is of the type
            <CODE>PdfString</CODE>.
            </summary>
            <returns><CODE>true</CODE> or <CODE>false</CODE></returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfObject.IsName">
            <summary>
            Checks if this <CODE>PdfObject</CODE> is of the type
            <CODE>PdfName</CODE>.
            </summary>
            <returns><CODE>true</CODE> or <CODE>false</CODE></returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfObject.IsArray">
            <summary>
            Checks if this <CODE>PdfObject</CODE> is of the type
            <CODE>PdfArray</CODE>.
            </summary>
            <returns><CODE>true</CODE> or <CODE>false</CODE></returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfObject.IsDictionary">
            <summary>
            Checks if this <CODE>PdfObject</CODE> is of the type
            <CODE>PdfDictionary</CODE>.
            </summary>
            <returns><CODE>true</CODE> or <CODE>false</CODE></returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfObject.IsStream">
            <summary>
            Checks if this <CODE>PdfObject</CODE> is of the type
            <CODE>PdfStream</CODE>.
            </summary>
            <returns><CODE>true</CODE> or <CODE>false</CODE></returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfObject.IsIndirectReference">
            <summary>
            Checks if this <CODE>PdfObject</CODE> is of the type
            <CODE>PdfIndirectReference</CODE>.
            </summary>
            <returns>
            <CODE>true</CODE> if this is an indirect reference,
            otherwise <CODE>false</CODE>
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfObject.IsLiteral">
            <summary>
            Checks if this <CODE>PdfObject</CODE> is of the type
            <CODE>PdfLiteral</CODE>.
            </summary>
            <returns>
            <CODE>true</CODE> if this is a literal,
            otherwise <CODE>false</CODE>
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfObject.NewInstance">
            <summary>Creates new instance of object.</summary>
            <returns>new instance of object.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfObject.CheckState(System.Int16)">
            <summary>Checks state of the flag of current object.</summary>
            <param name="state">special flag to check</param>
            <returns>true if the state was set.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfObject.SetState(System.Int16)">
            <summary>Sets special states of current object.</summary>
            <param name="state">special flag of current object</param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfObject.ClearState(System.Int16)">
            <summary>Clear state of the flag of current object.</summary>
            <param name="state">special flag state to clear</param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfObject.CopyContent(iText.Kernel.Pdf.PdfObject,iText.Kernel.Pdf.PdfDocument)">
            <summary>Copies object content from object 'from'.</summary>
            <param name="from">object to copy content from.</param>
            <param name="document">document to copy object to.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.Pdf.PdfObject.ProcessCopying(iText.Kernel.Pdf.PdfDocument,System.Boolean)" -->
        <member name="F:iText.Kernel.Pdf.PdfObjectStream.MAX_OBJ_STREAM_SIZE">
            <summary>Max number of objects in object stream.</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.PdfObjectStream.size">
            <summary>Current object stream size (number of objects inside).</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.PdfObjectStream.indexStream">
            <summary>Stream containing object indices, a heading part of object stream.</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfObjectStream.#ctor(iText.Kernel.Pdf.PdfObjectStream)">
            <summary>This constructor is for reusing ByteArrayOutputStreams of indexStream and outputStream.</summary>
            <remarks>
            This constructor is for reusing ByteArrayOutputStreams of indexStream and outputStream.
            NOTE Only for internal use in PdfWriter!
            </remarks>
            <param name="prev">previous PdfObjectStream.</param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfObjectStream.AddObject(iText.Kernel.Pdf.PdfObject)">
            <summary>Adds object to the object stream.</summary>
            <param name="object">object to add.</param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfObjectStream.GetSize">
            <summary>Gets object stream size (number of objects inside).</summary>
            <returns>object stream size.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfObjectWrapper`1.MakeIndirect(iText.Kernel.Pdf.PdfDocument,iText.Kernel.Pdf.PdfIndirectReference)">
            <summary>Marks object behind wrapper to be saved as indirect.</summary>
            <param name="document">a document the indirect reference will belong to.</param>
            <param name="reference"/>
            <returns>object itself.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfObjectWrapper`1.MakeIndirect(iText.Kernel.Pdf.PdfDocument)">
            <summary>Marks object behind wrapper to be saved as indirect.</summary>
            <param name="document">a document the indirect reference will belong to.</param>
            <returns>object itself.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfObjectWrapper`1.IsWrappedObjectMustBeIndirect">
            <summary>
            Defines if the object behind this wrapper must be an indirect object in the
            resultant document.
            </summary>
            <remarks>
            Defines if the object behind this wrapper must be an indirect object in the
            resultant document.
            <br /><br />
            If this method returns <i>true</i> it doesn't necessarily mean that object
            must be in the indirect state at any moment, but rather defines that
            when the object will be written to the document it will be transformed into
            indirect object if it's not indirect yet.
            <br /><br />
            Return value of this method shouldn't depend on any logic, it should return
            always <i>true</i> or <i>false</i>.
            </remarks>
            <returns>
            <i>true</i> if in the resultant document the object behind the wrapper
            must be indirect, otherwise <i>false</i>.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfObjectWrapper`1.EnsureObjectIsAddedToDocument(iText.Kernel.Pdf.PdfObject)">
            <summary>
            Some wrappers use object's indirect reference to obtain the
            <c>PdfDocument</c>
            to which the object belongs to. For this matter, for these wrappers it is implicitly defined
            that they work with indirect objects only. Commonly these wrappers have two constructors: one with
            <c>PdfDocument</c>
            as parameter to create a new object, and the other one which
            wraps around the given
            <c>PdfObject</c>
            . This method should be used in the second
            type of constructors to ensure that wrapper will able to obtain the
            <c>PdfDocument</c>
            instance.
            </summary>
            <param name="object">
            the
            <c>PdfObject</c>
            to be checked if it is indirect.
            </param>
        </member>
        <member name="T:iText.Kernel.Pdf.PdfOutline">
            <summary>
            Document outline object
            See ISO-320001, 12.3.3 Document Outline.
            </summary>
        </member>
        <member name="F:iText.Kernel.Pdf.PdfOutline.FLAG_ITALIC">
            <summary>A flag for displaying the outline item’s text with italic font.</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.PdfOutline.FLAG_BOLD">
            <summary>A flag for displaying the outline item’s text with bold font.</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfOutline.#ctor(System.String,iText.Kernel.Pdf.PdfDictionary,iText.Kernel.Pdf.PdfDocument)">
            <summary>Create instance of document outline.</summary>
            <param name="title">the text that shall be displayed on the screen for this item.</param>
            <param name="content">Outline dictionary</param>
            <param name="pdfDocument">
            
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            the outline belongs to.
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfOutline.#ctor(System.String,iText.Kernel.Pdf.PdfDictionary,iText.Kernel.Pdf.PdfOutline)">
            <summary>Create instance of document outline.</summary>
            <param name="title">the text that shall be displayed on the screen for this item.</param>
            <param name="content">Outline dictionary</param>
            <param name="parent">
            parent outline.
            <see cref="M:iText.Kernel.Pdf.PdfOutline.AddOutline(System.String,System.Int32)"/>
            and
            <see cref="M:iText.Kernel.Pdf.PdfOutline.AddOutline(System.String)"/>
            instead.
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfOutline.#ctor(iText.Kernel.Pdf.PdfDocument)">
            <summary>This constructor creates root outline in the document.</summary>
            <param name="doc">
            
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfOutline.GetTitle">
            <summary>Gets title of the outline.</summary>
            <returns>String value.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfOutline.SetTitle(System.String)">
            <summary>
            Sets title of the outline with
            <see cref="F:iText.IO.Font.PdfEncodings.UNICODE_BIG"/>
            encoding,
            <c>Title</c>
            key.
            </summary>
            <param name="title">String value.</param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfOutline.SetColor(iText.Kernel.Colors.Color)">
            <summary>
            Sets color for the outline entry’s text,
            <c>C</c>
            key.
            </summary>
            <param name="color">
            
            <see cref="T:iText.Kernel.Colors.Color"/>
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfOutline.SetStyle(System.Int32)">
            <summary>
            Sets text style for the outline entry’s text,
            <c>F</c>
            key.
            </summary>
            <param name="style">
            Could be either
            <see cref="F:iText.Kernel.Pdf.PdfOutline.FLAG_BOLD"/>
            or
            <see cref="F:iText.Kernel.Pdf.PdfOutline.FLAG_ITALIC"/>
            . Default value is
            <c>0</c>
            .
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfOutline.GetContent">
            <summary>Gets content dictionary.</summary>
            <returns>
            
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            .
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfOutline.GetAllChildren">
            <summary>Gets list of children outlines.</summary>
            <returns>
            List of
            <see cref="T:iText.Kernel.Pdf.PdfOutline"/>
            .
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfOutline.GetParent">
            <summary>Gets parent outline.</summary>
            <returns>
            
            <see cref="T:iText.Kernel.Pdf.PdfOutline"/>
            .
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfOutline.GetDestination">
            <summary>
            Gets
            <see cref="T:iText.Kernel.Pdf.Navigation.PdfDestination"/>
            .
            </summary>
            <returns>
            
            <see cref="T:iText.Kernel.Pdf.Navigation.PdfDestination"/>
            .
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfOutline.AddDestination(iText.Kernel.Pdf.Navigation.PdfDestination)">
            <summary>
            Adds
            <see cref="T:iText.Kernel.Pdf.Navigation.PdfDestination"/>
            for the outline,
            <c>Dest</c>
            key.
            </summary>
            <param name="destination">
            instance of
            <see cref="T:iText.Kernel.Pdf.Navigation.PdfDestination"/>
            .
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfOutline.AddAction(iText.Kernel.Pdf.Action.PdfAction)">
            <summary>
            Adds
            <see cref="T:iText.Kernel.Pdf.Action.PdfAction"/>
            for the outline,
            <c>A</c>
            key.
            </summary>
            <param name="action">
            instance of
            <see cref="T:iText.Kernel.Pdf.Action.PdfAction"/>
            .
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfOutline.SetOpen(System.Boolean)">
            <summary>Defines if the outline needs to be closed or not.</summary>
            <remarks>
            Defines if the outline needs to be closed or not.
            By default, outlines are open.
            </remarks>
            <param name="open">if false, the outline will be closed by default</param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfOutline.AddOutline(System.String,System.Int32)">
            <summary>
            Adds a new
            <c>PdfOutline</c>
            with specified parameters as a child to existing
            <c>PdfOutline</c>
            and put it to specified position in the existing
            <c>PdfOutline</c>
            children list.
            </summary>
            <param name="title">an outline title</param>
            <param name="position">
            a position in the current outline child List where a new outline should be added.
            If the position equals -1, then the outline will be put in the end of children list.
            </param>
            <returns>just created outline</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfOutline.AddOutline(System.String)">
            <summary>
            Adds an
            <c>PdfOutline</c>
            as a child to existing
            <c>PdfOutline</c>
            and put it in the end of the existing
            <c>PdfOutline</c>
            children list.
            </summary>
            <param name="title">an outline title</param>
            <returns>just created outline</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfOutline.AddOutline(iText.Kernel.Pdf.PdfOutline)">
            <summary>
            Adds an
            <c>PdfOutline</c>
            as a child to existing
            <c>PdfOutline</c>
            and put it to the end of the existing
            <c>PdfOutline</c>
            children list.
            </summary>
            <param name="outline">an outline to add.</param>
            <returns>just created outline</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfOutline.Clear">
            <summary>Clear list of children.</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfOutline.SetDestination(iText.Kernel.Pdf.Navigation.PdfDestination)">
            <summary>
            Sets
            <see cref="T:iText.Kernel.Pdf.Navigation.PdfDestination"/>
            .
            </summary>
            <param name="destination">
            instance of
            <see cref="T:iText.Kernel.Pdf.Navigation.PdfDestination"/>
            .
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfOutline.RemoveOutline">
            <summary>Remove this outline from the document.</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfOutline.GetOutlineRoot">
            <summary>
            Gets the Outline root in
            <see cref="F:iText.Kernel.Pdf.PdfOutline.pdfDoc"/>
            's catalog entry
            </summary>
            <returns>
            The
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            of the document's Outline root, or
            <see langword="null"/>
            if it can't be found.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfOutline.IsOutlineRoot">
            <summary>
            Determines if the current
            <see cref="T:iText.Kernel.Pdf.PdfOutline"/>
            object is the Outline Root.
            </summary>
            <returns>
            
            <see langword="false"/>
            if this is not the outline root or the root can not be found,
            <see langword="true"/>
            otherwise.
            </returns>
        </member>
        <member name="T:iText.Kernel.Pdf.PdfOutputIntent">
            <summary>
            Specify the colour characteristics of output devices on which the document might be rendered
            See ISO 32000-1 14.11.5: Output Intents.
            </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfOutputIntent.#ctor(System.String,System.String,System.String,System.String,System.IO.Stream)">
            <summary>Creates output intent dictionary.</summary>
            <remarks>
            Creates output intent dictionary. Null values are allowed to
            suppress any key.
            By default output intent subtype is GTS_PDFA1, use setter to change it.
            </remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.PdfOutputStream.document">
            <summary>Document associated with PdfOutputStream.</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.PdfOutputStream.crypto">
            <summary>Contains the business logic for cryptography.</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfOutputStream.#ctor(System.IO.Stream)">
            <summary>Create a pdfOutputSteam writing to the passed OutputStream.</summary>
            <param name="outputStream">Outputstream to write to.</param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfOutputStream.Write(iText.Kernel.Pdf.PdfObject)">
            <summary>Write a PdfObject to the outputstream.</summary>
            <param name="pdfObject">PdfObject to write</param>
            <returns>this PdfOutPutStream</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfOutputStream.Write(System.Int64,System.Int32)">
            <summary>Writes corresponding amount of bytes from a given long</summary>
            <param name="bytes">a source of bytes, must be &gt;= 0</param>
            <param name="size">expected amount of bytes</param>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfOutputStream.Write(System.Int32,System.Int32)">
            <summary>Writes corresponding amount of bytes from a given int</summary>
            <param name="bytes">a source of bytes, must be &gt;= 0</param>
            <param name="size">expected amount of bytes</param>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="F:iText.Kernel.Pdf.PdfPage.ignorePageRotationForContent">
            <summary>Automatically rotate new content if the page has a rotation ( is disabled by default )</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.PdfPage.pageRotationInverseMatrixWritten">
            <summary>
            See
            <see cref="M:iText.Kernel.Pdf.PdfPage.IsPageRotationInverseMatrixWritten"/>
            .
            </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfPage.GetPageSize">
            <summary>Gets page size, defined by media box object.</summary>
            <remarks>Gets page size, defined by media box object. This method doesn't take page rotation into account.
                </remarks>
            <returns>
            
            <see cref="T:iText.Kernel.Geom.Rectangle"/>
            that specify page size.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfPage.GetPageSizeWithRotation">
            <summary>Gets page size, considering page rotation.</summary>
            <returns>
            
            <see cref="T:iText.Kernel.Geom.Rectangle"/>
            that specify size of rotated page.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfPage.GetRotation">
            <summary>Gets the number of degrees by which the page shall be rotated clockwise when displayed or printed.
                </summary>
            <remarks>
            Gets the number of degrees by which the page shall be rotated clockwise when displayed or printed.
            Shall be a multiple of 90.
            </remarks>
            <returns>
            
            <c>int</c>
            number of degrees. Default value: 0
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfPage.SetRotation(System.Int32)">
            <summary>Sets the page rotation.</summary>
            <param name="degAngle">
            the
            <c>int</c>
            number of degrees by which the page shall be rotated clockwise
            when displayed or printed. Shall be a multiple of 90.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.PdfPage"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfPage.GetContentStream(System.Int32)">
            <summary>
            Gets the content stream at specified 0-based index in the Contents object
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            .
            The situation when Contents object is a
            <see cref="T:iText.Kernel.Pdf.PdfStream"/>
            is treated like a one element array.
            </summary>
            <param name="index">
            the
            <c>int</c>
            index of returned
            <see cref="T:iText.Kernel.Pdf.PdfStream"/>
            .
            </param>
            <returns>
            
            <see cref="T:iText.Kernel.Pdf.PdfStream"/>
            object at specified index;
            will return null in case page dictionary doesn't adhere to the specification, meaning that the document is an invalid PDF.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">if the index is out of range</exception>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfPage.GetContentStreamCount">
            <summary>
            Gets the size of Contents object
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            .
            The situation when Contents object is a
            <see cref="T:iText.Kernel.Pdf.PdfStream"/>
            is treated like a one element array.
            </summary>
            <returns>
            the
            <c>int</c>
            size of Contents object, or 1 if Contents object is a
            <see cref="T:iText.Kernel.Pdf.PdfStream"/>
            .
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfPage.GetFirstContentStream">
            <summary>
            Returns the Contents object if it is
            <see cref="T:iText.Kernel.Pdf.PdfStream"/>
            , or first stream in the array if it is
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            .
            </summary>
            <returns>
            first
            <see cref="T:iText.Kernel.Pdf.PdfStream"/>
            in Contents object, or
            <see langword="null"/>
            if Contents is empty.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfPage.GetLastContentStream">
            <summary>
            Returns the Contents object if it is
            <see cref="T:iText.Kernel.Pdf.PdfStream"/>
            , or last stream in the array if it is
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            .
            </summary>
            <returns>
            first
            <see cref="T:iText.Kernel.Pdf.PdfStream"/>
            in Contents object, or
            <see langword="null"/>
            if Contents is empty.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfPage.NewContentStreamBefore">
            <summary>
            Creates new
            <see cref="T:iText.Kernel.Pdf.PdfStream"/>
            object and puts it at the beginning of Contents array
            (if Contents object is
            <see cref="T:iText.Kernel.Pdf.PdfStream"/>
            it will be replaced with one-element array).
            </summary>
            <returns>
            Created
            <see cref="T:iText.Kernel.Pdf.PdfStream"/>
            object.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfPage.NewContentStreamAfter">
            <summary>
            Creates new
            <see cref="T:iText.Kernel.Pdf.PdfStream"/>
            object and puts it at the end of Contents array
            (if Contents object is
            <see cref="T:iText.Kernel.Pdf.PdfStream"/>
            it will be replaced with one-element array).
            </summary>
            <returns>
            Created
            <see cref="T:iText.Kernel.Pdf.PdfStream"/>
            object.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfPage.GetResources">
            <summary>
            Gets the
            <see cref="T:iText.Kernel.Pdf.PdfResources"/>
            wrapper object for this page resources.
            If page doesn't have resource object, then it will be inherited from page's parents.
            If neither parents nor page has the resource object, then the new one is created and added to page dictionary.
            <br /><br />
            NOTE: If you'll try to modify the inherited resources, then the new resources object will be created,
            so you won't change the parent's resources.
            This new object under the wrapper will be added to page dictionary on
            <see cref="M:iText.Kernel.Pdf.PdfPage.Flush"/>
            ,
            or you can add it manually with this line, if needed:<br />
            <c>getPdfObject().put(PdfName.Resources, getResources().getPdfObject());</c>
            </summary>
            <returns>
            
            <see cref="T:iText.Kernel.Pdf.PdfResources"/>
            wrapper of the page.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfPage.SetResources(iText.Kernel.Pdf.PdfResources)">
            <summary>
            Sets
            <see cref="T:iText.Kernel.Pdf.PdfResources"/>
            object.
            </summary>
            <param name="pdfResources">
            
            <see cref="T:iText.Kernel.Pdf.PdfResources"/>
            to set.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.PdfPage"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfPage.SetXmpMetadata(System.Byte[])">
            <summary>Sets the XMP Metadata.</summary>
            <param name="xmpMetadata">
            the
            <c>byte[]</c>
            of XMP Metadata to set.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.PdfPage"/>
            instance.
            </returns>
            <exception cref="T:System.IO.IOException">in case of writing error.</exception>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfPage.SetXmpMetadata(iText.Kernel.XMP.XMPMeta,iText.Kernel.XMP.Options.SerializeOptions)">
            <summary>Serializes XMP Metadata to byte array and sets it.</summary>
            <param name="xmpMeta">
            the
            <see cref="T:iText.Kernel.XMP.XMPMeta"/>
            object to set.
            </param>
            <param name="serializeOptions">
            the
            <see cref="T:iText.Kernel.XMP.Options.SerializeOptions"/>
            used while serialization.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.PdfPage"/>
            instance.
            </returns>
            <exception cref="T:iText.Kernel.XMP.XMPException">in case of XMP Metadata serialization error.</exception>
            <exception cref="T:System.IO.IOException">in case of writing error.</exception>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfPage.SetXmpMetadata(iText.Kernel.XMP.XMPMeta)">
            <summary>Serializes XMP Metadata to byte array and sets it.</summary>
            <remarks>Serializes XMP Metadata to byte array and sets it. Uses padding equals to 2000.</remarks>
            <param name="xmpMeta">
            the
            <see cref="T:iText.Kernel.XMP.XMPMeta"/>
            object to set.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.PdfPage"/>
            instance.
            </returns>
            <exception cref="T:iText.Kernel.XMP.XMPException">in case of XMP Metadata serialization error.</exception>
            <exception cref="T:System.IO.IOException">in case of writing error.</exception>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfPage.GetXmpMetadata">
            <summary>Gets the XMP Metadata object.</summary>
            <returns>
            
            <see cref="T:iText.Kernel.Pdf.PdfStream"/>
            object, that represent XMP Metadata.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfPage.CopyTo(iText.Kernel.Pdf.PdfDocument)">
            <summary>Copies page to the specified document.</summary>
            <remarks>
            Copies page to the specified document.
            <br /><br />
            NOTE: Works only for pages from the document opened in reading mode, otherwise an exception is thrown.
            </remarks>
            <param name="toDocument">a document to copy page to.</param>
            <returns>
            copied
            <see cref="T:iText.Kernel.Pdf.PdfPage"/>
            .
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfPage.CopyTo(iText.Kernel.Pdf.PdfDocument,iText.Kernel.Pdf.IPdfPageExtraCopier)">
            <summary>Copies page to the specified document.</summary>
            <remarks>
            Copies page to the specified document.
            <br /><br />
            NOTE: Works only for pages from the document opened in reading mode, otherwise an exception is thrown.
            </remarks>
            <param name="toDocument">a document to copy page to.</param>
            <param name="copier">
            a copier which bears a special copy logic. May be null.
            It is recommended to use the same instance of
            <see cref="T:iText.Kernel.Pdf.IPdfPageExtraCopier"/>
            for the same output document.
            </param>
            <returns>
            copied
            <see cref="T:iText.Kernel.Pdf.PdfPage"/>
            .
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfPage.CopyAsFormXObject(iText.Kernel.Pdf.PdfDocument)">
            <summary>Copies page as FormXObject to the specified document.</summary>
            <param name="toDocument">a document to copy to.</param>
            <returns>
            copied
            <see cref="T:iText.Kernel.Pdf.Xobject.PdfFormXObject"/>
            object.
            </returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfPage.GetDocument">
            <summary>
            Gets the
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            that owns that page, or
            <see langword="null"/>
            if such document isn't exist.
            </summary>
            <returns>
            
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            that owns that page, or
            <see langword="null"/>
            if such document isn't exist.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfPage.Flush">
            <summary>Flushes page and it's content stream.</summary>
            <remarks>
            Flushes page and it's content stream.
            <br />
            <br />
            If the page belongs to the document which is tagged, page flushing also triggers flushing of the tags,
            which are considered to belong to the page. The logic that defines if the given tag (structure element) belongs
            to the page is the following: if all the marked content references (dictionary or number references), that are the
            descendants of the given structure element, belong to the current page - the tag is considered
            to belong to the page. If tag has descendants from several pages - it is flushed, if all other pages except the
            current one are flushed.
            </remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfPage.Flush(System.Boolean)">
            <summary>Flushes page and its content stream.</summary>
            <remarks>
            Flushes page and its content stream. If <code>flushResourcesContentStreams</code> is true, all content streams that are
            rendered on this page (like FormXObjects, annotation appearance streams, patterns) and also all images associated
            with this page will also be flushed.
            <br />
            For notes about tag structure flushing see
            <see cref="M:iText.Kernel.Pdf.PdfPage.Flush">PdfPage#flush() method</see>
            .
            <br />
            <br />
            If <code>PdfADocument</code> is used, flushing will be applied only if <code>flushResourcesContentStreams</code> is true.
            </remarks>
            <param name="flushResourcesContentStreams">
            if true all content streams that are rendered on this page (like form xObjects,
            annotation appearance streams, patterns) and also all images associated with this page
            will be flushed.
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfPage.GetMediaBox">
            <summary>
            Gets
            <see cref="T:iText.Kernel.Geom.Rectangle"/>
            object specified by page's Media Box, that defines the boundaries of the physical medium
            on which the page shall be displayed or printed
            </summary>
            <returns>
            
            <see cref="T:iText.Kernel.Geom.Rectangle"/>
            object specified by page Media Box, expressed in default user space units.
            </returns>
            <exception cref="T:iText.Kernel.PdfException">in case of any error while reading MediaBox object.</exception>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfPage.SetMediaBox(iText.Kernel.Geom.Rectangle)">
            <summary>
            Sets the Media Box object, that defines the boundaries of the physical medium
            on which the page shall be displayed or printed.
            </summary>
            <param name="rectangle">
            the
            <see cref="T:iText.Kernel.Geom.Rectangle"/>
            object to set, expressed in default user space units.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.PdfPage"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfPage.GetCropBox">
            <summary>
            Gets the
            <see cref="T:iText.Kernel.Geom.Rectangle"/>
            specified by page's CropBox, that defines the visible region of default user space.
            When the page is displayed or printed, its contents shall be clipped (cropped) to this rectangle
            and then shall be imposed on the output medium in some implementation-defined manner.
            </summary>
            <returns>
            the
            <see cref="T:iText.Kernel.Geom.Rectangle"/>
            object specified by pages's CropBox, expressed in default user space units.
            MediaBox by default.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfPage.SetCropBox(iText.Kernel.Geom.Rectangle)">
            <summary>Sets the CropBox object, that defines the visible region of default user space.</summary>
            <remarks>
            Sets the CropBox object, that defines the visible region of default user space.
            When the page is displayed or printed, its contents shall be clipped (cropped) to this rectangle
            and then shall be imposed on the output medium in some implementation-defined manner.
            </remarks>
            <param name="rectangle">
            the
            <see cref="T:iText.Kernel.Geom.Rectangle"/>
            object to set, expressed in default user space units.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.PdfPage"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfPage.SetBleedBox(iText.Kernel.Geom.Rectangle)">
            <summary>
            Sets the BleedBox object, that defines the region to which the contents of the page shall be clipped
            when output in a production environment.
            </summary>
            <param name="rectangle">
            the
            <see cref="T:iText.Kernel.Geom.Rectangle"/>
            object to set, expressed in default user space units.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.PdfPage"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfPage.GetBleedBox">
            <summary>
            Gets the
            <see cref="T:iText.Kernel.Geom.Rectangle"/>
            object specified by page's BleedBox, that define the region to which the
            contents of the page shall be clipped when output in a production environment.
            </summary>
            <returns>
            the
            <see cref="T:iText.Kernel.Geom.Rectangle"/>
            object specified by page's BleedBox, expressed in default user space units.
            CropBox by default.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfPage.SetArtBox(iText.Kernel.Geom.Rectangle)">
            <summary>
            Sets the ArtBox object, that define the extent of the page’s meaningful content
            (including potential white space) as intended by the page’s creator.
            </summary>
            <param name="rectangle">
            the
            <see cref="T:iText.Kernel.Geom.Rectangle"/>
            object to set, expressed in default user space units.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.PdfPage"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfPage.GetArtBox">
            <summary>
            Gets the
            <see cref="T:iText.Kernel.Geom.Rectangle"/>
            object specified by page's ArtBox, that define the extent of the page’s
            meaningful content (including potential white space) as intended by the page’s creator.
            </summary>
            <returns>
            the
            <see cref="T:iText.Kernel.Geom.Rectangle"/>
            object specified by page's ArtBox, expressed in default user space units.
            CropBox by default.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfPage.SetTrimBox(iText.Kernel.Geom.Rectangle)">
            <summary>Sets the TrimBox object, that define the intended dimensions of the finished page after trimming.
                </summary>
            <param name="rectangle">
            the
            <see cref="T:iText.Kernel.Geom.Rectangle"/>
            object to set, expressed in default user space units.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.PdfPage"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfPage.GetTrimBox">
            <summary>
            Gets the
            <see cref="T:iText.Kernel.Geom.Rectangle"/>
            object specified by page's TrimBox object,
            that define the intended dimensions of the finished page after trimming.
            </summary>
            <returns>
            the
            <see cref="T:iText.Kernel.Geom.Rectangle"/>
            object specified by page's TrimBox, expressed in default user space units.
            CropBox by default.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfPage.GetContentBytes">
            <summary>Get decoded bytes for the whole page content.</summary>
            <returns>byte array.</returns>
            <exception cref="T:iText.Kernel.PdfException">
            in case of any
            <see cref="T:System.IO.IOException"/>
            .
            </exception>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfPage.GetStreamBytes(System.Int32)">
            <summary>Gets decoded bytes of a certain stream of a page content.</summary>
            <param name="index">index of stream inside Content.</param>
            <returns>byte array.</returns>
            <exception cref="T:iText.Kernel.PdfException">
            in case of any
            <see cref="T:System.IO.IOException"/>
            .
            </exception>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfPage.GetNextMcid">
            <summary>Calculates and returns next available MCID reference.</summary>
            <returns>calculated MCID reference.</returns>
            <exception cref="T:iText.Kernel.PdfException">in case of not tagged document.</exception>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfPage.GetStructParentIndex">
            <summary>Gets the key of the page’s entry in the structural parent tree.</summary>
            <returns>
            the key of the page’s entry in the structural parent tree.
            If page has no entry in the structural parent tree, returned value is -1.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfPage.SetAdditionalAction(iText.Kernel.Pdf.PdfName,iText.Kernel.Pdf.Action.PdfAction)">
            <summary>Helper method to add an additional action to this page.</summary>
            <remarks>
            Helper method to add an additional action to this page.
            May be used in chain.
            </remarks>
            <param name="key">
            a
            <see cref="T:iText.Kernel.Pdf.PdfName"/>
            specifying the name of an additional action
            </param>
            <param name="action">
            the
            <see cref="T:iText.Kernel.Pdf.Action.PdfAction"/>
            to add as an additional action
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.PdfPage"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfPage.GetAnnotations">
            <summary>
            Gets array of annotation dictionaries that shall contain indirect references
            to all annotations associated with the page.
            </summary>
            <returns>
            the
            <see cref="!:System.Collections.IList&lt;E&gt;"/>
            &lt;
            <see cref="T:iText.Kernel.Pdf.Annot.PdfAnnotation"/>
            &gt; containing all page's annotations.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfPage.ContainsAnnotation(iText.Kernel.Pdf.Annot.PdfAnnotation)">
            <summary>Checks if page contains the specified annotation.</summary>
            <param name="annotation">
            the
            <see cref="T:iText.Kernel.Pdf.Annot.PdfAnnotation"/>
            to check.
            </param>
            <returns>
            
            <see langword="true"/>
            if page contains specified annotation and
            <see langword="false"/>
            otherwise.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfPage.AddAnnotation(iText.Kernel.Pdf.Annot.PdfAnnotation)">
            <summary>Adds specified annotation to the end of annotations array and tagged it.</summary>
            <remarks>
            Adds specified annotation to the end of annotations array and tagged it.
            May be used in chain.
            </remarks>
            <param name="annotation">
            the
            <see cref="T:iText.Kernel.Pdf.Annot.PdfAnnotation"/>
            to add.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.PdfPage"/>
            instance.
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.Pdf.PdfPage.AddAnnotation(System.Int32,iText.Kernel.Pdf.Annot.PdfAnnotation,System.Boolean)" -->
        <member name="M:iText.Kernel.Pdf.PdfPage.RemoveAnnotation(iText.Kernel.Pdf.Annot.PdfAnnotation)">
            <summary>Removes an annotation from the page.</summary>
            <remarks>
            Removes an annotation from the page.
            <br /><br />
            NOTE: If document is tagged, PdfDocument's PdfTagStructure instance will point at annotation tag parent after method call.
            </remarks>
            <param name="annotation">an annotation to be removed.</param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.PdfPage"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfPage.GetAnnotsSize">
            <summary>
            Gets the number of
            <see cref="T:iText.Kernel.Pdf.Annot.PdfAnnotation"/>
            associated with this page.
            </summary>
            <returns>
            the
            <c>int</c>
            number of
            <see cref="T:iText.Kernel.Pdf.Annot.PdfAnnotation"/>
            associated with this page.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfPage.GetOutlines(System.Boolean)">
            <summary>This method gets outlines of a current page</summary>
            <returns>return all outlines of a current page</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfPage.IsIgnorePageRotationForContent">
            <returns>
            true - if in case the page has a rotation, then new content will be automatically rotated in the
            opposite direction. On the rotated page this would look like if new content ignores page rotation.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfPage.SetIgnorePageRotationForContent(System.Boolean)">
            <summary>
            If true - defines that in case the page has a rotation, then new content will be automatically rotated in the
            opposite direction.
            </summary>
            <remarks>
            If true - defines that in case the page has a rotation, then new content will be automatically rotated in the
            opposite direction. On the rotated page this would look like if new content ignores page rotation.
            Default value -
            <see langword="false"/>
            .
            </remarks>
            <param name="ignorePageRotationForContent">- true to ignore rotation of the new content on the rotated page.
                </param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfPage.SetPageLabel(System.Nullable{iText.Kernel.Pdf.PageLabelNumberingStyle},System.String)">
            <summary>This method adds or replaces a page label.</summary>
            <param name="numberingStyle">
            The numbering style that shall be used for the numeric portion of each page label.
            May be NULL
            </param>
            <param name="labelPrefix">The label prefix for page labels in this range. May be NULL</param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.PdfPage"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfPage.SetPageLabel(System.Nullable{iText.Kernel.Pdf.PageLabelNumberingStyle},System.String,System.Int32)">
            <summary>This method adds or replaces a page label.</summary>
            <param name="numberingStyle">
            The numbering style that shall be used for the numeric portion of each page label.
            May be NULL
            </param>
            <param name="labelPrefix">The label prefix for page labels in this range. May be NULL</param>
            <param name="firstPage">
            The value of the numeric portion for the first page label in the range. Must be greater or
            equal 1.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.PdfPage"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfPage.SetTabOrder(iText.Kernel.Pdf.PdfName)">
            <summary>Sets a name specifying the tab order that shall be used for annotations on the page.</summary>
            <remarks>
            Sets a name specifying the tab order that shall be used for annotations on the page.
            The possible values are
            <see cref="F:iText.Kernel.Pdf.PdfName.R"/>
            (row order),
            <see cref="F:iText.Kernel.Pdf.PdfName.C"/>
            (column order), and
            <see cref="F:iText.Kernel.Pdf.PdfName.S"/>
            (structure order).
            Beginning with PDF 2.0, the possible values also include
            <see cref="F:iText.Kernel.Pdf.PdfName.A"/>
            (annotations array order) and
            <see cref="F:iText.Kernel.Pdf.PdfName.W"/>
            (widget order).
            See ISO 32000 12.5, "Annotations" for details.
            </remarks>
            <param name="tabOrder">
            a
            <see cref="T:iText.Kernel.Pdf.PdfName"/>
            specifying the annotations tab order. See method description for the allowed values.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.PdfPage"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfPage.GetTabOrder">
            <summary>Gets a name specifying the tab order that shall be used for annotations on the page.</summary>
            <remarks>
            Gets a name specifying the tab order that shall be used for annotations on the page.
            The possible values are
            <see cref="F:iText.Kernel.Pdf.PdfName.R"/>
            (row order),
            <see cref="F:iText.Kernel.Pdf.PdfName.C"/>
            (column order), and
            <see cref="F:iText.Kernel.Pdf.PdfName.S"/>
            (structure order).
            Beginning with PDF 2.0, the possible values also include
            <see cref="F:iText.Kernel.Pdf.PdfName.A"/>
            (annotations array order) and
            <see cref="F:iText.Kernel.Pdf.PdfName.W"/>
            (widget order).
            See ISO 32000 12.5, "Annotations" for details.
            </remarks>
            <returns>
            a
            <see cref="T:iText.Kernel.Pdf.PdfName"/>
            specifying the annotations tab order or null if tab order is not defined.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfPage.SetThumbnailImage(iText.Kernel.Pdf.Xobject.PdfImageXObject)">
            <summary>Sets a stream object that shall define the page’s thumbnail image.</summary>
            <remarks>
            Sets a stream object that shall define the page’s thumbnail image. Thumbnail images represent the contents of
            its pages in miniature form
            </remarks>
            <param name="thumb">the thumbnail image</param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.PdfPage"/>
            object
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfPage.GetThumbnailImage">
            <summary>Sets a stream object that shall define the page’s thumbnail image.</summary>
            <remarks>
            Sets a stream object that shall define the page’s thumbnail image. Thumbnail images represent the contents of
            its pages in miniature form
            </remarks>
            <returns>the thumbnail image, or <code>null</code> if it is not present</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfPage.AddOutputIntent(iText.Kernel.Pdf.PdfOutputIntent)">
            <summary>
            Adds
            <see cref="T:iText.Kernel.Pdf.PdfOutputIntent"/>
            that shall specify the colour characteristics of output devices
            on which the page might be rendered.
            </summary>
            <param name="outputIntent">
            
            <see cref="T:iText.Kernel.Pdf.PdfOutputIntent"/>
            to add.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.PdfPage"/>
            object
            </returns>
            <seealso cref="T:iText.Kernel.Pdf.PdfOutputIntent"/>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfPage.Put(iText.Kernel.Pdf.PdfName,iText.Kernel.Pdf.PdfObject)">
            <summary>
            Helper method that associate specified value with specified key in the underlined
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            .
            May be used in chain.
            </summary>
            <param name="key">
            the
            <see cref="T:iText.Kernel.Pdf.PdfName"/>
            key with which the specified value is to be associated.
            </param>
            <param name="value">
            the
            <see cref="T:iText.Kernel.Pdf.PdfObject"/>
            value to be associated with the specified key.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.PdfPage"/>
            object.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfPage.IsPageRotationInverseMatrixWritten">
            <summary>
            This flag is meaningful for the case, when page rotation is applied and ignorePageRotationForContent
            is set to true.
            </summary>
            <remarks>
            This flag is meaningful for the case, when page rotation is applied and ignorePageRotationForContent
            is set to true. NOTE: It is needed for the internal usage.
            <br /><br />
            This flag defines if inverse matrix (which rotates content into the opposite direction from page rotation
            direction in order to give the impression of the not rotated text) is already applied to the page content stream.
            See
            <see cref="M:iText.Kernel.Pdf.PdfPage.SetIgnorePageRotationForContent(System.Boolean)"/>
            </remarks>
            <returns>true, if inverse matrix is already applied, false otherwise.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfPage.SetPageRotationInverseMatrixWritten">
            <summary>NOTE: For internal usage! Use this method only if you know what you are doing.</summary>
            <remarks>
            NOTE: For internal usage! Use this method only if you know what you are doing.
            <br /><br />
            This method is called when inverse matrix (which rotates content into the opposite direction from page rotation
            direction in order to give the impression of the not rotated text) is applied to the page content stream.
            See
            <see cref="M:iText.Kernel.Pdf.PdfPage.SetIgnorePageRotationForContent(System.Boolean)"/>
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.Pdf.PdfPage.AddAssociatedFile(System.String,iText.Kernel.Pdf.Filespec.PdfFileSpec)" -->
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.Pdf.PdfPage.AddAssociatedFile(iText.Kernel.Pdf.Filespec.PdfFileSpec)" -->
        <member name="M:iText.Kernel.Pdf.PdfPage.GetAssociatedFiles(System.Boolean)">
            <summary>Returns files associated with PDF page.</summary>
            <param name="create">iText will create AF array if it doesn't exist and create value is true</param>
            <returns>associated files array.</returns>
        </member>
        <member name="T:iText.Kernel.Pdf.PdfPagesTree">
            <summary>
            Algorithm for construction
            <see cref="T:iText.Kernel.Pdf.PdfPages"/>
            tree
            </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfPagesTree.#ctor(iText.Kernel.Pdf.PdfCatalog)">
            <summary>Create PdfPages tree.</summary>
            <param name="pdfCatalog">
            
            <seealso>PdfCatalog</seealso>
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfPagesTree.GetPage(System.Int32)">
            <summary>
            Returns the
            <seealso>PdfPage</seealso>
            at the specified position in this list.
            </summary>
            <param name="pageNum">one-based index of the element to return</param>
            <returns>
            the
            <seealso>PdfPage</seealso>
            at the specified position in this list
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfPagesTree.GetPage(iText.Kernel.Pdf.PdfDictionary)">
            <summary>
            Returns the
            <seealso>PdfPage</seealso>
            by page's PdfDictionary.
            </summary>
            <param name="pageDictionary">page's PdfDictionary</param>
            <returns>
            the
            <c>PdfPage</c>
            object, that wraps
            <paramref name="pageDictionary"/>
            .
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfPagesTree.GetNumberOfPages">
            <summary>Gets total number of @see PdfPages.</summary>
            <returns>total number of pages</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfPagesTree.GetPageNumber(iText.Kernel.Pdf.PdfPage)">
            <summary>
            Returns the index of the first occurrence of the specified page
            in this tree, or 0 if this tree does not contain the page.
            </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfPagesTree.GetPageNumber(iText.Kernel.Pdf.PdfDictionary)">
            <summary>
            Returns the index of the first occurrence of the page in this tree
            specified by it's PdfDictionary, or 0 if this tree does not contain the page.
            </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfPagesTree.AddPage(iText.Kernel.Pdf.PdfPage)">
            <summary>
            Appends the specified
            <seealso>PdfPage</seealso>
            to the end of this tree.
            </summary>
            <param name="pdfPage">
            
            <seealso>PdfPage</seealso>
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfPagesTree.AddPage(System.Int32,iText.Kernel.Pdf.PdfPage)">
            <summary>
            Insert
            <seealso>PdfPage</seealso>
            into specific one-based position.
            </summary>
            <param name="index">one-base index of the page</param>
            <param name="pdfPage">
            
            <see cref="T:iText.Kernel.Pdf.PdfPage"/>
            to insert.
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfPagesTree.RemovePage(System.Int32)">
            <summary>Removes the page at the specified position in this tree.</summary>
            <remarks>
            Removes the page at the specified position in this tree.
            Shifts any subsequent elements to the left (subtracts one from their
            indices).
            </remarks>
            <param name="pageNum">the one-based index of the PdfPage to be removed</param>
            <returns>the page that was removed from the list</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfPagesTree.GenerateTree">
            <summary>Generate PdfPages tree.</summary>
            <returns>
            root
            <see cref="T:iText.Kernel.Pdf.PdfPages"/>
            </returns>
            <exception cref="T:iText.Kernel.PdfException">in case empty document</exception>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfPrimitiveObject.#ctor(System.Byte[])">
            <summary>Initialize PdfPrimitiveObject from the passed bytes.</summary>
            <param name="content">byte content, shall not be null.</param>
        </member>
        <member name="T:iText.Kernel.Pdf.PdfReader">
            <summary>Reads a PDF document.</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfReader.#ctor(iText.IO.Source.IRandomAccessSource,iText.Kernel.Pdf.ReaderProperties)">
            <summary>Constructs a new PdfReader.</summary>
            <param name="byteSource">source of bytes for the reader</param>
            <param name="properties">properties of the created reader</param>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfReader.#ctor(System.IO.Stream,iText.Kernel.Pdf.ReaderProperties)">
            <summary>Reads and parses a PDF document.</summary>
            <param name="is">
            the
            <c>InputStream</c>
            containing the document. The stream is read to the
            end but is not closed.
            </param>
            <param name="properties">properties of the created reader</param>
            <exception cref="T:System.IO.IOException">on error</exception>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfReader.#ctor(System.IO.FileInfo)">
            <summary>Reads and parses a PDF document.</summary>
            <param name="file">
            the
            <c>File</c>
            containing the document.
            </param>
            <exception cref="T:System.IO.IOException">on error</exception>
            <exception cref="T:System.IO.FileNotFoundException">when the specified File is not found</exception>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfReader.#ctor(System.IO.Stream)">
            <summary>Reads and parses a PDF document.</summary>
            <param name="is">
            the
            <c>InputStream</c>
            containing the document. the
            <c>InputStream</c>
            containing the document. The stream is read to the
            end but is not closed.
            </param>
            <exception cref="T:System.IO.IOException">on error</exception>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfReader.#ctor(System.String,iText.Kernel.Pdf.ReaderProperties)">
            <summary>Reads and parses a PDF document.</summary>
            <param name="filename">the file name of the document</param>
            <param name="properties">properties of the created reader</param>
            <exception cref="T:System.IO.IOException">on error</exception>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfReader.#ctor(System.String)">
            <summary>Reads and parses a PDF document.</summary>
            <param name="filename">the file name of the document</param>
            <exception cref="T:System.IO.IOException">on error</exception>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfReader.Close">
            <summary>
            Close
            <see cref="T:iText.IO.Source.PdfTokenizer"/>
            .
            </summary>
            <exception cref="T:System.IO.IOException">on error.</exception>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfReader.SetUnethicalReading(System.Boolean)">
            <summary>
            The iText is not responsible if you decide to change the
            value of this parameter.
            </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfReader.IsCloseStream">
            <summary>
            Gets whether
            <see cref="M:iText.Kernel.Pdf.PdfReader.Close"/>
            method shall close input stream.
            </summary>
            <returns>
            true, if
            <see cref="M:iText.Kernel.Pdf.PdfReader.Close"/>
            method will close input stream,
            otherwise false.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfReader.SetCloseStream(System.Boolean)">
            <summary>
            Sets whether
            <see cref="M:iText.Kernel.Pdf.PdfReader.Close"/>
            method shall close input stream.
            </summary>
            <param name="closeStream">
            true, if
            <see cref="M:iText.Kernel.Pdf.PdfReader.Close"/>
            method shall close input stream,
            otherwise false.
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfReader.HasRebuiltXref">
            <summary>If any exception generated while reading XRef section, PdfReader will try to rebuild it.</summary>
            <returns>true, if PdfReader rebuilt Cross-Reference section.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfReader.HasHybridXref">
            <summary>
            Some documents contain hybrid XRef, for more information see "7.5.8.4 Compatibility with Applications
            That Do Not Support Compressed Reference Streams" in PDF 32000-1:2008 spec.
            </summary>
            <returns>true, if the document has hybrid Cross-Reference section.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfReader.HasXrefStm">
            <summary>Indicates whether the document has Cross-Reference Streams.</summary>
            <returns>true, if the document has Cross-Reference Streams.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfReader.HasFixedXref">
            <summary>If any exception generated while reading PdfObject, PdfReader will try to fix offsets of all objects.
                </summary>
            <returns>true, if PdfReader fixed offsets of PdfObjects.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfReader.GetLastXref">
            <summary>Gets position of the last Cross-Reference table.</summary>
            <returns>-1 if Cross-Reference table has rebuilt, otherwise position of the last Cross-Reference table.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfReader.ReadStreamBytes(iText.Kernel.Pdf.PdfStream,System.Boolean)">
            <summary>Reads, decrypt and optionally decode stream bytes.</summary>
            <remarks>
            Reads, decrypt and optionally decode stream bytes.
            Note, this method doesn't store actual bytes in any internal structures.
            </remarks>
            <param name="decode">true if to get decoded stream bytes, false if to leave it originally encoded.</param>
            <returns>byte[] array.</returns>
            <exception cref="T:System.IO.IOException">on error.</exception>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfReader.ReadStreamBytesRaw(iText.Kernel.Pdf.PdfStream)">
            <summary>Reads and decrypt stream bytes.</summary>
            <remarks>
            Reads and decrypt stream bytes.
            Note, this method doesn't store actual bytes in any internal structures.
            </remarks>
            <returns>byte[] array.</returns>
            <exception cref="T:System.IO.IOException">on error.</exception>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfReader.ReadStream(iText.Kernel.Pdf.PdfStream,System.Boolean)">
            <summary>
            Reads, decrypt and optionally decode stream bytes into
            <see cref="T:System.IO.MemoryStream"/>
            .
            User is responsible for closing returned stream.
            </summary>
            <param name="decode">true if to get decoded stream, false if to leave it originally encoded.</param>
            <returns>
            InputStream or
            <see langword="null"/>
            if reading was failed.
            </returns>
            <exception cref="T:System.IO.IOException">on error.</exception>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfReader.DecodeBytes(System.Byte[],iText.Kernel.Pdf.PdfDictionary)">
            <summary>Decode bytes applying the filters specified in the provided dictionary using default filter handlers.
                </summary>
            <param name="b">the bytes to decode</param>
            <param name="streamDictionary">the dictionary that contains filter information</param>
            <returns>the decoded bytes</returns>
            <exception cref="T:iText.Kernel.PdfException">if there are any problems decoding the bytes</exception>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfReader.DecodeBytes(System.Byte[],iText.Kernel.Pdf.PdfDictionary,System.Collections.Generic.IDictionary{iText.Kernel.Pdf.PdfName,iText.Kernel.Pdf.Filters.IFilterHandler})">
            <summary>Decode a byte[] applying the filters specified in the provided dictionary using the provided filter handlers.
                </summary>
            <param name="b">the bytes to decode</param>
            <param name="streamDictionary">the dictionary that contains filter information</param>
            <param name="filterHandlers">the map used to look up a handler for each type of filter</param>
            <returns>the decoded bytes</returns>
            <exception cref="T:iText.Kernel.PdfException">if there are any problems decoding the bytes</exception>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfReader.GetSafeFile">
            <summary>
            Gets a new file instance of the original PDF
            document.
            </summary>
            <returns>a new file instance of the original PDF document</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfReader.GetFileLength">
            <summary>Provides the size of the opened file.</summary>
            <returns>The size of the opened file.</returns>
            <exception cref="T:System.IO.IOException">on error.</exception>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfReader.IsOpenedWithFullPermission">
            <summary>
            Checks if the document was opened with the owner password so that the end application
            can decide what level of access restrictions to apply.
            </summary>
            <remarks>
            Checks if the document was opened with the owner password so that the end application
            can decide what level of access restrictions to apply. If the document is not encrypted
            it will return
            <see langword="true"/>
            .
            </remarks>
            <returns>
            
            <see langword="true"/>
            if the document was opened with the owner password or if it's not encrypted,
            <see langword="false"/>
            if the document was opened with the user password.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfReader.GetPermissions">
            <summary>Gets the encryption permissions.</summary>
            <remarks>
            Gets the encryption permissions. It can be used directly in
            <see cref="M:iText.Kernel.Pdf.WriterProperties.SetStandardEncryption(System.Byte[],System.Byte[],System.Int32,System.Int32)"/>
            .
            See ISO 32000-1, Table 22 for more details.
            </remarks>
            <returns>the encryption permissions, an unsigned 32-bit quantity.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfReader.GetCryptoMode">
            <summary>Gets encryption algorithm and access permissions.</summary>
            <seealso cref="T:iText.Kernel.Pdf.EncryptionConstants"/>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfReader.GetPdfAConformanceLevel">
            <summary>Gets the declared Pdf/A conformance level of the source document that is being read.</summary>
            <remarks>
            Gets the declared Pdf/A conformance level of the source document that is being read.
            Note that this information is provided via XMP metadata and is not verified by iText.
            </remarks>
            <returns>
            conformance level of the source document, or
            <see langword="null"/>
            if no Pdf/A
            conformance level information is specified.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfReader.ComputeUserPassword">
            <summary>Computes user password if standard encryption handler is used with Standard40, Standard128 or AES128 encryption algorithm.
                </summary>
            <returns>user password, or null if not a standard encryption handler was used or if ownerPasswordUsed wasn't use to open the document.
                </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfReader.GetOriginalFileId">
            <summary>
            Gets file ID, either
            <see cref="F:iText.Kernel.Pdf.PdfName.ID"/>
            key of trailer or a newly generated id.
            </summary>
            <returns>byte array represents file ID.</returns>
            <seealso cref="M:iText.Kernel.Pdf.PdfEncryption.GenerateNewDocumentId"/>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfReader.ReadPdf">
            <summary>Parses the entire PDF</summary>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfReader.ReadObjectStream(iText.Kernel.Pdf.PdfStream)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfReader.ReadObject(System.Boolean)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfReader.ReadObject(System.Boolean,System.Boolean)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfReader.ReadDictionary(System.Boolean)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfReader.ReadArray(System.Boolean)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfReader.ReadXref">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfReader.ReadXrefSection">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfReader.ReadXrefStream(System.Int64)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfReader.FixXref">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfReader.RebuildXref">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfReader.GetOffsetTokeniser(iText.IO.Source.IRandomAccessSource)">
            <summary>Utility method that checks the provided byte source to see if it has junk bytes at the beginning.
                </summary>
            <remarks>
            Utility method that checks the provided byte source to see if it has junk bytes at the beginning.  If junk bytes
            are found, construct a tokeniser that ignores the junk.  Otherwise, construct a tokeniser for the byte source as it is
            </remarks>
            <param name="byteSource">the source to check</param>
            <returns>a tokeniser that is guaranteed to start at the PDF header</returns>
            <exception cref="T:System.IO.IOException">if there is a problem reading the byte source</exception>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfReader.CheckPdfStreamLength(iText.Kernel.Pdf.PdfStream)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfReader.ReusableRandomAccessSource.Close">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="T:iText.Kernel.Pdf.PdfResources">
            <summary>
            Wrapper class that represent resource dictionary - that define named resources
            used by content streams operators.
            </summary>
            <remarks>
            Wrapper class that represent resource dictionary - that define named resources
            used by content streams operators. (ISO 32000-1, 7.8.3 Resource Dictionaries)
            </remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfResources.#ctor(iText.Kernel.Pdf.PdfDictionary)">
            <summary>Creates new instance from given dictionary.</summary>
            <param name="pdfObject">
            the
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            object from which the resource object will be created.
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfResources.#ctor">
            <summary>Creates new instance from empty dictionary.</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfResources.AddFont(iText.Kernel.Pdf.PdfDocument,iText.Kernel.Font.PdfFont)">
            <summary>Adds font to resources and register PdfFont in the document for further flushing.</summary>
            <returns>added font resource name.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfResources.AddImage(iText.Kernel.Pdf.Xobject.PdfImageXObject)">
            <summary>
            Adds
            <see cref="T:iText.Kernel.Pdf.Xobject.PdfImageXObject"/>
            object to the resources.
            </summary>
            <param name="image">
            the
            <see cref="T:iText.Kernel.Pdf.Xobject.PdfImageXObject"/>
            to add.
            </param>
            <returns>added image resource name.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfResources.AddImage(iText.Kernel.Pdf.PdfStream)">
            <summary>
            Adds
            <see cref="T:iText.Kernel.Pdf.PdfStream"/>
            to the resources as image.
            </summary>
            <param name="image">
            the
            <see cref="T:iText.Kernel.Pdf.PdfStream"/>
            to add.
            </param>
            <returns>added image resources name.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfResources.AddForm(iText.Kernel.Pdf.Xobject.PdfFormXObject)">
            <summary>
            Adds
            <see cref="T:iText.Kernel.Pdf.Xobject.PdfFormXObject"/>
            object to the resources.
            </summary>
            <param name="form">
            the
            <see cref="T:iText.Kernel.Pdf.Xobject.PdfFormXObject"/>
            to add.
            </param>
            <returns>added form resource name.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfResources.AddForm(iText.Kernel.Pdf.PdfStream)">
            <summary>
            Adds
            <see cref="T:iText.Kernel.Pdf.PdfStream"/>
            to the resources as form.
            </summary>
            <param name="form">
            the
            <see cref="T:iText.Kernel.Pdf.PdfStream"/>
            to add.
            </param>
            <returns>added form resources name.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfResources.AddForm(iText.Kernel.Pdf.Xobject.PdfFormXObject,iText.Kernel.Pdf.PdfName)">
            <summary>
            Adds the given Form XObject to the current instance of
            <see cref="T:iText.Kernel.Pdf.PdfResources"/>
            .
            </summary>
            <param name="form">Form XObject.</param>
            <param name="name">Preferred name for the given Form XObject.</param>
            <returns>
            the
            <see cref="T:iText.Kernel.Pdf.PdfName"/>
            of the newly added resource
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfResources.AddExtGState(iText.Kernel.Pdf.Extgstate.PdfExtGState)">
            <summary>
            Adds
            <see cref="T:iText.Kernel.Pdf.Extgstate.PdfExtGState"/>
            object to the resources.
            </summary>
            <param name="extGState">
            the
            <see cref="T:iText.Kernel.Pdf.Extgstate.PdfExtGState"/>
            to add.
            </param>
            <returns>added graphics state parameter dictionary resource name.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfResources.AddExtGState(iText.Kernel.Pdf.PdfDictionary)">
            <summary>
            Adds
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            to the resources as graphics state parameter dictionary.
            </summary>
            <param name="extGState">
            the
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            to add.
            </param>
            <returns>added graphics state parameter dictionary resources name.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfResources.AddProperties(iText.Kernel.Pdf.PdfDictionary)">
            <summary>
            Adds
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            to the resources as properties list.
            </summary>
            <param name="properties">
            the
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            to add.
            </param>
            <returns>added properties list resources name.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfResources.AddColorSpace(iText.Kernel.Pdf.Colorspace.PdfColorSpace)">
            <summary>
            Adds
            <see cref="T:iText.Kernel.Pdf.Colorspace.PdfColorSpace"/>
            object to the resources.
            </summary>
            <param name="cs">
            the
            <see cref="T:iText.Kernel.Pdf.Colorspace.PdfColorSpace"/>
            to add.
            </param>
            <returns>added color space resource name.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfResources.AddColorSpace(iText.Kernel.Pdf.PdfObject)">
            <summary>
            Adds
            <see cref="T:iText.Kernel.Pdf.PdfObject"/>
            to the resources as color space.
            </summary>
            <param name="colorSpace">
            the
            <see cref="T:iText.Kernel.Pdf.PdfObject"/>
            to add.
            </param>
            <returns>added color space resources name.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfResources.AddPattern(iText.Kernel.Pdf.Colorspace.PdfPattern)">
            <summary>
            Adds
            <see cref="T:iText.Kernel.Pdf.Colorspace.PdfPattern"/>
            object to the resources.
            </summary>
            <param name="pattern">
            the
            <see cref="T:iText.Kernel.Pdf.Colorspace.PdfPattern"/>
            to add.
            </param>
            <returns>added pattern resource name.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfResources.AddPattern(iText.Kernel.Pdf.PdfDictionary)">
            <summary>
            Adds
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            to the resources as pattern.
            </summary>
            <param name="pattern">
            the
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            to add.
            </param>
            <returns>added pattern resources name.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfResources.AddShading(iText.Kernel.Pdf.Colorspace.PdfShading)">
            <summary>
            Adds
            <see cref="T:iText.Kernel.Pdf.Colorspace.PdfShading"/>
            object to the resources.
            </summary>
            <param name="shading">
            the
            <see cref="T:iText.Kernel.Pdf.Colorspace.PdfShading"/>
            to add.
            </param>
            <returns>added shading resource name.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfResources.AddShading(iText.Kernel.Pdf.PdfDictionary)">
            <summary>
            Adds
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            to the resources as shading dictionary.
            </summary>
            <param name="shading">
            the
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            to add.
            </param>
            <returns>added shading dictionary resources name.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfResources.SetModified">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfResources.SetDefaultGray(iText.Kernel.Pdf.Colorspace.PdfColorSpace)">
            <summary>Sets the value of default Gray Color Space (see ISO-320001 Paragraph 8.6.5.6).</summary>
            <param name="defaultCs">the color space to set.</param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfResources.SetDefaultRgb(iText.Kernel.Pdf.Colorspace.PdfColorSpace)">
            <summary>Sets the value of default RGB Color Space (see ISO-320001 Paragraph 8.6.5.6).</summary>
            <param name="defaultCs">the color space to set.</param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfResources.SetDefaultCmyk(iText.Kernel.Pdf.Colorspace.PdfColorSpace)">
            <summary>Sets the value of default CMYK Color Space (see ISO-320001 Paragraph 8.6.5.6).</summary>
            <param name="defaultCs">the color space to set.</param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfResources.GetResourceName``1(iText.Kernel.Pdf.PdfObjectWrapper{``0})">
            <summary>
            Gets the mapped resource name of the
            <see cref="T:iText.Kernel.Pdf.PdfObject"/>
            under the given wrapper.
            <br />
            <br />
            Note: if the name for the object won't be found, then the name of object's Indirect Reference will be searched.
            </summary>
            <param name="resource">
            the wrapper of the
            <see cref="T:iText.Kernel.Pdf.PdfObject"/>
            , for which the name will be searched.
            </param>
            
            <returns>
            the mapped resource name or
            <see langword="null"/>
            if object isn't added to resources.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfResources.GetResourceName(iText.Kernel.Pdf.PdfObject)">
            <summary>
            Gets the mapped resource name of the given
            <see cref="T:iText.Kernel.Pdf.PdfObject"/>
            .
            <br />
            <br />
            Note: if the name for the object won't be found, then the name of object's Indirect Reference will be searched.
            </summary>
            <param name="resource">the object, for which the name will be searched.</param>
            <returns>
            the mapped resource name or
            <see langword="null"/>
            if object isn't added to resources.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfResources.GetResourceNames">
            <summary>Gets the names of all the added resources.</summary>
            <returns>the name of all the added resources.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfResources.GetProcSet">
            <summary>Gets the array of predefined procedure set names (see ISO-320001 Paragraph 14.2).</summary>
            <remarks>
            Gets the array of predefined procedure set names (see ISO-320001 Paragraph 14.2).
            Deprecated in PDF 2.0.
            </remarks>
            <returns>the array of predefined procedure set names.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfResources.SetProcSet(iText.Kernel.Pdf.PdfArray)">
            <summary>Sets the array of predefined procedure set names (see ISO-320001 Paragraph 14.2).</summary>
            <remarks>
            Sets the array of predefined procedure set names (see ISO-320001 Paragraph 14.2).
            Deprecated in PDF 2.0.
            </remarks>
            <param name="array">the array of predefined procedure set names to be set.</param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfResources.GetResourceNames(iText.Kernel.Pdf.PdfName)">
            <summary>Gets the names of all resources of specified type.</summary>
            <param name="resType">
            the resource type. Should be
            <see cref="F:iText.Kernel.Pdf.PdfName.ColorSpace"/>
            ,
            <see cref="F:iText.Kernel.Pdf.PdfName.ExtGState"/>
            ,
            <see cref="F:iText.Kernel.Pdf.PdfName.Pattern"/>
            ,
            <see cref="F:iText.Kernel.Pdf.PdfName.Shading"/>
            ,
            <see cref="F:iText.Kernel.Pdf.PdfName.XObject"/>
            ,
            <see cref="F:iText.Kernel.Pdf.PdfName.Font"/>
            .
            </param>
            <returns>
            set of resources name of corresponding type. May be empty.
            Will be empty in case of incorrect resource type.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfResources.GetResource(iText.Kernel.Pdf.PdfName)">
            <summary>
            Get the
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            object that that contain resources of specified type.
            </summary>
            <param name="resType">
            the resource type. Should be
            <see cref="F:iText.Kernel.Pdf.PdfName.ColorSpace"/>
            ,
            <see cref="F:iText.Kernel.Pdf.PdfName.ExtGState"/>
            ,
            <see cref="F:iText.Kernel.Pdf.PdfName.Pattern"/>
            ,
            <see cref="F:iText.Kernel.Pdf.PdfName.Shading"/>
            ,
            <see cref="F:iText.Kernel.Pdf.PdfName.XObject"/>
            ,
            <see cref="F:iText.Kernel.Pdf.PdfName.Font"/>
            .
            </param>
            <returns>
            the
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            object containing all resources of specified type,
            or
            <see langword="null"/>
            in case of incorrect resource type.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfResources.GetResourceObject(iText.Kernel.Pdf.PdfName,iText.Kernel.Pdf.PdfName)">
            <summary>
            Get the
            <see cref="T:iText.Kernel.Pdf.PdfObject"/>
            object with specified type and name.
            </summary>
            <param name="resType">
            the resource type. Should be
            <see cref="F:iText.Kernel.Pdf.PdfName.ColorSpace"/>
            ,
            <see cref="F:iText.Kernel.Pdf.PdfName.ExtGState"/>
            ,
            <see cref="F:iText.Kernel.Pdf.PdfName.Pattern"/>
            ,
            <see cref="F:iText.Kernel.Pdf.PdfName.Shading"/>
            ,
            <see cref="F:iText.Kernel.Pdf.PdfName.XObject"/>
            ,
            <see cref="F:iText.Kernel.Pdf.PdfName.Font"/>
            .
            </param>
            <param name="resName">the name of the resource object.</param>
            <returns>
            the
            <see cref="T:iText.Kernel.Pdf.PdfObject"/>
            with specified name in the resources of specified type or
            <see langword="null"/>
            in case of incorrect type or missing resource with such name.
            </returns>
        </member>
        <member name="T:iText.Kernel.Pdf.PdfResources.ResourceNameGenerator">
            <summary>Represents a resource name generator.</summary>
            <remarks>
            Represents a resource name generator. The generator takes into account
            the names of already existing resources thus providing us a unique name.
            The name consists of the following parts: prefix (literal) and number.
            </remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfResources.ResourceNameGenerator.#ctor(iText.Kernel.Pdf.PdfName,System.String,System.Int32)">
            <summary>
            Constructs an instance of
            <see cref="T:iText.Kernel.Pdf.PdfResources.ResourceNameGenerator"/>
            class.
            </summary>
            <param name="resourceType">
            Type of resource. Should be
            <see cref="F:iText.Kernel.Pdf.PdfName.ColorSpace"/>
            ,
            <see cref="F:iText.Kernel.Pdf.PdfName.ExtGState"/>
            ,
            <see cref="F:iText.Kernel.Pdf.PdfName.Pattern"/>
            ,
            <see cref="F:iText.Kernel.Pdf.PdfName.Shading"/>
            ,
            <see cref="F:iText.Kernel.Pdf.PdfName.XObject"/>
            ,
            <see cref="F:iText.Kernel.Pdf.PdfName.Font"/>
            .
            </param>
            <param name="prefix">Prefix used for generating names.</param>
            <param name="seed">
            Seed for the value which is appended to the number each time
            new name is generated.
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfResources.ResourceNameGenerator.#ctor(iText.Kernel.Pdf.PdfName,System.String)">
            <summary>
            Constructs an instance of
            <see cref="T:iText.Kernel.Pdf.PdfResources.ResourceNameGenerator"/>
            class.
            </summary>
            <param name="resourceType">
            Type of resource. Should be
            <see cref="F:iText.Kernel.Pdf.PdfName.ColorSpace"/>
            ,
            <see cref="F:iText.Kernel.Pdf.PdfName.ExtGState"/>
            ,
            <see cref="F:iText.Kernel.Pdf.PdfName.Pattern"/>
            ,
            <see cref="F:iText.Kernel.Pdf.PdfName.Shading"/>
            ,
            <see cref="F:iText.Kernel.Pdf.PdfName.XObject"/>
            ,
            <see cref="F:iText.Kernel.Pdf.PdfName.Font"/>
            .
            </param>
            <param name="prefix">Prefix used for generating names.</param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfResources.ResourceNameGenerator.GetResourceType">
            <summary>Gets the resource type of generator.</summary>
            <returns>
            Type of resource. May be
            <see cref="F:iText.Kernel.Pdf.PdfName.ColorSpace"/>
            ,
            <see cref="F:iText.Kernel.Pdf.PdfName.ExtGState"/>
            ,
            <see cref="F:iText.Kernel.Pdf.PdfName.Pattern"/>
            ,
            <see cref="F:iText.Kernel.Pdf.PdfName.Shading"/>
            ,
            <see cref="F:iText.Kernel.Pdf.PdfName.XObject"/>
            ,
            <see cref="F:iText.Kernel.Pdf.PdfName.Font"/>
            .
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfResources.ResourceNameGenerator.Generate(iText.Kernel.Pdf.PdfResources)">
            <summary>Generates new (unique) resource name.</summary>
            <param name="resources">
            the
            <see cref="T:iText.Kernel.Pdf.PdfResources"/>
            object for which name will be generated.
            </param>
            <returns>new (unique) resource name.</returns>
        </member>
        <member name="T:iText.Kernel.Pdf.PdfStream">
            <summary>Representation of a stream as described in the PDF Specification.</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfStream.#ctor(System.Byte[],System.Int32)">
            <summary>
            Constructs a
            <c>PdfStream</c>
            -object.
            </summary>
            <param name="bytes">
            initial content of
            <see cref="T:iText.Kernel.Pdf.PdfOutputStream"/>
            .
            </param>
            <param name="compressionLevel">the compression level (0 = best speed, 9 = best compression, -1 is default)
                </param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfStream.#ctor(System.Byte[])">
            <summary>Creates a PdfStream instance.</summary>
            <param name="bytes">bytes to write to the PdfStream</param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfStream.#ctor(iText.Kernel.Pdf.PdfDocument,System.IO.Stream,System.Int32)">
            <summary>Creates an efficient stream.</summary>
            <remarks>
            Creates an efficient stream. No temporary array is ever created. The
            <c>InputStream</c>
            is totally consumed but is not closed. The general usage is:
            <br />
            <pre>
            PdfDocument document = ?;
            InputStream in = ?;
            PdfStream stream = new PdfStream(document, in, PdfOutputStream.DEFAULT_COMPRESSION);
            ?
            stream.flush();
            in.close();
            </pre>
            </remarks>
            <param name="inputStream">the data to write to this stream</param>
            <param name="compressionLevel">the compression level (0 = best speed, 9 = best compression, -1 is default)
                </param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfStream.#ctor(iText.Kernel.Pdf.PdfDocument,System.IO.Stream)">
            <summary>Creates an efficient stream.</summary>
            <remarks>
            Creates an efficient stream. No temporary array is ever created. The
            <c>InputStream</c>
            is totally consumed but is not closed. The general usage is:
            <br />
            <pre>
            PdfDocument document = ?;
            InputStream in = ?;
            PdfStream stream = new PdfStream(document, in);
            stream.flush();
            in.close();
            </pre>
            </remarks>
            <param name="inputStream">the data to write to this stream</param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfStream.#ctor(System.Int32)">
            <summary>
            Constructs a
            <c>PdfStream</c>
            -object.
            </summary>
            <param name="compressionLevel">the compression level (0 = best speed, 9 = best compression, -1 is default)
                </param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfStream.#ctor">
            <summary>Creates an empty PdfStream instance.</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfStream.GetOutputStream">
            <summary>Gets output stream.</summary>
            <returns>output stream</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfStream.GetCompressionLevel">
            <summary>Gets compression level of this PdfStream.</summary>
            <remarks>
            Gets compression level of this PdfStream.
            For more details @see
            <see cref="!:Java.Util.Zip.Deflater"/>
            .
            </remarks>
            <returns>compression level.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfStream.SetCompressionLevel(System.Int32)">
            <summary>Sets compression level of this PdfStream.</summary>
            <remarks>
            Sets compression level of this PdfStream.
            For more details @see
            <see cref="!:Java.Util.Zip.Deflater"/>
            .
            </remarks>
            <param name="compressionLevel">the compression level (0 = best speed, 9 = best compression, -1 is default)
                </param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfStream.GetBytes">
            <summary>Gets decoded stream bytes.</summary>
            <returns>byte[]</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfStream.GetBytes(System.Boolean)">
            <summary>Gets stream bytes.</summary>
            <param name="decoded">true if to get decoded stream bytes, otherwise false.</param>
            <returns>
            byte content of the
            <c>PdfStream</c>
            . Byte content will be
            <see langword="null"/>
            ,
            if the
            <c>PdfStream</c>
            was created by
            <c>InputStream</c>
            .
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfStream.SetData(System.Byte[])">
            <summary>Sets <code>bytes</code> as stream's content.</summary>
            <remarks>
            Sets <code>bytes</code> as stream's content.
            Could not be used with streams which were created by <code>InputStream</code>.
            </remarks>
            <param name="bytes">new content for stream; if <code>null</code> then stream's content will be discarded</param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfStream.SetData(System.Byte[],System.Boolean)">
            <summary>Sets or appends <code>bytes</code> to stream content.</summary>
            <remarks>
            Sets or appends <code>bytes</code> to stream content.
            Could not be used with streams which were created by <code>InputStream</code>.
            </remarks>
            <param name="bytes">
            New content for stream. These bytes are considered to be a raw data (i.e. not encoded/compressed/encrypted)
            and if it's not true, the corresponding filters shall be set to the PdfStream object manually.
            Data compression generally should be configured via
            <see cref="M:iText.Kernel.Pdf.PdfStream.SetCompressionLevel(System.Int32)"/>
            and
            is handled on stream writing to the output document.
            If <code>null</code> and <code>append</code> is false then stream's content will be discarded.
            </param>
            <param name="append">
            If set to true then <code>bytes</code> will be appended to the end,
            rather then replace original content. The original content will be decoded if needed.
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfStream.UpdateLength(System.Int32)">
            <summary>Update length manually in case its correction.</summary>
            <seealso cref="M:iText.Kernel.Pdf.PdfReader.CheckPdfStreamLength(iText.Kernel.Pdf.PdfStream)"/>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfStream.ReleaseContent">
            <summary>Release content of PdfStream.</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:iText.Kernel.Pdf.PdfString" -->
        <member name="M:iText.Kernel.Pdf.PdfString.#ctor(System.Byte[],System.Boolean)">
            <summary>Only PdfReader can use this method!</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfString.GetEncoding">
            <summary>Gets the encoding of this string.</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfString.ToUnicodeString">
            <summary>
            Returns the Unicode
            <c>String</c>
            value of this
            <c>PdfString</c>
            -object.
            </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfString.GetValueBytes">
            <summary>Gets bytes of String-value considering encoding.</summary>
            <returns>byte array</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfString.MarkAsUnencryptedObject">
            <summary>Marks this string object as not encrypted in the encrypted document.</summary>
            <remarks>
            Marks this string object as not encrypted in the encrypted document.
            <p>
            If it's marked so, it will be considered as already in plaintext and decryption will not be performed for it.
            In order to have effect, this method shall be called before
            <see cref="M:iText.Kernel.Pdf.PdfString.GetValue"/>
            and
            <see cref="M:iText.Kernel.Pdf.PdfString.GetValueBytes"/>
            methods.
            </p>
            <p>
            NOTE: this method is only needed in a very specific cases of encrypted documents. E.g. digital signature dictionary
            /Contents entry shall not be encrypted. Also this method isn't meaningful in non-encrypted documents.
            </p>
            </remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfString.Encrypt(iText.Kernel.Pdf.PdfEncryption)">
            <summary>
            Encrypt content of
            <c>value</c>
            and set as content.
            <c>generateContent()</c>
            won't be called.
            </summary>
            <param name="encrypt">@see PdfEncryption</param>
            <returns>true if value was encrypted, otherwise false.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfString.EncodeBytes(System.Byte[])">
            <summary>Escape special symbols or convert to hexadecimal string.</summary>
            <remarks>
            Escape special symbols or convert to hexadecimal string.
            This method don't change either
            <c>value</c>
            or
            <c>content</c>
            ot the
            <c>PdfString</c>
            .
            </remarks>
            <param name="bytes">byte array to manipulate with.</param>
            <returns>Hexadecimal string or string with escaped symbols in byte array view.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:iText.Kernel.Pdf.PdfTextArray" -->
        <member name="M:iText.Kernel.Pdf.PdfTextArray.AddAll(iText.Kernel.Pdf.PdfArray)">
            <summary>
            Adds content of the
            <c>PdfArray</c>
            .
            </summary>
            <param name="a">
            the
            <c>PdfArray</c>
            to be added
            </param>
            <seealso cref="!:System.Collections.IList&lt;E&gt;.AddAll(System.Collections.ICollection&lt;E&gt;)"/>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfTextArray.AddAll(System.Collections.Generic.ICollection{iText.Kernel.Pdf.PdfObject})">
            <summary>Adds the Collection of PdfObjects.</summary>
            <param name="c">the Collection of PdfObjects to be added</param>
            <seealso cref="!:System.Collections.IList&lt;E&gt;.AddAll(System.Collections.ICollection&lt;E&gt;)"/>
        </member>
        <member name="T:iText.Kernel.Pdf.PdfVersion">
            <summary>This class represents all official PDF versions.</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfVersion.#ctor(System.Int32,System.Int32)">
            <summary>Creates a PdfVersion class.</summary>
            <param name="major">major version number</param>
            <param name="minor">minor version number</param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfVersion.FromString(System.String)">
            <summary>
            Creates a PdfVersion class from a String object if the specified version
            can be found.
            </summary>
            <param name="value">version number</param>
            <returns>PdfVersion of the specified version</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfVersion.FromPdfName(iText.Kernel.Pdf.PdfName)">
            <summary>
            Creates a PdfVersion class from a
            <see cref="T:iText.Kernel.Pdf.PdfName"/>
            object if the specified version
            can be found.
            </summary>
            <param name="name">version number</param>
            <returns>PdfVersion of the specified version</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfViewerPreferences.SetHideToolbar(System.Boolean)">
            <summary>This method sets HideToolBar flag to true or false</summary>
            <param name="hideToolbar"/>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfViewerPreferences.SetHideMenubar(System.Boolean)">
            <summary>This method sets HideMenuBar flag to true or false</summary>
            <param name="hideMenubar"/>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfViewerPreferences.SetHideWindowUI(System.Boolean)">
            <summary>This method sets HideWindowUI flag to true or false</summary>
            <param name="hideWindowUI"/>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfViewerPreferences.SetFitWindow(System.Boolean)">
            <summary>This method sets FitWindow flag to true or false</summary>
            <param name="fitWindow"/>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfViewerPreferences.SetCenterWindow(System.Boolean)">
            <summary>This method sets CenterWindow flag to true or false</summary>
            <param name="centerWindow"/>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfViewerPreferences.SetDisplayDocTitle(System.Boolean)">
            <summary>This method sets DisplayDocTitle flag to true or false</summary>
            <param name="displayDocTitle"/>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfViewerPreferences.SetNonFullScreenPageMode(iText.Kernel.Pdf.PdfViewerPreferences.PdfViewerPreferencesConstants)">
            <summary>This method sets NonFullScreenPageMode property.</summary>
            <remarks>
            This method sets NonFullScreenPageMode property. Allowed values are UseNone, UseOutlines, useThumbs, UseOC.
            This entry is meaningful only if the value of the PageMode entry in the Catalog dictionary is FullScreen
            </remarks>
            <param name="nonFullScreenPageMode"/>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfViewerPreferences.SetDirection(iText.Kernel.Pdf.PdfViewerPreferences.PdfViewerPreferencesConstants)">
            <summary>This method sets predominant reading order of text.</summary>
            <param name="direction"/>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfViewerPreferences.SetViewArea(iText.Kernel.Pdf.PdfViewerPreferences.PdfViewerPreferencesConstants)">
            <summary>
            This method sets the name of the page boundary representing the area of a page that shall be displayed when
            viewing the document on the screen.
            </summary>
            <remarks>
            This method sets the name of the page boundary representing the area of a page that shall be displayed when
            viewing the document on the screen.
            Deprecated in PDF 2.0.
            </remarks>
            <param name="pageBoundary"/>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfViewerPreferences.SetViewClip(iText.Kernel.Pdf.PdfViewerPreferences.PdfViewerPreferencesConstants)">
            <summary>
            This method sets the name of the page boundary to which the contents of a page shall be clipped when
            viewing the document on the screen.
            </summary>
            <remarks>
            This method sets the name of the page boundary to which the contents of a page shall be clipped when
            viewing the document on the screen.
            Deprecated in PDF 2.0.
            </remarks>
            <param name="pageBoundary"/>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfViewerPreferences.SetPrintArea(iText.Kernel.Pdf.PdfViewerPreferences.PdfViewerPreferencesConstants)">
            <summary>
            This method sets the name of the page boundary representing the area of a page that shall be
            rendered when printing the document.
            </summary>
            <remarks>
            This method sets the name of the page boundary representing the area of a page that shall be
            rendered when printing the document.
            Deprecated in PDF 2.0.
            </remarks>
            <param name="pageBoundary"/>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfViewerPreferences.SetPrintClip(iText.Kernel.Pdf.PdfViewerPreferences.PdfViewerPreferencesConstants)">
            <summary>
            This method sets the name of the page boundary to which the contents of a page shall be clipped when
            printing the document.
            </summary>
            <remarks>
            This method sets the name of the page boundary to which the contents of a page shall be clipped when
            printing the document.
            Deprecated in PDF 2.0.
            </remarks>
            <param name="pageBoundary"/>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfViewerPreferences.SetPrintScaling(iText.Kernel.Pdf.PdfViewerPreferences.PdfViewerPreferencesConstants)">
            <summary>
            This method sets the page scaling option that shall be selected when a print dialog is displayed for this
            document.
            </summary>
            <remarks>
            This method sets the page scaling option that shall be selected when a print dialog is displayed for this
            document. Valid values are None and AppDefault.
            </remarks>
            <param name="printScaling"/>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfViewerPreferences.SetDuplex(iText.Kernel.Pdf.PdfViewerPreferences.PdfViewerPreferencesConstants)">
            <summary>This method sets the paper handling option that shall be used when printing the file from the print dialog.
                </summary>
            <remarks>
            This method sets the paper handling option that shall be used when printing the file from the print dialog.
            The following values are valid: Simplex, DuplexFlipShortEdge, DuplexFlipLongEdge.
            </remarks>
            <param name="duplex"/>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfViewerPreferences.SetPickTrayByPDFSize(System.Boolean)">
            <summary>This method sets PickTrayByPDFSize flag to true or false.</summary>
            <param name="pickTrayByPdfSize"/>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfViewerPreferences.SetPrintPageRange(System.Int32[])">
            <summary>This method sets the page numbers used to initialize the print dialog box when the file is printed.
                </summary>
            <param name="printPageRange"/>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfViewerPreferences.SetNumCopies(System.Int32)">
            <summary>This method sets the number of copies that shall be printed when the print dialog is opened for this file.
                </summary>
            <param name="numCopies"/>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfViewerPreferences.SetEnforce(iText.Kernel.Pdf.PdfArray)">
            <summary>PDF 2.0.</summary>
            <remarks>
            PDF 2.0. Sets an array of names of Viewer preference settings that
            shall be enforced by PDF processors and that shall not be overridden by
            subsequent selections in the application user interface
            </remarks>
            <param name="enforce">array of names specifying settings to enforce in the PDF processors</param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.PdfViewerPreferences"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfViewerPreferences.GetEnforce">
            <summary>PDF 2.0.</summary>
            <remarks>
            PDF 2.0. Gets an array of names of Viewer preference settings that
            shall be enforced by PDF processors and that shall not be overridden by
            subsequent selections in the application user interface
            </remarks>
            <returns>array of names specifying settings to enforce in the PDF processors</returns>
        </member>
        <member name="F:iText.Kernel.Pdf.PdfWriter.objectStream">
            <summary>Currently active object stream.</summary>
            <remarks>
            Currently active object stream.
            Objects are written to the object stream if fullCompression set to true.
            </remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.PdfWriter.copiedObjects">
            <summary>Is used to avoid duplications on object copying.</summary>
            <remarks>
            Is used to avoid duplications on object copying.
            It stores hashes of the indirect reference from the source document and the corresponding
            indirect references of the copied objects from the new document.
            </remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.PdfWriter.smartModeSerializer">
            <summary>Is used in smart mode to serialize and store serialized objects content.</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfWriter.#ctor(System.IO.FileInfo)">
            <summary>Create a PdfWriter writing to the passed File and with default writer properties.</summary>
            <param name="file">File to write to.</param>
            <exception cref="T:System.IO.FileNotFoundException"/>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfWriter.#ctor(System.IO.Stream)">
            <summary>Create a PdfWriter writing to the passed outputstream and with default writer properties.</summary>
            <param name="os">Outputstream to write to.</param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfWriter.#ctor(System.String)">
            <summary>Create a PdfWriter writing to the passed filename and with default writer properties.</summary>
            <param name="filename">filename of the resulting pdf.</param>
            <exception cref="T:System.IO.FileNotFoundException"/>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfWriter.#ctor(System.String,iText.Kernel.Pdf.WriterProperties)">
            <summary>Create a PdfWriter writing to the passed filename and using the passed writer properties.</summary>
            <param name="filename">filename of the resulting pdf.</param>
            <param name="properties">writerproperties to use.</param>
            <exception cref="T:System.IO.FileNotFoundException"/>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfWriter.IsFullCompression">
            <summary>Indicates if to use full compression mode.</summary>
            <returns>true if to use full compression, false otherwise.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfWriter.GetCompressionLevel">
            <summary>Gets default compression level for @see PdfStream.</summary>
            <remarks>
            Gets default compression level for @see PdfStream.
            For more details @see
            <see cref="!:Java.Util.Zip.Deflater"/>
            .
            </remarks>
            <returns>compression level.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfWriter.SetCompressionLevel(System.Int32)">
            <summary>Sets default compression level for @see PdfStream.</summary>
            <remarks>
            Sets default compression level for @see PdfStream.
            For more details @see
            <see cref="!:Java.Util.Zip.Deflater"/>
            .
            </remarks>
            <param name="compressionLevel">compression level.</param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfWriter.SetSmartMode(System.Boolean)">
            <summary>Sets the smart mode.</summary>
            <remarks>
            Sets the smart mode.
            <br />
            In smart mode when resources (such as fonts, images,...) are
            encountered, a reference to these resources is saved
            in a cache, so that they can be reused.
            This requires more memory, but reduces the file size
            of the resulting PDF document.
            </remarks>
            <param name="smartMode">True for enabling smart mode.</param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfWriter.GetObjectStream">
            <summary>Gets the current object stream.</summary>
            <returns>object stream.</returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfWriter.FlushObject(iText.Kernel.Pdf.PdfObject,System.Boolean)">
            <summary>Flushes the object.</summary>
            <remarks>Flushes the object. Override this method if you want to define custom behaviour for object flushing.
                </remarks>
            <param name="pdfObject">object to flush.</param>
            <param name="canBeInObjStm">indicates whether object can be placed into object stream.</param>
            <exception cref="T:System.IO.IOException">on error.</exception>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfWriter.WriteToBody(iText.Kernel.Pdf.PdfObject)">
            <summary>Writes object to body of PDF document.</summary>
            <param name="pdfObj">object to write.</param>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfWriter.WriteHeader">
            <summary>Writes PDF header.</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfWriter.FlushWaitingObjects(System.Collections.Generic.ICollection{iText.Kernel.Pdf.PdfIndirectReference})">
            <summary>Flushes all objects which have not been flushed yet.</summary>
            <param name="forbiddenToFlush">
            
            <see cref="!:Java.Util.Set&lt;E&gt;"/>
            &lt;
            <see cref="T:iText.Kernel.Pdf.PdfIndirectReference"/>
            &gt; of references that are forbidden to be flushed automatically.
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfWriter.FlushModifiedWaitingObjects(System.Collections.Generic.ICollection{iText.Kernel.Pdf.PdfIndirectReference})">
            <summary>Flushes all modified objects which have not been flushed yet.</summary>
            <remarks>Flushes all modified objects which have not been flushed yet. Used in case incremental updates.</remarks>
            <param name="forbiddenToFlush">
            
            <see cref="!:Java.Util.Set&lt;E&gt;"/>
            &lt;
            <see cref="T:iText.Kernel.Pdf.PdfIndirectReference"/>
            &gt; of references that are forbidden to be flushed automatically.
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfWriter.FlushCopiedObjects(System.Int64)">
            <summary>Flush all copied objects.</summary>
            <param name="docId">id of the source document</param>
        </member>
        <member name="F:iText.Kernel.Pdf.PdfXrefTable.freeReferencesLinkedList">
            <summary>
            Free references linked list is stored in a form of a map, where:
            key - free reference obj number;
            value - previous item in the linked list of free references for the object denoted by the key.
            </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfXrefTable.Add(iText.Kernel.Pdf.PdfIndirectReference)">
            <summary>Adds indirect reference to list of indirect objects.</summary>
            <param name="reference">indirect reference to add.</param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfXrefTable.CreateNextIndirectReference(iText.Kernel.Pdf.PdfDocument)">
            <summary>Creates next available indirect reference.</summary>
            <returns>created indirect reference.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfXrefTable.WriteXrefTableAndTrailer(iText.Kernel.Pdf.PdfDocument,iText.Kernel.Pdf.PdfObject,iText.Kernel.Pdf.PdfObject)">
            <summary>Writes cross reference table and trailer to PDF.</summary>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfXrefTable.GetOffsetSize(System.Int64)">
            <summary>Gets size of the offset.</summary>
            <remarks>Gets size of the offset. Max size is 2^40, i.e. 1 Tb.</remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfXrefTable.WriteKeyInfo(iText.Kernel.Pdf.PdfDocument)">
            <summary>Convenience method to write the fingerprint preceding the trailer.</summary>
            <remarks>
            Convenience method to write the fingerprint preceding the trailer.
            The fingerprint contains information on iText products used in the generation or manipulation
            of an outputted PDF file.
            </remarks>
            <param name="document">pdfDocument to write the fingerprint to</param>
        </member>
        <member name="M:iText.Kernel.Pdf.PdfXrefTable.RemoveFreeRefFromList(System.Int32)">
            <summary>Removes indirect reference from free references linked list.</summary>
            <remarks>
            Removes indirect reference from free references linked list.
            It does not removes it from xref table and affects only the linked list formed by offset values of free references.
            </remarks>
            <param name="freeRefObjNr">
            object number of the reference to be removed.
            Removes the free reference with the least object number if this parameter is less than zero:
            this could be used for finding the next free reference for reusing.
            </param>
            <returns>
            
            <see cref="T:iText.Kernel.Pdf.PdfIndirectReference"/>
            instance of the removed free reference corresponding to the object number
            passed as parameter.
            <see langword="null"/>
            - if given object number doesn't correspond to free reference or equals to zero.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.ReaderProperties.SetPassword(System.Byte[])">
            <summary>Defines the password which will be used if the document is encrypted with standard encryption.</summary>
            <remarks>
            Defines the password which will be used if the document is encrypted with standard encryption.
            This could be either user or owner password.
            </remarks>
            <param name="password">the password to use in order to open the document.</param>
        </member>
        <member name="M:iText.Kernel.Pdf.ReaderProperties.SetPublicKeySecurityParams(Org.BouncyCastle.X509.X509Certificate,Org.BouncyCastle.Crypto.ICipherParameters)">
            <summary>Defines the certificate which will be used if the document is encrypted with public key encryption.
                </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.ReaderProperties.SetPublicKeySecurityParams(Org.BouncyCastle.X509.X509Certificate)">
            <summary>Defines the certificate which will be used if the document is encrypted with public key encryption.
                </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.SmartModePdfObjectsSerializer.SerObject(iText.Kernel.Pdf.PdfObject,iText.IO.Source.ByteBuffer,System.Int32,System.Collections.Generic.IDictionary{iText.Kernel.Pdf.PdfIndirectReference,System.Byte[]})">
            <exception cref="T:iText.Kernel.Pdf.SmartModePdfObjectsSerializer.SelfReferenceException"/>
        </member>
        <member name="M:iText.Kernel.Pdf.SmartModePdfObjectsSerializer.SerDic(iText.Kernel.Pdf.PdfDictionary,iText.IO.Source.ByteBuffer,System.Int32,System.Collections.Generic.IDictionary{iText.Kernel.Pdf.PdfIndirectReference,System.Byte[]})">
            <exception cref="T:iText.Kernel.Pdf.SmartModePdfObjectsSerializer.SelfReferenceException"/>
        </member>
        <member name="M:iText.Kernel.Pdf.SmartModePdfObjectsSerializer.SerArray(iText.Kernel.Pdf.PdfArray,iText.IO.Source.ByteBuffer,System.Int32,System.Collections.Generic.IDictionary{iText.Kernel.Pdf.PdfIndirectReference,System.Byte[]})">
            <exception cref="T:iText.Kernel.Pdf.SmartModePdfObjectsSerializer.SelfReferenceException"/>
        </member>
        <member name="M:iText.Kernel.Pdf.StampingProperties.UseAppendMode">
            <summary>Defines if the document will be edited in append mode.</summary>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.StampingProperties"/>
            instance
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.StampingProperties.PreserveEncryption">
            <summary>Defines if the encryption of the original document (if it was encrypted) will be preserved.</summary>
            <remarks>
            Defines if the encryption of the original document (if it was encrypted) will be preserved.
            By default, the resultant document doesn't preserve the original encryption.
            </remarks>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.StampingProperties"/>
            instance
            </returns>
        </member>
        <member name="T:iText.Kernel.Pdf.Tagging.ParentTreeHandler">
            <summary>
            Internal helper class which is used to effectively build parent tree and also find marked content references:
            for specified page, by MCID or by struct parent index.
            </summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Tagging.ParentTreeHandler.parentTree">
            <summary>Represents parentTree in structTreeRoot.</summary>
            <remarks>Represents parentTree in structTreeRoot. It contains only those entries that belong to the already flushed pages.
                </remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.Tagging.ParentTreeHandler.pageToPageMcrs">
            <summary>Contains marked content references for every page.</summary>
            <remarks>
            Contains marked content references for every page.
            If new mcrs are added to the tag structure, these new mcrs are also added to this map. So for each adding or
            removing mcr, register/unregister calls must be made (this is done automatically if addKid or removeKid methods
            of PdfStructElement are used).
            Keys in this map are page references, values - a map which contains all mcrs that belong to the given page.
            This inner map of mcrs is of following structure:
            * for McrDictionary and McrNumber values the keys are their MCIDs;
            * for ObjRef values the keys are struct parent indexes, but with one trick. Struct parent indexes and MCIDs have the
            same value domains: the increasing numbers starting from zero. So, in order to store them in one map, for
            struct parent indexes simple transformation is applied via
            <see cref="M:iText.Kernel.Pdf.Tagging.ParentTreeHandler.StructParentIndexIntoKey(System.Int32)"/>
            and
            <c>#keyIntoStructParentIndex</c>
            . With this we simply store struct parent indexes as negative numbers.
            </remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagging.ParentTreeHandler.#ctor(iText.Kernel.Pdf.Tagging.PdfStructTreeRoot)">
            <summary>Init ParentTreeHandler.</summary>
            <remarks>Init ParentTreeHandler. On init the parent tree is read and stored in this instance.</remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagging.ParentTreeHandler.GetPageMarkedContentReferences(iText.Kernel.Pdf.PdfPage)">
            <summary>Gets a list of marked content references on page.</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagging.ParentTreeHandler.CreateParentTreeEntryForPage(iText.Kernel.Pdf.PdfPage)">
            <summary>Creates and flushes parent tree entry for the page.</summary>
            <remarks>
            Creates and flushes parent tree entry for the page.
            Effectively this means that new content mustn't be added to the page.
            </remarks>
            <param name="page">
            
            <see cref="T:iText.Kernel.Pdf.PdfPage"/>
            for which to create parent tree entry. Typically this page is flushed after this call.
            </param>
        </member>
        <member name="T:iText.Kernel.Pdf.Tagging.PdfMcr">
            <summary>Represents Marked Content Reference (MCR) object wrapper.</summary>
        </member>
        <member name="T:iText.Kernel.Pdf.Tagging.PdfNamespace">
            <summary>A wrapper for namespace dictionaries (ISO 32000-2 section 14.7.4).</summary>
            <remarks>
            A wrapper for namespace dictionaries (ISO 32000-2 section 14.7.4).
            A namespace dictionary defines a namespace within the structure tree.
            <p>This pdf entity is meaningful only for the PDF documents of version <b>2.0 and higher</b>.</p>
            </remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagging.PdfNamespace.#ctor(iText.Kernel.Pdf.PdfDictionary)">
            <summary>
            Constructs namespace from the given
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            that represents namespace dictionary.
            This method is useful for property reading in reading mode or modifying in stamping mode.
            </summary>
            <param name="dictionary">
            a
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            that represents namespace in the document.
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagging.PdfNamespace.#ctor(System.String)">
            <summary>Constructs a namespace defined by the given namespace name.</summary>
            <param name="namespaceName">
            a
            <see cref="T:System.String"/>
            defining the namespace name (conventionally a uniform
            resource identifier, or URI).
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagging.PdfNamespace.#ctor(iText.Kernel.Pdf.PdfString)">
            <summary>Constructs a namespace defined by the given namespace name.</summary>
            <param name="namespaceName">
            a
            <see cref="T:iText.Kernel.Pdf.PdfString"/>
            defining the namespace name (conventionally a uniform
            resource identifier, or URI).
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagging.PdfNamespace.SetNamespaceName(System.String)">
            <summary>Sets the string defining the namespace name.</summary>
            <param name="namespaceName">
            a
            <see cref="T:System.String"/>
            defining the namespace name (conventionally a uniform
            resource identifier, or URI).
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Tagging.PdfNamespace"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagging.PdfNamespace.SetNamespaceName(iText.Kernel.Pdf.PdfString)">
            <summary>Sets the string defining the namespace name.</summary>
            <param name="namespaceName">
            a
            <see cref="T:iText.Kernel.Pdf.PdfString"/>
            defining the namespace name (conventionally a uniform
            resource identifier, or URI).
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Tagging.PdfNamespace"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagging.PdfNamespace.GetNamespaceName">
            <summary>Gets the string defining the namespace name.</summary>
            <returns>
            a
            <see cref="T:System.String"/>
            defining the namespace name (conventionally a uniform
            resource identifier, or URI).
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagging.PdfNamespace.SetSchema(iText.Kernel.Pdf.Filespec.PdfFileSpec)">
            <summary>Sets file specification identifying the schema file, which defines this namespace.</summary>
            <param name="fileSpec">
            a
            <see cref="T:iText.Kernel.Pdf.Filespec.PdfFileSpec"/>
            identifying the schema file.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Tagging.PdfNamespace"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagging.PdfNamespace.GetSchema">
            <summary>Gets file specification identifying the schema file, which defines this namespace.</summary>
            <returns>
            a
            <see cref="T:iText.Kernel.Pdf.Filespec.PdfFileSpec"/>
            identifying the schema file.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagging.PdfNamespace.SetNamespaceRoleMap(iText.Kernel.Pdf.PdfDictionary)">
            <summary>
            A dictionary that maps the names of structure types used in the namespace to their approximate equivalents in another
            namespace.
            </summary>
            <param name="roleMapNs">
            a
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            which is comprised of a set of keys representing structure element types
            in the namespace defined within this namespace dictionary. The corresponding value for each of these
            keys shall either be a single
            <see cref="T:iText.Kernel.Pdf.PdfName"/>
            identifying a structure element type in the default
            namespace or an
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            where the first value shall be a structure element type name
            in a target namespace with the second value being an indirect reference to the target namespace dictionary.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Tagging.PdfNamespace"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagging.PdfNamespace.GetNamespaceRoleMap">
            <summary>
            A dictionary that maps the names of structure types used in the namespace to their approximate equivalents in another
            namespace.
            </summary>
            <returns>
            a
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            which is comprised of a set of keys representing structure element types
            in the namespace defined within this namespace dictionary. The corresponding value for each of these
            keys shall either be a single
            <see cref="T:iText.Kernel.Pdf.PdfName"/>
            identifying a structure element type in the default
            namespace or an
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            where the first value shall be a structure element type name
            in a target namespace with the second value being an indirect reference to the target namespace dictionary.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagging.PdfNamespace.AddNamespaceRoleMapping(System.String,System.String)">
            <summary>
            Adds to the namespace role map (see
            <see cref="M:iText.Kernel.Pdf.Tagging.PdfNamespace.SetNamespaceRoleMap(iText.Kernel.Pdf.PdfDictionary)"/>
            ) a single role mapping to the
            default standard structure namespace.
            </summary>
            <param name="thisNsRole">
            a
            <see cref="T:System.String"/>
            identifying structure element type in this namespace.
            </param>
            <param name="defaultNsRole">
            a
            <see cref="T:System.String"/>
            identifying a structure element type in the default standard structure namespace.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Tagging.PdfNamespace"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagging.PdfNamespace.AddNamespaceRoleMapping(System.String,System.String,iText.Kernel.Pdf.Tagging.PdfNamespace)">
            <summary>
            Adds to the namespace role map (see
            <see cref="M:iText.Kernel.Pdf.Tagging.PdfNamespace.SetNamespaceRoleMap(iText.Kernel.Pdf.PdfDictionary)"/>
            ) a single role mapping to the
            target namespace.
            </summary>
            <param name="thisNsRole">
            a
            <see cref="T:System.String"/>
            identifying structure element type in this namespace.
            </param>
            <param name="targetNsRole">
            a
            <see cref="T:System.String"/>
            identifying a structure element type in the target namespace.
            </param>
            <param name="targetNs">
            a
            <see cref="T:iText.Kernel.Pdf.Tagging.PdfNamespace"/>
            identifying the target namespace.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Tagging.PdfNamespace"/>
            instance.
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:iText.Kernel.Pdf.Tagging.PdfStructElem" -->
        <member name="M:iText.Kernel.Pdf.Tagging.PdfStructElem.IsStructElem(iText.Kernel.Pdf.PdfDictionary)">
            <summary>Method to to distinguish struct elements from other elements of the logical tree (like mcr or struct tree root).
                </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagging.PdfStructElem.GetAttributes(System.Boolean)">
            <summary>Gets attributes object.</summary>
            <param name="createNewIfNull">
            sometimes attributes object may not exist.
            Pass
            <see langword="true"/>
            if you want to create empty dictionary in such case.
            The attributes dictionary will be stored inside element.
            </param>
            <returns>attributes dictionary.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagging.PdfStructElem.GetParent">
            <returns>parent of the current structure element. Returns null if parent isn't set or if either current element or parent are invalid.
                </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagging.PdfStructElem.GetKids">
            <summary>Gets list of the direct kids of structure element.</summary>
            <remarks>
            Gets list of the direct kids of structure element.
            If certain kid is flushed, there will be a
            <see langword="null"/>
            in the list on it's place.
            </remarks>
            <returns>list of the direct kids of structure element.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagging.PdfStructElem.GetRefsList">
            <summary>
            A
            <see cref="F:iText.Kernel.Pdf.PdfName.Ref"/>
            identifies the structure element or elements to which the item of content, contained
            within this structure element, refers (e.g. footnotes, endnotes, sidebars, etc.).
            </summary>
            <returns>
            a
            <see cref="!:System.Collections.IList&lt;E&gt;"/>
            &lt;
            <see cref="T:iText.Kernel.Pdf.Tagging.PdfStructElem"/>
            &gt; containing zero, one or more structure elements.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagging.PdfStructElem.AddRef(iText.Kernel.Pdf.Tagging.PdfStructElem)">
            <summary>
            A
            <see cref="F:iText.Kernel.Pdf.PdfName.Ref"/>
            identifies the structure element to which the item of content, contained
            within this structure element, refers (e.g. footnotes, endnotes, sidebars, etc.).
            <p>This value has meaning only for the PDF documents of version <b>2.0 and higher</b>.</p>
            </summary>
            <param name="ref">
            a
            <see cref="T:iText.Kernel.Pdf.Tagging.PdfStructElem"/>
            to which the item of content, contained within this structure element, refers.
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagging.PdfStructElem.GetNamespace">
            <summary>A namespace this element belongs to (see ISO 32000-2 14.7.4, "Namespaces").</summary>
            <remarks>
            A namespace this element belongs to (see ISO 32000-2 14.7.4, "Namespaces"). If not present, the
            element shall be considered to be in the default standard structure namespace.
            </remarks>
            <returns>
            a
            <see cref="T:iText.Kernel.Pdf.Tagging.PdfNamespace"/>
            this element belongs to.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagging.PdfStructElem.SetNamespace(iText.Kernel.Pdf.Tagging.PdfNamespace)">
            <summary>A namespace this element belongs to (see ISO 32000-2 14.7.4, "Namespaces").</summary>
            <remarks>
            A namespace this element belongs to (see ISO 32000-2 14.7.4, "Namespaces").
            <p>This value has meaning only for the PDF documents of version <b>2.0 and higher</b>.</p>
            </remarks>
            <param name="namespace">
            a
            <see cref="T:iText.Kernel.Pdf.Tagging.PdfNamespace"/>
            this element belongs to, or null if element is desired to be considered
            in the default standard structure namespace.
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagging.PdfStructElem.SetPhoneme(iText.Kernel.Pdf.PdfString)">
            <summary>Attribute for a structure element that may be used as pronunciation hint.</summary>
            <remarks>
            Attribute for a structure element that may be used as pronunciation hint. It is an exact replacement for content
            enclosed by the structure element and its children.
            <p>This value has meaning only for the PDF documents of version <b>2.0 and higher</b>.</p>
            </remarks>
            <param name="elementPhoneme">
            a
            <see cref="T:iText.Kernel.Pdf.PdfString"/>
            which defines an exact replacement for content enclosed by the structure
            element and its children. This value is to be interpreted based on the PhoneticAlphabet attribute in effect.
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagging.PdfStructElem.GetPhoneme">
            <summary>Attribute for a structure element that may be used as pronunciation hint.</summary>
            <remarks>
            Attribute for a structure element that may be used as pronunciation hint. It is an exact replacement for content
            enclosed by the structure element and its children.
            </remarks>
            <returns>
            a
            <see cref="T:iText.Kernel.Pdf.PdfString"/>
            which defines an exact replacement for content enclosed by the structure
            element and its children. This value is to be interpreted based on the PhoneticAlphabet attribute in effect.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagging.PdfStructElem.SetPhoneticAlphabet(iText.Kernel.Pdf.PdfName)">
            <summary>
            Attribute for a structure element that indicates the phonetic alphabet used by a
            <see cref="F:iText.Kernel.Pdf.PdfName.Phoneme"/>
            attribute.
            Applies to the structure element and its children, except where overridden by a child structure element.
            <p>This value has meaning only for the PDF documents of version <b>2.0 and higher</b>.</p>
            </summary>
            <param name="phoneticAlphabet">
            the
            <see cref="T:iText.Kernel.Pdf.PdfName"/>
            which defines phonetic alphabet used by a
            <see cref="F:iText.Kernel.Pdf.PdfName.Phoneme"/>
            attribute. Possible values are:
            <ul>
            <li>
            <see cref="F:iText.Kernel.Pdf.PdfName.ipa"/>
            for the International Phonetic Alphabet by the International Phonetic Association;</li>
            <li>
            <see cref="F:iText.Kernel.Pdf.PdfName.x_sampa"/>
            for Extended Speech Assessment Methods Phonetic Alphabet (X-SAMPA);</li>
            <li>
            <see cref="F:iText.Kernel.Pdf.PdfName.zh_Latn_pinyin"/>
            for Pinyin Latin romanization (Mandarin);</li>
            <li>
            <see cref="F:iText.Kernel.Pdf.PdfName.zh_Latn_wadegile"/>
            for Wade-Giles romanization (Mandarin).</li>
            </ul>
            Other values may be used.
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagging.PdfStructElem.GetPhoneticAlphabet">
            <summary>
            Attribute for a structure element that indicates the phonetic alphabet used by a
            <see cref="F:iText.Kernel.Pdf.PdfName.Phoneme"/>
            attribute.
            Applies to the structure element and its children, except where overridden by a child structure element.
            </summary>
            <returns>
            the
            <see cref="T:iText.Kernel.Pdf.PdfName"/>
            which defines phonetic alphabet used by a
            <see cref="F:iText.Kernel.Pdf.PdfName.Phoneme"/>
            , or null if not defined,
            default value
            <see cref="F:iText.Kernel.Pdf.PdfName.ipa"/>
            . See
            <see cref="M:iText.Kernel.Pdf.Tagging.PdfStructElem.SetPhoneticAlphabet(iText.Kernel.Pdf.PdfName)"/>
            for other possible values.
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.Pdf.Tagging.PdfStructElem.AddAssociatedFile(System.String,iText.Kernel.Pdf.Filespec.PdfFileSpec)" -->
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.Pdf.Tagging.PdfStructElem.AddAssociatedFile(iText.Kernel.Pdf.Filespec.PdfFileSpec)" -->
        <member name="M:iText.Kernel.Pdf.Tagging.PdfStructElem.GetAssociatedFiles(System.Boolean)">
            <summary>Returns files associated with structure element.</summary>
            <param name="create">iText will create AF array if it doesn't exist and create value is true</param>
            <returns>associated files array.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagging.PdfStructTreeRoot.GetKids">
            <summary>Gets list of the direct kids of StructTreeRoot.</summary>
            <remarks>
            Gets list of the direct kids of StructTreeRoot.
            If certain kid is flushed, there will be a
            <see langword="null"/>
            in the list on it's place.
            </remarks>
            <returns>list of the direct kids of StructTreeRoot.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagging.PdfStructTreeRoot.GetNamespaces">
            <summary>Gets namespaces used within the document.</summary>
            <remarks>
            Gets namespaces used within the document. Essentially this method returns value of
            <see cref="M:iText.Kernel.Pdf.Tagging.PdfStructTreeRoot.GetNamespacesObject"/>
            wrapped in the
            <see cref="T:iText.Kernel.Pdf.Tagging.PdfNamespace"/>
            and
            <see cref="!:System.Collections.IList&lt;E&gt;"/>
            classes. Therefore limitations of the referred method are
            applied to this method too.
            </remarks>
            <returns>
            a
            <see cref="!:System.Collections.IList&lt;E&gt;"/>
            of
            <see cref="T:iText.Kernel.Pdf.Tagging.PdfNamespace"/>
            s used within the document.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagging.PdfStructTreeRoot.AddNamespace(iText.Kernel.Pdf.Tagging.PdfNamespace)">
            <summary>
            Adds a
            <see cref="T:iText.Kernel.Pdf.Tagging.PdfNamespace"/>
            to the list of the namespaces used within the document.
            <p>This value has meaning only for the PDF documents of version <b>2.0 and higher</b>.</p>
            </summary>
            <param name="namespace">
            a
            <see cref="T:iText.Kernel.Pdf.Tagging.PdfNamespace"/>
            to be added.
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagging.PdfStructTreeRoot.GetNamespacesObject">
            <summary>An array of namespaces used within the document.</summary>
            <remarks>
            An array of namespaces used within the document. This value, however, is not automatically updated while
            the document is processed. It identifies only the namespaces that were in the document at the moment of it's
            opening.
            </remarks>
            <returns>
            
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            of namespaces used within the document.
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.Pdf.Tagging.PdfStructTreeRoot.GetPronunciationLexiconsList" -->
        <member name="M:iText.Kernel.Pdf.Tagging.PdfStructTreeRoot.AddPronunciationLexicon(iText.Kernel.Pdf.Filespec.PdfFileSpec)">
            <summary>
            Adds a single
            <see cref="T:iText.Kernel.Pdf.Filespec.PdfFileSpec"/>
            object, which specifies XML file conforming to PLS.
            For more info see
            <see cref="M:iText.Kernel.Pdf.Tagging.PdfStructTreeRoot.GetPronunciationLexiconsList"/>
            .
            <p>This value has meaning only for the PDF documents of version <b>2.0 and higher</b>.</p>
            </summary>
            <param name="pronunciationLexiconFileSpec">
            a
            <see cref="T:iText.Kernel.Pdf.Filespec.PdfFileSpec"/>
            object, which specifies XML file conforming to PLS.
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagging.PdfStructTreeRoot.CreateParentTreeEntryForPage(iText.Kernel.Pdf.PdfPage)">
            <summary>Creates and flushes parent tree entry for the page.</summary>
            <remarks>
            Creates and flushes parent tree entry for the page.
            Effectively this means that new content mustn't be added to the page.
            </remarks>
            <param name="page">
            
            <see cref="T:iText.Kernel.Pdf.PdfPage"/>
            for which to create parent tree entry. Typically this page is flushed after this call.
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagging.PdfStructTreeRoot.GetPageMarkedContentReferences(iText.Kernel.Pdf.PdfPage)">
            <summary>Gets an unmodifiable collection of marked content references on page.</summary>
            <remarks>
            Gets an unmodifiable collection of marked content references on page.
            NOTE: Do not remove tags when iterating over returned collection, this could
            lead to the ConcurrentModificationException, because returned collection is backed by the internal list of the
            actual page tags.
            </remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagging.PdfStructTreeRoot.CopyTo(iText.Kernel.Pdf.PdfDocument,System.Collections.Generic.IDictionary{iText.Kernel.Pdf.PdfPage,iText.Kernel.Pdf.PdfPage})">
            <summary>
            Copies structure to a
            <paramref name="destDocument"/>
            .
            NOTE: Works only for
            <see cref="T:iText.Kernel.Pdf.Tagging.PdfStructTreeRoot"/>
            that is read from the document opened in reading mode,
            otherwise an exception is thrown.
            </summary>
            <param name="destDocument">document to copy structure to. Shall not be current document.</param>
            <param name="page2page">association between original page and copied page.</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagging.PdfStructTreeRoot.CopyTo(iText.Kernel.Pdf.PdfDocument,System.Int32,System.Collections.Generic.IDictionary{iText.Kernel.Pdf.PdfPage,iText.Kernel.Pdf.PdfPage})">
            <summary>
            Copies structure to a
            <paramref name="destDocument"/>
            and insert it in a specified position in the document.
            NOTE: Works only for
            <see cref="T:iText.Kernel.Pdf.Tagging.PdfStructTreeRoot"/>
            that is read from the document opened in reading mode,
            otherwise an exception is thrown.
            </summary>
            <param name="destDocument">document to copy structure to.</param>
            <param name="insertBeforePage">indicates where the structure to be inserted.</param>
            <param name="page2page">association between original page and copied page.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.Pdf.Tagging.PdfStructTreeRoot.Move(iText.Kernel.Pdf.PdfPage,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.Pdf.Tagging.PdfStructTreeRoot.AddAssociatedFile(System.String,iText.Kernel.Pdf.Filespec.PdfFileSpec)" -->
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.Pdf.Tagging.PdfStructTreeRoot.AddAssociatedFile(iText.Kernel.Pdf.Filespec.PdfFileSpec)" -->
        <member name="M:iText.Kernel.Pdf.Tagging.PdfStructTreeRoot.GetAssociatedFiles(System.Boolean)">
            <summary>Returns files associated with structure tree root.</summary>
            <param name="create">iText will create AF array if it doesn't exist and create value is true</param>
            <returns>associated files array.</returns>
        </member>
        <member name="T:iText.Kernel.Pdf.Tagging.StandardNamespaces">
            <summary>
            This class encapsulates information about the standard structure namespaces and provides some utility methods
            connected to them.
            </summary>
            <remarks>
            This class encapsulates information about the standard structure namespaces and provides some utility methods
            connected to them. The main purpose of this class is to determine if the given role in the specified namespace
            belongs to the standard or known domain-specific namespace.
            <p>See ISO 32000-2 14.8.6, "Standard structure namespaces"</p>
            </remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.Tagging.StandardNamespaces.PDF_1_7">
            <summary>Specifies the name of the standard structure namespace for PDF 1.7</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.Tagging.StandardNamespaces.PDF_2_0">
            <summary>Specifies the name of the standard structure namespace for PDF 2.0</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagging.StandardNamespaces.GetDefault">
            <summary>Gets the name of the default standard structure namespace.</summary>
            <remarks>
            Gets the name of the default standard structure namespace. When a namespace is not
            explicitly specified for a given structure element or attribute, it shall be assumed to be within this
            default standard structure namespace. According to ISO 32000-2 default namespace is
            <see cref="F:iText.Kernel.Pdf.Tagging.StandardNamespaces.PDF_1_7"/>
            .
            </remarks>
            <returns>the name of the default standard structure namespace.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagging.StandardNamespaces.IsKnownDomainSpecificNamespace(iText.Kernel.Pdf.Tagging.PdfNamespace)">
            <summary>
            Checks if the given namespace is identified as the one that is common within broad ranges of documents types
            and doesn't require a role mapping for it's roles.
            </summary>
            <param name="namespace">a namespace to be checked, whether it defines a namespace of the known domain specific language.
                </param>
            <returns>
            true, if the given
            <see cref="T:iText.Kernel.Pdf.Tagging.PdfNamespace"/>
            belongs to the domain-specific namespace, false otherwise.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagging.StandardNamespaces.RoleBelongsToStandardNamespace(System.String,System.String)">
            <summary>Checks if the given role is considered standard in the specified standard namespace.</summary>
            <param name="role">a role to be checked if it is standard in the given standard structure namespace.</param>
            <param name="standardNamespaceName">
            a
            <see cref="T:System.String"/>
            identifying standard structure namespace against which given role
            will be checked.
            </param>
            <returns>
            false if the given role doesn't belong to the standard roles of the given standard structure namespace or
            if the given namespace name is not standard; true otherwise.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagging.StandardNamespaces.IsHnRole(System.String)">
            <summary>Checks if the given role matches the Hn role pattern.</summary>
            <remarks>
            Checks if the given role matches the Hn role pattern. To match this pattern, the given role
            shall always consist of the uppercase letter "H" and one or more digits, representing an unsigned integer
            greater than or equal to 1, without leading zeroes or any other prefix or postfix.
            </remarks>
            <param name="role">
            a
            <see cref="T:System.String"/>
            that specifies a role to be checked against Hn role pattern.
            </param>
            <returns>true if the role matches, false otherwise.</returns>
        </member>
        <member name="T:iText.Kernel.Pdf.Tagging.StructureTreeCopier">
            <summary>Internal helper class which is used to copy, clone or move tag structure across documents.</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagging.StructureTreeCopier.CopyTo(iText.Kernel.Pdf.PdfDocument,System.Collections.Generic.IDictionary{iText.Kernel.Pdf.PdfPage,iText.Kernel.Pdf.PdfPage},iText.Kernel.Pdf.PdfDocument)">
            <summary>
            Copies structure to a
            <paramref name="destDocument"/>
            .
            <br/><br/>
            NOTE: Works only for
            <c>PdfStructTreeRoot</c>
            that is read from the document opened in reading mode,
            otherwise an exception is thrown.
            </summary>
            <param name="destDocument">document to copy structure to. Shall not be current document.</param>
            <param name="page2page">association between original page and copied page.</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagging.StructureTreeCopier.CopyTo(iText.Kernel.Pdf.PdfDocument,System.Int32,System.Collections.Generic.IDictionary{iText.Kernel.Pdf.PdfPage,iText.Kernel.Pdf.PdfPage},iText.Kernel.Pdf.PdfDocument)">
            <summary>
            Copies structure to a
            <paramref name="destDocument"/>
            and insert it in a specified position in the document.
            <br/><br/>
            NOTE: Works only for
            <c>PdfStructTreeRoot</c>
            that is read from the document opened in reading mode,
            otherwise an exception is thrown.
            <br/>
            Also, to insert a tagged page into existing tag structure, existing tag structure shouldn't be flushed, otherwise
            an exception may be raised.
            </summary>
            <param name="destDocument">document to copy structure to.</param>
            <param name="insertBeforePage">indicates where the structure to be inserted.</param>
            <param name="page2page">association between original page and copied page.</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagging.StructureTreeCopier.Move(iText.Kernel.Pdf.PdfDocument,iText.Kernel.Pdf.PdfPage,System.Int32)">
            <summary>Move tag structure of page to other place in the same document</summary>
            <param name="document">document in which modifications will take place (should be opened in read-write mode)
                </param>
            <param name="from">page, which tag structure will be moved</param>
            <param name="insertBefore">indicates before what page number structure will be inserted to</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagging.StructureTreeCopier.SeparateStructure(iText.Kernel.Pdf.PdfDocument,System.Int32)">
            <returns>structure tree index of first separated (cloned) top</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagging.StructureTreeCopier.CopyTo(iText.Kernel.Pdf.PdfDocument,System.Collections.Generic.IDictionary{iText.Kernel.Pdf.PdfPage,iText.Kernel.Pdf.PdfPage},iText.Kernel.Pdf.PdfDocument,System.Boolean)">
            <summary>
            Copies structure to a
            <paramref name="destDocument"/>
            .
            </summary>
            <param name="destDocument">document to cpt structure to.</param>
            <param name="page2page">association between original page and copied page.</param>
            <param name="copyFromDestDocument">
            indicates if <code>page2page</code> keys and values represent pages from
            <paramref name="destDocument"/>
            .
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagging.StructureTreeCopier.AddAllParentsToSet(iText.Kernel.Pdf.Tagging.PdfMcr,System.Collections.Generic.ICollection{iText.Kernel.Pdf.PdfObject})">
            <returns>the topmost parent added to set. If encountered flushed element - stops and returns this flushed element.
                </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagging.StructureTreeCopier.GetTopmostParent(iText.Kernel.Pdf.Tagging.PdfMcr)">
            <summary>Gets the topmost non-root structure element parent.</summary>
            <remarks>Gets the topmost non-root structure element parent. May be flushed.</remarks>
            <param name="mcr">starting element</param>
            <returns>
            topmost non-root structure element parent, or
            <see langword="null"/>
            if it doesn't have any
            </returns>
        </member>
        <member name="T:iText.Kernel.Pdf.Tagutils.IRoleMappingResolver">
            <summary>
            A helper interface that facilitates roles mapping resolving for the tag structures that are defined for different
            PDF document specification versions.
            </summary>
            <remarks>
            A helper interface that facilitates roles mapping resolving for the tag structures that are defined for different
            PDF document specification versions.
            <p>Be aware, that it is explicitly allowed for the document by the specification to have circular or transitive mappings.</p>
            </remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagutils.IRoleMappingResolver.GetRole">
            <summary>Defines the current role of the resolver.</summary>
            <remarks>
            Defines the current role of the resolver. On every successful resolving "step" the role returned by this method
            changes in order to reflect the mapping of the previous role.
            </remarks>
            <returns>
            the
            <see cref="T:System.String"/>
            which identifies current role of the resolver.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagutils.IRoleMappingResolver.GetNamespace">
            <summary>Defines the namespace of the current role.</summary>
            <returns>
            the
            <see cref="T:iText.Kernel.Pdf.Tagging.PdfNamespace"/>
            instance of the namespace dictionary wrapper. The role returned by the
            <see cref="M:iText.Kernel.Pdf.Tagutils.IRoleMappingResolver.GetRole"/>
            method call is considered to belong to this namespace. Might be null, which means that role belongs to the
            default standard namespace.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagutils.IRoleMappingResolver.CurrentRoleIsStandard">
            <summary>Checks if the current role belongs to one of the standard structure namespaces.</summary>
            <returns>true if the current namespace is a standard structure namespace and the current role is defined as standard role in it.
                </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagutils.IRoleMappingResolver.CurrentRoleShallBeMappedToStandard">
            <summary>
            Checks if the current role and namespace are specified to be obligatory mapped to the standard structure namespace
            in order to be a valid role in the Tagged PDF.
            </summary>
            <returns>
            true, if the current role in the current namespace either belongs to the standard structure roles or is in the
            domain specific namespace; otherwise false.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagutils.IRoleMappingResolver.ResolveNextMapping">
            <summary>Performs a mapping resolving "step".</summary>
            <remarks>
            Performs a mapping resolving "step". Essentially finds the role and it's namespace to which the current role is mapped to.
            After this method call
            <see cref="M:iText.Kernel.Pdf.Tagutils.IRoleMappingResolver.GetRole"/>
            and
            <see cref="M:iText.Kernel.Pdf.Tagutils.IRoleMappingResolver.GetNamespace"/>
            methods might change their return value.
            </remarks>
            <returns>
            true if current role and/or namespace have changed their values; otherwise false which means that current
            role is not mapped.
            </returns>
        </member>
        <member name="T:iText.Kernel.Pdf.Tagutils.TagStructureContext">
            <summary>
            <c>TagStructureContext</c>
            class is used to track necessary information of document's tag structure.
            It is also used to make some global modifications of the tag tree like removing or flushing page tags, however
            these two methods and also others are called automatically and are for the most part for internal usage.
            <br />
            There shall be only one instance of this class per
            <c>PdfDocument</c>
            . To obtain instance of this class use
            <see cref="M:iText.Kernel.Pdf.PdfDocument.GetTagStructureContext"/>
            .
            </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagutils.TagStructureContext.#ctor(iText.Kernel.Pdf.PdfDocument)">
            <summary>
            Do not use this constructor, instead use
            <see cref="M:iText.Kernel.Pdf.PdfDocument.GetTagStructureContext"/>
            method.
            <br />
            Creates
            <c>TagStructureContext</c>
            for document. There shall be only one instance of this
            class per
            <c>PdfDocument</c>
            .
            </summary>
            <param name="document">the document which tag structure will be manipulated with this class.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.Pdf.Tagutils.TagStructureContext.#ctor(iText.Kernel.Pdf.PdfDocument,iText.Kernel.Pdf.PdfVersion)" -->
        <member name="M:iText.Kernel.Pdf.Tagutils.TagStructureContext.SetForbidUnknownRoles(System.Boolean)">
            <summary>
            If forbidUnknownRoles is set to true, then if you would try to add new tag which has not a standard role and
            it's role is not mapped through RoleMap, an exception will be raised.
            </summary>
            <remarks>
            If forbidUnknownRoles is set to true, then if you would try to add new tag which has not a standard role and
            it's role is not mapped through RoleMap, an exception will be raised.
            Default value - true.
            </remarks>
            <param name="forbidUnknownRoles">new value of the flag</param>
            <returns>
            current
            <see cref="T:iText.Kernel.Pdf.Tagutils.TagStructureContext"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagutils.TagStructureContext.GetAutoTaggingPointer">
            <summary>
            All tagging logic performed by iText automatically (along with addition of content, annotations etc)
            uses
            <see cref="T:iText.Kernel.Pdf.Tagutils.TagTreePointer"/>
            returned by this method to manipulate the tag structure.
            Typically it points at the root tag. This pointer also could be used to tweak auto tagging process
            (e.g. move this pointer to the Section tag, which would result in placing all automatically tagged content
            under Section tag).
            </summary>
            <returns>
            the
            <c>TagTreePointer</c>
            which is used for all automatic tagging of the document.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagutils.TagStructureContext.GetWaitingTagsManager">
            <summary>
            Gets
            <see cref="T:iText.Kernel.Pdf.Tagutils.WaitingTagsManager"/>
            for the current document. It allows to mark tags as waiting,
            which would indicate that they are incomplete and are not ready to be flushed.
            </summary>
            <returns>
            document's
            <see cref="T:iText.Kernel.Pdf.Tagutils.WaitingTagsManager"/>
            class instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagutils.TagStructureContext.GetDocumentDefaultNamespace">
            <summary>
            A namespace that is used as a default value for the tagging for any new
            <see cref="T:iText.Kernel.Pdf.Tagutils.TagTreePointer"/>
            created
            (including the pointer returned by
            <see cref="M:iText.Kernel.Pdf.Tagutils.TagStructureContext.GetAutoTaggingPointer"/>
            , which implies that automatically
            created tag structure will be in this namespace by default).
            <p>
            By default, this value is defined based on the PDF document version and the existing tag structure inside
            a document. For the new empty PDF 2.0 documents this namespace is set to
            <see cref="F:iText.Kernel.Pdf.Tagging.StandardNamespaces.PDF_2_0"/>
            .
            </p>
            <p>This value has meaning only for the PDF documents of version <b>2.0 and higher</b>.</p>
            </summary>
            <returns>
            a
            <see cref="T:iText.Kernel.Pdf.Tagging.PdfNamespace"/>
            which is used as a default value for the document tagging.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagutils.TagStructureContext.SetDocumentDefaultNamespace(iText.Kernel.Pdf.Tagging.PdfNamespace)">
            <summary>
            Sets a namespace that will be used as a default value for the tagging for any new
            <see cref="T:iText.Kernel.Pdf.Tagutils.TagTreePointer"/>
            created.
            See
            <see cref="M:iText.Kernel.Pdf.Tagutils.TagStructureContext.GetDocumentDefaultNamespace"/>
            for more info.
            <p>
            Be careful when changing this property value. It is most recommended to do it right after the
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            was
            created, before any content was added. Changing this value after any content was added might result in the mingled
            tag structure from the namespaces point of view. So in order to maintain the document consistent but in the namespace
            different from default, set this value before any modifications to the document were made and before
            <see cref="M:iText.Kernel.Pdf.Tagutils.TagStructureContext.GetAutoTaggingPointer"/>
            method was called for the first time.
            </p>
            <p>This value has meaning only for the PDF documents of version <b>2.0 and higher</b>.</p>
            </summary>
            <param name="namespace">
            a
            <see cref="T:iText.Kernel.Pdf.Tagging.PdfNamespace"/>
            which is to be used as a default value for the document tagging.
            </param>
            <returns>
            current
            <see cref="T:iText.Kernel.Pdf.Tagutils.TagStructureContext"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagutils.TagStructureContext.FetchNamespace(System.String)">
            <summary>
            This method defines a recommended way to obtain
            <see cref="T:iText.Kernel.Pdf.Tagging.PdfNamespace"/>
            class instances.
            <p>
            Returns either a wrapper over an already existing namespace dictionary in the document or over a new one
            if such namespace wasn't encountered before. Calling this method is considered as encountering a namespace,
            i.e. two sequential calls on this method will return the same namespace instance (which is not true in general case
            of two method calls, for instance if several namespace instances with the same name are created via
            <see cref="T:iText.Kernel.Pdf.Tagging.PdfNamespace"/>
            constructors and set to the elements of the tag structure, then the last encountered one
            will be returned by this method). However encountered namespaces will not be added to the document's structure tree root
            <see cref="F:iText.Kernel.Pdf.PdfName.Namespaces">/Namespaces</see>
            array unless they were set to the certain element of the tag structure.
            </p>
            </summary>
            <param name="namespaceName">
            a
            <see cref="T:System.String"/>
            defining the namespace name (conventionally a uniform resource identifier, or URI).
            </param>
            <returns>
            
            <see cref="T:iText.Kernel.Pdf.Tagging.PdfNamespace"/>
            wrapper over either already existing namespace object or over the new one.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagutils.TagStructureContext.GetRoleMappingResolver(System.String)">
            <summary>
            Gets an instance of the
            <see cref="T:iText.Kernel.Pdf.Tagutils.IRoleMappingResolver"/>
            corresponding to the current tag structure target version.
            This method implies that role is in the default standard structure namespace.
            </summary>
            <param name="role">a role in the default standard structure namespace which mapping is to be resolved.</param>
            <returns>
            a
            <see cref="T:iText.Kernel.Pdf.Tagutils.IRoleMappingResolver"/>
            instance, with the giving role as current.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagutils.TagStructureContext.GetRoleMappingResolver(System.String,iText.Kernel.Pdf.Tagging.PdfNamespace)">
            <summary>
            Gets an instance of the
            <see cref="T:iText.Kernel.Pdf.Tagutils.IRoleMappingResolver"/>
            corresponding to the current tag structure target version.
            </summary>
            <param name="role">a role in the given namespace which mapping is to be resolved.</param>
            <param name="namespace">
            a
            <see cref="T:iText.Kernel.Pdf.Tagging.PdfNamespace"/>
            which this role belongs to.
            </param>
            <returns>
            a
            <see cref="T:iText.Kernel.Pdf.Tagutils.IRoleMappingResolver"/>
            instance, with the giving role in the given
            <see cref="T:iText.Kernel.Pdf.Tagging.PdfNamespace"/>
            as current.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagutils.TagStructureContext.CheckIfRoleShallBeMappedToStandardRole(System.String,iText.Kernel.Pdf.Tagging.PdfNamespace)">
            <summary>
            Checks if the given role and namespace are specified to be obligatory mapped to the standard structure namespace
            in order to be a valid role in the Tagged PDF.
            </summary>
            <param name="role">a role in the given namespace which mapping necessity is to be checked.</param>
            <param name="namespace">
            a
            <see cref="T:iText.Kernel.Pdf.Tagging.PdfNamespace"/>
            which this role belongs to, null value refers to the default standard
            structure namespace.
            </param>
            <returns>
            true, if the given role in the given namespace is either mapped to the standard structure role or doesn't
            have to; otherwise false.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagutils.TagStructureContext.ResolveMappingToStandardOrDomainSpecificRole(System.String,iText.Kernel.Pdf.Tagging.PdfNamespace)">
            <summary>
            Gets an instance of the
            <see cref="T:iText.Kernel.Pdf.Tagutils.IRoleMappingResolver"/>
            which is already in the "resolved" state: it returns
            role in the standard or domain-specific namespace for the
            <see cref="M:iText.Kernel.Pdf.Tagutils.IRoleMappingResolver.GetRole"/>
            and
            <see cref="M:iText.Kernel.Pdf.Tagutils.IRoleMappingResolver.GetNamespace"/>
            methods calls which correspond to the mapping of the given role; or null if the given role is not mapped to the standard or domain-specific one.
            </summary>
            <param name="role">a role in the given namespace which mapping is to be resolved.</param>
            <param name="namespace">
            a
            <see cref="T:iText.Kernel.Pdf.Tagging.PdfNamespace"/>
            which this role belongs to.
            </param>
            <returns>
            an instance of the
            <see cref="T:iText.Kernel.Pdf.Tagutils.IRoleMappingResolver"/>
            which returns false
            for the
            <see cref="M:iText.Kernel.Pdf.Tagutils.IRoleMappingResolver.CurrentRoleShallBeMappedToStandard"/>
            method call; if mapping cannot be resolved
            to this state, this method returns null, which means that the given role
            in the specified namespace is not mapped to the standard role in the standard namespace.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagutils.TagStructureContext.RemoveAnnotationTag(iText.Kernel.Pdf.Annot.PdfAnnotation)">
            <summary>Removes annotation content item from the tag structure.</summary>
            <remarks>
            Removes annotation content item from the tag structure.
            If annotation is not added to the document or is not tagged, nothing will happen.
            </remarks>
            <returns>
            
            <see cref="T:iText.Kernel.Pdf.Tagutils.TagTreePointer"/>
            instance which points at annotation tag parent if annotation was removed,
            otherwise returns null.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagutils.TagStructureContext.RemoveContentItem(iText.Kernel.Pdf.PdfPage,System.Int32)">
            <summary>Removes content item from the tag structure.</summary>
            <remarks>
            Removes content item from the tag structure.
            <br />
            Nothing happens if there is no such mcid on given page.
            </remarks>
            <param name="page">page, which contains this content item</param>
            <param name="mcid">marked content id of this content item</param>
            <returns>
            
            <c>TagTreePointer</c>
            which points at the parent of the removed content item, or null if there is no
            such mcid on given page.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagutils.TagStructureContext.RemovePageTags(iText.Kernel.Pdf.PdfPage)">
            <summary>Removes all tags that belong only to this page.</summary>
            <remarks>
            Removes all tags that belong only to this page. The logic which defines if tag belongs to the page is described
            at
            <see cref="M:iText.Kernel.Pdf.Tagutils.TagStructureContext.FlushPageTags(iText.Kernel.Pdf.PdfPage)"/>
            .
            </remarks>
            <param name="page">page that defines which tags are to be removed</param>
            <returns>
            current
            <see cref="T:iText.Kernel.Pdf.Tagutils.TagStructureContext"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagutils.TagStructureContext.FlushPageTags(iText.Kernel.Pdf.PdfPage)">
            <summary>Flushes the tags which are considered to belong to the given page.</summary>
            <remarks>
            Flushes the tags which are considered to belong to the given page.
            The logic that defines if the given tag (structure element) belongs to the page is the following:
            if all the marked content references (dictionary or number references), that are the
            descendants of the given structure element, belong to the current page - the tag is considered
            to belong to the page. If tag has descendants from several pages - it is flushed, if all other pages except the
            current one are flushed.
            <br /><br />
            If some of the page's tags have waiting state (see
            <see cref="T:iText.Kernel.Pdf.Tagutils.WaitingTagsManager"/>
            these tags are considered
            as not yet finished ones, and they and their children won't be flushed.
            </remarks>
            <param name="page">a page which tags will be flushed.</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagutils.TagStructureContext.NormalizeDocumentRootTag">
            <summary>Transforms root tags in a way that complies with the tagged PDF specification.</summary>
            <remarks>
            Transforms root tags in a way that complies with the tagged PDF specification.
            Depending on PDF version behaviour may differ.
            <br />
            ISO 32000-1 (PDF 1.7 and lower)
            14.8.4.2 Grouping Elements
            <br />
            "In a tagged PDF document, the structure tree shall contain a single top-level element; that is,
            the structure tree root (identified by the StructTreeRoot entry in the document catalogue) shall
            have only one child in its K (kids) array. If the PDF file contains a complete document, the structure
            type Document should be used for this top-level element in the logical structure hierarchy. If the file
            contains a well-formed document fragment, one of the structure types Part, Art, Sect, or Div may be used instead."
            <br />
            For PDF 2.0 and higher root tag is allowed to have only the Document role.
            </remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagutils.TagStructureContext.PrepareToDocumentClosing">
            <summary>
            A utility method that prepares the current instance of the
            <see cref="T:iText.Kernel.Pdf.Tagutils.TagStructureContext"/>
            for
            the closing of document. Essentially it flushes all the "hanging" information to the document.
            </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagutils.TagStructureContext.GetPointerStructElem(iText.Kernel.Pdf.Tagutils.TagTreePointer)">
            <summary>
            <p>
            Gets
            <see cref="T:iText.Kernel.Pdf.Tagging.PdfStructElem"/>
            at which
            <see cref="T:iText.Kernel.Pdf.Tagutils.TagTreePointer"/>
            points.
            </p>
            NOTE: Be aware that
            <see cref="T:iText.Kernel.Pdf.Tagging.PdfStructElem"/>
            is a low level class, use it carefully,
            especially in conjunction with high level
            <see cref="T:iText.Kernel.Pdf.Tagutils.TagTreePointer"/>
            and
            <see cref="T:iText.Kernel.Pdf.Tagutils.TagStructureContext"/>
            classes.
            </summary>
            <param name="pointer">
            a
            <see cref="T:iText.Kernel.Pdf.Tagutils.TagTreePointer"/>
            which points at desired
            <see cref="T:iText.Kernel.Pdf.Tagging.PdfStructElem"/>
            .
            </param>
            <returns>
            a
            <see cref="T:iText.Kernel.Pdf.Tagging.PdfStructElem"/>
            at which given
            <see cref="T:iText.Kernel.Pdf.Tagutils.TagTreePointer"/>
            points.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagutils.TagStructureContext.CreatePointerForStructElem(iText.Kernel.Pdf.Tagging.PdfStructElem)">
            <summary>
            Creates a new
            <see cref="T:iText.Kernel.Pdf.Tagutils.TagTreePointer"/>
            which points at given
            <see cref="T:iText.Kernel.Pdf.Tagging.PdfStructElem"/>
            .
            </summary>
            <param name="structElem">
            a
            <see cref="T:iText.Kernel.Pdf.Tagging.PdfStructElem"/>
            for which
            <see cref="T:iText.Kernel.Pdf.Tagutils.TagTreePointer"/>
            will be created.
            </param>
            <returns>
            a new
            <see cref="T:iText.Kernel.Pdf.Tagutils.TagTreePointer"/>
            .
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:iText.Kernel.Pdf.Tagutils.TagTreePointer" -->
        <member name="M:iText.Kernel.Pdf.Tagutils.TagTreePointer.#ctor(iText.Kernel.Pdf.PdfDocument)">
            <summary>
            Creates
            <c>TagTreePointer</c>
            instance. After creation
            <c>TagTreePointer</c>
            points at the root tag.
            <p>
            The
            <see cref="T:iText.Kernel.Pdf.Tagging.PdfNamespace"/>
            for the new tags, which don't explicitly define namespace by the means of
            <see cref="M:iText.Kernel.Pdf.Tagutils.DefaultAccessibilityProperties.SetNamespace(iText.Kernel.Pdf.Tagging.PdfNamespace)"/>
            , is set to the value returned by
            <see cref="M:iText.Kernel.Pdf.Tagutils.TagStructureContext.GetDocumentDefaultNamespace"/>
            on
            <see cref="T:iText.Kernel.Pdf.Tagutils.TagTreePointer"/>
            creation.
            See also
            <see cref="M:iText.Kernel.Pdf.Tagutils.TagTreePointer.SetNamespaceForNewTags(iText.Kernel.Pdf.Tagging.PdfNamespace)"/>
            .
            </p>
            </summary>
            <param name="document">the document, at which tag structure this instance will point.</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagutils.TagTreePointer.#ctor(iText.Kernel.Pdf.Tagutils.TagTreePointer)">
            <summary>A copy constructor.</summary>
            <param name="tagPointer">
            the
            <c>TagTreePointer</c>
            from which current position and page are copied.
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagutils.TagTreePointer.SetPageForTagging(iText.Kernel.Pdf.PdfPage)">
            <summary>
            Sets a page which content will be tagged with this instance of
            <c>TagTreePointer</c>
            .
            To tag page content:
            <ol>
            <li>Set pointer position to the tag which will be the parent of the page content item;</li>
            <li>Call
            <see cref="M:iText.Kernel.Pdf.Tagutils.TagTreePointer.GetTagReference"/>
            to obtain the reference to the current tag;</li>
            <li>Pass
            <see cref="T:iText.Kernel.Pdf.Tagutils.TagReference"/>
            to the
            <see cref="M:iText.Kernel.Pdf.Canvas.PdfCanvas.OpenTag(iText.Kernel.Pdf.Tagutils.TagReference)"/>
            method of the page's
            <see cref="T:iText.Kernel.Pdf.Canvas.PdfCanvas"/>
            to start marked content item;</li>
            <li>Draw content on
            <c>PdfCanvas</c>
            ;</li>
            <li>Use
            <see cref="M:iText.Kernel.Pdf.Canvas.PdfCanvas.CloseTag"/>
            to finish marked content item.</li>
            </ol>
            </summary>
            <param name="page">
            the page which content will be tagged with this instance of
            <c>TagTreePointer</c>
            .
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Tagutils.TagTreePointer"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagutils.TagTreePointer.GetCurrentPage">
            <returns>
            a page which content will be tagged with this instance of
            <c>TagTreePointer</c>
            .
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagutils.TagTreePointer.SetContentStreamForTagging(iText.Kernel.Pdf.PdfStream)">
            <summary>
            Sometimes, tags are desired to be connected with the content that resides not in the page's content stream,
            but rather in the some appearance stream or in the form xObject stream.
            </summary>
            <remarks>
            Sometimes, tags are desired to be connected with the content that resides not in the page's content stream,
            but rather in the some appearance stream or in the form xObject stream. In that case, to have a valid tag structure,
            one shall set not only the page, on which the content will be rendered, but also the content stream in which
            the tagged content will reside.
            <br /><br />
            NOTE: It's important to set a
            <see langword="null"/>
            for this value, when tagging of this stream content is finished.
            </remarks>
            <param name="contentStream">
            the content stream which content will be tagged with this instance of
            <c>TagTreePointer</c>
            or
            <see langword="null"/>
            if content stream tagging is finished.
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagutils.TagTreePointer.GetCurrentContentStream">
            <returns>
            the content stream which content will be tagged with this instance of
            <c>TagTreePointer</c>
            .
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagutils.TagTreePointer.GetContext">
            <returns>
            the
            <see cref="T:iText.Kernel.Pdf.Tagutils.TagStructureContext"/>
            associated with the document to which this pointer belongs.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagutils.TagTreePointer.GetDocument">
            <returns>the document, at which tag structure this instance points.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagutils.TagTreePointer.SetNamespaceForNewTags(iText.Kernel.Pdf.Tagging.PdfNamespace)">
            <summary>
            Sets a
            <see cref="T:iText.Kernel.Pdf.Tagging.PdfNamespace"/>
            which will be set to every new tag created by this
            <see cref="T:iText.Kernel.Pdf.Tagutils.TagTreePointer"/>
            instance
            if this tag doesn't explicitly define namespace by the means of
            <see cref="M:iText.Kernel.Pdf.Tagutils.DefaultAccessibilityProperties.SetNamespace(iText.Kernel.Pdf.Tagging.PdfNamespace)"/>
            .
            <p>This value has meaning only for the PDF documents of version <b>2.0 and higher</b>.</p>
            <p>It's highly recommended to acquire
            <see cref="T:iText.Kernel.Pdf.Tagging.PdfNamespace"/>
            class instances via
            <see cref="M:iText.Kernel.Pdf.Tagutils.TagStructureContext.FetchNamespace(System.String)"/>
            .</p>
            </summary>
            <param name="namespace">
            a
            <see cref="T:iText.Kernel.Pdf.Tagging.PdfNamespace"/>
            to be set for the new tags created. If set to null - new tags will have
            a namespace set only if it is defined in the corresponding
            <see cref="T:iText.Kernel.Pdf.Tagutils.AccessibilityProperties"/>
            .
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Tagutils.TagTreePointer"/>
            instance.
            </returns>
            <seealso cref="M:iText.Kernel.Pdf.Tagutils.TagStructureContext.FetchNamespace(System.String)"/>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagutils.TagTreePointer.GetNamespaceForNewTags">
            <summary>
            Gets a
            <see cref="T:iText.Kernel.Pdf.Tagging.PdfNamespace"/>
            which will be set to every new tag created by this
            <see cref="T:iText.Kernel.Pdf.Tagutils.TagTreePointer"/>
            instance.
            </summary>
            <returns>
            a
            <see cref="T:iText.Kernel.Pdf.Tagging.PdfNamespace"/>
            which is to be set for the new tags created, or null if one is not defined.
            </returns>
            <seealso cref="M:iText.Kernel.Pdf.Tagutils.TagTreePointer.SetNamespaceForNewTags(iText.Kernel.Pdf.Tagging.PdfNamespace)"/>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagutils.TagTreePointer.AddTag(System.String)">
            <summary>Adds a new tag with given role to the tag structure.</summary>
            <remarks>
            Adds a new tag with given role to the tag structure.
            This method call moves this
            <c>TagTreePointer</c>
            to the added kid.
            </remarks>
            <param name="role">role of the new tag.</param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Tagutils.TagTreePointer"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagutils.TagTreePointer.AddTag(System.Int32,System.String)">
            <summary>Adds a new tag with given role to the tag structure.</summary>
            <remarks>
            Adds a new tag with given role to the tag structure.
            This method call moves this
            <c>TagTreePointer</c>
            to the added kid.
            <br />
            This call is equivalent of calling sequentially
            <see cref="M:iText.Kernel.Pdf.Tagutils.TagTreePointer.SetNextNewKidIndex(System.Int32)"/>
            and
            <see cref="M:iText.Kernel.Pdf.Tagutils.TagTreePointer.AddTag(System.String)"/>
            .
            </remarks>
            <param name="index">zero-based index in kids array of parent tag at which new tag will be added.</param>
            <param name="role">role of the new tag.</param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Tagutils.TagTreePointer"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagutils.TagTreePointer.AddTag(iText.Kernel.Pdf.Tagutils.AccessibilityProperties)">
            <summary>Adds a new tag to the tag structure.</summary>
            <remarks>
            Adds a new tag to the tag structure.
            This method call moves this
            <see cref="T:iText.Kernel.Pdf.Tagutils.TagTreePointer"/>
            to the added kid.
            <br />
            New tag will have a role and attributes defined by the given
            <see cref="T:iText.Kernel.Pdf.Tagutils.AccessibilityProperties"/>
            .
            </remarks>
            <param name="properties">accessibility properties which define a new tag role and other properties.</param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Tagutils.TagTreePointer"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagutils.TagTreePointer.AddTag(System.Int32,iText.Kernel.Pdf.Tagutils.AccessibilityProperties)">
            <summary>Adds a new tag to the tag structure.</summary>
            <remarks>
            Adds a new tag to the tag structure.
            This method call moves this
            <c>TagTreePointer</c>
            to the added kid.
            <br />
            New tag will have a role and attributes defined by the given
            <see cref="T:iText.Kernel.Pdf.Tagutils.AccessibilityProperties"/>
            .
            This call is equivalent of calling sequentially
            <see cref="M:iText.Kernel.Pdf.Tagutils.TagTreePointer.SetNextNewKidIndex(System.Int32)"/>
            and
            <see cref="M:iText.Kernel.Pdf.Tagutils.TagTreePointer.AddTag(iText.Kernel.Pdf.Tagutils.AccessibilityProperties)"/>
            .
            </remarks>
            <param name="index">zero-based index in kids array of parent tag at which new tag will be added.</param>
            <param name="properties">accessibility properties which define a new tag role and other properties.</param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Tagutils.TagTreePointer"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagutils.TagTreePointer.AddAnnotationTag(iText.Kernel.Pdf.Annot.PdfAnnotation)">
            <summary>
            Adds a new content item for the given
            <c>PdfAnnotation</c>
            under the current tag.
            <br /><br />
            By default, when annotation is added to the page it is automatically tagged with auto tagging pointer
            (see
            <see cref="M:iText.Kernel.Pdf.Tagutils.TagStructureContext.GetAutoTaggingPointer"/>
            ). If you want to add annotation tag manually, be sure to use
            <see cref="M:iText.Kernel.Pdf.PdfPage.AddAnnotation(System.Int32,iText.Kernel.Pdf.Annot.PdfAnnotation,System.Boolean)"/>
            method with <i>false</i> for boolean flag.
            </summary>
            <param name="annotation">
            
            <c>PdfAnnotation</c>
            to be tagged.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Tagutils.TagTreePointer"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagutils.TagTreePointer.SetNextNewKidIndex(System.Int32)">
            <summary>Sets index of the next added to the current tag kid, which could be another tag or content item.</summary>
            <remarks>
            Sets index of the next added to the current tag kid, which could be another tag or content item.
            By default, new tag is added at the end of the parent kids array. This property affects only the next added tag,
            all tags added after will be added with the default behaviour.
            <br /><br />
            This method could be used with any overload of
            <see cref="M:iText.Kernel.Pdf.Tagutils.TagTreePointer.AddTag(System.String)"/>
            method,
            with
            <see cref="M:iText.Kernel.Pdf.Tagutils.TagTreePointer.RelocateKid(System.Int32,iText.Kernel.Pdf.Tagutils.TagTreePointer)"/>
            and
            <see cref="M:iText.Kernel.Pdf.Tagutils.TagTreePointer.AddAnnotationTag(iText.Kernel.Pdf.Annot.PdfAnnotation)"/>
            .
            <br />
            Keep in mind, that this method set property to the
            <c>TagTreePointer</c>
            and not to the tag itself, which means
            that if you would move the pointer, this property would be applied to the new current tag.
            </remarks>
            <param name="nextNewKidIndex">index of the next added kid.</param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Tagutils.TagTreePointer"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagutils.TagTreePointer.RemoveTag">
            <summary>Removes the current tag.</summary>
            <remarks>
            Removes the current tag. If it has kids, they will become kids of the current tag parent.
            This method call moves this
            <c>TagTreePointer</c>
            to the current tag parent.
            <br /><br />
            You cannot remove root tag, and also you cannot remove the tag if it's parent is already flushed;
            in this two cases an exception will be thrown.
            </remarks>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Tagutils.TagStructureContext"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagutils.TagTreePointer.RelocateKid(System.Int32,iText.Kernel.Pdf.Tagutils.TagTreePointer)">
            <summary>
            Moves kid of the current tag to the tag at which given
            <c>TagTreePointer</c>
            points.
            This method doesn't change neither this instance nor pointerToNewParent position.
            </summary>
            <param name="kidIndex">zero-based index of the current tag's kid to be relocated.</param>
            <param name="pointerToNewParent">
            the
            <c>TagTreePointer</c>
            which is positioned at the tag which will become kid's new parent.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Tagutils.TagTreePointer"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagutils.TagTreePointer.Relocate(iText.Kernel.Pdf.Tagutils.TagTreePointer)">
            <summary>
            Moves current tag to the tag at which given
            <c>TagTreePointer</c>
            points.
            This method doesn't change either this instance or pointerToNewParent position.
            </summary>
            <param name="pointerToNewParent">
            the
            <c>TagTreePointer</c>
            which is positioned at the tag
            which will become current tag new parent.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Tagutils.TagTreePointer"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagutils.TagTreePointer.GetTagReference">
            <summary>Creates a reference to the current tag, which could be used to associate a content on the PdfCanvas with current tag.
                </summary>
            <remarks>
            Creates a reference to the current tag, which could be used to associate a content on the PdfCanvas with current tag.
            See
            <see cref="M:iText.Kernel.Pdf.Canvas.PdfCanvas.OpenTag(iText.Kernel.Pdf.Tagutils.TagReference)"/>
            and
            <see cref="M:iText.Kernel.Pdf.Tagutils.TagTreePointer.SetPageForTagging(iText.Kernel.Pdf.PdfPage)"/>
            .
            </remarks>
            <returns>the reference to the current tag.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagutils.TagTreePointer.GetTagReference(System.Int32)">
            <summary>Creates a reference to the current tag, which could be used to associate a content on the PdfCanvas with current tag.
                </summary>
            <remarks>
            Creates a reference to the current tag, which could be used to associate a content on the PdfCanvas with current tag.
            See
            <see cref="M:iText.Kernel.Pdf.Canvas.PdfCanvas.OpenTag(iText.Kernel.Pdf.Tagutils.TagReference)"/>
            and
            <see cref="M:iText.Kernel.Pdf.Tagutils.TagTreePointer.SetPageForTagging(iText.Kernel.Pdf.PdfPage)"/>
            .
            </remarks>
            <param name="index">zero-based index in kids array of tag. These indexes define the logical order of the content on the page.
                </param>
            <returns>the reference to the current tag.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagutils.TagTreePointer.MoveToRoot">
            <summary>
            Moves this
            <c>TagTreePointer</c>
            instance to the document root tag.
            </summary>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Tagutils.TagTreePointer"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagutils.TagTreePointer.MoveToParent">
            <summary>
            Moves this
            <see cref="T:iText.Kernel.Pdf.Tagutils.TagTreePointer"/>
            instance to the parent of the current tag.
            </summary>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Tagutils.TagTreePointer"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagutils.TagTreePointer.MoveToKid(System.Int32)">
            <summary>
            Moves this
            <c>TagTreePointer</c>
            instance to the kid of the current tag.
            </summary>
            <param name="kidIndex">zero-based index of the current tag kid to which pointer will be moved.</param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Tagutils.TagTreePointer"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagutils.TagTreePointer.MoveToKid(System.String)">
            <summary>
            Moves this
            <see cref="T:iText.Kernel.Pdf.Tagutils.TagTreePointer"/>
            instance to the first descendant of the current tag which has the given role.
            If there are no direct kids of the tag with such role, further descendants are checked in BFS order.
            </summary>
            <param name="role">
            role of the current tag descendant to which pointer will be moved.
            If there are several descendants with this role, pointer will be moved
            to the first kid with such role in BFS order.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Tagutils.TagTreePointer"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagutils.TagTreePointer.MoveToKid(System.Int32,System.String)">
            <summary>
            Moves this
            <see cref="T:iText.Kernel.Pdf.Tagutils.TagTreePointer"/>
            instance to the first descendant of the current tag which has the given role.
            If there are no direct kids of the tag with such role, further descendants are checked in BFS order.
            </summary>
            <param name="n">
            if there are several descendants with the given role, pointer will be moved to the descendant
            which has zero-based index <em>n</em> if you count only the descendants with the given role in BFS order.
            </param>
            <param name="role">role of the current tag descendant to which pointer will be moved.</param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Tagutils.TagTreePointer"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagutils.TagTreePointer.GetKidsRoles">
            <summary>Gets current tag kids roles.</summary>
            <remarks>
            Gets current tag kids roles.
            If certain kid is already flushed, at its position there will be a
            <see langword="null"/>
            .
            If kid is a content item, at it's position there will be "MCR" string literal (stands for Marked Content Reference).
            </remarks>
            <returns>current tag kids roles</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagutils.TagTreePointer.FlushTag">
            <summary>Flushes current tag and all it's descendants.</summary>
            <remarks>
            Flushes current tag and all it's descendants.
            This method call moves this
            <c>TagTreePointer</c>
            to the current tag parent.
            <p>
            If some of the descendant tags of the current tag have waiting state (see
            <see cref="T:iText.Kernel.Pdf.Tagutils.WaitingTagsManager"/>
            ),
            then these tags are considered as not yet finished ones, and they won't be flushed immediately,
            but they will be flushed, when waiting state is removed.
            </p>
            </remarks>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Tagutils.TagTreePointer"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagutils.TagTreePointer.FlushParentsIfAllKidsFlushed">
            <summary>
            For current tag and all of it's parents consequentially checks if the following constraints apply,
            and flushes the tag if they do or stops if they don't:
            <ul>
            <li>tag is not already flushed;</li>
            <li>tag is not in waiting state (see
            <see cref="T:iText.Kernel.Pdf.Tagutils.WaitingTagsManager"/>
            );</li>
            <li>tag is not the root tag;</li>
            <li>tag has no kids or all of the kids are either flushed themselves or
            (if they are a marked content reference) belong to the flushed page.</li>
            </ul>
            It makes sense to use this method in conjunction with
            <see cref="M:iText.Kernel.Pdf.Tagutils.TagStructureContext.FlushPageTags(iText.Kernel.Pdf.PdfPage)"/>
            for the tags which have just lost their waiting state and might be not flushed only because they had one.
            This helps to eliminate hanging (not flushed) tags when they don't have waiting state anymore.
            </summary>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Tagutils.TagTreePointer"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagutils.TagTreePointer.GetProperties">
            <summary>Gets accessibility properties of the current tag.</summary>
            <returns>accessibility properties of the current tag.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagutils.TagTreePointer.GetRole">
            <summary>Gets current tag role.</summary>
            <returns>current tag role.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagutils.TagTreePointer.SetRole(System.String)">
            <summary>Sets new role to the current tag.</summary>
            <param name="role">new role to be set.</param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Tagutils.TagTreePointer"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagutils.TagTreePointer.GetIndexInParentKidsList">
            <summary>Defines index of the current tag in the parent's kids list.</summary>
            <returns>
            returns index of the current tag in the parent's kids list, or -1
            if either current tag is a root tag, parent is flushed or it wasn't possible to define index.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagutils.TagTreePointer.MoveToPointer(iText.Kernel.Pdf.Tagutils.TagTreePointer)">
            <summary>
            Moves this
            <see cref="T:iText.Kernel.Pdf.Tagutils.TagTreePointer"/>
            instance to the tag at which given
            <see cref="T:iText.Kernel.Pdf.Tagutils.TagTreePointer"/>
            instance is pointing.
            </summary>
            <param name="tagTreePointer">
            a
            <see cref="T:iText.Kernel.Pdf.Tagutils.TagTreePointer"/>
            that points at the tag which will become the current tag
            of this instance.
            </param>
            <returns>
            this
            <see cref="T:iText.Kernel.Pdf.Tagutils.TagTreePointer"/>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagutils.TagTreePointer.IsPointingToSameTag(iText.Kernel.Pdf.Tagutils.TagTreePointer)">
            <summary>
            Checks if this
            <see cref="T:iText.Kernel.Pdf.Tagutils.TagTreePointer"/>
            is pointing at the same tag as the giving
            <see cref="T:iText.Kernel.Pdf.Tagutils.TagTreePointer"/>
            .
            </summary>
            <param name="otherPointer">
            a
            <see cref="T:iText.Kernel.Pdf.Tagutils.TagTreePointer"/>
            which is checked against this instance on whether they point
            at the same tag.
            </param>
            <returns>
            true if both
            <see cref="T:iText.Kernel.Pdf.Tagutils.TagTreePointer"/>
            instances point at the same tag, false otherwise.
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:iText.Kernel.Pdf.Tagutils.WaitingTagsManager" -->
        <member name="M:iText.Kernel.Pdf.Tagutils.WaitingTagsManager.AssignWaitingState(iText.Kernel.Pdf.Tagutils.TagTreePointer,System.Object)">
            <summary>
            Assigns waiting state to the tag at which given
            <see cref="T:iText.Kernel.Pdf.Tagutils.TagTreePointer"/>
            points, associating it with the given
            <see cref="T:System.Object"/>
            . If current tag of the given
            <see cref="T:iText.Kernel.Pdf.Tagutils.TagTreePointer"/>
            is already waiting, then after this method call
            it's associated object will change to the one passed as the argument and the old one will not longer be
            an associated object.
            </summary>
            <param name="pointerToTag">
            a
            <see cref="T:iText.Kernel.Pdf.Tagutils.TagTreePointer"/>
            pointing at a tag which is desired to be marked as waiting.
            </param>
            <param name="associatedObj">an object that is to be associated with the waiting tag. A null value is forbidden.
                </param>
            <returns>
            the previous associated object with the tag if it has already had waiting state,
            or null if it was not waiting tag.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagutils.WaitingTagsManager.IsObjectAssociatedWithWaitingTag(System.Object)">
            <summary>
            Checks if there is waiting tag which state was assigned using given
            <see cref="T:System.Object"/>
            .
            </summary>
            <param name="obj">
            an
            <see cref="T:System.Object"/>
            which is to be checked if it is associated with any waiting tag. A null value is forbidden.
            </param>
            <returns>true if object is currently associated with some waiting tag.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagutils.WaitingTagsManager.TryMovePointerToWaitingTag(iText.Kernel.Pdf.Tagutils.TagTreePointer,System.Object)">
            <summary>
            Moves given
            <see cref="T:iText.Kernel.Pdf.Tagutils.TagTreePointer"/>
            to the waiting tag which is associated with the given object.
            If the passed object is not associated with any waiting tag,
            <see cref="T:iText.Kernel.Pdf.Tagutils.TagTreePointer"/>
            position won't change.
            </summary>
            <param name="tagPointer">
            a
            <see cref="T:iText.Kernel.Pdf.Tagutils.TagTreePointer"/>
            which position in the tree is to be changed to the
            waiting tag in case of the successful call.
            </param>
            <param name="associatedObject">
            an object which is associated with the waiting tag to which
            <see cref="T:iText.Kernel.Pdf.Tagutils.TagTreePointer"/>
            is to be moved.
            </param>
            <returns>
            true if given object is actually associated with the waiting tag and
            <see cref="T:iText.Kernel.Pdf.Tagutils.TagTreePointer"/>
            was moved
            in order to point at it.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagutils.WaitingTagsManager.RemoveWaitingState(System.Object)">
            <summary>Removes waiting state of the tag which is associated with the given object.</summary>
            <remarks>
            Removes waiting state of the tag which is associated with the given object.
            <p>NOTE: if parent of the waiting tag is already flushed, the tag and it's children
            (unless they are waiting tags on their own) will be also immediately flushed right after
            the waiting state removal.</p>
            </remarks>
            <param name="associatedObject">an object which association with the waiting tag is to be removed.</param>
            <returns>true if object was actually associated with some tag and it's association was removed.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagutils.WaitingTagsManager.RemoveAllWaitingStates">
            <summary>Removes waiting state of all waiting tags by removing association with objects.</summary>
            <remarks>
            Removes waiting state of all waiting tags by removing association with objects.
            <p>NOTE: if parent of the waiting tag is already flushed, the tag and it's children
            will be also immediately flushed right after the waiting state removal.</p>
            </remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Tagutils.WaitingTagsManager.FlushTag(iText.Kernel.Pdf.Tagging.PdfStructElem)">
            <returns>parent of the flushed tag</returns>
        </member>
        <member name="F:iText.Kernel.Pdf.WriterProperties.isFullCompression">
            <summary>Indicates if to use full compression (using object streams).</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.WriterProperties.smartMode">
            <summary>Indicates if the writer copy objects in a smart mode.</summary>
            <remarks>
            Indicates if the writer copy objects in a smart mode. If so PdfDictionary and PdfStream will be hashed
            and reused if there's an object with the same content later.
            </remarks>
        </member>
        <member name="F:iText.Kernel.Pdf.WriterProperties.initialDocumentId">
            <summary>The ID entry that represents the initial identifier.</summary>
        </member>
        <member name="F:iText.Kernel.Pdf.WriterProperties.modifiedDocumentId">
            <summary>The ID entry that represents a change in a document.</summary>
        </member>
        <member name="M:iText.Kernel.Pdf.WriterProperties.SetPdfVersion(iText.Kernel.Pdf.PdfVersion)">
            <summary>Defines pdf version for the created document.</summary>
            <remarks>Defines pdf version for the created document. Default value is PDF_1_7.</remarks>
            <param name="version">version for the document.</param>
            <returns>
            this
            <c>WriterProperties</c>
            instance
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.WriterProperties.UseSmartMode">
            <summary>Enables smart mode.</summary>
            <remarks>
            Enables smart mode.
            <br />
            In smart mode when resources (such as fonts, images,...) are
            encountered, a reference to these resources is saved
            in a cache, so that they can be reused.
            This requires more memory, but reduces the file size
            of the resulting PDF document.
            </remarks>
            <returns>
            this
            <c>WriterProperties</c>
            instance
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.WriterProperties.AddXmpMetadata">
            <summary>
            If true, default XMPMetadata based on
            <see cref="T:iText.Kernel.Pdf.PdfDocumentInfo"/>
            will be added.
            For PDF 2.0 documents, metadata will be added in any case.
            </summary>
            <returns>
            this
            <c>WriterProperties</c>
            instance
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.WriterProperties.SetCompressionLevel(System.Int32)">
            <summary>Defines the level of compression for the document.</summary>
            <remarks>
            Defines the level of compression for the document.
            See
            <see cref="T:iText.Kernel.Pdf.CompressionConstants"/>
            </remarks>
            <param name="compressionLevel">
            
            <see cref="T:iText.Kernel.Pdf.CompressionConstants"/>
            value.
            </param>
            <returns>
            this
            <c>WriterProperties</c>
            instance
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.WriterProperties.SetFullCompressionMode(System.Boolean)">
            <summary>Defines if full compression mode is enabled.</summary>
            <remarks>
            Defines if full compression mode is enabled. If enabled, not only the content of the pdf document will be
            compressed, but also the pdf document inner structure.
            </remarks>
            <param name="fullCompressionMode">true - to enable full compression mode, false to disable it</param>
            <returns>
            this
            <c>WriterProperties</c>
            instance
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.Pdf.WriterProperties.SetStandardEncryption(System.Byte[],System.Byte[],System.Int32,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.Pdf.WriterProperties.SetPublicKeyEncryption(Org.BouncyCastle.X509.X509Certificate[],System.Int32[],System.Int32)" -->
        <member name="M:iText.Kernel.Pdf.WriterProperties.SetInitialDocumentId(iText.Kernel.Pdf.PdfString)">
            <summary>The /ID entry of a document contains an array with two entries.</summary>
            <remarks>
            The /ID entry of a document contains an array with two entries. The first one (initial id) represents the initial document id.
            It's a permanent identifier based on the contents of the file at the time it was originally created
            and does not change when the file is incrementally updated.
            To help ensure the uniqueness of file identifiers, it is recommend to be computed by means of a message digest algorithm such as MD5.
            iText will by default keep the existing initial id. But if you'd like you can set this id yourself using this setter.
            </remarks>
            <param name="initialDocumentId">the new initial document id</param>
            <returns>
            this
            <c>WriterProperties</c>
            instance
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.WriterProperties.SetModifiedDocumentId(iText.Kernel.Pdf.PdfString)">
            <summary>The /ID entry of a document contains an array with two entries.</summary>
            <remarks>
            The /ID entry of a document contains an array with two entries.
            The second one (modified id) should be the same entry, unless the document has been modified. iText will by default generate
            a modified id. But if you'd like you can set this id yourself using this setter.
            </remarks>
            <param name="modifiedDocumentId">the new modified document id</param>
            <returns>
            this
            <c>WriterProperties</c>
            instance
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.WriterProperties.UseDebugMode">
            <summary>This activates debug mode with pdfDebug tool.</summary>
            <remarks>
            This activates debug mode with pdfDebug tool.
            It causes additional overhead of duplicating document bytes into memory, so use it careful.
            NEVER use it in production or in any other cases except pdfDebug.
            </remarks>
            <returns>
            this
            <c>WriterProperties</c>
            instance
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.WriterProperties.AddUAXmpMetadata">
            <summary>This method marks the document as PDF/UA and sets related flags is XMPMetaData.</summary>
            <remarks>
            This method marks the document as PDF/UA and sets related flags is XMPMetaData.
            This method calls
            <see cref="M:iText.Kernel.Pdf.WriterProperties.AddXmpMetadata"/>
            implicitly.
            NOTE: iText does not validate PDF/UA, which means we don't check if created PDF meets all PDF/UA requirements.
            Don't use this method if you are not familiar with PDF/UA specification in order to avoid creation of non-conformant PDF/UA file.
            </remarks>
            <returns>
            this
            <c>WriterProperties</c>
            instance
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.XmpMetaInfoConverter.AppendDocumentInfoToMetadata(iText.Kernel.Pdf.PdfDocumentInfo,iText.Kernel.XMP.XMPMeta)">
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.Pdf.XmpMetaInfoConverter.AppendArrayItemIfDoesNotExist(iText.Kernel.XMP.XMPMeta,System.String,System.String,System.String)">
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.Pdf.XmpMetaInfoConverter.FetchArrayIntoString(iText.Kernel.XMP.XMPMeta,System.String,System.String)">
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="T:iText.Kernel.Pdf.Xobject.PdfFormXObject">
            <summary>A wrapper for Form XObject.</summary>
            <remarks>A wrapper for Form XObject. ISO 32000-1, 8.10 FormXObjects.</remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Xobject.PdfFormXObject.#ctor(iText.Kernel.Geom.Rectangle)">
            <summary>Creates a new instance of Form XObject.</summary>
            <param name="bBox">the form XObject’s bounding box.</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Xobject.PdfFormXObject.#ctor(iText.Kernel.Pdf.PdfStream)">
            <summary>
            Create
            <see cref="T:iText.Kernel.Pdf.Xobject.PdfFormXObject"/>
            instance by
            <see cref="T:iText.Kernel.Pdf.PdfStream"/>
            .
            Note, this constructor doesn't perform any additional checks
            </summary>
            <param name="pdfStream">
            
            <see cref="T:iText.Kernel.Pdf.PdfStream"/>
            with Form XObject.
            </param>
            <seealso cref="M:iText.Kernel.Pdf.Xobject.PdfXObject.MakeXObject(iText.Kernel.Pdf.PdfStream)"/>
        </member>
        <member name="M:iText.Kernel.Pdf.Xobject.PdfFormXObject.#ctor(iText.Kernel.Pdf.PdfPage)">
            <summary>Creates form XObject from page content.</summary>
            <remarks>
            Creates form XObject from page content.
            The page shall be from the document, to which FormXObject will be added.
            </remarks>
            <param name="page">
            an instance of
            <see cref="T:iText.Kernel.Pdf.PdfPage"/>
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.Xobject.PdfFormXObject.#ctor(iText.Kernel.Pdf.Canvas.Wmf.WmfImageData,iText.Kernel.Pdf.PdfDocument)">
            <summary>
            Creates a form XObject from
            <see cref="T:iText.Kernel.Pdf.Canvas.Wmf.WmfImageData"/>
            .
            Unlike other images,
            <see cref="T:iText.Kernel.Pdf.Canvas.Wmf.WmfImageData"/>
            images are represented as
            <see cref="T:iText.Kernel.Pdf.Xobject.PdfFormXObject"/>
            , not as
            <see cref="T:iText.Kernel.Pdf.Xobject.PdfImageXObject"/>
            .
            </summary>
            <param name="image">image to create form object from</param>
            <param name="pdfDocument">document instance which is needed for writing form stream contents</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Xobject.PdfFormXObject.GetResources">
            <summary>
            Gets
            <see cref="T:iText.Kernel.Pdf.PdfResources"/>
            of the Form XObject.
            Note, if there is no resources, a new instance will be created.
            </summary>
            <returns>
            not null instance of
            <see cref="T:iText.Kernel.Pdf.PdfResources"/>
            .
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Xobject.PdfFormXObject.GetBBox">
            <summary>
            Gets Form XObject's BBox,
            <see cref="F:iText.Kernel.Pdf.PdfName.BBox"/>
            key.
            </summary>
            <returns>
            a
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            , that represents
            <see cref="T:iText.Kernel.Geom.Rectangle"/>
            .
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Xobject.PdfFormXObject.SetBBox(iText.Kernel.Pdf.PdfArray)">
            <summary>
            Sets Form XObject's BBox,
            <see cref="F:iText.Kernel.Pdf.PdfName.BBox"/>
            key.
            </summary>
            <param name="bBox">
            a
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            , that represents
            <see cref="T:iText.Kernel.Geom.Rectangle"/>
            .
            </param>
            <returns>object itself.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Xobject.PdfFormXObject.SetGroup(iText.Kernel.Pdf.Xobject.PdfTransparencyGroup)">
            <summary>
            Sets a group attributes dictionary indicating that the contents of the form XObject
            shall be treated as a group and specifying the attributes of that group.
            </summary>
            <remarks>
            Sets a group attributes dictionary indicating that the contents of the form XObject
            shall be treated as a group and specifying the attributes of that group.
            <see cref="F:iText.Kernel.Pdf.PdfName.Group"/>
            key.
            </remarks>
            <param name="transparency">
            instance of
            <see cref="T:iText.Kernel.Pdf.Xobject.PdfTransparencyGroup"/>
            .
            </param>
            <returns>object itself.</returns>
            <seealso cref="T:iText.Kernel.Pdf.Xobject.PdfTransparencyGroup"/>
        </member>
        <member name="M:iText.Kernel.Pdf.Xobject.PdfFormXObject.GetWidth">
            <summary>Gets width based on XObject's BBox.</summary>
            <returns>float value.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Xobject.PdfFormXObject.GetHeight">
            <summary>Gets height based on XObject's BBox.</summary>
            <returns>float value.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Xobject.PdfFormXObject.Flush">
            <summary>
            To manually flush a
            <c>PdfObject</c>
            behind this wrapper, you have to ensure
            that this object is added to the document, i.e. it has an indirect reference.
            Basically this means that before flushing you need to explicitly call
            <see cref="M:iText.Kernel.Pdf.PdfObjectWrapper`1.MakeIndirect(iText.Kernel.Pdf.PdfDocument)"/>
            .
            For example: wrapperInstance.makeIndirect(document).flush();
            Note that not every wrapper require this, only those that have such warning in documentation.
            </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Xobject.PdfFormXObject.SetProcessColorModel(iText.Kernel.Pdf.PdfName)">
            <summary>
            Sets process color model for trap network appearance,
            <see cref="F:iText.Kernel.Pdf.PdfName.PCM"/>
            key.
            </summary>
            <param name="model">
            shall be one of the valid values:
            <see cref="F:iText.Kernel.Pdf.PdfName.DeviceGray"/>
            ,
            <see cref="F:iText.Kernel.Pdf.PdfName.DeviceRGB"/>
            ,
            <see cref="F:iText.Kernel.Pdf.PdfName.DeviceCMYK"/>
            ,
            <see cref="F:iText.Kernel.Pdf.PdfName.DeviceCMY"/>
            ,
            <see cref="F:iText.Kernel.Pdf.PdfName.DeviceRGBK"/>
            , and
            <see cref="F:iText.Kernel.Pdf.PdfName.DeviceN"/>
            .
            </param>
            <returns>object itself.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Xobject.PdfFormXObject.GetProcessColorModel">
            <summary>
            Gets process color model of trap network appearance,
            <see cref="F:iText.Kernel.Pdf.PdfName.PCM"/>
            key.
            </summary>
            <returns>
            a
            <see cref="T:iText.Kernel.Pdf.PdfName"/>
            instance, possible values:
            <see cref="F:iText.Kernel.Pdf.PdfName.DeviceGray"/>
            ,
            <see cref="F:iText.Kernel.Pdf.PdfName.DeviceRGB"/>
            ,
            <see cref="F:iText.Kernel.Pdf.PdfName.DeviceCMYK"/>
            ,
            <see cref="F:iText.Kernel.Pdf.PdfName.DeviceCMY"/>
            ,
            <see cref="F:iText.Kernel.Pdf.PdfName.DeviceRGBK"/>
            , and
            <see cref="F:iText.Kernel.Pdf.PdfName.DeviceN"/>
            .
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Xobject.PdfFormXObject.SetSeparationColorNames(iText.Kernel.Pdf.PdfArray)">
            <summary>
            Sets separation color names for the trap network appearance,
            <see cref="F:iText.Kernel.Pdf.PdfName.SeparationColorNames"/>
            key.
            </summary>
            <param name="colorNames">
            an array of names identifying the colorants that were assumed
            when the trap network appearance was created.
            </param>
            <returns>object itself.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Xobject.PdfFormXObject.GetSeparationColorNames">
            <summary>
            Gets separation color names of trap network appearance,
            <see cref="F:iText.Kernel.Pdf.PdfName.SeparationColorNames"/>
            key.
            </summary>
            <returns>
            an
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            of names identifying the colorants.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Xobject.PdfFormXObject.SetTrapRegions(iText.Kernel.Pdf.PdfArray)">
            <summary>
            Sets an array of <b>TrapRegion</b> objects defining the page’s trapping zones
            and the associated trapping parameters, as described in Adobe Technical Note #5620,
            Portable Job Ticket Format.
            </summary>
            <remarks>
            Sets an array of <b>TrapRegion</b> objects defining the page’s trapping zones
            and the associated trapping parameters, as described in Adobe Technical Note #5620,
            Portable Job Ticket Format.
            <see cref="F:iText.Kernel.Pdf.PdfName.TrapRegions"/>
            key.
            </remarks>
            <param name="regions">
            A
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            of indirect references to <b>TrapRegion</b> objects.
            </param>
            <returns>object itself.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Xobject.PdfFormXObject.GetTrapRegions">
            <summary>
            Gets an array of <b>TrapRegion</b> objects defining the page’s trapping zones
            and the associated trapping parameters, as described in Adobe Technical Note #5620,
            Portable Job Ticket Format.
            </summary>
            <remarks>
            Gets an array of <b>TrapRegion</b> objects defining the page’s trapping zones
            and the associated trapping parameters, as described in Adobe Technical Note #5620,
            Portable Job Ticket Format.
            <see cref="F:iText.Kernel.Pdf.PdfName.TrapRegions"/>
            key.
            </remarks>
            <returns>
            A
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            of indirect references to <b>TrapRegion</b> objects.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Xobject.PdfFormXObject.SetTrapStyles(iText.Kernel.Pdf.PdfString)">
            <summary>Sets a human-readable text string that described this trap network to the user.</summary>
            <remarks>
            Sets a human-readable text string that described this trap network to the user.
            <see cref="F:iText.Kernel.Pdf.PdfName.TrapStyles"/>
            key.
            </remarks>
            <param name="trapStyles">
            a
            <see cref="T:iText.Kernel.Pdf.PdfString"/>
            value.
            </param>
            <returns>object itself.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Xobject.PdfFormXObject.GetTrapStyles">
            <summary>Gets a human-readable text string that described this trap network to the user.</summary>
            <remarks>
            Gets a human-readable text string that described this trap network to the user.
            <see cref="F:iText.Kernel.Pdf.PdfName.TrapStyles"/>
            key.
            </remarks>
            <returns>
            a
            <see cref="T:iText.Kernel.Pdf.PdfString"/>
            value.
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Xobject.PdfFormXObject.SetMarkStyle(iText.Kernel.Pdf.PdfString)">
            <summary>Sets a text string representing the printer’s mark in human-readable form.</summary>
            <param name="markStyle">a string value.</param>
            <returns>object itself.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Xobject.PdfFormXObject.GetMarkStyle">
            <summary>Gets a text string representing the printer’s mark in human-readable form.</summary>
            <returns>a string value.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Xobject.PdfFormXObject.Put(iText.Kernel.Pdf.PdfName,iText.Kernel.Pdf.PdfObject)">
            <summary>Puts the value into Image XObject dictionary and associates it with the specified key.</summary>
            <remarks>
            Puts the value into Image XObject dictionary and associates it with the specified key.
            If the key is already present, it will override the old value with the specified one.
            </remarks>
            <param name="key">key to insert or to override</param>
            <param name="value">the value to associate with the specified key</param>
            <returns>object itself.</returns>
        </member>
        <member name="T:iText.Kernel.Pdf.Xobject.PdfImageXObject">
            <summary>A wrapper for Image XObject.</summary>
            <remarks>A wrapper for Image XObject. ISO 32000-1, 8.9 Images.</remarks>
        </member>
        <member name="M:iText.Kernel.Pdf.Xobject.PdfImageXObject.#ctor(iText.IO.Image.ImageData)">
            <summary>Creates Image XObject by image.</summary>
            <param name="image">
            
            <see cref="T:iText.IO.Image.ImageData"/>
            with actual image data.
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.Xobject.PdfImageXObject.#ctor(iText.IO.Image.ImageData,iText.Kernel.Pdf.Xobject.PdfImageXObject)">
            <summary>Creates Image XObject by image.</summary>
            <param name="image">
            
            <see cref="T:iText.IO.Image.ImageData"/>
            with actual image data.
            </param>
            <param name="imageMask">
            
            <see cref="T:iText.Kernel.Pdf.Xobject.PdfImageXObject"/>
            with image mask.
            </param>
        </member>
        <member name="M:iText.Kernel.Pdf.Xobject.PdfImageXObject.#ctor(iText.Kernel.Pdf.PdfStream)">
            <summary>
            Create
            <see cref="T:iText.Kernel.Pdf.Xobject.PdfImageXObject"/>
            instance by
            <see cref="T:iText.Kernel.Pdf.PdfStream"/>
            .
            Note, this constructor doesn't perform any additional checks
            </summary>
            <param name="pdfStream">
            
            <see cref="T:iText.Kernel.Pdf.PdfStream"/>
            with Image XObject.
            </param>
            <seealso cref="M:iText.Kernel.Pdf.Xobject.PdfXObject.MakeXObject(iText.Kernel.Pdf.PdfStream)"/>
        </member>
        <member name="M:iText.Kernel.Pdf.Xobject.PdfImageXObject.GetWidth">
            <summary>
            Gets width of image,
            <c>Width</c>
            key.
            </summary>
            <returns>float value.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Xobject.PdfImageXObject.GetHeight">
            <summary>
            Gets height of image,
            <c>Height</c>
            key.
            </summary>
            <returns>float value.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Xobject.PdfImageXObject.Flush">
            <summary>
            To manually flush a
            <c>PdfObject</c>
            behind this wrapper, you have to ensure
            that this object is added to the document, i.e. it has an indirect reference.
            Basically this means that before flushing you need to explicitly call
            <see cref="M:iText.Kernel.Pdf.PdfObjectWrapper`1.MakeIndirect(iText.Kernel.Pdf.PdfDocument)"/>
            .
            For example: wrapperInstance.makeIndirect(document).flush();
            Note, that not every wrapper require this, only those that have such warning in documentation.
            </summary>
        </member>
        <member name="M:iText.Kernel.Pdf.Xobject.PdfImageXObject.CopyTo(iText.Kernel.Pdf.PdfDocument)">
            <summary>Copy Image XObject to the specified document.</summary>
            <param name="document">target document</param>
            <returns>
            just created instance of
            <see cref="T:iText.Kernel.Pdf.Xobject.PdfImageXObject"/>
            .
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Xobject.PdfImageXObject.GetImageBytes">
            <summary>Gets decoded image bytes.</summary>
            <returns>byte array.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Xobject.PdfImageXObject.GetImageBytes(System.Boolean)">
            <summary>Gets image bytes.</summary>
            <remarks>
            Gets image bytes.
            Note,
            <see cref="F:iText.Kernel.Pdf.PdfName.DCTDecode"/>
            ,
            <see cref="F:iText.Kernel.Pdf.PdfName.JBIG2Decode"/>
            and
            <see cref="F:iText.Kernel.Pdf.PdfName.JPXDecode"/>
            filters will be ignored.
            </remarks>
            <param name="decoded">
            if
            <see langword="true"/>
            , decodes stream bytes.
            </param>
            <returns>byte array.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Xobject.PdfImageXObject.IdentifyImageType">
            <summary>
            Identifies the type of the image that is stored in the bytes of this
            <see cref="T:iText.Kernel.Pdf.Xobject.PdfImageXObject"/>
            .
            Note that this has nothing to do with the original type of the image. For instance, the return value
            of this method will never be
            <see cref="F:iText.IO.Image.ImageType.PNG"/>
            as we loose this information when converting a
            PNG image into something that can be put into a PDF file.
            The possible values are:
            <see cref="F:iText.IO.Image.ImageType.JPEG"/>
            ,
            <see cref="F:iText.IO.Image.ImageType.JPEG2000"/>
            ,
            <see cref="F:iText.IO.Image.ImageType.JBIG2"/>
            ,
            <see cref="F:iText.IO.Image.ImageType.TIFF"/>
            ,
            <see cref="F:iText.IO.Image.ImageType.PNG"/>
            </summary>
            <returns>the identified type of image</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Xobject.PdfImageXObject.IdentifyImageFileExtension">
            <summary>
            Identifies recommended file extension to store the bytes of this
            <see cref="T:iText.Kernel.Pdf.Xobject.PdfImageXObject"/>
            .
            Possible values are: 'png', 'jpg', 'jp2', 'tif', 'jbig2'.
            This extension can later be used together with the result of
            <see cref="M:iText.Kernel.Pdf.Xobject.PdfImageXObject.GetImageBytes"/>
            .
            </summary>
            <returns>
            a
            <see cref="T:System.String"/>
            with recommended file extension
            </returns>
            <seealso cref="M:iText.Kernel.Pdf.Xobject.PdfImageXObject.IdentifyImageType"/>
        </member>
        <member name="M:iText.Kernel.Pdf.Xobject.PdfImageXObject.Put(iText.Kernel.Pdf.PdfName,iText.Kernel.Pdf.PdfObject)">
            <summary>Puts the value into Image XObject dictionary and associates it with the specified key.</summary>
            <remarks>
            Puts the value into Image XObject dictionary and associates it with the specified key.
            If the key is already present, it will override the old value with the specified one.
            </remarks>
            <param name="key">key to insert or to override</param>
            <param name="value">the value to associate with the specified key</param>
            <returns>object itself.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Xobject.PdfImageXObject.DecodeTiffAndPngBytes(System.Byte[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Kernel.Pdf.Xobject.PdfImageXObject.FindColorspace(iText.Kernel.Pdf.PdfObject,System.Boolean)">
            <summary>Sets state of this object according to the color space</summary>
            <param name="colorspace">the colorspace to use</param>
            <param name="allowIndexed">whether indexed color spaces will be resolved (used for recursive call)</param>
            <exception cref="T:System.IO.IOException">if there is a problem with reading from the underlying stream</exception>
        </member>
        <member name="M:iText.Kernel.Pdf.Xobject.PdfTransparencyGroup.SetIsolated(System.Boolean)">
            <summary>Determining the initial backdrop against which its stack is composited.</summary>
            <param name="isolated"/>
        </member>
        <member name="M:iText.Kernel.Pdf.Xobject.PdfTransparencyGroup.SetKnockout(System.Boolean)">
            <summary>Determining whether the objects within the stack are composited with one another or only with the group's backdrop.
                </summary>
            <param name="knockout"/>
        </member>
        <member name="T:iText.Kernel.Pdf.Xobject.PdfXObject">
            <summary>An abstract wrapper for supported types of XObject.</summary>
            <seealso cref="T:iText.Kernel.Pdf.Xobject.PdfFormXObject"/>
            <seealso cref="T:iText.Kernel.Pdf.Xobject.PdfImageXObject"/>
        </member>
        <member name="M:iText.Kernel.Pdf.Xobject.PdfXObject.MakeXObject(iText.Kernel.Pdf.PdfStream)">
            <summary>
            Create
            <see cref="T:iText.Kernel.Pdf.Xobject.PdfFormXObject"/>
            or
            <see cref="T:iText.Kernel.Pdf.Xobject.PdfImageXObject"/>
            by
            <see cref="T:iText.Kernel.Pdf.PdfStream"/>
            .
            </summary>
            <param name="stream">
            
            <see cref="T:iText.Kernel.Pdf.PdfStream"/>
            with either
            <see cref="F:iText.Kernel.Pdf.PdfName.Form"/>
            or
            <see cref="F:iText.Kernel.Pdf.PdfName.Image"/>
            
            <see cref="F:iText.Kernel.Pdf.PdfName.Subtype"/>
            </param>
            <returns>
            either
            <see cref="T:iText.Kernel.Pdf.Xobject.PdfFormXObject"/>
            or
            <see cref="T:iText.Kernel.Pdf.Xobject.PdfImageXObject"/>
            .
            </returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Xobject.PdfXObject.SetLayer(iText.Kernel.Pdf.Layer.IPdfOCG)">
            <summary>Sets the layer this XObject belongs to.</summary>
            <param name="layer">the layer this XObject belongs to.</param>
        </member>
        <member name="M:iText.Kernel.Pdf.Xobject.PdfXObject.GetWidth">
            <summary>Gets width of XObject.</summary>
            <returns>float value.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Xobject.PdfXObject.GetHeight">
            <summary>Gets height of XObject.</summary>
            <returns>float value.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.Pdf.Xobject.PdfXObject.AddAssociatedFile(iText.Kernel.Pdf.Filespec.PdfFileSpec)" -->
        <member name="M:iText.Kernel.Pdf.Xobject.PdfXObject.GetAssociatedFiles(System.Boolean)">
            <summary>Returns files associated with XObject.</summary>
            <returns>associated files array.</returns>
        </member>
        <member name="M:iText.Kernel.Pdf.Xobject.PdfXObject.IsWrappedObjectMustBeIndirect">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.Kernel.ProductInfo">
            <summary>Describes an iText 7 add on.</summary>
            <remarks>
            Describes an iText 7 add on. An add on should register itself to a PdfDocument object if it
            wants to be included in the debugging information.
            </remarks>
        </member>
        <member name="M:iText.Kernel.ProductInfo.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>Instantiates a ProductInfo object.</summary>
            <param name="name">name of the add on</param>
            <param name="major">major version of the add on</param>
            <param name="minor">minor version of the add on</param>
            <param name="patch">patch number of the add on</param>
            <param name="snapshot">whether the version of this add on is a snapshot build or not</param>
        </member>
        <member name="T:iText.Kernel.Utils.CompareTool">
            <summary>
            This class provides means to compare two PDF files both by content and visually
            and gives the report of their differences.
            </summary>
            <remarks>
            This class provides means to compare two PDF files both by content and visually
            and gives the report of their differences.
            <br /><br />
            For visual comparison it uses external tools: Ghostscript and ImageMagick, which
            should be installed on your machine. To allow CompareTool to use them, you need
            to pass either java properties or environment variables with names "gsExec" and
            "compareExec", which would contain the paths to the executables of correspondingly
            Ghostscript and ImageMagick tools.
            <br /><br />
            CompareTool class was mainly designed for the testing purposes of iText in order to
            ensure that the same code produces the same PDF document. For this reason you will
            often encounter such parameter names as "outDoc" and "cmpDoc" which stand for output
            document and document-for-comparison. The first one is viewed as the current result,
            and the second one is referred as normal or ideal result. OutDoc is compared to the
            ideal cmpDoc. Therefore all reports of the comparison are in the form: "Expected ...,
            but was ...". This should be interpreted in the following way: "expected" part stands
            for the content of the cmpDoc and "but was" part stands for the content of the outDoc.
            </remarks>
        </member>
        <member name="M:iText.Kernel.Utils.CompareTool.#ctor">
            <summary>Creates an instance of the CompareTool.</summary>
        </member>
        <member name="M:iText.Kernel.Utils.CompareTool.CompareByCatalog(iText.Kernel.Pdf.PdfDocument,iText.Kernel.Pdf.PdfDocument)">
            <summary>
            Compares two PDF documents by content starting from Catalog dictionary and then recursively comparing
            corresponding objects which are referenced from it.
            </summary>
            <remarks>
            Compares two PDF documents by content starting from Catalog dictionary and then recursively comparing
            corresponding objects which are referenced from it. You can roughly imagine it as depth-first traversal
            of the two trees that represent pdf objects structure of the documents.
            <br /><br />
            The main difference between this method and the
            <see cref="M:iText.Kernel.Utils.CompareTool.CompareByContent(System.String,System.String,System.String,System.String)"/>
            methods is the return value. This method returns a
            <see cref="T:iText.Kernel.Utils.CompareTool.CompareResult"/>
            class instance, which could be used
            in code, however compareByContent methods in case of the differences simply return String value, which could
            only be printed. Also, keep in mind that this method doesn't perform visual comparison of the documents.
            <br /><br />
            For more explanations about what is outDoc and cmpDoc see last paragraph of the
            <see cref="T:iText.Kernel.Utils.CompareTool"/>
            class description.
            </remarks>
            <param name="outDocument">the absolute path to the output file, which is to be compared to cmp-file.</param>
            <param name="cmpDocument">the absolute path to the cmp-file, which is to be compared to output file.</param>
            <returns>
            the report of comparison of two files in the form of the custom class instance.
            See
            <see cref="T:iText.Kernel.Utils.CompareTool.CompareResult"/>
            for more info.
            </returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.Utils.CompareTool.DisableCachedPagesComparison" -->
        <member name="M:iText.Kernel.Utils.CompareTool.SetCompareByContentErrorsLimit(System.Int32)">
            <summary>Sets the maximum errors count which will be returned as the result of the comparison.</summary>
            <param name="compareByContentMaxErrorCount">the errors count.</param>
            <returns>this CompareTool instance.</returns>
        </member>
        <member name="M:iText.Kernel.Utils.CompareTool.SetGenerateCompareByContentXmlReport(System.Boolean)">
            <summary>Enables or disables the generation of the comparison report in the form of the xml document.</summary>
            <remarks>
            Enables or disables the generation of the comparison report in the form of the xml document.
            <br />
            IMPORTANT NOTE: this flag affect only the comparison made by compareByContent methods!
            </remarks>
            <param name="generateCompareByContentXmlReport">true to enable xml report generation, false - to disable.</param>
            <returns>this CompareTool instance.</returns>
        </member>
        <member name="M:iText.Kernel.Utils.CompareTool.SetEventCountingMetaInfo(iText.Kernel.Counter.Event.IMetaInfo)">
            <summary>
            Sets
            <see cref="T:iText.Kernel.Counter.Event.IMetaInfo"/>
            info that will be used for both read and written documents creation.
            </summary>
            <param name="metaInfo">meta info to set</param>
        </member>
        <member name="M:iText.Kernel.Utils.CompareTool.EnableEncryptionCompare">
            <summary>Enables the comparison of the encryption properties of the documents.</summary>
            <remarks>
            Enables the comparison of the encryption properties of the documents. Encryption properties comparison
            results are returned along with all other comparison results.
            <br />
            IMPORTANT NOTE: this flag affect only the comparison made by compareByContent methods!
            </remarks>
            <returns>this CompareTool instance.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.Utils.CompareTool.GetOutReaderProperties" -->
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.Utils.CompareTool.GetCmpReaderProperties" -->
        <member name="M:iText.Kernel.Utils.CompareTool.CompareVisually(System.String,System.String,System.String,System.String)">
            <summary>Compares two documents visually.</summary>
            <remarks>
            Compares two documents visually. For the comparison two external tools are used: Ghostscript and ImageMagick.
            For more info about needed configuration for visual comparison process see
            <see cref="T:iText.Kernel.Utils.CompareTool"/>
            class description.
            <br />
            During comparison for every page of two documents an image file will be created in the folder specified by
            outPath absolute path. Then those page images will be compared and if there are any differences for some pages,
            another image file will be created with marked differences on it.
            </remarks>
            <param name="outPdf">the absolute path to the output file, which is to be compared to cmp-file.</param>
            <param name="cmpPdf">the absolute path to the cmp-file, which is to be compared to output file.</param>
            <param name="outPath">the absolute path to the folder, which will be used to store image files for visual comparison.
                </param>
            <param name="differenceImagePrefix">file name prefix for image files with marked differences if there is any.
                </param>
            <returns>string containing list of the pages that are visually different, or null if there are no visual differences.
                </returns>
            <exception cref="T:System.Exception"/>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Kernel.Utils.CompareTool.CompareVisually(System.String,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.Int32,System.Collections.Generic.IList{iText.Kernel.Geom.Rectangle}})">
            <summary>Compares two documents visually.</summary>
            <remarks>
            Compares two documents visually. For the comparison two external tools are used: Ghostscript and ImageMagick.
            For more info about needed configuration for visual comparison process see
            <see cref="T:iText.Kernel.Utils.CompareTool"/>
            class description.
            <br />
            During comparison for every page of two documents an image file will be created in the folder specified by
            outPath absolute path. Then those page images will be compared and if there are any differences for some pages,
            another image file will be created with marked differences on it.
            <br />
            It is possible to ignore certain areas of the document pages during visual comparison. This is useful for example
            in case if documents should be the same except certain page area with date on it. In this case, in the folder
            specified by the outPath, new pdf documents will be created with the black rectangles at the specified ignored
            areas, and visual comparison will be performed on these new documents.
            </remarks>
            <param name="outPdf">the absolute path to the output file, which is to be compared to cmp-file.</param>
            <param name="cmpPdf">the absolute path to the cmp-file, which is to be compared to output file.</param>
            <param name="outPath">the absolute path to the folder, which will be used to store image files for visual comparison.
                </param>
            <param name="differenceImagePrefix">file name prefix for image files with marked differences if there is any.
                </param>
            <param name="ignoredAreas">a map with one-based page numbers as keys and lists of ignored rectangles as values.
                </param>
            <returns>string containing list of the pages that are visually different, or null if there are no visual differences.
                </returns>
            <exception cref="T:System.Exception"/>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.Utils.CompareTool.CompareByContent(System.String,System.String,System.String)" -->
        <member name="M:iText.Kernel.Utils.CompareTool.CompareByContent(System.String,System.String,System.String,System.String)">
            <summary>
            Compares two PDF documents by content starting from page dictionaries and then recursively comparing
            corresponding objects which are referenced from them.
            </summary>
            <remarks>
            Compares two PDF documents by content starting from page dictionaries and then recursively comparing
            corresponding objects which are referenced from them. You can roughly imagine it as depth-first traversal
            of the two trees that represent pdf objects structure of the documents.
            <br /><br />
            Unlike
            <see cref="M:iText.Kernel.Utils.CompareTool.CompareByCatalog(iText.Kernel.Pdf.PdfDocument,iText.Kernel.Pdf.PdfDocument)"/>
            this method performs content comparison page by page
            and doesn't compare the tag structure, acroforms and all other things that doesn't belong to specific pages.
            <br />
            When comparison by content is finished, if any differences were found, visual comparison is automatically started.
            For more info see
            <see cref="M:iText.Kernel.Utils.CompareTool.CompareVisually(System.String,System.String,System.String,System.String)"/>
            .
            <br /><br />
            For more explanations about what is outPdf and cmpPdf see last paragraph of the
            <see cref="T:iText.Kernel.Utils.CompareTool"/>
            class description.
            </remarks>
            <param name="outPdf">the absolute path to the output file, which is to be compared to cmp-file.</param>
            <param name="cmpPdf">the absolute path to the cmp-file, which is to be compared to output file.</param>
            <param name="outPath">the absolute path to the folder, which will be used to store image files for visual comparison.
                </param>
            <param name="differenceImagePrefix">
            file name prefix for image files with marked visual differences if there is any;
            if it's set to null the prefix defaults to diff_%outPdfFileName%_ format.
            </param>
            <returns>
            string containing text report of the encountered content differences and also list of the pages that are
            visually different, or null if there are no content and therefore no visual differences.
            </returns>
            <exception cref="T:System.Exception">
            if the current thread is interrupted by another thread while it is waiting
            for ghostscript or imagemagic processes, then the wait is ended and an
            <see cref="T:System.Exception"/>
            is thrown.
            </exception>
            <exception cref="T:System.IO.IOException">
            is thrown if any of the input files are missing or any of the auxiliary files
            that are created during comparison process wasn't possible to be created.
            </exception>
        </member>
        <member name="M:iText.Kernel.Utils.CompareTool.CompareByContent(System.String,System.String,System.String,System.String,System.Byte[],System.Byte[])">
            <summary>This method overload is used to compare two encrypted PDF documents.</summary>
            <remarks>
            This method overload is used to compare two encrypted PDF documents. Document passwords are passed with
            outPass and cmpPass parameters.
            <br /><br />
            Compares two PDF documents by content starting from page dictionaries and then recursively comparing
            corresponding objects which are referenced from them. You can roughly imagine it as depth-first traversal
            of the two trees that represent pdf objects structure of the documents.
            <br /><br />
            Unlike
            <see cref="M:iText.Kernel.Utils.CompareTool.CompareByCatalog(iText.Kernel.Pdf.PdfDocument,iText.Kernel.Pdf.PdfDocument)"/>
            this method performs content comparison page by page
            and doesn't compare the tag structure, acroforms and all other things that doesn't belong to specific pages.
            <br />
            When comparison by content is finished, if any differences were found, visual comparison is automatically started.
            For more info see
            <see cref="M:iText.Kernel.Utils.CompareTool.CompareVisually(System.String,System.String,System.String,System.String)"/>
            .
            <br /><br />
            For more explanations about what is outPdf and cmpPdf see last paragraph of the
            <see cref="T:iText.Kernel.Utils.CompareTool"/>
            class description.
            </remarks>
            <param name="outPdf">the absolute path to the output file, which is to be compared to cmp-file.</param>
            <param name="cmpPdf">the absolute path to the cmp-file, which is to be compared to output file.</param>
            <param name="outPath">the absolute path to the folder, which will be used to store image files for visual comparison.
                </param>
            <param name="differenceImagePrefix">
            file name prefix for image files with marked visual differences if there is any;
            if it's set to null the prefix defaults to diff_%outPdfFileName%_ format.
            </param>
            <param name="outPass">password for the encrypted document specified by the outPdf absolute path.</param>
            <param name="cmpPass">password for the encrypted document specified by the cmpPdf absolute path.</param>
            <returns>
            string containing text report of the encountered content differences and also list of the pages that are
            visually different, or null if there are no content and therefore no visual differences.
            </returns>
            <exception cref="T:System.Exception"/>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Kernel.Utils.CompareTool.CompareByContent(System.String,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.Int32,System.Collections.Generic.IList{iText.Kernel.Geom.Rectangle}})">
            <summary>
            Compares two PDF documents by content starting from page dictionaries and then recursively comparing
            corresponding objects which are referenced from them.
            </summary>
            <remarks>
            Compares two PDF documents by content starting from page dictionaries and then recursively comparing
            corresponding objects which are referenced from them. You can roughly imagine it as depth-first traversal
            of the two trees that represent pdf objects structure of the documents.
            <br /><br />
            Unlike
            <see cref="M:iText.Kernel.Utils.CompareTool.CompareByCatalog(iText.Kernel.Pdf.PdfDocument,iText.Kernel.Pdf.PdfDocument)"/>
            this method performs content comparison page by page
            and doesn't compare the tag structure, acroforms and all other things that doesn't belong to specific pages.
            <br />
            When comparison by content is finished, if any differences were found, visual comparison is automatically started.
            For more info see
            <see cref="!:CompareVisually(System.String, System.String, System.String, System.String, System.Collections.Generic.IDictionary&lt;K, V&gt;)"/>
            .
            <br /><br />
            For more explanations about what is outPdf and cmpPdf see last paragraph of the
            <see cref="T:iText.Kernel.Utils.CompareTool"/>
            class description.
            </remarks>
            <param name="outPdf">the absolute path to the output file, which is to be compared to cmp-file.</param>
            <param name="cmpPdf">the absolute path to the cmp-file, which is to be compared to output file.</param>
            <param name="outPath">the absolute path to the folder, which will be used to store image files for visual comparison.
                </param>
            <param name="differenceImagePrefix">
            file name prefix for image files with marked visual differences if there is any;
            if it's set to null the prefix defaults to diff_%outPdfFileName%_ format.
            </param>
            <param name="ignoredAreas">a map with one-based page numbers as keys and lists of ignored rectangles as values.
                </param>
            <returns>
            string containing text report of the encountered content differences and also list of the pages that are
            visually different, or null if there are no content and therefore no visual differences.
            </returns>
            <exception cref="T:System.Exception"/>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Kernel.Utils.CompareTool.CompareByContent(System.String,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.Int32,System.Collections.Generic.IList{iText.Kernel.Geom.Rectangle}},System.Byte[],System.Byte[])">
            <summary>This method overload is used to compare two encrypted PDF documents.</summary>
            <remarks>
            This method overload is used to compare two encrypted PDF documents. Document passwords are passed with
            outPass and cmpPass parameters.
            <br /><br />
            Compares two PDF documents by content starting from page dictionaries and then recursively comparing
            corresponding objects which are referenced from them. You can roughly imagine it as depth-first traversal
            of the two trees that represent pdf objects structure of the documents.
            <br /><br />
            Unlike
            <see cref="M:iText.Kernel.Utils.CompareTool.CompareByCatalog(iText.Kernel.Pdf.PdfDocument,iText.Kernel.Pdf.PdfDocument)"/>
            this method performs content comparison page by page
            and doesn't compare the tag structure, acroforms and all other things that doesn't belong to specific pages.
            <br />
            When comparison by content is finished, if any differences were found, visual comparison is automatically started.
            For more info see
            <see cref="!:CompareVisually(System.String, System.String, System.String, System.String, System.Collections.Generic.IDictionary&lt;K, V&gt;)"/>
            .
            <br /><br />
            For more explanations about what is outPdf and cmpPdf see last paragraph of the
            <see cref="T:iText.Kernel.Utils.CompareTool"/>
            class description.
            </remarks>
            <param name="outPdf">the absolute path to the output file, which is to be compared to cmp-file.</param>
            <param name="cmpPdf">the absolute path to the cmp-file, which is to be compared to output file.</param>
            <param name="outPath">the absolute path to the folder, which will be used to store image files for visual comparison.
                </param>
            <param name="differenceImagePrefix">
            file name prefix for image files with marked visual differences if there is any;
            if it's set to null the prefix defaults to diff_%outPdfFileName%_ format.
            </param>
            <param name="ignoredAreas">a map with one-based page numbers as keys and lists of ignored rectangles as values.
                </param>
            <param name="outPass">password for the encrypted document specified by the outPdf absolute path.</param>
            <param name="cmpPass">password for the encrypted document specified by the cmpPdf absolute path.</param>
            <returns>
            string containing text report of the encountered content differences and also list of the pages that are
            visually different, or null if there are no content and therefore no visual differences.
            </returns>
            <exception cref="T:System.Exception">
            if the current thread is interrupted by another thread while it is waiting
            for ghostscript or imagemagic processes, then the wait is ended and an
            <see cref="T:System.Exception"/>
            is thrown.
            </exception>
            <exception cref="T:System.IO.IOException">
            is thrown if any of the input files are missing or any of the auxiliary files
            that are created during comparison process wasn't possible to be created.
            </exception>
        </member>
        <member name="M:iText.Kernel.Utils.CompareTool.CompareDictionaries(iText.Kernel.Pdf.PdfDictionary,iText.Kernel.Pdf.PdfDictionary)">
            <summary>Simple method that compares two given PdfDictionaries by content.</summary>
            <remarks>
            Simple method that compares two given PdfDictionaries by content. This is "deep" comparing, which means that all
            nested objects are also compared by content.
            </remarks>
            <param name="outDict">dictionary to compare.</param>
            <param name="cmpDict">dictionary to compare.</param>
            <returns>true if dictionaries are equal by content, otherwise false.</returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Kernel.Utils.CompareTool.CompareStreams(iText.Kernel.Pdf.PdfStream,iText.Kernel.Pdf.PdfStream)">
            <summary>Simple method that compares two given PdfStreams by content.</summary>
            <remarks>
            Simple method that compares two given PdfStreams by content. This is "deep" comparing, which means that all
            nested objects are also compared by content.
            </remarks>
            <param name="outStream">stream to compare.</param>
            <param name="cmpStream">stream to compare.</param>
            <returns>true if stream are equal by content, otherwise false.</returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Kernel.Utils.CompareTool.CompareArrays(iText.Kernel.Pdf.PdfArray,iText.Kernel.Pdf.PdfArray)">
            <summary>Simple method that compares two given PdfArrays by content.</summary>
            <remarks>
            Simple method that compares two given PdfArrays by content. This is "deep" comparing, which means that all
            nested objects are also compared by content.
            </remarks>
            <param name="outArray">array to compare.</param>
            <param name="cmpArray">array to compare.</param>
            <returns>true if arrays are equal by content, otherwise false.</returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Kernel.Utils.CompareTool.CompareNames(iText.Kernel.Pdf.PdfName,iText.Kernel.Pdf.PdfName)">
            <summary>Simple method that compares two given PdfNames.</summary>
            <param name="outName">name to compare.</param>
            <param name="cmpName">name to compare.</param>
            <returns>true if names are equal, otherwise false.</returns>
        </member>
        <member name="M:iText.Kernel.Utils.CompareTool.CompareNumbers(iText.Kernel.Pdf.PdfNumber,iText.Kernel.Pdf.PdfNumber)">
            <summary>Simple method that compares two given PdfNumbers.</summary>
            <param name="outNumber">number to compare.</param>
            <param name="cmpNumber">number to compare.</param>
            <returns>true if numbers are equal, otherwise false.</returns>
        </member>
        <member name="M:iText.Kernel.Utils.CompareTool.CompareStrings(iText.Kernel.Pdf.PdfString,iText.Kernel.Pdf.PdfString)">
            <summary>Simple method that compares two given PdfStrings.</summary>
            <param name="outString">string to compare.</param>
            <param name="cmpString">string to compare.</param>
            <returns>true if strings are equal, otherwise false.</returns>
        </member>
        <member name="M:iText.Kernel.Utils.CompareTool.CompareBooleans(iText.Kernel.Pdf.PdfBoolean,iText.Kernel.Pdf.PdfBoolean)">
            <summary>Simple method that compares two given PdfBooleans.</summary>
            <param name="outBoolean">boolean to compare.</param>
            <param name="cmpBoolean">boolean to compare.</param>
            <returns>true if booleans are equal, otherwise false.</returns>
        </member>
        <member name="M:iText.Kernel.Utils.CompareTool.CompareXmp(System.String,System.String)">
            <summary>Compares xmp metadata of the two given PDF documents.</summary>
            <param name="outPdf">the absolute path to the output file, which xmp is to be compared to cmp-file.</param>
            <param name="cmpPdf">the absolute path to the cmp-file, which xmp is to be compared to output file.</param>
            <returns>text report of the xmp differences, or null if there are no differences.</returns>
        </member>
        <member name="M:iText.Kernel.Utils.CompareTool.CompareXmp(System.String,System.String,System.Boolean)">
            <summary>Compares xmp metadata of the two given PDF documents.</summary>
            <param name="outPdf">the absolute path to the output file, which xmp is to be compared to cmp-file.</param>
            <param name="cmpPdf">the absolute path to the cmp-file, which xmp is to be compared to output file.</param>
            <param name="ignoreDateAndProducerProperties">
            true, if to ignore differences in date or producer xmp metadata
            properties.
            </param>
            <returns>text report of the xmp differences, or null if there are no differences.</returns>
        </member>
        <member name="M:iText.Kernel.Utils.CompareTool.CompareXmls(System.Byte[],System.Byte[])">
            <summary>Utility method that provides simple comparison of the two xml files stored in byte arrays.</summary>
            <param name="xml1">first xml file data to compare.</param>
            <param name="xml2">second xml file data to compare.</param>
            <returns>true if xml structures are identical, false otherwise.</returns>
            <exception cref="!:Javax.Xml.Parsers.ParserConfigurationException"/>
            <exception cref="!:Org.Xml.Sax.SAXException"/>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Kernel.Utils.CompareTool.CompareXmls(System.String,System.String)">
            <summary>Utility method that provides simple comparison of the two xml files.</summary>
            <param name="xmlFilePath1">absolute path to the first xml file to compare.</param>
            <param name="xmlFilePath2">absolute path to the second xml file to compare.</param>
            <returns>true if xml structures are identical, false otherwise.</returns>
            <exception cref="!:Javax.Xml.Parsers.ParserConfigurationException"/>
            <exception cref="!:Org.Xml.Sax.SAXException"/>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Kernel.Utils.CompareTool.CompareDocumentInfo(System.String,System.String,System.Byte[],System.Byte[])">
            <summary>This method overload is used to compare two encrypted PDF documents.</summary>
            <remarks>
            This method overload is used to compare two encrypted PDF documents. Document passwords are passed with
            outPass and cmpPass parameters.
            <br /><br />
            Compares document info dictionaries of two pdf documents.
            </remarks>
            <param name="outPdf">the absolute path to the output file, which info is to be compared to cmp-file info.</param>
            <param name="cmpPdf">the absolute path to the cmp-file, which info is to be compared to output file info.</param>
            <param name="outPass">password for the encrypted document specified by the outPdf absolute path.</param>
            <param name="cmpPass">password for the encrypted document specified by the cmpPdf absolute path.</param>
            <returns>text report of the differences in documents infos.</returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Kernel.Utils.CompareTool.CompareDocumentInfo(System.String,System.String)">
            <summary>Compares document info dictionaries of two pdf documents.</summary>
            <param name="outPdf">the absolute path to the output file, which info is to be compared to cmp-file info.</param>
            <param name="cmpPdf">the absolute path to the cmp-file, which info is to be compared to output file info.</param>
            <returns>text report of the differences in documents infos.</returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Kernel.Utils.CompareTool.CompareLinkAnnotations(System.String,System.String)">
            <summary>Compares if two documents has identical link annotations on corresponding pages.</summary>
            <param name="outPdf">the absolute path to the output file, which links are to be compared to cmp-file links.
                </param>
            <param name="cmpPdf">the absolute path to the cmp-file, which links are to be compared to output file links.
                </param>
            <returns>text report of the differences in documents links.</returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Kernel.Utils.CompareTool.CompareTagStructures(System.String,System.String)">
            <summary>Compares tag structures of the two PDF documents.</summary>
            <remarks>
            Compares tag structures of the two PDF documents.
            <br />
            This method creates xml files in the same folder with outPdf file. These xml files contain documents tag structures
            converted into the xml structure. These xml files are compared if they are equal.
            </remarks>
            <param name="outPdf">the absolute path to the output file, which tags are to be compared to cmp-file tags.
                </param>
            <param name="cmpPdf">the absolute path to the cmp-file, which tags are to be compared to output file tags.
                </param>
            <returns>text report of the differences in documents tags.</returns>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="!:Javax.Xml.Parsers.ParserConfigurationException"/>
            <exception cref="!:Org.Xml.Sax.SAXException"/>
        </member>
        <member name="M:iText.Kernel.Utils.CompareTool.CompareVisually(System.String,System.String,System.Collections.Generic.IDictionary{System.Int32,System.Collections.Generic.IList{iText.Kernel.Geom.Rectangle}})">
            <exception cref="T:System.Exception"/>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Kernel.Utils.CompareTool.CompareVisually(System.String,System.String,System.Collections.Generic.IDictionary{System.Int32,System.Collections.Generic.IList{iText.Kernel.Geom.Rectangle}},System.Collections.Generic.IList{System.Int32})">
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.Exception"/>
        </member>
        <member name="M:iText.Kernel.Utils.CompareTool.CompareImagesOfPdfs(System.String,System.String,System.Collections.Generic.IList{System.Int32})">
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.Exception"/>
        </member>
        <member name="M:iText.Kernel.Utils.CompareTool.CreateIgnoredAreasPdfs(System.String,System.Collections.Generic.IDictionary{System.Int32,System.Collections.Generic.IList{iText.Kernel.Geom.Rectangle}})">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Kernel.Utils.CompareTool.RunGhostScriptImageGeneration(System.String)">
            <summary>Runs ghostscript to create images of pdfs.</summary>
            <param name="outPath">Path to the output folder.</param>
            <exception cref="T:iText.Kernel.Utils.CompareTool.CompareToolExecutionException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.Exception"/>
        </member>
        <member name="M:iText.Kernel.Utils.CompareTool.CompareByContent(System.String,System.String,System.Collections.Generic.IDictionary{System.Int32,System.Collections.Generic.IList{iText.Kernel.Geom.Rectangle}})">
            <exception cref="T:System.Exception"/>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Kernel.Utils.CompareTool.CompareVisuallyAndCombineReports(System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.Int32,System.Collections.Generic.IList{iText.Kernel.Geom.Rectangle}},System.Collections.Generic.IList{System.Int32})">
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.Exception"/>
        </member>
        <member name="M:iText.Kernel.Utils.CompareTool.CompareStreams(System.IO.Stream,System.IO.Stream)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Kernel.Utils.CompareTool.FindBytesDifference(System.Byte[],System.Byte[],System.Text.StringBuilder)">
            <returns>first difference offset</returns>
        </member>
        <member name="T:iText.Kernel.Utils.CompareTool.CompareResult">
            <summary>Class containing results of the comparison of two documents.</summary>
        </member>
        <member name="M:iText.Kernel.Utils.CompareTool.CompareResult.#ctor(iText.Kernel.Utils.CompareTool,System.Int32)">
            <summary>Creates new empty instance of CompareResult with given limit of difference messages.</summary>
            <param name="messageLimit">maximum number of difference messages handled by this CompareResult.</param>
        </member>
        <member name="M:iText.Kernel.Utils.CompareTool.CompareResult.IsOk">
            <summary>Is used to define if documents are considered equal after comparison.</summary>
            <returns>true if documents are equal, false otherwise.</returns>
        </member>
        <member name="M:iText.Kernel.Utils.CompareTool.CompareResult.GetErrorCount">
            <summary>Returns number of differences between two documents met during comparison.</summary>
            <returns>number of differences.</returns>
        </member>
        <member name="M:iText.Kernel.Utils.CompareTool.CompareResult.GetReport">
            <summary>Converts this CompareResult into text form.</summary>
            <returns>text report of the differences between two documents.</returns>
        </member>
        <member name="M:iText.Kernel.Utils.CompareTool.CompareResult.GetDifferences">
            <summary>
            Returns map with
            <see cref="T:iText.Kernel.Utils.CompareTool.ObjectPath"/>
            as keys and difference descriptions as values.
            </summary>
            <returns>differences map which could be used to find in the document objects that are different.</returns>
        </member>
        <member name="M:iText.Kernel.Utils.CompareTool.CompareResult.WriteReportToXml(System.IO.Stream)">
            <summary>Converts this CompareResult into xml form.</summary>
            <param name="stream">output stream to which xml report will be written.</param>
            <exception cref="!:Javax.Xml.Parsers.ParserConfigurationException"/>
            <exception cref="!:Javax.Xml.Transform.TransformerException"/>
        </member>
        <!-- Badly formed XML comment ignored for member "T:iText.Kernel.Utils.CompareTool.ObjectPath" -->
        <member name="M:iText.Kernel.Utils.CompareTool.ObjectPath.#ctor">
            <summary>Creates empty ObjectPath.</summary>
        </member>
        <member name="M:iText.Kernel.Utils.CompareTool.ObjectPath.#ctor(iText.Kernel.Pdf.PdfIndirectReference,iText.Kernel.Pdf.PdfIndirectReference)">
            <summary>Creates ObjectPath with corresponding base objects in two documents.</summary>
            <param name="baseCmpObject">base object in cmp document.</param>
            <param name="baseOutObject">base object in out document.</param>
        </member>
        <member name="M:iText.Kernel.Utils.CompareTool.ObjectPath.ResetDirectPath(iText.Kernel.Pdf.PdfIndirectReference,iText.Kernel.Pdf.PdfIndirectReference)">
            <summary>
            Creates a new ObjectPath instance with two new given base objects, which are supposed to be nested in the base
            objects of the current instance of the ObjectPath.
            </summary>
            <remarks>
            Creates a new ObjectPath instance with two new given base objects, which are supposed to be nested in the base
            objects of the current instance of the ObjectPath. This method is used to avoid infinite loop in case of
            circular references in pdf documents objects structure.
            <br />
            Basically, this method creates copy of the current ObjectPath instance, but resets information of the direct
            paths, and also adds current ObjectPath instance base objects to the indirect references chain that denotes
            a path to the new base objects.
            </remarks>
            <param name="baseCmpObject">new base object in cmp document.</param>
            <param name="baseOutObject">new base object in out document.</param>
            <returns>
            new ObjectPath instance, which stores chain of the indirect references which were already met to get
            to the new base objects.
            </returns>
        </member>
        <member name="M:iText.Kernel.Utils.CompareTool.ObjectPath.IsComparing(iText.Kernel.Pdf.PdfIndirectReference,iText.Kernel.Pdf.PdfIndirectReference)">
            <summary>This method is used to define if given objects were already met in the path to the current base objects.
                </summary>
            <remarks>
            This method is used to define if given objects were already met in the path to the current base objects.
            If this method returns true it basically means that we found a loop in the objects structure and that we
            already compared these objects.
            </remarks>
            <param name="cmpObject">cmp object to check if it was already met in base objects path.</param>
            <param name="outObject">out object to check if it was already met in base objects path.</param>
            <returns>true if given objects are contained in the path and therefore were already compared.</returns>
        </member>
        <member name="M:iText.Kernel.Utils.CompareTool.ObjectPath.PushArrayItemToPath(System.Int32)">
            <summary>Adds array item to the direct path.</summary>
            <remarks>
            Adds array item to the direct path. See
            <see cref="T:iText.Kernel.Utils.CompareTool.ObjectPath.ArrayPathItem"/>
            .
            </remarks>
            <param name="index">index in the array of the direct object to be compared.</param>
        </member>
        <member name="M:iText.Kernel.Utils.CompareTool.ObjectPath.PushDictItemToPath(iText.Kernel.Pdf.PdfName)">
            <summary>Adds dictionary item to the direct path.</summary>
            <remarks>
            Adds dictionary item to the direct path. See
            <see cref="T:iText.Kernel.Utils.CompareTool.ObjectPath.DictPathItem"/>
            .
            </remarks>
            <param name="key">key in the dictionary to which corresponds direct object to be compared.</param>
        </member>
        <member name="M:iText.Kernel.Utils.CompareTool.ObjectPath.PushOffsetToPath(System.Int32)">
            <summary>Adds offset item to the direct path.</summary>
            <remarks>
            Adds offset item to the direct path. See
            <see cref="T:iText.Kernel.Utils.CompareTool.ObjectPath.OffsetPathItem"/>
            .
            </remarks>
            <param name="offset">offset to the specific byte in the stream that is compared.</param>
        </member>
        <member name="M:iText.Kernel.Utils.CompareTool.ObjectPath.Pop">
            <summary>Removes the last path item from the direct path.</summary>
        </member>
        <member name="M:iText.Kernel.Utils.CompareTool.ObjectPath.GetLocalPath">
            <summary>
            Gets local (or direct) path that denotes sequence of the path items from base object to the comparing
            direct object.
            </summary>
            <returns>direct path to the comparing object.</returns>
        </member>
        <member name="M:iText.Kernel.Utils.CompareTool.ObjectPath.GetIndirectPath">
            <summary>
            Gets indirect path which denotes sequence of the indirect references that were passed in comparing process
            to get to the current base objects.
            </summary>
            <returns>indirect path to the current base objects.</returns>
        </member>
        <member name="M:iText.Kernel.Utils.CompareTool.ObjectPath.GetBaseCmpObject">
            <returns>current base object in the cmp document.</returns>
        </member>
        <member name="M:iText.Kernel.Utils.CompareTool.ObjectPath.GetBaseOutObject">
            <returns>current base object in the out document.</returns>
        </member>
        <member name="M:iText.Kernel.Utils.CompareTool.ObjectPath.ToXmlNode(System.Xml.XmlDocument)">
            <summary>Creates an xml node that describes a direct path stored in this ObjectPath instance.</summary>
            <param name="document">xml document, to which this xml node will be added.</param>
            <returns>an xml node describing direct path.</returns>
        </member>
        <member name="M:iText.Kernel.Utils.CompareTool.ObjectPath.ToString">
            <returns>string representation of the direct path stored in this ObjectPath instance.</returns>
        </member>
        <member name="T:iText.Kernel.Utils.CompareTool.ObjectPath.IndirectPathItem">
            <summary>
            An item in the indirect path (see
            <see cref="T:iText.Kernel.Utils.CompareTool.ObjectPath"/>
            . It encapsulates two corresponding objects from the two
            comparing documents that were met to get to the path base objects during comparing process.
            </summary>
        </member>
        <member name="M:iText.Kernel.Utils.CompareTool.ObjectPath.IndirectPathItem.#ctor(iText.Kernel.Utils.CompareTool.ObjectPath,iText.Kernel.Pdf.PdfIndirectReference,iText.Kernel.Pdf.PdfIndirectReference)">
            <summary>Creates IndirectPathItem instance for two corresponding objects from two comparing documents.</summary>
            <param name="cmpObject">an object from the cmp document.</param>
            <param name="outObject">an object from the out document.</param>
        </member>
        <member name="M:iText.Kernel.Utils.CompareTool.ObjectPath.IndirectPathItem.GetCmpObject">
            <returns>an object from the cmp object that was met to get to the path base objects during comparing process.
                </returns>
        </member>
        <member name="M:iText.Kernel.Utils.CompareTool.ObjectPath.IndirectPathItem.GetOutObject">
            <returns>an object from the out object that was met to get to the path base objects during comparing process.
                </returns>
        </member>
        <member name="T:iText.Kernel.Utils.CompareTool.ObjectPath.LocalPathItem">
            <summary>
            An abstract class for the items in the direct path (see
            <see cref="T:iText.Kernel.Utils.CompareTool.ObjectPath"/>
            .
            </summary>
        </member>
        <member name="M:iText.Kernel.Utils.CompareTool.ObjectPath.LocalPathItem.ToXmlNode(System.Xml.XmlDocument)">
            <summary>Creates an xml node that describes this direct path item.</summary>
            <param name="document">xml document, to which this xml node will be added.</param>
            <returns>an xml node describing direct path item.</returns>
        </member>
        <member name="T:iText.Kernel.Utils.CompareTool.ObjectPath.DictPathItem">
            <summary>
            Direct path item (see
            <see cref="T:iText.Kernel.Utils.CompareTool.ObjectPath"/>
            , which describes transition to the
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            entry which value is now a currently comparing direct object.
            </summary>
        </member>
        <member name="M:iText.Kernel.Utils.CompareTool.ObjectPath.DictPathItem.#ctor(iText.Kernel.Pdf.PdfName)">
            <summary>
            Creates an instance of the
            <see cref="T:iText.Kernel.Utils.CompareTool.ObjectPath.DictPathItem"/>
            .
            </summary>
            <param name="key">
            the key which defines to which entry of the
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            the transition was performed.
            </param>
        </member>
        <member name="M:iText.Kernel.Utils.CompareTool.ObjectPath.DictPathItem.GetKey">
            <summary>
            The key which defines to which entry of the
            <see cref="T:iText.Kernel.Pdf.PdfDictionary"/>
            the transition was performed.
            See
            <see cref="T:iText.Kernel.Utils.CompareTool.ObjectPath.DictPathItem"/>
            for more info.
            </summary>
            <returns>
            a
            <see cref="T:iText.Kernel.Pdf.PdfName"/>
            which is the key which defines to which entry of the dictionary
            the transition was performed.
            </returns>
        </member>
        <member name="T:iText.Kernel.Utils.CompareTool.ObjectPath.ArrayPathItem">
            <summary>
            Direct path item (see
            <see cref="T:iText.Kernel.Utils.CompareTool.ObjectPath"/>
            , which describes transition to the
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            element which is now a currently comparing direct object.
            </summary>
        </member>
        <member name="M:iText.Kernel.Utils.CompareTool.ObjectPath.ArrayPathItem.#ctor(System.Int32)">
            <summary>
            Creates an instance of the
            <see cref="T:iText.Kernel.Utils.CompareTool.ObjectPath.ArrayPathItem"/>
            .
            </summary>
            <param name="index">
            the index which defines element of the
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            to which
            the transition was performed.
            </param>
        </member>
        <member name="M:iText.Kernel.Utils.CompareTool.ObjectPath.ArrayPathItem.GetIndex">
            <summary>
            The index which defines element of the
            <see cref="T:iText.Kernel.Pdf.PdfArray"/>
            to which the transition was performed.
            See
            <see cref="T:iText.Kernel.Utils.CompareTool.ObjectPath.ArrayPathItem"/>
            for more info.
            </summary>
            <returns>the index which defines element of the array to which the transition was performed</returns>
        </member>
        <member name="T:iText.Kernel.Utils.CompareTool.ObjectPath.OffsetPathItem">
            <summary>
            Direct path item (see
            <see cref="T:iText.Kernel.Utils.CompareTool.ObjectPath"/>
            , which describes transition to the
            specific position in
            <see cref="T:iText.Kernel.Pdf.PdfStream"/>
            .
            </summary>
        </member>
        <member name="M:iText.Kernel.Utils.CompareTool.ObjectPath.OffsetPathItem.#ctor(System.Int32)">
            <summary>
            Creates an instance of the
            <see cref="T:iText.Kernel.Utils.CompareTool.ObjectPath.OffsetPathItem"/>
            .
            </summary>
            <param name="offset">
            bytes offset to the specific position in
            <see cref="T:iText.Kernel.Pdf.PdfStream"/>
            .
            </param>
        </member>
        <member name="M:iText.Kernel.Utils.CompareTool.ObjectPath.OffsetPathItem.GetOffset">
            <summary>
            The bytes offset of the stream which defines specific position in the
            <see cref="T:iText.Kernel.Pdf.PdfStream"/>
            , to which transition
            was performed.
            </summary>
            <returns>an integer defining bytes offset to the specific position in stream.</returns>
        </member>
        <member name="T:iText.Kernel.Utils.PageRange">
            <summary>
            Class representing a page range, for instance a page range can contain pages
            5, then pages 10 through 15, then page 18, then page 21 and so on.
            </summary>
        </member>
        <member name="M:iText.Kernel.Utils.PageRange.#ctor">
            <summary>
            Constructs an empty
            <see cref="T:iText.Kernel.Utils.PageRange"/>
            instance.
            </summary>
        </member>
        <member name="M:iText.Kernel.Utils.PageRange.#ctor(System.String)">
            <summary>
            Constructs a
            <see cref="T:iText.Kernel.Utils.PageRange"/>
            instance from a range in a string form,
            for example: "1-12, 15, 45-66". More advanced forms are also available,
            for example:
            - "3-" to indicate from page 3 to the last page
            - "odd" for all odd pages
            - "even" for all even pages
            - "3- &amp; odd" for all odd pages starting from page 3
            A complete example for pages 1 to 5, page 8 then odd pages starting from
            page 9: "1-5, 8, odd &amp; 9-".
            </summary>
            <param name="pageRange">a String of page ranges</param>
        </member>
        <member name="M:iText.Kernel.Utils.PageRange.AddPageRangePart(iText.Kernel.Utils.PageRange.IPageRangePart)">
            <summary>Adds any page range part to this page range.</summary>
            <remarks>
            Adds any page range part to this page range. Users may define and plug in
            custom implementations for behavior not found in the standard library.
            </remarks>
            <param name="part">
            a custom implementation of
            <see cref="T:iText.Kernel.Utils.PageRange.IPageRangePart"/>
            </param>
            <returns>this range, already modified</returns>
        </member>
        <member name="M:iText.Kernel.Utils.PageRange.AddPageSequence(System.Int32,System.Int32)">
            <summary>Adds a page sequence to the range.</summary>
            <param name="startPageNumber">the starting page number of the sequence</param>
            <param name="endPageNumber">the finishing page number of the sequence</param>
            <returns>this range, already modified</returns>
        </member>
        <member name="M:iText.Kernel.Utils.PageRange.AddSinglePage(System.Int32)">
            <summary>Adds a single page to the range.</summary>
            <param name="pageNumber">the page number to add</param>
            <returns>this range, already modified</returns>
        </member>
        <member name="M:iText.Kernel.Utils.PageRange.GetQualifyingPageNums(System.Int32)">
            <summary>Gets the list of pages that have been added to the range so far.</summary>
            <param name="nbPages">
            number of pages of the document to get the pages, to list
            only the pages eligible for this document.
            </param>
            <returns>
            the list containing page numbers added to the range matching this
            document
            </returns>
        </member>
        <member name="M:iText.Kernel.Utils.PageRange.IsPageInRange(System.Int32)">
            <summary>Checks if a given page is present in the range built so far.</summary>
            <param name="pageNumber">the page number to check</param>
            <returns>
            <code>true</code> if the page is present in this range,
            <code>false</code> otherwise
            </returns>
        </member>
        <member name="M:iText.Kernel.Utils.PageRange.Equals(System.Object)">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.Kernel.Utils.PageRange.GetHashCode">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.Kernel.Utils.PageRange.IPageRangePart">
            <summary>Inner interface for range parts definition</summary>
        </member>
        <member name="T:iText.Kernel.Utils.PageRange.PageRangePartSingle">
            <summary>Class for range part containing a single page</summary>
        </member>
        <member name="M:iText.Kernel.Utils.PageRange.PageRangePartSingle.Equals(System.Object)">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.Kernel.Utils.PageRange.PageRangePartSingle.GetHashCode">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.Kernel.Utils.PageRange.PageRangePartSequence">
            <summary>
            Class for range part containing a range of pages represented by a start
            and an end page
            </summary>
        </member>
        <member name="M:iText.Kernel.Utils.PageRange.PageRangePartSequence.Equals(System.Object)">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.Kernel.Utils.PageRange.PageRangePartSequence.GetHashCode">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.Kernel.Utils.PageRange.PageRangePartAfter">
            <summary>
            Class for range part containing a range of pages for all pages after a
            given start page
            </summary>
        </member>
        <member name="M:iText.Kernel.Utils.PageRange.PageRangePartAfter.Equals(System.Object)">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.Kernel.Utils.PageRange.PageRangePartAfter.GetHashCode">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.Kernel.Utils.PageRange.PageRangePartOddEven">
            <summary>Class for range part for all even or odd pages.</summary>
            <remarks>
            Class for range part for all even or odd pages. The class contains only 2
            instances, one for odd pages and one for even pages.
            </remarks>
        </member>
        <member name="M:iText.Kernel.Utils.PageRange.PageRangePartOddEven.Equals(System.Object)">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.Kernel.Utils.PageRange.PageRangePartOddEven.GetHashCode">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:iText.Kernel.Utils.PageRange.PageRangePartAnd">
            <summary>Class for range part based on several range parts.</summary>
            <remarks>
            Class for range part based on several range parts. A 'and' is performed
            between all conditions. This allows for example to configure odd pages
            between page 19 and 25.
            </remarks>
        </member>
        <member name="M:iText.Kernel.Utils.PageRange.PageRangePartAnd.Equals(System.Object)">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.Kernel.Utils.PageRange.PageRangePartAnd.GetHashCode">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:iText.Kernel.Utils.PdfMerger.#ctor(iText.Kernel.Pdf.PdfDocument)">
            <summary>This class is used to merge a number of existing documents into one.</summary>
            <remarks>
            This class is used to merge a number of existing documents into one. By default, if source document
            contains tags and outlines, they will be also copied to the destination document.
            </remarks>
            <param name="pdfDocument">the document into which source documents will be merged.</param>
        </member>
        <member name="M:iText.Kernel.Utils.PdfMerger.#ctor(iText.Kernel.Pdf.PdfDocument,System.Boolean,System.Boolean)">
            <summary>This class is used to merge a number of existing documents into one.</summary>
            <param name="pdfDocument">the document into which source documents will be merged.</param>
            <param name="mergeTags">
            if true, then tags from the source document are copied even if destination document is not set as
            tagged. Note, that if false, tag structure is still could be copied if the destination document
            is explicitly marked as tagged with
            <see cref="M:iText.Kernel.Pdf.PdfDocument.SetTagged"/>
            .
            </param>
            <param name="mergeOutlines">
            if true, then outlines from the source document are copied even if in destination document
            outlines are not initialized. Note, that if false, outlines are still could be copied if the
            destination document outlines were explicitly initialized with
            <see cref="M:iText.Kernel.Pdf.PdfDocument.InitializeOutlines"/>
            .
            </param>
        </member>
        <member name="M:iText.Kernel.Utils.PdfMerger.SetCloseSourceDocuments(System.Boolean)">
            <summary>
            If set to <i>true</i> then passed to the <i>
            <c>PdfMerger#merge</c>
            </i> method source documents will be closed
            immediately after merging specified pages into current document. If <i>false</i> - PdfDocuments are left open.
            Default value - <i>false</i>.
            </summary>
            <param name="closeSourceDocuments">should be true to close pdf documents in merge method.</param>
            <returns>
            this
            <c>PdfMerger</c>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Utils.PdfMerger.Merge(iText.Kernel.Pdf.PdfDocument,System.Int32,System.Int32)">
            <summary>This method merges pages from the source document to the current one.</summary>
            <remarks>
            This method merges pages from the source document to the current one.
            <br /><br />
            If <i>closeSourceDocuments</i> flag is set to <i>true</i> (see
            <see cref="M:iText.Kernel.Utils.PdfMerger.SetCloseSourceDocuments(System.Boolean)"/>
            ),
            passed
            <c>PdfDocument</c>
            will be closed after pages are merged.
            </remarks>
            <param name="from">- document, from which pages will be copied.</param>
            <param name="fromPage">- start page in the range of pages to be copied.</param>
            <param name="toPage">- end (inclusive) page in the range to be copied</param>
            <returns>
            this
            <c>PdfMerger</c>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Utils.PdfMerger.Merge(iText.Kernel.Pdf.PdfDocument,System.Collections.Generic.IList{System.Int32})">
            <summary>This method merges pages from the source document to the current one.</summary>
            <remarks>
            This method merges pages from the source document to the current one.
            <br /><br />
            If <i>closeSourceDocuments</i> flag is set to <i>true</i> (see
            <see cref="M:iText.Kernel.Utils.PdfMerger.SetCloseSourceDocuments(System.Boolean)"/>
            ),
            passed
            <c>PdfDocument</c>
            will be closed after pages are merged.
            </remarks>
            <param name="from">- document, from which pages will be copied.</param>
            <param name="pages">- List of numbers of pages which will be copied.</param>
            <returns>
            this
            <c>PdfMerger</c>
            instance.
            </returns>
        </member>
        <member name="M:iText.Kernel.Utils.PdfMerger.Close">
            <summary>Closes the current document.</summary>
            <remarks>
            Closes the current document. It is a complete equivalent of calling
            <c>PdfDocument#close</c>
            on the PdfDocument
            passed to the constructor of this PdfMerger instance. This means that it is enough to call <i>close</i> either on
            passed PdfDocument or on this PdfMerger instance, but there is no need to call them both.
            </remarks>
        </member>
        <member name="T:iText.Kernel.Utils.PdfResourceCounter">
            <summary>
            This class can be used to count the number of bytes needed when copying
            pages from an existing PDF into a newly created PDF.
            </summary>
        </member>
        <member name="F:iText.Kernel.Utils.PdfResourceCounter.resources">
            <summary>A map of the resources that are already taken into account</summary>
        </member>
        <member name="M:iText.Kernel.Utils.PdfResourceCounter.#ctor(iText.Kernel.Pdf.PdfObject)">
            <summary>
            Creates a PdfResourceCounter instance to be used to count the resources
            needed for either a page (in this case pass a page dictionary) or the
            trailer (root and info dictionary) of a PDF file.
            </summary>
            <param name="obj">the object we want to examine</param>
        </member>
        <member name="M:iText.Kernel.Utils.PdfResourceCounter.Process(iText.Kernel.Pdf.PdfObject)">
            <summary>Processes an object.</summary>
            <remarks>
            Processes an object. If the object is indirect, it is added to the
            list of resources. If not, it is just processed.
            </remarks>
            <param name="obj">the object to process</param>
        </member>
        <member name="M:iText.Kernel.Utils.PdfResourceCounter.LoopOver(iText.Kernel.Pdf.PdfObject)">
            <summary>
            In case an object is an array, a dictionary or a stream,
            we need to loop over the entries and process them one by one.
            </summary>
            <param name="obj">the object to examine</param>
        </member>
        <member name="M:iText.Kernel.Utils.PdfResourceCounter.GetResources">
            <summary>Returns a map with the resources.</summary>
            <returns>the resources</returns>
        </member>
        <member name="M:iText.Kernel.Utils.PdfResourceCounter.GetLength(System.Collections.Generic.IDictionary{System.Int32,iText.Kernel.Pdf.PdfObject})">
            <summary>
            Returns the resources needed for the object that was used to create
            this PdfResourceCounter.
            </summary>
            <remarks>
            Returns the resources needed for the object that was used to create
            this PdfResourceCounter. If you pass a Map with resources that were
            already used by other objects, these objects will not be taken into
            account.
            </remarks>
            <param name="res">The resources that can be excluded when counting the bytes.</param>
            <returns>The number of bytes needed for an object.</returns>
        </member>
        <member name="M:iText.Kernel.Utils.PdfSplitter.#ctor(iText.Kernel.Pdf.PdfDocument)">
            <summary>Creates a new instance of PdfSplitter class.</summary>
            <param name="pdfDocument">the document to be split.</param>
        </member>
        <member name="M:iText.Kernel.Utils.PdfSplitter.SetEventCountingMetaInfo(iText.Kernel.Counter.Event.IMetaInfo)">
            <summary>
            Sets the
            <see cref="T:iText.Kernel.Counter.Event.IMetaInfo"/>
            that will be used during
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            creation.
            </summary>
            <param name="metaInfo">meta info to set</param>
        </member>
        <member name="M:iText.Kernel.Utils.PdfSplitter.SetPreserveTagged(System.Boolean)">
            <summary>If original document is tagged, then by default all resultant document will also be tagged.</summary>
            <remarks>
            If original document is tagged, then by default all resultant document will also be tagged.
            This could be changed with this flag - if set to false, resultant documents will be not tagged, even if
            original document is tagged.
            </remarks>
        </member>
        <member name="M:iText.Kernel.Utils.PdfSplitter.SetPreserveOutlines(System.Boolean)">
            <summary>If original document has outlines, then by default all resultant document will also have outlines.
                </summary>
            <remarks>
            If original document has outlines, then by default all resultant document will also have outlines.
            This could be changed with this flag - if set to false, resultant documents won't contain outlines, even if
            original document had them.
            </remarks>
        </member>
        <member name="M:iText.Kernel.Utils.PdfSplitter.SplitBySize(System.Int64)">
            <summary>Splits the document basing on the given size.</summary>
            <param name="size"><strong>Preferred</strong> size for splitting.</param>
            <returns>
            The documents which the source document was split into.
            Be warned that these documents are not closed.
            </returns>
        </member>
        <member name="M:iText.Kernel.Utils.PdfSplitter.SplitByPageNumbers(System.Collections.Generic.IList{System.Int32},iText.Kernel.Utils.PdfSplitter.IDocumentReadyListener)">
            <summary>Splits the document by page numbers.</summary>
            <param name="pageNumbers">
            the numbers of pages from which another document is to be started.
            If the first element is not 1, then 1 is implied (i.e. the first split document will start from page 1 in any case).
            </param>
            <param name="documentReady">
            the event listener which is called when another document is ready.
            You can close this document in this listener, for instance.
            </param>
        </member>
        <member name="M:iText.Kernel.Utils.PdfSplitter.SplitByPageNumbers(System.Collections.Generic.IList{System.Int32})">
            <summary>Splits the document by page numbers.</summary>
            <param name="pageNumbers">
            the numbers of pages from which another document is to be started.
            If the first element is not 1, then 1 is implied (i.e. the first split document will start from page 1 in any case).
            </param>
            <returns>the list of resultant documents. By warned that they are not closed.</returns>
        </member>
        <member name="M:iText.Kernel.Utils.PdfSplitter.SplitByPageCount(System.Int32,iText.Kernel.Utils.PdfSplitter.IDocumentReadyListener)">
            <summary>Splits a document into smaller documents with no more than @pageCount pages each.</summary>
            <param name="pageCount">the biggest possible number of pages in a split document.</param>
            <param name="documentReady">
            the event listener which is called when another document is ready.
            You can close this document in this listener, for instance.
            </param>
        </member>
        <member name="M:iText.Kernel.Utils.PdfSplitter.SplitByPageCount(System.Int32)">
            <summary>Splits a document into smaller documents with no more than @pageCount pages each.</summary>
            <param name="pageCount">the biggest possible number of pages in a split document.</param>
            <returns>the list of resultant documents. By warned that they are not closed.</returns>
        </member>
        <member name="M:iText.Kernel.Utils.PdfSplitter.ExtractPageRanges(System.Collections.Generic.IList{iText.Kernel.Utils.PageRange})">
            <summary>Extracts the specified page ranges from a document.</summary>
            <param name="pageRanges">the list of page ranges for each of the resultant document.</param>
            <returns>
            the list of the resultant documents for each of the specified page range.
            Be warned that these documents are not closed.
            </returns>
        </member>
        <member name="M:iText.Kernel.Utils.PdfSplitter.ExtractPageRange(iText.Kernel.Utils.PageRange)">
            <summary>Extracts the specified page ranges from a document.</summary>
            <param name="pageRange">the page range to be extracted from the document.</param>
            <returns>
            the resultant document containing the pages specified by the provided page range.
            Be warned that this document is not closed.
            </returns>
        </member>
        <member name="M:iText.Kernel.Utils.PdfSplitter.GetNextPdfWriter(iText.Kernel.Utils.PageRange)">
            <summary>This method is called when another split document is to be created.</summary>
            <remarks>
            This method is called when another split document is to be created.
            You can override this method and return your own
            <see cref="T:iText.Kernel.Pdf.PdfWriter"/>
            depending on your needs.
            </remarks>
            <param name="documentPageRange">the page range of the original document to be included in the document being created now.
                </param>
            <returns>the PdfWriter instance for the document which is being created.</returns>
        </member>
        <member name="M:iText.Kernel.Utils.PdfSplitter.SplitByOutlines(System.Collections.Generic.IList{System.String})">
            <summary>
            Split a document by outline title (bookmark name), find outline by name
            and places the entire hierarchy in a separate document ( outlines and pages ) .
            </summary>
            <param name="outlineTitles">list of outline titles .</param>
        </member>
        <member name="M:iText.Kernel.Utils.PdfSplitter.GetAbsoluteTreeNextOutline(iText.Kernel.Pdf.PdfOutline)">
            <summary>the next element in the entire hierarchy</summary>
            <param name="outline"></param>
        </member>
        <member name="T:iText.Kernel.Utils.TaggedPdfReaderTool">
            <summary>Converts a tagged PDF document into an XML file.</summary>
        </member>
        <member name="M:iText.Kernel.Utils.TaggedPdfReaderTool.#ctor(iText.Kernel.Pdf.PdfDocument)">
            <summary>
            Constructs a
            <see cref="T:iText.Kernel.Utils.TaggedPdfReaderTool"/>
            via a given
            <see cref="T:iText.Kernel.Pdf.PdfDocument"/>
            .
            </summary>
            <param name="document">the document to read tag structure from</param>
        </member>
        <member name="M:iText.Kernel.Utils.TaggedPdfReaderTool.IsValidCharacterValue(System.Int32)">
            <summary>Checks if a character value should be escaped/unescaped.</summary>
            <param name="c">a character value</param>
            <returns>true if it's OK to escape or unescape this value</returns>
        </member>
        <member name="M:iText.Kernel.Utils.TaggedPdfReaderTool.ConvertToXml(System.IO.Stream)">
            <summary>Converts the current tag structure into an XML file with default encoding (UTF-8).</summary>
            <param name="os">the output stream to save XML file to</param>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Kernel.Utils.TaggedPdfReaderTool.ConvertToXml(System.IO.Stream,System.String)">
            <summary>Converts the current tag structure into an XML file with provided encoding.</summary>
            <param name="os">the output stream to save XML file to</param>
            <param name="charset">the charset of the resultant XML file</param>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Kernel.Utils.TaggedPdfReaderTool.SetRootTag(System.String)">
            <summary>Sets the name of the root tag of the resultant XML file</summary>
            <param name="rootTagName">the name of the root tag</param>
            <returns>this object</returns>
        </member>
        <member name="M:iText.Kernel.Utils.TaggedPdfReaderTool.EscapeXML(System.String,System.Boolean)">
            <summary>
            NOTE: copied from itext5 XMLUtils class
            Escapes a string with the appropriated XML codes.
            </summary>
            <param name="s">the string to be escaped</param>
            <param name="onlyASCII">codes above 127 will always be escaped with &amp;#nn; if <CODE>true</CODE></param>
            <returns>the escaped string</returns>
        </member>
        <member name="T:iText.Kernel.Version">
            <summary>This class contains version information about iText.</summary>
            <remarks>
            This class contains version information about iText.
            DO NOT CHANGE THE VERSION INFORMATION WITHOUT PERMISSION OF THE COPYRIGHT HOLDERS OF ITEXT.
            Changing the version makes it extremely difficult to debug an application.
            Also, the nature of open source software is that you honor the copyright of the original creators of the software.
            </remarks>
        </member>
        <member name="F:iText.Kernel.Version.staticLock">
            <summary>Lock object used for synchronization</summary>
        </member>
        <member name="F:iText.Kernel.Version.AGPL">
            <summary>String that will indicate if the AGPL version is used.</summary>
        </member>
        <member name="F:iText.Kernel.Version.version">
            <summary>The iText version instance.</summary>
        </member>
        <member name="F:iText.Kernel.Version.iTextProductName">
            <summary>This String contains the name of the product.</summary>
            <remarks>
            This String contains the name of the product.
            iText is a registered trademark by iText Group NV.
            Please don't change this constant.
            </remarks>
        </member>
        <member name="F:iText.Kernel.Version.release">
            <summary>This String contains the version number of this iText release.</summary>
            <remarks>
            This String contains the version number of this iText release.
            For debugging purposes, we request you NOT to change this constant.
            </remarks>
        </member>
        <member name="F:iText.Kernel.Version.producerLine">
            <summary>This String contains the iText version as shown in the producer line.</summary>
            <remarks>
            This String contains the iText version as shown in the producer line.
            iText is a product developed by iText Group NV.
            iText Group requests that you retain the iText producer line
            in every PDF that is created or manipulated using iText.
            </remarks>
        </member>
        <member name="F:iText.Kernel.Version.info">
            <summary>The version info;</summary>
        </member>
        <member name="M:iText.Kernel.Version.GetInstance">
            <summary>Gets an instance of the iText version that is currently used.</summary>
            <remarks>
            Gets an instance of the iText version that is currently used.
            Note that iText Group requests that you retain the iText producer line
            in every PDF that is created or manipulated using iText.
            </remarks>
        </member>
        <member name="M:iText.Kernel.Version.IsAGPLVersion">
            <summary>Checks if the AGPL version is used.</summary>
            <returns>returns true if the AGPL version is used.</returns>
        </member>
        <member name="M:iText.Kernel.Version.IsExpired">
            <summary>Is the license expired?</summary>
            <returns>true if expired</returns>
        </member>
        <member name="M:iText.Kernel.Version.GetProduct">
            <summary>Gets the product name.</summary>
            <remarks>
            Gets the product name.
            iText Group NV requests that you retain the iText producer line
            in every PDF that is created or manipulated using iText.
            </remarks>
            <returns>the product name</returns>
        </member>
        <member name="M:iText.Kernel.Version.GetRelease">
            <summary>Gets the release number.</summary>
            <remarks>
            Gets the release number.
            iText Group NV requests that you retain the iText producer line
            in every PDF that is created or manipulated using iText.
            </remarks>
            <returns>the release number</returns>
        </member>
        <member name="M:iText.Kernel.Version.GetVersion">
            <summary>Returns the iText version as shown in the producer line.</summary>
            <remarks>
            Returns the iText version as shown in the producer line.
            iText is a product developed by iText Group NV.
            iText Group requests that you retain the iText producer line
            in every PDF that is created or manipulated using iText.
            </remarks>
            <returns>iText version</returns>
        </member>
        <member name="M:iText.Kernel.Version.GetKey">
            <summary>Returns a license key if one was provided, or null if not.</summary>
            <returns>a license key.</returns>
        </member>
        <member name="M:iText.Kernel.Version.GetInfo">
            <summary>Returns a version info in one class</summary>
            <returns>a version info.</returns>
        </member>
        <member name="M:iText.Kernel.Version.GetLicenseeInfoFromLicenseKey(System.String)">
            <exception cref="T:System.TypeLoadException"/>
            <exception cref="T:System.MissingMethodException"/>
            <exception cref="T:System.MemberAccessException"/>
            <exception cref="!:Java.Lang.InstantiationException"/>
            <exception cref="T:System.Reflection.TargetInvocationException"/>
        </member>
        <member name="M:iText.Kernel.VersionInfo.GetProduct">
            <summary>Gets the product name.</summary>
            <remarks>
            Gets the product name.
            iText Group NV requests that you retain the iText producer line
            in every PDF that is created or manipulated using iText.
            </remarks>
            <returns>the product name</returns>
        </member>
        <member name="M:iText.Kernel.VersionInfo.GetRelease">
            <summary>Gets the release number.</summary>
            <remarks>
            Gets the release number.
            iText Group NV requests that you retain the iText producer line
            in every PDF that is created or manipulated using iText.
            </remarks>
            <returns>the release number</returns>
        </member>
        <member name="M:iText.Kernel.VersionInfo.GetVersion">
            <summary>Returns the iText version as shown in the producer line.</summary>
            <remarks>
            Returns the iText version as shown in the producer line.
            iText is a product developed by iText Group NV.
            iText Group requests that you retain the iText producer line
            in every PDF that is created or manipulated using iText.
            </remarks>
            <returns>iText version</returns>
        </member>
        <member name="M:iText.Kernel.VersionInfo.GetKey">
            <summary>Returns a license key if one was provided, or null if not.</summary>
            <returns>a license key.</returns>
        </member>
        <member name="T:iText.Kernel.XMP.EncodingNoPreamble">
            <summary>
            A wrapper for an Encoding to suppress the preamble.
            </summary>
        </member>
        <member name="T:iText.Kernel.XMP.Impl.Base64">
            <summary>
            A utility class to perform base64 encoding and decoding as specified
            in RFC-1521.
            </summary>
            <remarks>
            A utility class to perform base64 encoding and decoding as specified
            in RFC-1521. See also RFC 1421.
            </remarks>
            <version>$Revision: 1.4 $</version>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.Base64.INVALID">
            <summary>marker for invalid bytes</summary>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.Base64.WHITESPACE">
            <summary>marker for accepted whitespace bytes</summary>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.Base64.EQUAL">
            <summary>marker for an equal symbol</summary>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.Base64.Encode(System.Byte[])">
            <summary>Encode the given byte[].</summary>
            <param name="src">the source string.</param>
            <returns>the base64-encoded data.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.Base64.Encode(System.Byte[],System.Int32)">
            <summary>Encode the given byte[].</summary>
            <param name="src">the source string.</param>
            <param name="lineFeed">
            a linefeed is added after <code>linefeed</code> characters;
            must be dividable by four; 0 means no linefeeds
            </param>
            <returns>the base64-encoded data.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.Base64.Encode(System.String)">
            <summary>Encode the given string.</summary>
            <param name="src">the source string.</param>
            <returns>the base64-encoded string.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.Base64.Decode(System.Byte[])">
            <summary>Decode the given byte[].</summary>
            <param name="src">the base64-encoded data.</param>
            <returns>the decoded data.</returns>
            <exception cref="T:System.ArgumentException">
            Thrown if the base 64 strings contains non-valid characters,
            beside the bas64 chars, LF, CR, tab and space are accepted.
            </exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.Base64.Decode(System.String)">
            <summary>Decode the given string.</summary>
            <param name="src">the base64-encoded string.</param>
            <returns>the decoded string.</returns>
        </member>
        <member name="T:iText.Kernel.XMP.Impl.ByteBuffer">
            <summary>Byte buffer container including length of valid data.</summary>
            <since>11.10.2006</since>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.ByteBuffer.#ctor(System.Int32)">
            <param name="initialCapacity">the initial capacity for this buffer</param>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.ByteBuffer.#ctor(System.Byte[])">
            <param name="buffer">a byte array that will be wrapped with <code>ByteBuffer</code>.</param>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.ByteBuffer.#ctor(System.Byte[],System.Int32)">
            <param name="buffer">a byte array that will be wrapped with <code>ByteBuffer</code>.</param>
            <param name="length">the length of valid bytes in the array</param>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.ByteBuffer.#ctor(System.IO.Stream)">
            <summary>Loads the stream into a buffer.</summary>
            <param name="in">an InputStream</param>
            <exception cref="T:System.IO.IOException">If the stream cannot be read.</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.ByteBuffer.#ctor(System.Byte[],System.Int32,System.Int32)">
            <param name="buffer">a byte array that will be wrapped with <code>ByteBuffer</code>.</param>
            <param name="offset">the offset of the provided buffer.</param>
            <param name="length">the length of valid bytes in the array</param>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.ByteBuffer.GetByteStream">
            <returns>Returns a byte stream that is limited to the valid amount of bytes.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.ByteBuffer.Length">
            <returns>
            Returns the length, that means the number of valid bytes, of the buffer;
            the inner byte array might be bigger than that.
            </returns>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.ByteBuffer.ByteAt(System.Int32)">
            <param name="index">the index to retrieve the byte from</param>
            <returns>Returns a byte from the buffer</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.ByteBuffer.CharAt(System.Int32)">
            <param name="index">the index to retrieve a byte as int or char.</param>
            <returns>Returns a byte from the buffer</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.ByteBuffer.Append(System.Byte)">
            <summary>Appends a byte to the buffer.</summary>
            <param name="b">a byte</param>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.ByteBuffer.Append(System.Byte[],System.Int32,System.Int32)">
            <summary>Appends a byte array or part of to the buffer.</summary>
            <param name="bytes">a byte array</param>
            <param name="offset">an offset with</param>
            <param name="len"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.ByteBuffer.Append(System.Byte[])">
            <summary>Append a byte array to the buffer</summary>
            <param name="bytes">a byte array</param>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.ByteBuffer.Append(iText.Kernel.XMP.Impl.ByteBuffer)">
            <summary>Append another buffer to this buffer.</summary>
            <param name="anotherBuffer">another <code>ByteBuffer</code></param>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.ByteBuffer.GetEncoding">
            <summary>Detects the encoding of the byte buffer, stores and returns it.</summary>
            <remarks>
            Detects the encoding of the byte buffer, stores and returns it.
            Only UTF-8, UTF-16LE/BE and UTF-32LE/BE are recognized.
            <em>Note:</em> UTF-32 flavors are not supported by Java, the XML-parser will complain.
            </remarks>
            <returns>Returns the encoding string.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.ByteBuffer.EnsureCapacity(System.Int32)">
            <summary>
            Ensures the requested capacity by increasing the buffer size when the
            current length is exceeded.
            </summary>
            <param name="requestedLength">requested new buffer length</param>
        </member>
        <member name="T:iText.Kernel.XMP.Impl.CountOutputStream">
            <summary>
            An <code>OutputStream</code> that counts the written bytes.
            
            @since   08.11.2006
            </summary>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.CountOutputStream.output">
            <summary>
            the decorated output stream </summary>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.CountOutputStream.bytesWritten">
            <summary>
            the byte counter </summary>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.CountOutputStream.#ctor(System.IO.Stream)">
            <summary>
            Constructor with providing the output stream to decorate. </summary>
            <param name="output"> an <code>OutputStream</code> </param>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.CountOutputStream.GetBytesWritten">
            <returns> the bytesWritten </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.XMP.Impl.CountOutputStream.Write(System.Byte[],System.Int32,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.XMP.Impl.CountOutputStream.Write(System.Byte[])" -->
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.XMP.Impl.CountOutputStream.Write(System.Int32)" -->
        <member name="T:iText.Kernel.XMP.Impl.FixASCIIControlsReader">
            <since>22.08.2006</since>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.FixASCIIControlsReader.state">
            <summary>the state of the automaton</summary>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.FixASCIIControlsReader.control">
            <summary>the result of the escaping sequence</summary>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.FixASCIIControlsReader.digits">
            <summary>count the digits of the sequence</summary>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.FixASCIIControlsReader.#ctor(System.IO.TextReader)">
            <summary>The look-ahead size is 6 at maximum (&amp;#xAB;)</summary>
            <seealso cref="M:iText.IO.Util.PushbackReader.#ctor(System.IO.TextReader,System.Int32)"/>
            <param name="input">a Reader</param>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.FixASCIIControlsReader.Read(System.Char[],System.Int32,System.Int32)">
            <seealso cref="M:System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)"/>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.FixASCIIControlsReader.ProcessChar(System.Char)">
            <summary>Processes numeric escaped chars to find out if they are a control character.</summary>
            <param name="ch">a char</param>
            <returns>Returns the char directly or as replacement for the escaped sequence.</returns>
        </member>
        <member name="T:iText.Kernel.XMP.Impl.ISO8601Converter">
            <summary>Converts between ISO 8601 Strings and <code>Calendar</code> with millisecond resolution.
            	</summary>
            <since>16.02.2006</since>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.ISO8601Converter.#ctor">
            <summary>Hides public constructor</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.XMP.Impl.ISO8601Converter.Parse(System.String)" -->
        <member name="M:iText.Kernel.XMP.Impl.ISO8601Converter.Parse(System.String,iText.Kernel.XMP.XMPDateTime)">
            <param name="iso8601String">a date string that is ISO 8601 conform.</param>
            <param name="binValue">an existing XMPDateTime to set with the parsed date</param>
            <returns>Returns an XMPDateTime-object containing the ISO8601-date.</returns>
            <exception cref="T:iText.Kernel.XMP.XMPException">Is thrown when the string is non-conform.
            	</exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.XMP.Impl.ISO8601Converter.Render(iText.Kernel.XMP.XMPDateTime)" -->
        <member name="T:iText.Kernel.XMP.Impl.ParseState">
            <since>22.08.2006</since>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.ParseState.#ctor(System.String)">
            <param name="str">initializes the parser container</param>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.ParseState.Length">
            <returns>Returns the length of the input.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.ParseState.HasNext">
            <returns>Returns whether there are more chars to come.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.ParseState.Ch(System.Int32)">
            <param name="index">index of char</param>
            <returns>Returns char at a certain index.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.ParseState.Ch">
            <returns>Returns the current char or 0x0000 if there are no more chars.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.ParseState.Skip">
            <summary>Skips the next char.</summary>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.ParseState.Pos">
            <returns>Returns the current position.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.ParseState.GatherInt(System.String,System.Int32)">
            <summary>Parses a integer from the source and sets the pointer after it.</summary>
            <param name="errorMsg">Error message to put in the exception if no number can be found
            	</param>
            <param name="maxValue">the max value of the number to return</param>
            <returns>Returns the parsed integer.</returns>
            <exception cref="T:iText.Kernel.XMP.XMPException">Thrown if no integer can be found.
            	</exception>
        </member>
        <member name="T:iText.Kernel.XMP.Impl.Latin1Converter">
            <since>12.10.2006</since>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.Latin1Converter.#ctor">
            <summary>Private constructor</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.XMP.Impl.Latin1Converter.Convert(iText.Kernel.XMP.Impl.ByteBuffer)" -->
        <member name="M:iText.Kernel.XMP.Impl.Latin1Converter.ConvertToUTF8(System.Byte)">
            <summary>
            Converts a Cp1252 char (contains all Latin-1 chars above 0x80) into a
            UTF-8 byte sequence.
            </summary>
            <remarks>
            Converts a Cp1252 char (contains all Latin-1 chars above 0x80) into a
            UTF-8 byte sequence. The bytes 0x81, 0x8D, 0x8F, 0x90, and 0x9D are
            formally undefined by Windows 1252 and therefore replaced by a space
            (0x20).
            </remarks>
            <param name="ch">an Cp1252 / Latin-1 byte</param>
            <returns>Returns a byte array containing a UTF-8 byte sequence.</returns>
        </member>
        <member name="T:iText.Kernel.XMP.Impl.ParameterAsserts">
            <since>11.08.2006</since>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.ParameterAsserts.#ctor">
            <summary>private constructor</summary>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.ParameterAsserts.AssertArrayName(System.String)">
            <summary>Asserts that an array name is set.</summary>
            <param name="arrayName">an array name</param>
            <exception cref="T:iText.Kernel.XMP.XMPException">Array name is null or empty</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.ParameterAsserts.AssertPropName(System.String)">
            <summary>Asserts that a property name is set.</summary>
            <param name="propName">a property name or path</param>
            <exception cref="T:iText.Kernel.XMP.XMPException">Property name is null or empty</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.ParameterAsserts.AssertSchemaNS(System.String)">
            <summary>Asserts that a schema namespace is set.</summary>
            <param name="schemaNS">a schema namespace</param>
            <exception cref="T:iText.Kernel.XMP.XMPException">Schema is null or empty</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.ParameterAsserts.AssertPrefix(System.String)">
            <summary>Asserts that a prefix is set.</summary>
            <param name="prefix">a prefix</param>
            <exception cref="T:iText.Kernel.XMP.XMPException">Prefix is null or empty</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.ParameterAsserts.AssertSpecificLang(System.String)">
            <summary>Asserts that a specific language is set.</summary>
            <param name="specificLang">a specific lang</param>
            <exception cref="T:iText.Kernel.XMP.XMPException">Specific language is null or empty</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.ParameterAsserts.AssertStructName(System.String)">
            <summary>Asserts that a struct name is set.</summary>
            <param name="structName">a struct name</param>
            <exception cref="T:iText.Kernel.XMP.XMPException">Struct name is null or empty</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.ParameterAsserts.AssertNotNull(System.Object)">
            <summary>Asserts that any string parameter is set.</summary>
            <param name="param">any string parameter</param>
            <exception cref="T:iText.Kernel.XMP.XMPException">Thrown if the parameter is null or has length 0.</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.ParameterAsserts.AssertImplementation(iText.Kernel.XMP.XMPMeta)">
            <summary>
            Asserts that the xmp object is of this implemention
            (
            <see cref="T:iText.Kernel.XMP.Impl.XMPMetaImpl"/>
            ).
            </summary>
            <param name="xmp">the XMP object</param>
            <exception cref="T:iText.Kernel.XMP.XMPException">A wrong implentaion is used.</exception>
        </member>
        <member name="T:iText.Kernel.XMP.Impl.ParseRdf">
            <summary>Parser for "normal" XML serialisation of RDF.</summary>
            <since>14.07.2006</since>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.ParseRdf.RDFTERM_RDF">
            <summary>Start of coreSyntaxTerms.</summary>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.ParseRdf.RDFTERM_DATATYPE">
            <summary>End of coreSyntaxTerms</summary>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.ParseRdf.RDFTERM_DESCRIPTION">
            <summary>Start of additions for syntax Terms.</summary>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.ParseRdf.RDFTERM_LI">
            <summary>End of of additions for syntaxTerms.</summary>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.ParseRdf.RDFTERM_ABOUT_EACH">
            <summary>Start of oldTerms.</summary>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.ParseRdf.RDFTERM_BAG_ID">
            <summary>End of oldTerms.</summary>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.ParseRdf.RDFTERM_FIRST_SYNTAX">
            <summary>! Yes, the syntax terms include the core terms.</summary>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.ParseRdf.DEFAULT_PREFIX">
            <summary>this prefix is used for default namespaces</summary>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.ParseRdf.Parse(System.Xml.XmlNode)">
            <summary>The main parsing method.</summary>
            <remarks>
            The main parsing method. The XML tree is walked through from the root node and and XMP tree
            is created. This is a raw parse, the normalisation of the XMP tree happens outside.
            </remarks>
            <param name="xmlRoot">the XML root node</param>
            <returns>Returns an XMP metadata object (not normalized)</returns>
            <exception cref="T:iText.Kernel.XMP.XMPException">Occurs if the parsing fails for any reason.
            	</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.ParseRdf.Rdf_RDF(iText.Kernel.XMP.Impl.XMPMetaImpl,System.Xml.XmlNode)">
            <summary>
            Each of these parsing methods is responsible for recognizing an RDF
            syntax production and adding the appropriate structure to the XMP tree.
            </summary>
            <remarks>
            Each of these parsing methods is responsible for recognizing an RDF
            syntax production and adding the appropriate structure to the XMP tree.
            They simply return for success, failures will throw an exception.
            </remarks>
            <param name="xmp">the xmp metadata object that is generated</param>
            <param name="rdfRdfNode">the top-level xml node</param>
            <exception cref="T:iText.Kernel.XMP.XMPException">thown on parsing errors</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.ParseRdf.Rdf_NodeElementList(iText.Kernel.XMP.Impl.XMPMetaImpl,iText.Kernel.XMP.Impl.XMPNode,System.Xml.XmlNode)">
            <summary>
            7.2.10 nodeElementList<br />
            ws* ( nodeElement ws* )
            Note: this method is only called from the rdf:RDF-node (top level)
            </summary>
            <param name="xmp">the xmp metadata object that is generated</param>
            <param name="xmpParent">the parent xmp node</param>
            <param name="rdfRdfNode">the top-level xml node</param>
            <exception cref="T:iText.Kernel.XMP.XMPException">thown on parsing errors</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.ParseRdf.Rdf_NodeElement(iText.Kernel.XMP.Impl.XMPMetaImpl,iText.Kernel.XMP.Impl.XMPNode,System.Xml.XmlNode,System.Boolean)">
            <summary>
            7.2.5 nodeElementURIs
            anyURI - ( coreSyntaxTerms | rdf:li | oldTerms )
            7.2.11 nodeElement
            start-element ( URI == nodeElementURIs,
            attributes == set ( ( idAttr | nodeIdAttr | aboutAttr )?, propertyAttr* ) )
            propertyEltList
            end-element()
            A node element URI is rdf:Description or anything else that is not an RDF
            term.
            </summary>
            <param name="xmp">the xmp metadata object that is generated</param>
            <param name="xmpParent">the parent xmp node</param>
            <param name="xmlNode">the currently processed XML node</param>
            <param name="isTopLevel">Flag if the node is a top-level node</param>
            <exception cref="T:iText.Kernel.XMP.XMPException">thown on parsing errors</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.ParseRdf.Rdf_NodeElementAttrs(iText.Kernel.XMP.Impl.XMPMetaImpl,iText.Kernel.XMP.Impl.XMPNode,System.Xml.XmlNode,System.Boolean)">
            <summary>
            7.2.7 propertyAttributeURIs
            anyURI - ( coreSyntaxTerms | rdf:Description | rdf:li | oldTerms )
            7.2.11 nodeElement
            start-element ( URI == nodeElementURIs,
            attributes == set ( ( idAttr | nodeIdAttr | aboutAttr )?, propertyAttr* ) )
            propertyEltList
            end-element()
            Process the attribute list for an RDF node element.
            </summary>
            <remarks>
            7.2.7 propertyAttributeURIs
            anyURI - ( coreSyntaxTerms | rdf:Description | rdf:li | oldTerms )
            7.2.11 nodeElement
            start-element ( URI == nodeElementURIs,
            attributes == set ( ( idAttr | nodeIdAttr | aboutAttr )?, propertyAttr* ) )
            propertyEltList
            end-element()
            Process the attribute list for an RDF node element. A property attribute URI is
            anything other than an RDF term. The rdf:ID and rdf:nodeID attributes are simply ignored,
            as are rdf:about attributes on inner nodes.
            </remarks>
            <param name="xmp">the xmp metadata object that is generated</param>
            <param name="xmpParent">the parent xmp node</param>
            <param name="xmlNode">the currently processed XML node</param>
            <param name="isTopLevel">Flag if the node is a top-level node</param>
            <exception cref="T:iText.Kernel.XMP.XMPException">thown on parsing errors</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.ParseRdf.Rdf_PropertyElementList(iText.Kernel.XMP.Impl.XMPMetaImpl,iText.Kernel.XMP.Impl.XMPNode,System.Xml.XmlNode,System.Boolean)">
            <summary>
            7.2.13 propertyEltList
            ws* ( propertyElt ws* )
            </summary>
            <param name="xmp">the xmp metadata object that is generated</param>
            <param name="xmpParent">the parent xmp node</param>
            <param name="xmlParent">the currently processed XML node</param>
            <param name="isTopLevel">Flag if the node is a top-level node</param>
            <exception cref="T:iText.Kernel.XMP.XMPException">thown on parsing errors</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.ParseRdf.Rdf_PropertyElement(iText.Kernel.XMP.Impl.XMPMetaImpl,iText.Kernel.XMP.Impl.XMPNode,System.Xml.XmlNode,System.Boolean)">
            <summary>
            7.2.14 propertyElt
            resourcePropertyElt | literalPropertyElt | parseTypeLiteralPropertyElt |
            parseTypeResourcePropertyElt | parseTypeCollectionPropertyElt |
            parseTypeOtherPropertyElt | emptyPropertyElt
            7.2.15 resourcePropertyElt
            start-element ( URI == propertyElementURIs, attributes == set ( idAttr? ) )
            ws* nodeElement ws
            end-element()
            7.2.16 literalPropertyElt
            start-element (
            URI == propertyElementURIs, attributes == set ( idAttr?, datatypeAttr?) )
            text()
            end-element()
            7.2.17 parseTypeLiteralPropertyElt
            start-element (
            URI == propertyElementURIs, attributes == set ( idAttr?, parseLiteral ) )
            literal
            end-element()
            7.2.18 parseTypeResourcePropertyElt
            start-element (
            URI == propertyElementURIs, attributes == set ( idAttr?, parseResource ) )
            propertyEltList
            end-element()
            7.2.19 parseTypeCollectionPropertyElt
            start-element (
            URI == propertyElementURIs, attributes == set ( idAttr?, parseCollection ) )
            nodeElementList
            end-element()
            7.2.20 parseTypeOtherPropertyElt
            start-element ( URI == propertyElementURIs, attributes == set ( idAttr?, parseOther ) )
            propertyEltList
            end-element()
            7.2.21 emptyPropertyElt
            start-element ( URI == propertyElementURIs,
            attributes == set ( idAttr?, ( resourceAttr | nodeIdAttr )?, propertyAttr* ) )
            end-element()
            The various property element forms are not distinguished by the XML element name,
            but by their attributes for the most part.
            </summary>
            <remarks>
            7.2.14 propertyElt
            resourcePropertyElt | literalPropertyElt | parseTypeLiteralPropertyElt |
            parseTypeResourcePropertyElt | parseTypeCollectionPropertyElt |
            parseTypeOtherPropertyElt | emptyPropertyElt
            7.2.15 resourcePropertyElt
            start-element ( URI == propertyElementURIs, attributes == set ( idAttr? ) )
            ws* nodeElement ws
            end-element()
            7.2.16 literalPropertyElt
            start-element (
            URI == propertyElementURIs, attributes == set ( idAttr?, datatypeAttr?) )
            text()
            end-element()
            7.2.17 parseTypeLiteralPropertyElt
            start-element (
            URI == propertyElementURIs, attributes == set ( idAttr?, parseLiteral ) )
            literal
            end-element()
            7.2.18 parseTypeResourcePropertyElt
            start-element (
            URI == propertyElementURIs, attributes == set ( idAttr?, parseResource ) )
            propertyEltList
            end-element()
            7.2.19 parseTypeCollectionPropertyElt
            start-element (
            URI == propertyElementURIs, attributes == set ( idAttr?, parseCollection ) )
            nodeElementList
            end-element()
            7.2.20 parseTypeOtherPropertyElt
            start-element ( URI == propertyElementURIs, attributes == set ( idAttr?, parseOther ) )
            propertyEltList
            end-element()
            7.2.21 emptyPropertyElt
            start-element ( URI == propertyElementURIs,
            attributes == set ( idAttr?, ( resourceAttr | nodeIdAttr )?, propertyAttr* ) )
            end-element()
            The various property element forms are not distinguished by the XML element name,
            but by their attributes for the most part. The exceptions are resourcePropertyElt and
            literalPropertyElt. They are distinguished by their XML element content.
            NOTE: The RDF syntax does not explicitly include the xml:lang attribute although it can
            appear in many of these. We have to allow for it in the attibute counts below.
            </remarks>
            <param name="xmp">the xmp metadata object that is generated</param>
            <param name="xmpParent">the parent xmp node</param>
            <param name="xmlNode">the currently processed XML node</param>
            <param name="isTopLevel">Flag if the node is a top-level node</param>
            <exception cref="T:iText.Kernel.XMP.XMPException">thown on parsing errors</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.ParseRdf.Rdf_ResourcePropertyElement(iText.Kernel.XMP.Impl.XMPMetaImpl,iText.Kernel.XMP.Impl.XMPNode,System.Xml.XmlNode,System.Boolean)">
            <summary>
            7.2.15 resourcePropertyElt
            start-element ( URI == propertyElementURIs, attributes == set ( idAttr? ) )
            ws* nodeElement ws
            end-element()
            This handles structs using an rdf:Description node,
            arrays using rdf:Bag/Seq/Alt, and typedNodes.
            </summary>
            <remarks>
            7.2.15 resourcePropertyElt
            start-element ( URI == propertyElementURIs, attributes == set ( idAttr? ) )
            ws* nodeElement ws
            end-element()
            This handles structs using an rdf:Description node,
            arrays using rdf:Bag/Seq/Alt, and typedNodes. It also catches and cleans up qualified
            properties written with rdf:Description and rdf:value.
            </remarks>
            <param name="xmp">the xmp metadata object that is generated</param>
            <param name="xmpParent">the parent xmp node</param>
            <param name="xmlNode">the currently processed XML node</param>
            <param name="isTopLevel">Flag if the node is a top-level node</param>
            <exception cref="T:iText.Kernel.XMP.XMPException">thown on parsing errors</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.ParseRdf.Rdf_LiteralPropertyElement(iText.Kernel.XMP.Impl.XMPMetaImpl,iText.Kernel.XMP.Impl.XMPNode,System.Xml.XmlNode,System.Boolean)">
            <summary>
            7.2.16 literalPropertyElt
            start-element ( URI == propertyElementURIs,
            attributes == set ( idAttr?, datatypeAttr?) )
            text()
            end-element()
            Add a leaf node with the text value and qualifiers for the attributes.
            </summary>
            <param name="xmp">the xmp metadata object that is generated</param>
            <param name="xmpParent">the parent xmp node</param>
            <param name="xmlNode">the currently processed XML node</param>
            <param name="isTopLevel">Flag if the node is a top-level node</param>
            <exception cref="T:iText.Kernel.XMP.XMPException">thown on parsing errors</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.ParseRdf.Rdf_ParseTypeLiteralPropertyElement">
            <summary>
            7.2.17 parseTypeLiteralPropertyElt
            start-element ( URI == propertyElementURIs,
            attributes == set ( idAttr?, parseLiteral ) )
            literal
            end-element()
            </summary>
            <exception cref="T:iText.Kernel.XMP.XMPException">thown on parsing errors</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.ParseRdf.Rdf_ParseTypeResourcePropertyElement(iText.Kernel.XMP.Impl.XMPMetaImpl,iText.Kernel.XMP.Impl.XMPNode,System.Xml.XmlNode,System.Boolean)">
            <summary>
            7.2.18 parseTypeResourcePropertyElt
            start-element ( URI == propertyElementURIs,
            attributes == set ( idAttr?, parseResource ) )
            propertyEltList
            end-element()
            Add a new struct node with a qualifier for the possible rdf:ID attribute.
            </summary>
            <remarks>
            7.2.18 parseTypeResourcePropertyElt
            start-element ( URI == propertyElementURIs,
            attributes == set ( idAttr?, parseResource ) )
            propertyEltList
            end-element()
            Add a new struct node with a qualifier for the possible rdf:ID attribute.
            Then process the XML child nodes to get the struct fields.
            </remarks>
            <param name="xmp">the xmp metadata object that is generated</param>
            <param name="xmpParent">the parent xmp node</param>
            <param name="xmlNode">the currently processed XML node</param>
            <param name="isTopLevel">Flag if the node is a top-level node</param>
            <exception cref="T:iText.Kernel.XMP.XMPException">thown on parsing errors</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.ParseRdf.Rdf_ParseTypeCollectionPropertyElement">
            <summary>
            7.2.19 parseTypeCollectionPropertyElt
            start-element ( URI == propertyElementURIs,
            attributes == set ( idAttr?, parseCollection ) )
            nodeElementList
            end-element()
            </summary>
            <exception cref="T:iText.Kernel.XMP.XMPException">thown on parsing errors</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.ParseRdf.Rdf_ParseTypeOtherPropertyElement">
            <summary>
            7.2.20 parseTypeOtherPropertyElt
            start-element ( URI == propertyElementURIs, attributes == set ( idAttr?, parseOther ) )
            propertyEltList
            end-element()
            </summary>
            <exception cref="T:iText.Kernel.XMP.XMPException">thown on parsing errors</exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.XMP.Impl.ParseRdf.Rdf_EmptyPropertyElement(iText.Kernel.XMP.Impl.XMPMetaImpl,iText.Kernel.XMP.Impl.XMPNode,System.Xml.XmlNode,System.Boolean)" -->
        <member name="M:iText.Kernel.XMP.Impl.ParseRdf.AddChildNode(iText.Kernel.XMP.Impl.XMPMetaImpl,iText.Kernel.XMP.Impl.XMPNode,System.Xml.XmlNode,System.String,System.Boolean)">
            <summary>Adds a child node.</summary>
            <param name="xmp">the xmp metadata object that is generated</param>
            <param name="xmpParent">the parent xmp node</param>
            <param name="xmlNode">the currently processed XML node</param>
            <param name="value">Node value</param>
            <param name="isTopLevel">Flag if the node is a top-level node</param>
            <returns>Returns the newly created child node.</returns>
            <exception cref="T:iText.Kernel.XMP.XMPException">thown on parsing errors</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.ParseRdf.AddQualifierNode(iText.Kernel.XMP.Impl.XMPNode,System.String,System.String)">
            <summary>Adds a qualifier node.</summary>
            <param name="xmpParent">the parent xmp node</param>
            <param name="name">
            the name of the qualifier which has to be
            QName including the <b>default prefix</b>
            </param>
            <param name="value">the value of the qualifier</param>
            <returns>Returns the newly created child node.</returns>
            <exception cref="T:iText.Kernel.XMP.XMPException">thown on parsing errors</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.ParseRdf.FixupQualifiedNode(iText.Kernel.XMP.Impl.XMPNode)">
            <summary>The parent is an RDF pseudo-struct containing an rdf:value field.</summary>
            <remarks>
            The parent is an RDF pseudo-struct containing an rdf:value field. Fix the
            XMP data model. The rdf:value node must be the first child, the other
            children are qualifiers. The form, value, and children of the rdf:value
            node are the real ones. The rdf:value node's qualifiers must be added to
            the others.
            </remarks>
            <param name="xmpParent">the parent xmp node</param>
            <exception cref="T:iText.Kernel.XMP.XMPException">thown on parsing errors</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.ParseRdf.IsWhitespaceNode(System.Xml.XmlNode)">
            <summary>Checks if the node is a white space.</summary>
            <param name="node">an XML-node</param>
            <returns>
            Returns whether the node is a whitespace node,
            i.e. a text node that contains only whitespaces.
            </returns>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.ParseRdf.IsPropertyElementName(System.Int32)">
            <summary>
            7.2.6 propertyElementURIs
            anyURI - ( coreSyntaxTerms | rdf:Description | oldTerms )
            </summary>
            <param name="term">the term id</param>
            <returns>Return true if the term is a property element name.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.ParseRdf.IsOldTerm(System.Int32)">
            <summary>
            7.2.4 oldTerms<br />
            rdf:aboutEach | rdf:aboutEachPrefix | rdf:bagID
            </summary>
            <param name="term">the term id</param>
            <returns>Returns true if the term is an old term.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.ParseRdf.IsCoreSyntaxTerm(System.Int32)">
            <summary>
            7.2.2 coreSyntaxTerms<br />
            rdf:RDF | rdf:ID | rdf:about | rdf:parseType | rdf:resource | rdf:nodeID |
            rdf:datatype
            </summary>
            <param name="term">the term id</param>
            <returns>Return true if the term is a core syntax term</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.ParseRdf.GetRdfTermKind(System.Xml.XmlNode)">
            <summary>Determines the ID for a certain RDF Term.</summary>
            <remarks>
            Determines the ID for a certain RDF Term.
            Arranged to hopefully minimize the parse time for large XMP.
            </remarks>
            <param name="node">an XML node</param>
            <returns>Returns the term ID.</returns>
        </member>
        <member name="T:iText.Kernel.XMP.Impl.QName">
            <since>09.11.2006</since>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.QName.prefix">
            <summary>XML namespace prefix</summary>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.QName.localName">
            <summary>XML localname</summary>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.QName.#ctor(System.String)">
            <summary>Splits a qname into prefix and localname.</summary>
            <param name="qname">a QName</param>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.QName.#ctor(System.String,System.String)">
            <summary>Constructor that initializes the fields</summary>
            <param name="prefix">the prefix</param>
            <param name="localName">the name</param>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.QName.HasPrefix">
            <returns>Returns whether the QName has a prefix.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.QName.GetLocalName">
            <returns>the localName</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.QName.GetPrefix">
            <returns>the prefix</returns>
        </member>
        <member name="T:iText.Kernel.XMP.Impl.Utils">
            <summary>Utility functions for the XMPToolkit implementation.</summary>
            <since>06.06.2006</since>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.Utils.UUID_SEGMENT_COUNT">
            <summary>segments of a UUID</summary>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.Utils.UUID_LENGTH">
            <summary>length of a UUID</summary>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.Utils.xmlNameStartChars">
            <summary>table of XML name start chars (&lt;= 0xFF)</summary>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.Utils.xmlNameChars">
            <summary>table of XML name chars (&lt;= 0xFF)</summary>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.Utils.#ctor">
            <summary>Private constructor</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.XMP.Impl.Utils.NormalizeLangValue(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.XMP.Impl.Utils.SplitNameAndValue(System.String)" -->
        <member name="M:iText.Kernel.XMP.Impl.Utils.IsInternalProperty(System.String,System.String)">
            <param name="schema">a schema namespace</param>
            <param name="prop">an XMP Property</param>
            <returns>
            Returns true if the property is defined as &quot;Internal
            Property&quot;, see XMP Specification.
            </returns>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.Utils.CheckUUIDFormat(System.String)">
            <summary>
            Check some requirements for an UUID:
            <ul>
            <li>Length of the UUID is 32</li>
            <li>The Delimiter count is 4 and all the 4 delimiter are on their right
            position (8,13,18,23)</li>
            </ul>
            </summary>
            <param name="uuid">uuid to test</param>
            <returns>true - this is a well formed UUID, false - UUID has not the expected format</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.Utils.IsXMLName(System.String)">
            <summary>Simple check for valid XMLNames.</summary>
            <remarks>
            Simple check for valid XMLNames. Within ASCII range<br />
            ":" | [A-Z] | "_" | [a-z] | [#xC0-#xD6] | [#xD8-#xF6]<br />
            are accepted, above all characters (which is not entirely
            correct according to the XML Spec.
            </remarks>
            <param name="name">an XML Name</param>
            <returns>Return <code>true</code> if the name is correct.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.Utils.IsXMLNameNS(System.String)">
            <summary>
            Checks if the value is a legal "unqualified" XML name, as
            defined in the XML Namespaces proposed recommendation.
            </summary>
            <remarks>
            Checks if the value is a legal "unqualified" XML name, as
            defined in the XML Namespaces proposed recommendation.
            These are XML names, except that they must not contain a colon.
            </remarks>
            <param name="name">the value to check</param>
            <returns>Returns true if the name is a valid "unqualified" XML name.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.Utils.IsControlChar(System.Char)">
            <param name="c">a char</param>
            <returns>Returns true if the char is an ASCII control char.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.Utils.EscapeXML(System.String,System.Boolean,System.Boolean)">
            <summary>Serializes the node value in XML encoding.</summary>
            <remarks>
            Serializes the node value in XML encoding. Its used for tag bodies and
            attributes.<br />
            <em>Note:</em> The attribute is always limited by quotes,
            thats why <code>&amp;apos;</code> is never serialized.<br />
            <em>Note:</em> Control chars are written unescaped, but if the user uses others than tab, LF
            and CR the resulting XML will become invalid.
            </remarks>
            <param name="value">a string</param>
            <param name="forAttribute">flag if string is attribute value (need to additional escape quotes)</param>
            <param name="escapeWhitespaces">Decides if LF, CR and TAB are escaped.</param>
            <returns>Returns the value ready for XML output.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.Utils.RemoveControlChars(System.String)">
            <summary>Replaces the ASCII control chars with a space.</summary>
            <param name="value">a node value</param>
            <returns>Returns the cleaned up value</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.Utils.IsNameStartChar(System.Char)">
            <summary>Simple check if a character is a valid XML start name char.</summary>
            <remarks>
            Simple check if a character is a valid XML start name char.
            All characters according to the XML Spec 1.1 are accepted:
            http://www.w3.org/TR/xml11/#NT-NameStartChar
            </remarks>
            <param name="ch">a character</param>
            <returns>Returns true if the character is a valid first char of an XML name.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.Utils.IsNameChar(System.Char)">
            <summary>
            Simple check if a character is a valid XML name char
            (every char except the first one), according to the XML Spec 1.1:
            http://www.w3.org/TR/xml11/#NT-NameChar
            </summary>
            <param name="ch">a character</param>
            <returns>Returns true if the character is a valid char of an XML name.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.Utils.InitCharTables">
            <summary>
            Initializes the char tables for the chars 0x00-0xFF for later use,
            according to the XML 1.1 specification
            http://www.w3.org/TR/xml11
            </summary>
        </member>
        <member name="T:iText.Kernel.XMP.Impl.XMPDateTimeImpl">
            <summary>The implementation of <code>XMPDateTime</code>.</summary>
            <remarks>
            The implementation of <code>XMPDateTime</code>. Internally a <code>calendar</code> is used
            plus an additional nano seconds field, because <code>Calendar</code> supports only milli
            seconds. The <code>nanoSeconds</code> convers only the resolution beyond a milli second.
            </remarks>
            <since>16.02.2006</since>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.XMPDateTimeImpl.timeZone">
            <summary>Use NO time zone as default</summary>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.XMPDateTimeImpl.nanoSeconds">
            <summary>The nano seconds take micro and nano seconds, while the milli seconds are in the calendar.
            	</summary>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPDateTimeImpl.#ctor">
            <summary>
            Creates an <code>XMPDateTime</code>-instance with the current time in the default time
            zone.
            </summary>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPDateTimeImpl.#ctor(iText.Kernel.XMP.XMPCalendar)">
            <summary>
            Creates an <code>XMPDateTime</code>-instance from a calendar.
            </summary>
            <param name="calendar"> a <code>Calendar</code> </param>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPDateTimeImpl.#ctor(System.DateTime,System.TimeZoneInfo)">
            <summary>
            Creates an <code>XMPDateTime</code>-instance from 
            a <code>Date</code> and a <code>TimeZoneInfo</code>.
            </summary>
            <param name="date"> a date describing an absolute point in time </param>
            <param name="timeZone"> a TimeZoneInfo how to interpret the date </param>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPDateTimeImpl.#ctor(System.String)">
            <summary>Creates an <code>XMPDateTime</code>-instance from an ISO 8601 string.</summary>
            <param name="strValue">an ISO 8601 string</param>
            <exception cref="T:iText.Kernel.XMP.XMPException">If the string is a non-conform ISO 8601 string, an exception is thrown
            	</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPDateTimeImpl.GetYear">
            <seealso cref="M:iText.Kernel.XMP.XMPDateTime.GetYear"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPDateTimeImpl.SetYear(System.Int32)">
            <seealso cref="M:iText.Kernel.XMP.XMPDateTime.SetYear(System.Int32)"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPDateTimeImpl.GetMonth">
            <seealso cref="M:iText.Kernel.XMP.XMPDateTime.GetMonth"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPDateTimeImpl.SetMonth(System.Int32)">
            <seealso cref="M:iText.Kernel.XMP.XMPDateTime.SetMonth(System.Int32)"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPDateTimeImpl.GetDay">
            <seealso cref="M:iText.Kernel.XMP.XMPDateTime.GetDay"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPDateTimeImpl.SetDay(System.Int32)">
            <seealso cref="M:iText.Kernel.XMP.XMPDateTime.SetDay(System.Int32)"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPDateTimeImpl.GetHour">
            <seealso cref="M:iText.Kernel.XMP.XMPDateTime.GetHour"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPDateTimeImpl.SetHour(System.Int32)">
            <seealso cref="M:iText.Kernel.XMP.XMPDateTime.SetHour(System.Int32)"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPDateTimeImpl.GetMinute">
            <seealso cref="M:iText.Kernel.XMP.XMPDateTime.GetMinute"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPDateTimeImpl.SetMinute(System.Int32)">
            <seealso cref="M:iText.Kernel.XMP.XMPDateTime.SetMinute(System.Int32)"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPDateTimeImpl.GetSecond">
            <seealso cref="M:iText.Kernel.XMP.XMPDateTime.GetSecond"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPDateTimeImpl.SetSecond(System.Int32)">
            <seealso cref="M:iText.Kernel.XMP.XMPDateTime.SetSecond(System.Int32)"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPDateTimeImpl.GetNanoSecond">
            <seealso cref="M:iText.Kernel.XMP.XMPDateTime.GetNanoSecond"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPDateTimeImpl.SetNanoSecond(System.Int32)">
            <seealso cref="M:iText.Kernel.XMP.XMPDateTime.SetNanoSecond(System.Int32)"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPDateTimeImpl.CompareTo(System.Object)">
            <seealso cref="!:System.IComparable&lt;T&gt;.CompareTo(System.Object)"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPDateTimeImpl.GetTimeZone">
            <seealso cref="M:iText.Kernel.XMP.XMPDateTime.GetTimeZone"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPDateTimeImpl.SetTimeZone(System.TimeZoneInfo)">
            <seealso cref="!:iText.Kernel.XMP.XMPDateTime.SetTimeZone(Java.Util.TimeZoneInfo)"
            	/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPDateTimeImpl.HasDate">
            <seealso cref="M:iText.Kernel.XMP.XMPDateTime.HasDate"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPDateTimeImpl.HasTime">
            <seealso cref="M:iText.Kernel.XMP.XMPDateTime.HasTime"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPDateTimeImpl.HasTimeZone">
            <seealso cref="M:iText.Kernel.XMP.XMPDateTime.HasTimeZone"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPDateTimeImpl.GetCalendar">
            <seealso cref="M:iText.Kernel.XMP.XMPDateTime.GetCalendar"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPDateTimeImpl.GetIso8601String">
            <seealso cref="!:iText.Kernel.XMP.XMPDateTime.GetISO8601String()"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPDateTimeImpl.ToString">
            <returns>Returns the ISO string representation.</returns>
        </member>
        <member name="T:iText.Kernel.XMP.Impl.XMPIteratorImpl">
            <summary>The <code>XMPIterator</code> implementation.</summary>
            <remarks>
            The <code>XMPIterator</code> implementation.
            Iterates the XMP Tree according to a set of options.
            During the iteration the XMPMeta-object must not be changed.
            Calls to <code>skipSubtree()</code> / <code>skipSiblings()</code> will affect the iteration.
            </remarks>
            <since>29.06.2006</since>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.XMPIteratorImpl.options">
            <summary>stores the iterator options</summary>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.XMPIteratorImpl.baseNS">
            <summary>the base namespace of the property path, will be changed during the iteration
            	</summary>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.XMPIteratorImpl.skipSiblings">
            <summary>flag to indicate that skipSiblings() has been called.</summary>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.XMPIteratorImpl.skipSubtree">
            <summary>flag to indicate that skipSiblings() has been called.</summary>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.XMPIteratorImpl.nodeIterator">
            <summary>the node iterator doing the work</summary>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPIteratorImpl.#ctor(iText.Kernel.XMP.Impl.XMPMetaImpl,System.String,System.String,iText.Kernel.XMP.Options.IteratorOptions)">
            <summary>Constructor with optionsl initial values.</summary>
            <remarks>
            Constructor with optionsl initial values. If <code>propName</code> is provided,
            <code>schemaNS</code> has also be provided.
            </remarks>
            <param name="xmp">the iterated metadata object.</param>
            <param name="schemaNS">the iteration is reduced to this schema (optional)</param>
            <param name="propPath">the iteration is redurce to this property within the <code>schemaNS</code>
            	</param>
            <param name="options">
            advanced iteration options, see
            <see cref="T:iText.Kernel.XMP.Options.IteratorOptions"/>
            </param>
            <exception cref="T:iText.Kernel.XMP.XMPException">If the node defined by the paramters is not existing.
            	</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPIteratorImpl.SkipSubtree">
            <seealso cref="M:iText.Kernel.XMP.XMPIterator.SkipSubtree"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPIteratorImpl.SkipSiblings">
            <seealso cref="M:iText.Kernel.XMP.XMPIterator.SkipSiblings"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPIteratorImpl.MoveNext">
            <seealso cref="!:System.Collections.IEnumerator&lt;E&gt;.MoveNext()"/>
        </member>
        <member name="P:iText.Kernel.XMP.Impl.XMPIteratorImpl.Current">
            <seealso cref="!:System.Collections.IEnumerator&lt;E&gt;.Current()"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPIteratorImpl.GetOptions">
            <returns>Exposes the options for inner class.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPIteratorImpl.GetBaseNS">
            <returns>Exposes the options for inner class.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPIteratorImpl.SetBaseNS(System.String)">
            <param name="baseNS">sets the baseNS from the inner class.</param>
        </member>
        <member name="T:iText.Kernel.XMP.Impl.XMPIteratorImpl.NodeIterator">
            <summary>The <code>XMPIterator</code> implementation.</summary>
            <remarks>
            The <code>XMPIterator</code> implementation.
            It first returns the node itself, then recursivly the children and qualifier of the node.
            </remarks>
            <since>29.06.2006</since>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.XMPIteratorImpl.NodeIterator.ITERATE_NODE">
            <summary>
            iteration state </summary>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.XMPIteratorImpl.NodeIterator.ITERATE_CHILDREN">
            <summary>
            iteration state </summary>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.XMPIteratorImpl.NodeIterator.ITERATE_QUALIFIER">
            <summary>
            iteration state </summary>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.XMPIteratorImpl.NodeIterator.path">
            <summary>
            the recursively accumulated path </summary>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.XMPIteratorImpl.NodeIterator.visitedNode">
            <summary>
            the currently visited node </summary>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.XMPIteratorImpl.NodeIterator.childrenIterator">
            <summary>
            the iterator that goes through the children and qualifier list </summary>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.XMPIteratorImpl.NodeIterator.index">
            <summary>
            index of node with parent, only interesting for arrays </summary>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.XMPIteratorImpl.NodeIterator.returnProperty">
            <summary>
            the cached <code>PropertyInfo</code> to return </summary>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.XMPIteratorImpl.NodeIterator.state">
            <summary>
            the state of the iteration </summary>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.XMPIteratorImpl.NodeIterator.subIterator">
            <summary>
            the iterator for each child </summary>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPIteratorImpl.NodeIterator.#ctor(iText.Kernel.XMP.Impl.XMPIteratorImpl,iText.Kernel.XMP.Impl.XMPNode,System.String,System.Int32)">
            <summary>
            Constructor for the node iterator. </summary>
            <param name="visitedNode"> the currently visited node </param>
            <param name="parentPath"> the accumulated path of the node </param>
            <param name="index"> the index within the parent node (only for arrays) </param>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPIteratorImpl.NodeIterator.GetChildrenIterator">
            <returns> the childrenIterator </returns>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPIteratorImpl.NodeIterator.GetReturnProperty">
            <returns> Returns the returnProperty. </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.XMP.Impl.XMPIteratorImpl.NodeIterator.MoveNext" -->
        <member name="M:iText.Kernel.XMP.Impl.XMPIteratorImpl.NodeIterator.ReportNode">
            <summary>
            Sets the returnProperty as next item or recurses into <code>hasNext()</code>. </summary>
            <returns> Returns if there is a next item to return.  </returns>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPIteratorImpl.NodeIterator.IterateChildren(System.Collections.IEnumerator)">
            <summary>
            Handles the iteration of the children or qualfier </summary>
            <param name="iterator"> an iterator </param>
            <returns> Returns if there are more elements available. </returns>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPIteratorImpl.NodeIterator.AccumulatePath(iText.Kernel.XMP.Impl.XMPNode,System.String,System.Int32)">
            <param name="currNode"> the node that will be added to the path. </param>
            <param name="parentPath"> the path up to this node. </param>
            <param name="currentIndex"> the current array index if an arrey is traversed </param>
            <returns> Returns the updated path. </returns>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPIteratorImpl.NodeIterator.CreatePropertyInfo(iText.Kernel.XMP.Impl.XMPNode,System.String,System.String)">
            <summary>
            Creates a property info object from an <code>XMPNode</code>. </summary>
            <param name="node"> an <code>XMPNode</code> </param>
            <param name="baseNs"> the base namespace to report </param>
            <param name="path"> the full property path </param>
            <returns> Returns a <code>XMPProperty</code>-object that serves representation of the node. </returns>
        </member>
        <member name="T:iText.Kernel.XMP.Impl.XMPIteratorImpl.NodeIteratorChildren">
            <summary>
            This iterator is derived from the default <code>NodeIterator</code>,
            and is only used for the option <seealso cref="F:iText.Kernel.XMP.Options.IteratorOptions.JUST_CHILDREN"/>.
            
            @since 02.10.2006
            </summary>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPIteratorImpl.NodeIteratorChildren.#ctor(iText.Kernel.XMP.Impl.XMPIteratorImpl,iText.Kernel.XMP.Impl.XMPNode,System.String)">
            <summary>
            Constructor </summary>
            <param name="parentNode"> the node which children shall be iterated. </param>
            <param name="parentPath"> the full path of the former node without the leaf node. </param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.XMP.Impl.XMPIteratorImpl.NodeIteratorChildren.MoveNext" -->
        <member name="T:iText.Kernel.XMP.Impl.XMPMetaImpl">
            <summary>
            Implementation for
            <see cref="T:iText.Kernel.XMP.XMPMeta"/>
            .
            </summary>
            <since>17.02.2006</since>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.XMPMetaImpl.VALUE_STRING">
            <summary>Property values are Strings by default</summary>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.XMPMetaImpl.tree">
            <summary>root of the metadata tree</summary>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.XMPMetaImpl.packetHeader">
            <summary>the xpacket processing instructions content</summary>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPMetaImpl.#ctor">
            <summary>Constructor for an empty metadata object.</summary>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPMetaImpl.#ctor(iText.Kernel.XMP.Impl.XMPNode)">
            <summary>Constructor for a cloned metadata tree.</summary>
            <param name="tree">
            an prefilled metadata tree which fulfills all
            <code>XMPNode</code> contracts.
            </param>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPMetaImpl.AppendArrayItem(System.String,System.String,iText.Kernel.XMP.Options.PropertyOptions,System.String,iText.Kernel.XMP.Options.PropertyOptions)">
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.AppendArrayItem(System.String,System.String,iText.Kernel.XMP.Options.PropertyOptions,System.String,iText.Kernel.XMP.Options.PropertyOptions)"/>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPMetaImpl.AppendArrayItem(System.String,System.String,System.String)">
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.AppendArrayItem(System.String,System.String,System.String)"/>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPMetaImpl.CountArrayItems(System.String,System.String)">
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.CountArrayItems(System.String,System.String)"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPMetaImpl.DeleteArrayItem(System.String,System.String,System.Int32)">
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.DeleteArrayItem(System.String,System.String,System.Int32)"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPMetaImpl.DeleteProperty(System.String,System.String)">
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.DeleteProperty(System.String,System.String)"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPMetaImpl.DeleteQualifier(System.String,System.String,System.String,System.String)">
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.DeleteQualifier(System.String,System.String,System.String,System.String)"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPMetaImpl.DeleteStructField(System.String,System.String,System.String,System.String)">
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.DeleteStructField(System.String,System.String,System.String,System.String)"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPMetaImpl.DoesPropertyExist(System.String,System.String)">
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.DoesPropertyExist(System.String,System.String)"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPMetaImpl.DoesArrayItemExist(System.String,System.String,System.Int32)">
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.DoesArrayItemExist(System.String,System.String,System.Int32)"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPMetaImpl.DoesStructFieldExist(System.String,System.String,System.String,System.String)">
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.DoesStructFieldExist(System.String,System.String,System.String,System.String)"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPMetaImpl.DoesQualifierExist(System.String,System.String,System.String,System.String)">
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.DoesQualifierExist(System.String,System.String,System.String,System.String)"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPMetaImpl.GetArrayItem(System.String,System.String,System.Int32)">
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.GetArrayItem(System.String,System.String,System.Int32)"/>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPMetaImpl.GetLocalizedText(System.String,System.String,System.String,System.String)">
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.GetLocalizedText(System.String,System.String,System.String,System.String)"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPMetaImpl.SetLocalizedText(System.String,System.String,System.String,System.String,System.String,iText.Kernel.XMP.Options.PropertyOptions)">
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.SetLocalizedText(System.String,System.String,System.String,System.String,System.String,iText.Kernel.XMP.Options.PropertyOptions)"/>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPMetaImpl.SetLocalizedText(System.String,System.String,System.String,System.String,System.String)">
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.SetLocalizedText(System.String,System.String,System.String,System.String,System.String)"/>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPMetaImpl.GetProperty(System.String,System.String)">
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.GetProperty(System.String,System.String)"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPMetaImpl.GetProperty(System.String,System.String,System.Int32)">
            <summary>Returns a property, but the result value can be requested.</summary>
            <remarks>
            Returns a property, but the result value can be requested. It can be one
            of
            <see cref="F:iText.Kernel.XMP.Impl.XMPMetaImpl.VALUE_STRING"/>
            ,
            <see cref="F:iText.Kernel.XMP.Impl.XMPMetaImpl.VALUE_BOOLEAN"/>
            ,
            <see cref="F:iText.Kernel.XMP.Impl.XMPMetaImpl.VALUE_INTEGER"/>
            ,
            <see cref="F:iText.Kernel.XMP.Impl.XMPMetaImpl.VALUE_LONG"/>
            ,
            <see cref="F:iText.Kernel.XMP.Impl.XMPMetaImpl.VALUE_DOUBLE"/>
            ,
            <see cref="F:iText.Kernel.XMP.Impl.XMPMetaImpl.VALUE_DATE"/>
            ,
            <see cref="F:iText.Kernel.XMP.Impl.XMPMetaImpl.VALUE_CALENDAR"/>
            ,
            <see cref="F:iText.Kernel.XMP.Impl.XMPMetaImpl.VALUE_BASE64"/>
            .
            </remarks>
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.GetProperty(System.String,System.String)"/>
            <param name="schemaNS">a schema namespace</param>
            <param name="propName">a property name or path</param>
            <param name="valueType">the type of the value, see VALUE_...</param>
            <returns>Returns an <code>XMPProperty</code></returns>
            <exception cref="T:iText.Kernel.XMP.XMPException">Collects any exception that occurs.
            	</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPMetaImpl.GetPropertyObject(System.String,System.String,System.Int32)">
            <summary>Returns a property, but the result value can be requested.</summary>
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.GetProperty(System.String,System.String)"/>
            <param name="schemaNS">a schema namespace</param>
            <param name="propName">a property name or path</param>
            <param name="valueType">the type of the value, see VALUE_...</param>
            <returns>
            Returns the node value as an object according to the
            <code>valueType</code>.
            </returns>
            <exception cref="T:iText.Kernel.XMP.XMPException">Collects any exception that occurs.
            	</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPMetaImpl.GetPropertyBoolean(System.String,System.String)">
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.GetPropertyBoolean(System.String,System.String)"/>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPMetaImpl.SetPropertyBoolean(System.String,System.String,System.Boolean,iText.Kernel.XMP.Options.PropertyOptions)">
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.SetPropertyBoolean(System.String,System.String,System.Boolean,iText.Kernel.XMP.Options.PropertyOptions)"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPMetaImpl.SetPropertyBoolean(System.String,System.String,System.Boolean)">
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.SetPropertyBoolean(System.String,System.String,System.Boolean)"/>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPMetaImpl.GetPropertyInteger(System.String,System.String)">
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.GetPropertyInteger(System.String,System.String)"/>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPMetaImpl.SetPropertyInteger(System.String,System.String,System.Int32,iText.Kernel.XMP.Options.PropertyOptions)">
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.SetPropertyInteger(System.String,System.String,System.Int32,iText.Kernel.XMP.Options.PropertyOptions)"/>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPMetaImpl.SetPropertyInteger(System.String,System.String,System.Int32)">
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.SetPropertyInteger(System.String,System.String,System.Int32)"/>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPMetaImpl.GetPropertyLong(System.String,System.String)">
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.GetPropertyLong(System.String,System.String)"/>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPMetaImpl.SetPropertyLong(System.String,System.String,System.Int64,iText.Kernel.XMP.Options.PropertyOptions)">
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.SetPropertyLong(System.String,System.String,System.Int64,iText.Kernel.XMP.Options.PropertyOptions)"/>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPMetaImpl.SetPropertyLong(System.String,System.String,System.Int64)">
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.SetPropertyLong(System.String,System.String,System.Int64)"/>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPMetaImpl.GetPropertyDouble(System.String,System.String)">
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.GetPropertyDouble(System.String,System.String)"/>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPMetaImpl.SetPropertyDouble(System.String,System.String,System.Double,iText.Kernel.XMP.Options.PropertyOptions)">
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.SetPropertyDouble(System.String,System.String,System.Double,iText.Kernel.XMP.Options.PropertyOptions)"/>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPMetaImpl.SetPropertyDouble(System.String,System.String,System.Double)">
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.SetPropertyDouble(System.String,System.String,System.Double)"/>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPMetaImpl.GetPropertyDate(System.String,System.String)">
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.GetPropertyDate(System.String,System.String)"/>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPMetaImpl.SetPropertyDate(System.String,System.String,iText.Kernel.XMP.XMPDateTime,iText.Kernel.XMP.Options.PropertyOptions)">
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.SetPropertyDate(System.String,System.String,iText.Kernel.XMP.XMPDateTime,iText.Kernel.XMP.Options.PropertyOptions)"/>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPMetaImpl.SetPropertyDate(System.String,System.String,iText.Kernel.XMP.XMPDateTime)">
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.SetPropertyDate(System.String,System.String,iText.Kernel.XMP.XMPDateTime)"/>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPMetaImpl.GetPropertyCalendar(System.String,System.String)">
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.GetPropertyCalendar(System.String,System.String)"/>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPMetaImpl.SetPropertyCalendar(System.String,System.String,System.DateTime,iText.Kernel.XMP.Options.PropertyOptions)">
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.SetPropertyCalendar(System.String,System.String,System.DateTime,iText.Kernel.XMP.Options.PropertyOptions)"/>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPMetaImpl.SetPropertyCalendar(System.String,System.String,System.DateTime)">
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.SetPropertyCalendar(System.String,System.String,System.DateTime)"/>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPMetaImpl.GetPropertyBase64(System.String,System.String)">
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.GetPropertyBase64(System.String,System.String)"/>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPMetaImpl.GetPropertyString(System.String,System.String)">
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.GetPropertyString(System.String,System.String)"/>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPMetaImpl.SetPropertyBase64(System.String,System.String,System.Byte[],iText.Kernel.XMP.Options.PropertyOptions)">
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.SetPropertyBase64(System.String,System.String,System.Byte[],iText.Kernel.XMP.Options.PropertyOptions)"/>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPMetaImpl.SetPropertyBase64(System.String,System.String,System.Byte[])">
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.SetPropertyBase64(System.String,System.String,System.Byte[])"/>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPMetaImpl.GetQualifier(System.String,System.String,System.String,System.String)">
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.GetQualifier(System.String,System.String,System.String,System.String)"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPMetaImpl.GetStructField(System.String,System.String,System.String,System.String)">
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.GetStructField(System.String,System.String,System.String,System.String)"/>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPMetaImpl.Iterator">
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.Iterator"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPMetaImpl.Iterator(iText.Kernel.XMP.Options.IteratorOptions)">
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.Iterator(iText.Kernel.XMP.Options.IteratorOptions)"/>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPMetaImpl.Iterator(System.String,System.String,iText.Kernel.XMP.Options.IteratorOptions)">
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.Iterator(System.String,System.String,iText.Kernel.XMP.Options.IteratorOptions)"/>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPMetaImpl.SetArrayItem(System.String,System.String,System.Int32,System.String,iText.Kernel.XMP.Options.PropertyOptions)">
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.SetArrayItem(System.String,System.String,System.Int32,System.String,iText.Kernel.XMP.Options.PropertyOptions)"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPMetaImpl.SetArrayItem(System.String,System.String,System.Int32,System.String)">
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.SetArrayItem(System.String,System.String,System.Int32,System.String)"/>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPMetaImpl.InsertArrayItem(System.String,System.String,System.Int32,System.String,iText.Kernel.XMP.Options.PropertyOptions)">
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.InsertArrayItem(System.String,System.String,System.Int32,System.String,iText.Kernel.XMP.Options.PropertyOptions)"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPMetaImpl.InsertArrayItem(System.String,System.String,System.Int32,System.String)">
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.InsertArrayItem(System.String,System.String,System.Int32,System.String)"/>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPMetaImpl.SetProperty(System.String,System.String,System.Object,iText.Kernel.XMP.Options.PropertyOptions)">
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.SetProperty(System.String,System.String,System.Object,iText.Kernel.XMP.Options.PropertyOptions)"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPMetaImpl.SetProperty(System.String,System.String,System.Object)">
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.SetProperty(System.String,System.String,System.Object)"/>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPMetaImpl.SetQualifier(System.String,System.String,System.String,System.String,System.String,iText.Kernel.XMP.Options.PropertyOptions)">
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.SetQualifier(System.String,System.String,System.String,System.String,System.String,iText.Kernel.XMP.Options.PropertyOptions)"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPMetaImpl.SetQualifier(System.String,System.String,System.String,System.String,System.String)">
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.SetQualifier(System.String,System.String,System.String,System.String,System.String)"/>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPMetaImpl.SetStructField(System.String,System.String,System.String,System.String,System.String,iText.Kernel.XMP.Options.PropertyOptions)">
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.SetStructField(System.String,System.String,System.String,System.String,System.String,iText.Kernel.XMP.Options.PropertyOptions)"/>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPMetaImpl.SetStructField(System.String,System.String,System.String,System.String,System.String)">
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.SetStructField(System.String,System.String,System.String,System.String,System.String)"/>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPMetaImpl.GetObjectName">
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.GetObjectName"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPMetaImpl.SetObjectName(System.String)">
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.SetObjectName(System.String)"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPMetaImpl.GetPacketHeader">
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.GetPacketHeader"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPMetaImpl.SetPacketHeader(System.String)">
            <summary>Sets the packetHeader attributes, only used by the parser.</summary>
            <param name="packetHeader">the processing instruction content</param>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPMetaImpl.Clone">
            <summary>Performs a deep clone of the XMPMeta-object</summary>
            <seealso cref="!:System.Object.Clone()"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPMetaImpl.DumpObject">
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.DumpObject"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPMetaImpl.Sort">
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.Sort"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPMetaImpl.Normalize(iText.Kernel.XMP.Options.ParseOptions)">
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.Normalize(iText.Kernel.XMP.Options.ParseOptions)"/>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPMetaImpl.GetRoot">
            <returns>Returns the root node of the XMP tree.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPMetaImpl.DoSetArrayItem(iText.Kernel.XMP.Impl.XMPNode,System.Int32,System.String,iText.Kernel.XMP.Options.PropertyOptions,System.Boolean)">
            <summary>Locate or create the item node and set the value.</summary>
            <remarks>
            Locate or create the item node and set the value. Note the index
            parameter is one-based! The index can be in the range [1..size + 1] or
            "last()", normalize it and check the insert flags. The order of the
            normalization checks is important. If the array is empty we end up with
            an index and location to set item size + 1.
            </remarks>
            <param name="arrayNode">an array node</param>
            <param name="itemIndex">the index where to insert the item</param>
            <param name="itemValue">the item value</param>
            <param name="itemOptions">the options for the new item</param>
            <param name="insert">insert oder overwrite at index position?</param>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPMetaImpl.SetNode(iText.Kernel.XMP.Impl.XMPNode,System.Object,iText.Kernel.XMP.Options.PropertyOptions,System.Boolean)">
            <summary>
            The internals for setProperty() and related calls, used after the node is
            found or created.
            </summary>
            <param name="node">the newly created node</param>
            <param name="value">the node value, can be <code>null</code></param>
            <param name="newOptions">options for the new node, must not be <code>null</code>.
            	</param>
            <param name="deleteExisting">flag if the existing value is to be overwritten</param>
            <exception cref="T:iText.Kernel.XMP.XMPException">thrown if options and value do not correspond
            	</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPMetaImpl.EvaluateNodeValue(System.Int32,iText.Kernel.XMP.Impl.XMPNode)">
            <summary>
            Evaluates a raw node value to the given value type, apply special
            conversions for defined types in XMP.
            </summary>
            <param name="valueType">an int indicating the value type</param>
            <param name="propNode">the node containing the value</param>
            <returns>Returns a literal value for the node.</returns>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="T:iText.Kernel.XMP.Impl.XMPMetaParser">
            <summary>
            This class replaces the <code>ExpatAdapter.cpp</code> and does the
            XML-parsing and fixes the prefix.
            </summary>
            <remarks>
            This class replaces the <code>ExpatAdapter.cpp</code> and does the
            XML-parsing and fixes the prefix. After the parsing several normalisations
            are applied to the XMPTree.
            </remarks>
            <since>01.02.2006</since>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPMetaParser.#ctor">
            <summary>Hidden constructor, initialises the SAX parser handler.</summary>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPMetaParser.Parse(System.Object,iText.Kernel.XMP.Options.ParseOptions)">
            <summary>
            Parses the input source into an XMP metadata object, including
            de-aliasing and normalisation.
            </summary>
            <param name="input">
            the input can be an <code>InputStream</code>, a <code>String</code> or
            a byte buffer containing the XMP packet.
            </param>
            <param name="options">the parse options</param>
            <returns>Returns the resulting XMP metadata object</returns>
            <exception cref="T:iText.Kernel.XMP.XMPException">Thrown if parsing or normalisation fails.
            	</exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.XMP.Impl.XMPMetaParser.ParseXml(System.Object,iText.Kernel.XMP.Options.ParseOptions)" -->
        <member name="M:iText.Kernel.XMP.Impl.XMPMetaParser.ParseXmlFromInputStream(System.IO.Stream,iText.Kernel.XMP.Options.ParseOptions)">
            <summary>
            Parses XML from an <seealso cref="T:System.IO.Stream"/>,
            fixing the encoding (Latin-1 to UTF-8) and illegal control character optionally.
            </summary>
            <param name="stream"> an <code>InputStream</code> </param>
            <param name="options"> the parsing options </param>
            <returns> Returns an XML DOM-Document. </returns>
            <exception cref="T:iText.Kernel.XMP.XMPException"> Thrown when the parsing fails. </exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPMetaParser.ParseXmlFromBytebuffer(iText.Kernel.XMP.Impl.ByteBuffer,iText.Kernel.XMP.Options.ParseOptions)">
            <summary>
            Parses XML from a byte buffer,
            fixing the encoding (Latin-1 to UTF-8) and illegal control character optionally.
            </summary>
            <param name="buffer">a byte buffer containing the XMP packet</param>
            <param name="options">the parsing options</param>
            <returns>Returns an XML DOM-Document.</returns>
            <exception cref="T:iText.Kernel.XMP.XMPException">Thrown when the parsing fails.
            	</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPMetaParser.ParseXmlFromString(System.String,iText.Kernel.XMP.Options.ParseOptions)">
            <summary>
            Parses XML from a
            <see cref="T:System.String"/>
            ,
            fixing the illegal control character optionally.
            </summary>
            <param name="input">a <code>String</code> containing the XMP packet</param>
            <param name="options">the parsing options</param>
            <returns>Returns an XML DOM-Document.</returns>
            <exception cref="T:iText.Kernel.XMP.XMPException">Thrown when the parsing fails.
            	</exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.XMP.Impl.XMPMetaParser.FindRootNode(System.Xml.XmlNode,System.Boolean,System.Object[])" -->
        <member name="T:iText.Kernel.XMP.Impl.XMPNode">
            <summary>
            A node in the internally XMP tree, which can be a schema node, a property node, an array node,
            an array item, a struct node or a qualifier node (without '?').
            </summary>
            <remarks>
            A node in the internally XMP tree, which can be a schema node, a property node, an array node,
            an array item, a struct node or a qualifier node (without '?').
            Possible improvements:
            1. The kind Node of node might be better represented by a class-hierarchy of different nodes.
            2. The array type should be an enum
            3. isImplicitNode should be removed completely and replaced by return values of fi.
            4. hasLanguage, hasType should be automatically maintained by XMPNode
            </remarks>
            <since>21.02.2006</since>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.XMPNode.name">
            <summary>name of the node, contains different information depending of the node kind
            	</summary>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.XMPNode.value">
            <summary>value of the node, contains different information depending of the node kind
            	</summary>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.XMPNode.parent">
            <summary>link to the parent node</summary>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.XMPNode.children">
            <summary>list of child nodes, lazy initialized</summary>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.XMPNode.qualifier">
            <summary>list of qualifier of the node, lazy initialized</summary>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.XMPNode.options">
            <summary>options describing the kind of the node</summary>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.XMPNode.implicit">
            <summary>flag if the node is implicitly created</summary>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.XMPNode.hasAliases">
            <summary>flag if the node has aliases</summary>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.XMPNode.alias">
            <summary>flag if the node is an alias</summary>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.XMPNode.hasValueChild">
            <summary>flag if the node has an "rdf:value" child node.</summary>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNode.#ctor(System.String,System.String,iText.Kernel.XMP.Options.PropertyOptions)">
            <summary>Creates an <code>XMPNode</code> with initial values.</summary>
            <param name="name">the name of the node</param>
            <param name="value">the value of the node</param>
            <param name="options">the options of the node</param>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNode.#ctor(System.String,iText.Kernel.XMP.Options.PropertyOptions)">
            <summary>Constructor for the node without value.</summary>
            <param name="name">the name of the node</param>
            <param name="options">the options of the node</param>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNode.Clear">
            <summary>Resets the node.</summary>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNode.GetParent">
            <returns>Returns the parent node.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNode.GetChild(System.Int32)">
            <param name="index">an index [1..size]</param>
            <returns>Returns the child with the requested index.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNode.AddChild(iText.Kernel.XMP.Impl.XMPNode)">
            <summary>Adds a node as child to this node.</summary>
            <param name="node">an XMPNode</param>
            <exception cref="T:iText.Kernel.XMP.XMPException"></exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNode.AddChild(System.Int32,iText.Kernel.XMP.Impl.XMPNode)">
            <summary>Adds a node as child to this node.</summary>
            <param name="index">
            the index of the node <em>before</em> which the new one is inserted.
            <em>Note:</em> The node children are indexed from [1..size]!
            An index of size + 1 appends a node.
            </param>
            <param name="node">an XMPNode</param>
            <exception cref="T:iText.Kernel.XMP.XMPException"></exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNode.ReplaceChild(System.Int32,iText.Kernel.XMP.Impl.XMPNode)">
            <summary>Replaces a node with another one.</summary>
            <param name="index">
            the index of the node that will be replaced.
            <em>Note:</em> The node children are indexed from [1..size]!
            </param>
            <param name="node">the replacement XMPNode</param>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNode.RemoveChild(System.Int32)">
            <summary>Removes a child at the requested index.</summary>
            <param name="itemIndex">the index to remove [1..size]</param>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNode.RemoveChild(iText.Kernel.XMP.Impl.XMPNode)">
            <summary>Removes a child node.</summary>
            <remarks>
            Removes a child node.
            If its a schema node and doesn't have any children anymore, its deleted.
            </remarks>
            <param name="node">the child node to delete.</param>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNode.CleanupChildren">
            <summary>
            Removes the children list if this node has no children anymore;
            checks if the provided node is a schema node and doesn't have any children anymore,
            its deleted.
            </summary>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNode.RemoveChildren">
            <summary>Removes all children from the node.</summary>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNode.GetChildrenLength">
            <returns>Returns the number of children without neccessarily creating a list.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNode.FindChildByName(System.String)">
            <param name="expr">child node name to look for</param>
            <returns>Returns an <code>XMPNode</code> if node has been found, <code>null</code> otherwise.
            	</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNode.GetQualifier(System.Int32)">
            <param name="index">an index [1..size]</param>
            <returns>Returns the qualifier with the requested index.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNode.GetQualifierLength">
            <returns>Returns the number of qualifier without neccessarily creating a list.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNode.AddQualifier(iText.Kernel.XMP.Impl.XMPNode)">
            <summary>Appends a qualifier to the qualifier list and sets respective options.</summary>
            <param name="qualNode">a qualifier node.</param>
            <exception cref="T:iText.Kernel.XMP.XMPException"></exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNode.RemoveQualifier(iText.Kernel.XMP.Impl.XMPNode)">
            <summary>Removes one qualifier node and fixes the options.</summary>
            <param name="qualNode">qualifier to remove</param>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNode.RemoveQualifiers">
            <summary>Removes all qualifiers from the node and sets the options appropriate.</summary>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNode.FindQualifierByName(System.String)">
            <param name="expr">qualifier node name to look for</param>
            <returns>
            Returns a qualifier <code>XMPNode</code> if node has been found,
            <code>null</code> otherwise.
            </returns>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNode.HasChildren">
            <returns>Returns whether the node has children.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNode.IterateChildren">
            <returns>
            Returns an iterator for the children.
            <em>Note:</em> take care to use it.remove(), as the flag are not adjusted in that case.
            </returns>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNode.HasQualifier">
            <returns>Returns whether the node has qualifier attached.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNode.IterateQualifier">
            <returns>
            Returns an iterator for the qualifier.
            <em>Note:</em> take care to use it.remove(), as the flag are not adjusted in that case.
            </returns>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNode.Clone">
            <summary>Performs a <b>deep clone</b> of the node and the complete subtree.</summary>
            <seealso cref="!:System.Object.Clone()"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNode.CloneSubtree(iText.Kernel.XMP.Impl.XMPNode)">
            <summary>
            Performs a <b>deep clone</b> of the complete subtree (children and
            qualifier )into and add it to the destination node.
            </summary>
            <param name="destination">the node to add the cloned subtree</param>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNode.DumpNode(System.Boolean)">
            <summary>Renders this node and the tree unter this node in a human readable form.
            	</summary>
            <param name="recursive">Flag is qualifier and child nodes shall be rendered too</param>
            <returns>Returns a multiline string containing the dump.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNode.CompareTo(System.Object)">
            <seealso cref="!:System.IComparable&lt;T&gt;.CompareTo(System.Object)"></seealso>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNode.GetName">
            <returns>Returns the name.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNode.SetName(System.String)">
            <param name="name">The name to set.</param>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNode.GetValue">
            <returns>Returns the value.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNode.SetValue(System.String)">
            <param name="value">The value to set.</param>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNode.GetOptions">
            <returns>Returns the options.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNode.SetOptions(iText.Kernel.XMP.Options.PropertyOptions)">
            <summary>Updates the options of the node.</summary>
            <param name="options">the options to set.</param>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNode.IsImplicit">
            <returns>Returns the implicit flag</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNode.SetImplicit(System.Boolean)">
            <param name="implicit">Sets the implicit node flag</param>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNode.GetHasAliases">
            <returns>Returns if the node contains aliases (applies only to schema nodes)</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNode.SetHasAliases(System.Boolean)">
            <param name="hasAliases">sets the flag that the node contains aliases</param>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNode.IsAlias">
            <returns>Returns if the node contains aliases (applies only to schema nodes)</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNode.SetAlias(System.Boolean)">
            <param name="alias">sets the flag that the node is an alias</param>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNode.GetHasValueChild">
            <returns>the hasValueChild</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNode.SetHasValueChild(System.Boolean)">
            <param name="hasValueChild">the hasValueChild to set</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.XMP.Impl.XMPNode.Sort" -->
        <member name="M:iText.Kernel.XMP.Impl.XMPNode.DumpNode(System.Text.StringBuilder,System.Boolean,System.Int32,System.Int32)">
            <summary>Dumps this node and its qualifier and children recursively.</summary>
            <remarks>
            Dumps this node and its qualifier and children recursively.
            <em>Note:</em> It creats empty options on every node.
            </remarks>
            <param name="result">the buffer to append the dump.</param>
            <param name="recursive">Flag is qualifier and child nodes shall be rendered too</param>
            <param name="indent">the current indent level.</param>
            <param name="index">the index within the parent node (important for arrays)</param>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNode.IsLanguageNode">
            <returns>Returns whether this node is a language qualifier.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNode.IsTypeNode">
            <returns>Returns whether this node is a type qualifier.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNode.GetChildren">
            <summary>
            <em>Note:</em> This method should always be called when accessing 'children' to be sure
            that its initialized.
            </summary>
            <returns>Returns list of children that is lazy initialized.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNode.GetUnmodifiableChildren">
            <returns>Returns a read-only copy of child nodes list.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNode.GetQualifier">
            <returns>Returns list of qualifier that is lazy initialized.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNode.SetParent(iText.Kernel.XMP.Impl.XMPNode)">
            <summary>
            Sets the parent node, this is solely done by <code>addChild(...)</code>
            and <code>addQualifier()</code>.
            </summary>
            <param name="parent">Sets the parent node.</param>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNode.Find(System.Collections.IList,System.String)">
            <summary>Internal find.</summary>
            <param name="list">the list to search in</param>
            <param name="expr">the search expression</param>
            <returns>Returns the found node or <code>nulls</code>.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNode.AssertChildNotExisting(System.String)">
            <summary>Checks that a node name is not existing on the same level, except for array items.
            	</summary>
            <param name="childName">the node name to check</param>
            <exception cref="T:iText.Kernel.XMP.XMPException">Thrown if a node with the same name is existing.
            	</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNode.AssertQualifierNotExisting(System.String)">
            <summary>Checks that a qualifier name is not existing on the same level.</summary>
            <param name="qualifierName">the new qualifier name</param>
            <exception cref="T:iText.Kernel.XMP.XMPException">Thrown if a node with the same name is existing.
            	</exception>
        </member>
        <member name="T:iText.Kernel.XMP.Impl.XMPNodeUtils">
            <summary>Utilities for <code>XMPNode</code>.</summary>
            <since>Aug 28, 2006</since>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNodeUtils.#ctor">
            <summary>Private Constructor</summary>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNodeUtils.FindSchemaNode(iText.Kernel.XMP.Impl.XMPNode,System.String,System.Boolean)">
            <summary>Find or create a schema node if <code>createNodes</code> is false and</summary>
            <param name="tree">the root of the xmp tree.</param>
            <param name="namespaceURI">a namespace</param>
            <param name="createNodes">
            a flag indicating if the node shall be created if not found.
            <em>Note:</em> The namespace must be registered prior to this call.
            </param>
            <returns>
            Returns the schema node if found, <code>null</code> otherwise.
            Note: If <code>createNodes</code> is <code>true</code>, it is <b>always</b>
            returned a valid node.
            </returns>
            <exception cref="T:iText.Kernel.XMP.XMPException">
            An exception is only thrown if an error occurred, not if a
            node was not found.
            </exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNodeUtils.FindSchemaNode(iText.Kernel.XMP.Impl.XMPNode,System.String,System.String,System.Boolean)">
            <summary>Find or create a schema node if <code>createNodes</code> is true.</summary>
            <param name="tree">the root of the xmp tree.</param>
            <param name="namespaceURI">a namespace</param>
            <param name="suggestedPrefix">If a prefix is suggested, the namespace is allowed to be registered.
            	</param>
            <param name="createNodes">
            a flag indicating if the node shall be created if not found.
            <em>Note:</em> The namespace must be registered prior to this call.
            </param>
            <returns>
            Returns the schema node if found, <code>null</code> otherwise.
            Note: If <code>createNodes</code> is <code>true</code>, it is <b>always</b>
            returned a valid node.
            </returns>
            <exception cref="T:iText.Kernel.XMP.XMPException">
            An exception is only thrown if an error occurred, not if a
            node was not found.
            </exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNodeUtils.FindChildNode(iText.Kernel.XMP.Impl.XMPNode,System.String,System.Boolean)">
            <summary>Find or create a child node under a given parent node.</summary>
            <remarks>
            Find or create a child node under a given parent node. If the parent node is no
            Returns the found or created child node.
            </remarks>
            <param name="parent">the parent node</param>
            <param name="childName">the node name to find</param>
            <param name="createNodes">flag, if new nodes shall be created.</param>
            <returns>Returns the found or created node or <code>null</code>.</returns>
            <exception cref="T:iText.Kernel.XMP.XMPException">Thrown if</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNodeUtils.FindNode(iText.Kernel.XMP.Impl.XMPNode,iText.Kernel.XMP.Impl.XPath.XMPPath,System.Boolean,iText.Kernel.XMP.Options.PropertyOptions)">
            <summary>Follow an expanded path expression to find or create a node.</summary>
            <param name="xmpTree">the node to begin the search.</param>
            <param name="xpath">the complete xpath</param>
            <param name="createNodes">
            flag if nodes shall be created
            (when called by <code>setProperty()</code>)
            </param>
            <param name="leafOptions">
            the options for the created leaf nodes (only when
            <code>createNodes == true</code>).
            </param>
            <returns>Returns the node if found or created or <code>null</code>.</returns>
            <exception cref="T:iText.Kernel.XMP.XMPException">
            An exception is only thrown if an error occurred,
            not if a node was not found.
            </exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNodeUtils.DeleteNode(iText.Kernel.XMP.Impl.XMPNode)">
            <summary>Deletes the the given node and its children from its parent.</summary>
            <remarks>
            Deletes the the given node and its children from its parent.
            Takes care about adjusting the flags.
            </remarks>
            <param name="node">the top-most node to delete.</param>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNodeUtils.SetNodeValue(iText.Kernel.XMP.Impl.XMPNode,System.Object)">
            <summary>This is setting the value of a leaf node.</summary>
            <param name="node">an XMPNode</param>
            <param name="value">a value</param>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNodeUtils.VerifySetOptions(iText.Kernel.XMP.Options.PropertyOptions,System.Object)">
            <summary>Verifies the PropertyOptions for consistancy and updates them as needed.
            	</summary>
            <remarks>
            Verifies the PropertyOptions for consistancy and updates them as needed.
            If options are <code>null</code> they are created with default values.
            </remarks>
            <param name="options">the <code>PropertyOptions</code></param>
            <param name="itemValue">the node value to set</param>
            <returns>Returns the updated options.</returns>
            <exception cref="T:iText.Kernel.XMP.XMPException">If the options are not consistant.
            	</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNodeUtils.SerializeNodeValue(System.Object)">
            <summary>
            Converts the node value to String, apply special conversions for defined
            types in XMP.
            </summary>
            <param name="value">the node value to set</param>
            <returns>Returns the String representation of the node value.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.XMP.Impl.XMPNodeUtils.FollowXPathStep(iText.Kernel.XMP.Impl.XMPNode,iText.Kernel.XMP.Impl.XPath.XMPPathSegment,System.Boolean)" -->
        <member name="M:iText.Kernel.XMP.Impl.XMPNodeUtils.FindQualifierNode(iText.Kernel.XMP.Impl.XMPNode,System.String,System.Boolean)">
            <summary>Find or create a qualifier node under a given parent node.</summary>
            <remarks>
            Find or create a qualifier node under a given parent node. Returns a pointer to the
            qualifier node, and optionally an iterator for the node's position in
            the parent's vector of qualifiers. The iterator is unchanged if no qualifier node (null)
            is returned.
            <em>Note:</em> On entry, the qualName parameter must not have the leading '?' from the
            XMPPath step.
            </remarks>
            <param name="parent">the parent XMPNode</param>
            <param name="qualName">the qualifier name</param>
            <param name="createNodes">flag if nodes shall be created</param>
            <returns>Returns the qualifier node if found or created, <code>null</code> otherwise.
            	</returns>
            <exception cref="T:iText.Kernel.XMP.XMPException"></exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNodeUtils.FindIndexedItem(iText.Kernel.XMP.Impl.XMPNode,System.String,System.Boolean)">
            <param name="arrayNode">an array node</param>
            <param name="segment">the segment containing the array index</param>
            <param name="createNodes">flag if new nodes are allowed to be created.</param>
            <returns>Returns the index or index = -1 if not found</returns>
            <exception cref="T:iText.Kernel.XMP.XMPException">Throws Exceptions</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNodeUtils.LookupFieldSelector(iText.Kernel.XMP.Impl.XMPNode,System.String,System.String)">
            <summary>
            Searches for a field selector in a node:
            [fieldName="value] - an element in an array of structs, chosen by a field value.
            </summary>
            <remarks>
            Searches for a field selector in a node:
            [fieldName="value] - an element in an array of structs, chosen by a field value.
            No implicit nodes are created by field selectors.
            </remarks>
            <param name="arrayNode"/>
            <param name="fieldName"/>
            <param name="fieldValue"/>
            <returns>Returns the index of the field if found, otherwise -1.</returns>
            <exception cref="T:iText.Kernel.XMP.XMPException"></exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNodeUtils.LookupQualSelector(iText.Kernel.XMP.Impl.XMPNode,System.String,System.String,System.Int32)">
            <summary>
            Searches for a qualifier selector in a node:
            [?qualName="value"] - an element in an array, chosen by a qualifier value.
            </summary>
            <remarks>
            Searches for a qualifier selector in a node:
            [?qualName="value"] - an element in an array, chosen by a qualifier value.
            No implicit nodes are created for qualifier selectors,
            except for an alias to an x-default item.
            </remarks>
            <param name="arrayNode">an array node</param>
            <param name="qualName">the qualifier name</param>
            <param name="qualValue">the qualifier value</param>
            <param name="aliasForm">
            in case the qual selector results from an alias,
            an x-default node is created if there has not been one.
            </param>
            <returns>Returns the index of th</returns>
            <exception cref="T:iText.Kernel.XMP.XMPException"></exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNodeUtils.NormalizeLangArray(iText.Kernel.XMP.Impl.XMPNode)">
            <summary>Make sure the x-default item is first.</summary>
            <remarks>
            Make sure the x-default item is first. Touch up &quot;single value&quot;
            arrays that have a default plus one real language. This case should have
            the same value for both items. Older Adobe apps were hardwired to only
            use the &quot;x-default&quot; item, so we copy that value to the other
            item.
            </remarks>
            <param name="arrayNode">an alt text array node</param>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNodeUtils.DetectAltText(iText.Kernel.XMP.Impl.XMPNode)">
            <summary>See if an array is an alt-text array.</summary>
            <remarks>
            See if an array is an alt-text array. If so, make sure the x-default item
            is first.
            </remarks>
            <param name="arrayNode">the array node to check if its an alt-text array</param>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNodeUtils.AppendLangItem(iText.Kernel.XMP.Impl.XMPNode,System.String,System.String)">
            <summary>Appends a language item to an alt text array.</summary>
            <param name="arrayNode">the language array</param>
            <param name="itemLang">the language of the item</param>
            <param name="itemValue">the content of the item</param>
            <exception cref="T:iText.Kernel.XMP.XMPException">Thrown if a duplicate property is added
            	</exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.XMP.Impl.XMPNodeUtils.ChooseLocalizedText(iText.Kernel.XMP.Impl.XMPNode,System.String,System.String)" -->
        <member name="M:iText.Kernel.XMP.Impl.XMPNodeUtils.LookupLanguageItem(iText.Kernel.XMP.Impl.XMPNode,System.String)">
            <summary>Looks for the appropriate language item in a text alternative array.item
            	</summary>
            <param name="arrayNode">an array node</param>
            <param name="language">the requested language</param>
            <returns>Returns the index if the language has been found, -1 otherwise.</returns>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="T:iText.Kernel.XMP.Impl.XMPNormalizer">
            <since>Aug 18, 2006</since>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.XMPNormalizer.dcArrayForms">
            <summary>caches the correct dc-property array forms</summary>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNormalizer.#ctor">
            <summary>Hidden constructor</summary>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNormalizer.Process(iText.Kernel.XMP.Impl.XMPMetaImpl,iText.Kernel.XMP.Options.ParseOptions)">
            <summary>Normalizes a raw parsed XMPMeta-Object</summary>
            <param name="xmp">the raw metadata object</param>
            <param name="options">the parsing options</param>
            <returns>Returns the normalized metadata object</returns>
            <exception cref="T:iText.Kernel.XMP.XMPException">Collects all severe processing errors.
            	</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNormalizer.TweakOldXMP(iText.Kernel.XMP.Impl.XMPNode)">
            <summary>
            Tweak old XMP: Move an instance ID from rdf:about to the
            <em>xmpMM:InstanceID</em> property.
            </summary>
            <remarks>
            Tweak old XMP: Move an instance ID from rdf:about to the
            <em>xmpMM:InstanceID</em> property. An old instance ID usually looks
            like &quot;uuid:bac965c4-9d87-11d9-9a30-000d936b79c4&quot;, plus InDesign
            3.0 wrote them like &quot;bac965c4-9d87-11d9-9a30-000d936b79c4&quot;. If
            the name looks like a UUID simply move it to <em>xmpMM:InstanceID</em>,
            don't worry about any existing <em>xmpMM:InstanceID</em>. Both will
            only be present when a newer file with the <em>xmpMM:InstanceID</em>
            property is updated by an old app that uses <em>rdf:about</em>.
            </remarks>
            <param name="tree">the root of the metadata tree</param>
            <exception cref="T:iText.Kernel.XMP.XMPException">Thrown if tweaking fails.</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNormalizer.TouchUpDataModel(iText.Kernel.XMP.Impl.XMPMetaImpl)">
            <summary>Visit all schemas to do general fixes and handle special cases.</summary>
            <param name="xmp">the metadata object implementation</param>
            <exception cref="T:iText.Kernel.XMP.XMPException">Thrown if the normalisation fails.
            	</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNormalizer.NormalizeDCArrays(iText.Kernel.XMP.Impl.XMPNode)">
            <summary>
            Undo the denormalization performed by the XMP used in Acrobat 5.<br />
            If a Dublin Core array had only one item, it was serialized as a simple
            property.
            </summary>
            <remarks>
            Undo the denormalization performed by the XMP used in Acrobat 5.<br />
            If a Dublin Core array had only one item, it was serialized as a simple
            property. <br />
            The <code>xml:lang</code> attribute was dropped from an
            <code>alt-text</code> item if the language was <code>x-default</code>.
            </remarks>
            <param name="dcSchema">the DC schema node</param>
            <exception cref="T:iText.Kernel.XMP.XMPException">Thrown if normalization fails
            	</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNormalizer.RepairAltText(iText.Kernel.XMP.Impl.XMPNode)">
            <summary>Make sure that the array is well-formed AltText.</summary>
            <remarks>
            Make sure that the array is well-formed AltText. Each item must be simple
            and have an "xml:lang" qualifier. If repairs are needed, keep simple
            non-empty items by adding the "xml:lang" with value "x-repair".
            </remarks>
            <param name="arrayNode">the property node of the array to repair.</param>
            <exception cref="T:iText.Kernel.XMP.XMPException">Forwards unexpected exceptions.
            	</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNormalizer.MoveExplicitAliases(iText.Kernel.XMP.Impl.XMPNode,iText.Kernel.XMP.Options.ParseOptions)">
            <summary>Visit all of the top level nodes looking for aliases.</summary>
            <remarks>
            Visit all of the top level nodes looking for aliases. If there is
            no base, transplant the alias subtree. If there is a base and strict
            aliasing is on, make sure the alias and base subtrees match.
            </remarks>
            <param name="tree">the root of the metadata tree</param>
            <param name="options">th parsing options</param>
            <exception cref="T:iText.Kernel.XMP.XMPException">Forwards XMP errors</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNormalizer.TransplantArrayItemAlias(iText.Kernel.XMP.Impl.XMPNode,iText.Kernel.XMP.Impl.XMPNode)">
            <summary>
            Moves an alias node of array form to another schema into an array </summary>
            <param name="childNode"> the node to be moved </param>
            <param name="baseArray"> the base array for the array item </param>
            <exception cref="T:iText.Kernel.XMP.XMPException"> Forwards XMP errors </exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNormalizer.FixGPSTimeStamp(iText.Kernel.XMP.Impl.XMPNode)">
            <summary>Fixes the GPS Timestamp in EXIF.</summary>
            <param name="exifSchema">the EXIF schema node</param>
            <exception cref="T:iText.Kernel.XMP.XMPException">Thrown if the date conversion fails.
            	</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNormalizer.DeleteEmptySchemas(iText.Kernel.XMP.Impl.XMPNode)">
            <summary>Remove all empty schemas from the metadata tree that were generated during the rdf parsing.
            	</summary>
            <param name="tree">the root of the metadata tree</param>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNormalizer.CompareAliasedSubtrees(iText.Kernel.XMP.Impl.XMPNode,iText.Kernel.XMP.Impl.XMPNode,System.Boolean)">
            <summary>The outermost call is special.</summary>
            <remarks>
            The outermost call is special. The names almost certainly differ. The
            qualifiers (and hence options) will differ for an alias to the x-default
            item of a langAlt array.
            </remarks>
            <param name="aliasNode">the alias node</param>
            <param name="baseNode">the base node of the alias</param>
            <param name="outerCall">marks the outer call of the recursion</param>
            <exception cref="T:iText.Kernel.XMP.XMPException">Forwards XMP errors</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNormalizer.MigrateAudioCopyright(iText.Kernel.XMP.XMPMeta,iText.Kernel.XMP.Impl.XMPNode)">
            <summary>
            The initial support for WAV files mapped a legacy ID3 audio copyright
            into a new xmpDM:copyright property.
            </summary>
            <remarks>
            The initial support for WAV files mapped a legacy ID3 audio copyright
            into a new xmpDM:copyright property. This is special case code to migrate
            that into dc:rights['x-default']. The rules:
            <pre>
            1. If there is no dc:rights array, or an empty array -
            Create one with dc:rights['x-default'] set from double linefeed and xmpDM:copyright.
            2. If there is a dc:rights array but it has no x-default item -
            Create an x-default item as a copy of the first item then apply rule #3.
            3. If there is a dc:rights array with an x-default item,
            Look for a double linefeed in the value.
            A. If no double linefeed, compare the x-default value to the xmpDM:copyright value.
            A1. If they match then leave the x-default value alone.
            A2. Otherwise, append a double linefeed and
            the xmpDM:copyright value to the x-default value.
            B. If there is a double linefeed, compare the trailing text to the xmpDM:copyright value.
            B1. If they match then leave the x-default value alone.
            B2. Otherwise, replace the trailing x-default text with the xmpDM:copyright value.
            4. In all cases, delete the xmpDM:copyright property.
            </pre>
            </remarks>
            <param name="xmp">the metadata object</param>
            <param name="dmCopyright">the "dm:copyright"-property</param>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPNormalizer.InitDCArrays">
            <summary>
            Initializes the map that contains the known arrays, that are fixed by
            <see cref="M:iText.Kernel.XMP.Impl.XMPNormalizer.NormalizeDCArrays(iText.Kernel.XMP.Impl.XMPNode)"/>
            .
            </summary>
        </member>
        <member name="T:iText.Kernel.XMP.Impl.XMPSchemaRegistryImpl">
            <summary>The schema registry handles the namespaces, aliases and global options for the XMP Toolkit.
            	</summary>
            <remarks>
            The schema registry handles the namespaces, aliases and global options for the XMP Toolkit. There
            is only one single instance used by the toolkit.
            </remarks>
            <since>27.01.2006</since>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.XMPSchemaRegistryImpl.namespaceToPrefixMap">
            <summary>a map from a namespace URI to its registered prefix</summary>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.XMPSchemaRegistryImpl.prefixToNamespaceMap">
            <summary>a map from a prefix to the associated namespace URI</summary>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.XMPSchemaRegistryImpl.aliasMap">
            <summary>a map of all registered aliases.</summary>
            <remarks>
            a map of all registered aliases.
            The map is a relationship from a qname to an <code>XMPAliasInfo</code>-object.
            </remarks>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.XMPSchemaRegistryImpl._regex">
            <summary>The pattern that must not be contained in simple properties</summary>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPSchemaRegistryImpl.#ctor">
            <summary>
            Performs the initialisation of the registry with the default namespaces, aliases and global
            options.
            </summary>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPSchemaRegistryImpl.RegisterNamespace(System.String,System.String)">
            <seealso cref="M:iText.Kernel.XMP.XMPSchemaRegistry.RegisterNamespace(System.String,System.String)"/>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPSchemaRegistryImpl.DeleteNamespace(System.String)">
            <seealso cref="M:iText.Kernel.XMP.XMPSchemaRegistry.DeleteNamespace(System.String)"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPSchemaRegistryImpl.GetNamespacePrefix(System.String)">
            <seealso cref="M:iText.Kernel.XMP.XMPSchemaRegistry.GetNamespacePrefix(System.String)"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPSchemaRegistryImpl.GetNamespaceURI(System.String)">
            <seealso cref="M:iText.Kernel.XMP.XMPSchemaRegistry.GetNamespaceURI(System.String)"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPSchemaRegistryImpl.GetNamespaces">
            <seealso cref="M:iText.Kernel.XMP.XMPSchemaRegistry.GetNamespaces"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPSchemaRegistryImpl.GetPrefixes">
            <seealso cref="M:iText.Kernel.XMP.XMPSchemaRegistry.GetPrefixes"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPSchemaRegistryImpl.RegisterStandardNamespaces">
            <summary>
            Register the standard namespaces of schemas and types that are included in the XMP
            Specification and some other Adobe private namespaces.
            </summary>
            <remarks>
            Register the standard namespaces of schemas and types that are included in the XMP
            Specification and some other Adobe private namespaces.
            Note: This method is not lock because only called by the constructor.
            </remarks>
            <exception cref="T:iText.Kernel.XMP.XMPException">Forwards processing exceptions
            	</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPSchemaRegistryImpl.ResolveAlias(System.String,System.String)">
            <seealso cref="M:iText.Kernel.XMP.XMPSchemaRegistry.ResolveAlias(System.String,System.String)"/>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.XMP.Impl.XMPSchemaRegistryImpl.FindAlias(System.String)" -->
        <member name="M:iText.Kernel.XMP.Impl.XMPSchemaRegistryImpl.FindAliases(System.String)">
            <seealso cref="M:iText.Kernel.XMP.XMPSchemaRegistry.FindAliases(System.String)"/>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.XMP.Impl.XMPSchemaRegistryImpl.RegisterAlias(System.String,System.String,System.String,System.String,iText.Kernel.XMP.Options.AliasOptions)" -->
        <member name="M:iText.Kernel.XMP.Impl.XMPSchemaRegistryImpl._XMPAliasInfo_409.GetNamespace">
            <seealso cref="M:iText.Kernel.XMP.Properties.XMPAliasInfo.GetNamespace"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPSchemaRegistryImpl._XMPAliasInfo_409.GetPrefix">
            <seealso cref="M:iText.Kernel.XMP.Properties.XMPAliasInfo.GetPrefix"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPSchemaRegistryImpl._XMPAliasInfo_409.GetPropName">
            <seealso cref="M:iText.Kernel.XMP.Properties.XMPAliasInfo.GetPropName"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPSchemaRegistryImpl._XMPAliasInfo_409.GetAliasForm">
            <seealso cref="M:iText.Kernel.XMP.Properties.XMPAliasInfo.GetAliasForm"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPSchemaRegistryImpl.GetAliases">
            <seealso cref="M:iText.Kernel.XMP.XMPSchemaRegistry.GetAliases"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPSchemaRegistryImpl.RegisterStandardAliases">
            <summary>Register the standard aliases.</summary>
            <remarks>
            Register the standard aliases.
            Note: This method is not lock because only called by the constructor.
            </remarks>
            <exception cref="T:iText.Kernel.XMP.XMPException">If the registrations of at least one alias fails.
            	</exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.XMP.Impl.ReadOnlyDictionary.ReadOnly(System.Collections.IDictionary)" -->
        <member name="T:iText.Kernel.XMP.Impl.XMPSerializerHelper">
            <summary>
            Serializes the <code>XMPMeta</code>-object to an <code>OutputStream</code> according to the
            <code>SerializeOptions</code>.
            </summary>
            <since>11.07.2006</since>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPSerializerHelper.Serialize(iText.Kernel.XMP.Impl.XMPMetaImpl,System.IO.Stream,iText.Kernel.XMP.Options.SerializeOptions)">
            <summary>Static method to serialize the metadata object.</summary>
            <remarks>
            Static method to serialize the metadata object. For each serialisation, a new XMPSerializer
            instance is created, either XMPSerializerRDF or XMPSerializerPlain so thats its possible to
            serialialize the same XMPMeta objects in two threads.
            </remarks>
            <param name="xmp">a metadata implementation object</param>
            <param name="out">the output stream to serialize to</param>
            <param name="options">serialization options, can be <code>null</code> for default.
            	</param>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPSerializerHelper.SerializeToString(iText.Kernel.XMP.Impl.XMPMetaImpl,iText.Kernel.XMP.Options.SerializeOptions)">
            <summary>Serializes an <code>XMPMeta</code>-object as RDF into a string.</summary>
            <remarks>
            Serializes an <code>XMPMeta</code>-object as RDF into a string.
            <em>Note:</em> Encoding is forced to UTF-16 when serializing to a
            string to ensure the correctness of &quot;exact packet size&quot;.
            </remarks>
            <param name="xmp">a metadata implementation object</param>
            <param name="options">
            Options to control the serialization (see
            <see cref="T:iText.Kernel.XMP.Options.SerializeOptions"/>
            ).
            </param>
            <returns>Returns a string containing the serialized RDF.</returns>
            <exception cref="T:iText.Kernel.XMP.XMPException">on serializsation errors.</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPSerializerHelper.SerializeToBuffer(iText.Kernel.XMP.Impl.XMPMetaImpl,iText.Kernel.XMP.Options.SerializeOptions)">
            <summary>Serializes an <code>XMPMeta</code>-object as RDF into a byte buffer.</summary>
            <param name="xmp">a metadata implementation object</param>
            <param name="options">
            Options to control the serialization (see
            <see cref="T:iText.Kernel.XMP.Options.SerializeOptions"/>
            ).
            </param>
            <returns>Returns a byte buffer containing the serialized RDF.</returns>
            <exception cref="T:iText.Kernel.XMP.XMPException">on serializsation errors.</exception>
        </member>
        <member name="T:iText.Kernel.XMP.Impl.XMPSerializerRdf">
            <summary>Serializes the <code>XMPMeta</code>-object using the standard RDF serialization format.
            	</summary>
            <remarks>
            Serializes the <code>XMPMeta</code>-object using the standard RDF serialization format.
            The output is written to an <code>OutputStream</code>
            according to the <code>SerializeOptions</code>.
            </remarks>
            <since>11.07.2006</since>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.XMPSerializerRdf.DEFAULT_PAD">
            <summary>default padding</summary>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.XMPSerializerRdf.PACKET_TRAILER">
            <summary>The w/r is missing inbetween</summary>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.XMPSerializerRdf.RDF_ATTR_QUALIFIER">
            <summary>a set of all rdf attribute qualifier</summary>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.XMPSerializerRdf.xmp">
            <summary>the metadata object to be serialized.</summary>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.XMPSerializerRdf.outputStream">
            <summary>the output stream to serialize to</summary>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.XMPSerializerRdf.writer">
            <summary>this writer is used to do the actual serialization</summary>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.XMPSerializerRdf.options">
            <summary>the stored serialization options</summary>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.XMPSerializerRdf.unicodeSize">
            <summary>
            the size of one unicode char, for UTF-8 set to 1
            (Note: only valid for ASCII chars lower than 0x80),
            set to 2 in case of UTF-16
            </summary>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.XMPSerializerRdf.padding">
            <summary>
            the padding in the XMP Packet, or the length of the complete packet in
            case of option <em>exactPacketLength</em>.
            </summary>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPSerializerRdf.Serialize(iText.Kernel.XMP.XMPMeta,System.IO.Stream,iText.Kernel.XMP.Options.SerializeOptions)">
            <summary>The actual serialization.</summary>
            <param name="xmp">the metadata object to be serialized</param>
            <param name="output">outputStream the output stream to serialize to</param>
            <param name="options">the serialization options</param>
            <exception cref="T:iText.Kernel.XMP.XMPException">If case of wrong options or any other serialization error.
            	</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPSerializerRdf.AddPadding(System.Int32)">
            <summary>Calculates the padding according to the options and write it to the stream.
            	</summary>
            <param name="tailLength">the length of the tail string</param>
            <exception cref="T:iText.Kernel.XMP.XMPException">thrown if packet size is to small to fit the padding
            	</exception>
            <exception cref="T:System.IO.IOException">forwards writer errors</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPSerializerRdf.CheckOptionsConsistence">
            <summary>Checks if the supplied options are consistent.</summary>
            <exception cref="T:iText.Kernel.XMP.XMPException">Thrown if options are conflicting
            	</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPSerializerRdf.SerializeAsRDF">
            <summary>Writes the (optional) packet header and the outer rdf-tags.</summary>
            <returns>Returns the packet end processing instraction to be written after the padding.
            	</returns>
            <exception cref="T:System.IO.IOException">Forwarded writer exceptions.</exception>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPSerializerRdf.SerializeCanonicalRDFSchemas(System.Int32)">
            <summary>Serializes the metadata in pretty-printed manner.</summary>
            <param name="level">indent level</param>
            <exception cref="T:System.IO.IOException">Forwarded writer exceptions</exception>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPSerializerRdf.WriteTreeName">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPSerializerRdf.SerializeCompactRDFSchemas(System.Int32)">
            <summary>Serializes the metadata in compact manner.</summary>
            <param name="level">indent level to start with</param>
            <exception cref="T:System.IO.IOException">Forwarded writer exceptions</exception>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPSerializerRdf.SerializeCompactRDFAttrProps(iText.Kernel.XMP.Impl.XMPNode,System.Int32)">
            <summary>Write each of the parent's simple unqualified properties as an attribute.
            	</summary>
            <remarks>
            Write each of the parent's simple unqualified properties as an attribute. Returns true if all
            of the properties are written as attributes.
            </remarks>
            <param name="parentNode">the parent property node</param>
            <param name="indent">the current indent level</param>
            <returns>Returns true if all properties can be rendered as RDF attribute.</returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPSerializerRdf.SerializeCompactRDFElementProps(iText.Kernel.XMP.Impl.XMPNode,System.Int32)">
            <summary>
            Recursively handles the "value" for a node that must be written as an RDF
            property element.
            </summary>
            <remarks>
            Recursively handles the "value" for a node that must be written as an RDF
            property element. It does not matter if it is a top level property, a
            field of a struct, or an item of an array. The indent is that for the
            property element. The patterns bwlow ignore attribute qualifiers such as
            xml:lang, they don't affect the output form.
            <blockquote>
            <pre>
            &lt;ns:UnqualifiedStructProperty-1
            ... The fields as attributes, if all are simple and unqualified
            /&gt;
            &lt;ns:UnqualifiedStructProperty-2 rdf:parseType=&quot;Resource&quot;&gt;
            ... The fields as elements, if none are simple and unqualified
            &lt;/ns:UnqualifiedStructProperty-2&gt;
            &lt;ns:UnqualifiedStructProperty-3&gt;
            &lt;rdf:Description
            ... The simple and unqualified fields as attributes
            &gt;
            ... The compound or qualified fields as elements
            &lt;/rdf:Description&gt;
            &lt;/ns:UnqualifiedStructProperty-3&gt;
            &lt;ns:UnqualifiedArrayProperty&gt;
            &lt;rdf:Bag&gt; or Seq or Alt
            ... Array items as rdf:li elements, same forms as top level properties
            &lt;/rdf:Bag&gt;
            &lt;/ns:UnqualifiedArrayProperty&gt;
            &lt;ns:QualifiedProperty rdf:parseType=&quot;Resource&quot;&gt;
            &lt;rdf:value&gt; ... Property &quot;value&quot;
            following the unqualified forms ... &lt;/rdf:value&gt;
            ... Qualifiers looking like named struct fields
            &lt;/ns:QualifiedProperty&gt;
            </pre>
            </blockquote>
            *** Consider numbered array items, but has compatibility problems.
            Consider qualified form with rdf:Description and attributes.
            </remarks>
            <param name="parentNode">the parent node</param>
            <param name="indent">the current indent level</param>
            <exception cref="T:System.IO.IOException">Forwards writer exceptions</exception>
            <exception cref="T:iText.Kernel.XMP.XMPException">If qualifier and element fields are mixed.
            	</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPSerializerRdf.SerializeCompactRDFSimpleProp(iText.Kernel.XMP.Impl.XMPNode)">
            <summary>Serializes a simple property.</summary>
            <param name="node">an XMPNode</param>
            <returns>Returns an array containing the flags emitEndTag and indentEndTag.</returns>
            <exception cref="T:System.IO.IOException">Forwards the writer exceptions.</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPSerializerRdf.SerializeCompactRDFArrayProp(iText.Kernel.XMP.Impl.XMPNode,System.Int32)">
            <summary>Serializes an array property.</summary>
            <param name="node">an XMPNode</param>
            <param name="indent">the current indent level</param>
            <exception cref="T:System.IO.IOException">Forwards the writer exceptions.</exception>
            <exception cref="T:iText.Kernel.XMP.XMPException">If qualifier and element fields are mixed.
            	</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPSerializerRdf.SerializeCompactRDFStructProp(iText.Kernel.XMP.Impl.XMPNode,System.Int32,System.Boolean)">
            <summary>Serializes a struct property.</summary>
            <param name="node">an XMPNode</param>
            <param name="indent">the current indent level</param>
            <param name="hasRDFResourceQual">Flag if the element has resource qualifier</param>
            <returns>Returns true if an end flag shall be emitted.</returns>
            <exception cref="T:System.IO.IOException">Forwards the writer exceptions.</exception>
            <exception cref="T:iText.Kernel.XMP.XMPException">If qualifier and element fields are mixed.
            	</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPSerializerRdf.SerializeCompactRDFGeneralQualifier(System.Int32,iText.Kernel.XMP.Impl.XMPNode)">
            <summary>Serializes the general qualifier.</summary>
            <param name="node">the root node of the subtree</param>
            <param name="indent">the current indent level</param>
            <exception cref="T:System.IO.IOException">Forwards all writer exceptions.</exception>
            <exception cref="T:iText.Kernel.XMP.XMPException">If qualifier and element fields are mixed.
            	</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPSerializerRdf.SerializeCanonicalRDFSchema(iText.Kernel.XMP.Impl.XMPNode,System.Int32)">
            <summary>
            Serializes one schema with all contained properties in pretty-printed
            manner.<br />
            Each schema's properties are written to a single
            rdf:Description element.
            </summary>
            <remarks>
            Serializes one schema with all contained properties in pretty-printed
            manner.<br />
            Each schema's properties are written to a single
            rdf:Description element. All of the necessary namespaces are declared in
            the rdf:Description element. The baseIndent is the base level for the
            entire serialization, that of the x:xmpmeta element. An xml:lang
            qualifier is written as an attribute of the property start tag, not by
            itself forcing the qualified property form.
            <blockquote>
            <pre>
            &lt;rdf:Description rdf:about=&quot;TreeName&quot; xmlns:ns=&quot;URI&quot; ... &gt;
            ... The actual properties of the schema, see SerializePrettyRDFProperty
            &lt;!-- ns1:Alias is aliased to ns2:Actual --&gt;  ... If alias comments are wanted
            &lt;/rdf:Description&gt;
            </pre>
            </blockquote>
            </remarks>
            <param name="schemaNode">a schema node</param>
            <param name="level"/>
            <exception cref="T:System.IO.IOException">Forwarded writer exceptions</exception>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPSerializerRdf.DeclareUsedNamespaces(iText.Kernel.XMP.Impl.XMPNode,System.Collections.Generic.ICollection{System.String},System.Int32)">
            <summary>Writes all used namespaces of the subtree in node to the output.</summary>
            <remarks>
            Writes all used namespaces of the subtree in node to the output.
            The subtree is recursivly traversed.
            </remarks>
            <param name="node">the root node of the subtree</param>
            <param name="usedPrefixes">a set containing currently used prefixes</param>
            <param name="indent">the current indent level</param>
            <exception cref="T:System.IO.IOException">Forwards all writer exceptions.</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPSerializerRdf.DeclareNamespace(System.String,System.String,System.Collections.Generic.ICollection{System.String},System.Int32)">
            <summary>Writes one namespace declaration to the output.</summary>
            <param name="prefix">a namespace prefix (without colon) or a complete qname (when namespace == null)
            	</param>
            <param name="namespace">the a namespace</param>
            <param name="usedPrefixes">a set containing currently used prefixes</param>
            <param name="indent">the current indent level</param>
            <exception cref="T:System.IO.IOException">Forwards all writer exceptions.</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPSerializerRdf.StartOuterRDFDescription(iText.Kernel.XMP.Impl.XMPNode,System.Int32)">
            <summary>Start the outer rdf:Description element, including all needed xmlns attributes.
            	</summary>
            <remarks>
            Start the outer rdf:Description element, including all needed xmlns attributes.
            Leave the element open so that the compact form can add property attributes.
            </remarks>
            <exception cref="T:System.IO.IOException">If the writing to</exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.XMP.Impl.XMPSerializerRdf.EndOuterRDFDescription(System.Int32)" -->
        <member name="M:iText.Kernel.XMP.Impl.XMPSerializerRdf.SerializeCanonicalRDFProperty(iText.Kernel.XMP.Impl.XMPNode,System.Boolean,System.Boolean,System.Int32)">
            <summary>Recursively handles the "value" for a node.</summary>
            <remarks>
            Recursively handles the "value" for a node. It does not matter if it is a
            top level property, a field of a struct, or an item of an array. The
            indent is that for the property element. An xml:lang qualifier is written
            as an attribute of the property start tag, not by itself forcing the
            qualified property form. The patterns below mostly ignore attribute
            qualifiers like xml:lang. Except for the one struct case, attribute
            qualifiers don't affect the output form.
            <blockquote>
            <pre>
            &lt;ns:UnqualifiedSimpleProperty&gt;value&lt;/ns:UnqualifiedSimpleProperty&gt;
            &lt;ns:UnqualifiedStructProperty&gt; (If no rdf:resource qualifier)
            &lt;rdf:Description&gt;
            ... Fields, same forms as top level properties
            &lt;/rdf:Description&gt;
            &lt;/ns:UnqualifiedStructProperty&gt;
            &lt;ns:ResourceStructProperty rdf:resource=&quot;URI&quot;
            ... Fields as attributes
            &gt;
            &lt;ns:UnqualifiedArrayProperty&gt;
            &lt;rdf:Bag&gt; or Seq or Alt
            ... Array items as rdf:li elements, same forms as top level properties
            &lt;/rdf:Bag&gt;
            &lt;/ns:UnqualifiedArrayProperty&gt;
            &lt;ns:QualifiedProperty&gt;
            &lt;rdf:Description&gt;
            &lt;rdf:value&gt; ... Property &quot;value&quot; following the unqualified
            forms ... &lt;/rdf:value&gt;
            ... Qualifiers looking like named struct fields
            &lt;/rdf:Description&gt;
            &lt;/ns:QualifiedProperty&gt;
            </pre>
            </blockquote>
            </remarks>
            <param name="node">the property node</param>
            <param name="emitAsRDFValue">property shall be rendered as attribute rather than tag
            	</param>
            <param name="useCanonicalRDF">
            use canonical form with inner description tag or
            the compact form with rdf:ParseType=&quot;resource&quot; attribute.
            </param>
            <param name="indent">the current indent level</param>
            <exception cref="T:System.IO.IOException">Forwards all writer exceptions.</exception>
            <exception cref="T:iText.Kernel.XMP.XMPException">If &quot;rdf:resource&quot; and general qualifiers are mixed.
            	</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPSerializerRdf.EmitRDFArrayTag(iText.Kernel.XMP.Impl.XMPNode,System.Boolean,System.Int32)">
            <summary>Writes the array start and end tags.</summary>
            <param name="arrayNode">an array node</param>
            <param name="isStartTag">flag if its the start or end tag</param>
            <param name="indent">the current indent level</param>
            <exception cref="T:System.IO.IOException">forwards writer exceptions</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPSerializerRdf.AppendNodeValue(System.String,System.Boolean)">
            <summary>Serializes the node value in XML encoding.</summary>
            <remarks>
            Serializes the node value in XML encoding. Its used for tag bodies and
            attributes. <em>Note:</em> The attribute is always limited by quotes,
            thats why <code>&amp;apos;</code> is never serialized. <em>Note:</em>
            Control chars are written unescaped, but if the user uses others than tab, LF
            and CR the resulting XML will become invalid.
            </remarks>
            <param name="value">the value of the node</param>
            <param name="forAttribute">flag if value is an attribute value</param>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.XMP.Impl.XMPSerializerRdf.CanBeRDFAttrProp(iText.Kernel.XMP.Impl.XMPNode)" -->
        <member name="M:iText.Kernel.XMP.Impl.XMPSerializerRdf.WriteIndent(System.Int32)">
            <summary>Writes indents and automatically includes the baseindend from the options.
            	</summary>
            <param name="times">number of indents to write</param>
            <exception cref="T:System.IO.IOException">forwards exception</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPSerializerRdf.Write(System.Char)">
            <summary>Writes a char to the output.</summary>
            <param name="c">a char</param>
            <exception cref="T:System.IO.IOException">forwards writer exceptions</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPSerializerRdf.Write(System.String)">
            <summary>Writes a String to the output.</summary>
            <param name="str">a String</param>
            <exception cref="T:System.IO.IOException">forwards writer exceptions</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPSerializerRdf.WriteChars(System.Int32,System.Char)">
            <summary>Writes an amount of chars, mostly spaces</summary>
            <param name="number">number of chars</param>
            <param name="c">a char</param>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPSerializerRdf.WriteNewline">
            <summary>Writes a newline according to the options.</summary>
            <exception cref="T:System.IO.IOException">Forwards exception</exception>
        </member>
        <member name="T:iText.Kernel.XMP.Impl.XMPUtilsImpl">
            <since>11.08.2006</since>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPUtilsImpl.#ctor">
            <summary>Private constructor, as</summary>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPUtilsImpl.CatenateArrayItems(iText.Kernel.XMP.XMPMeta,System.String,System.String,System.String,System.String,System.Boolean)">
            <seealso cref="M:iText.Kernel.XMP.XMPUtils.CatenateArrayItems(iText.Kernel.XMP.XMPMeta,System.String,System.String,System.String,System.String,System.Boolean)"/>
            <param name="xmp">The XMP object containing the array to be catenated.</param>
            <param name="schemaNS">
            The schema namespace URI for the array. Must not be null or
            the empty string.
            </param>
            <param name="arrayName">
            The name of the array. May be a general path expression, must
            not be null or the empty string. Each item in the array must
            be a simple string value.
            </param>
            <param name="separator">
            The string to be used to separate the items in the catenated
            string. Defaults to &quot;; &quot;, ASCII semicolon and space
            (U+003B, U+0020).
            </param>
            <param name="quotes">
            The characters to be used as quotes around array items that
            contain a separator. Defaults to '&quot;'
            </param>
            <param name="allowCommas">Option flag to control the catenation.</param>
            <returns>Returns the string containing the catenated array items.</returns>
            <exception cref="T:iText.Kernel.XMP.XMPException">Forwards the Exceptions from the metadata processing
            	</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPUtilsImpl.SeparateArrayItems(iText.Kernel.XMP.XMPMeta,System.String,System.String,System.String,iText.Kernel.XMP.Options.PropertyOptions,System.Boolean)">
            <summary>
            see
            <see cref="M:iText.Kernel.XMP.XMPUtils.SeparateArrayItems(iText.Kernel.XMP.XMPMeta,System.String,System.String,System.String,iText.Kernel.XMP.Options.PropertyOptions,System.Boolean)"/>
            </summary>
            <param name="xmp">The XMP object containing the array to be updated.</param>
            <param name="schemaNS">
            The schema namespace URI for the array. Must not be null or
            the empty string.
            </param>
            <param name="arrayName">
            The name of the array. May be a general path expression, must
            not be null or the empty string. Each item in the array must
            be a simple string value.
            </param>
            <param name="catedStr">The string to be separated into the array items.</param>
            <param name="arrayOptions">Option flags to control the separation.</param>
            <param name="preserveCommas">Flag if commas shall be preserved</param>
            <exception cref="T:iText.Kernel.XMP.XMPException">Forwards the Exceptions from the metadata processing
            	</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPUtilsImpl.SeparateFindCreateArray(System.String,System.String,iText.Kernel.XMP.Options.PropertyOptions,iText.Kernel.XMP.Impl.XMPMetaImpl)">
            <summary>Utility to find or create the array used by <code>separateArrayItems()</code>.
            	</summary>
            <param name="schemaNS">a the namespace fo the array</param>
            <param name="arrayName">the name of the array</param>
            <param name="arrayOptions">the options for the array if newly created</param>
            <param name="xmp">the xmp object</param>
            <returns>Returns the array node.</returns>
            <exception cref="T:iText.Kernel.XMP.XMPException">Forwards exceptions</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPUtilsImpl.RemoveProperties(iText.Kernel.XMP.XMPMeta,System.String,System.String,System.Boolean,System.Boolean)">
            <seealso cref="M:iText.Kernel.XMP.XMPUtils.RemoveProperties(iText.Kernel.XMP.XMPMeta,System.String,System.String,System.Boolean,System.Boolean)"/>
            <param name="xmp">The XMP object containing the properties to be removed.</param>
            <param name="schemaNS">
            Optional schema namespace URI for the properties to be
            removed.
            </param>
            <param name="propName">Optional path expression for the property to be removed.</param>
            <param name="doAllProperties">
            Option flag to control the deletion: do internal properties in
            addition to external properties.
            </param>
            <param name="includeAliases">
            Option flag to control the deletion: Include aliases in the
            "named schema" case above.
            </param>
            <exception cref="T:iText.Kernel.XMP.XMPException">If metadata processing fails
            	</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPUtilsImpl.AppendProperties(iText.Kernel.XMP.XMPMeta,iText.Kernel.XMP.XMPMeta,System.Boolean,System.Boolean,System.Boolean)">
            <seealso cref="M:iText.Kernel.XMP.XMPUtils.AppendProperties(iText.Kernel.XMP.XMPMeta,iText.Kernel.XMP.XMPMeta,System.Boolean,System.Boolean)"/>
            <param name="source">The source XMP object.</param>
            <param name="destination">The destination XMP object.</param>
            <param name="doAllProperties">Do internal properties in addition to external properties.
            	</param>
            <param name="replaceOldValues">Replace the values of existing properties.</param>
            <param name="deleteEmptyValues">Delete destination values if source property is empty.
            	</param>
            <exception cref="T:iText.Kernel.XMP.XMPException">Forwards the Exceptions from the metadata processing
            	</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPUtilsImpl.RemoveSchemaChildren(iText.Kernel.XMP.Impl.XMPNode,System.Boolean)">
            <summary>
            Remove all schema children according to the flag
            <code>doAllProperties</code>.
            </summary>
            <remarks>
            Remove all schema children according to the flag
            <code>doAllProperties</code>. Empty schemas are automatically remove
            by <code>XMPNode</code>
            </remarks>
            <param name="schemaNode">a schema node</param>
            <param name="doAllProperties">flag if all properties or only externals shall be removed.
            	</param>
            <returns>Returns true if the schema is empty after the operation.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPUtilsImpl.AppendSubtree(iText.Kernel.XMP.Impl.XMPMetaImpl,iText.Kernel.XMP.Impl.XMPNode,iText.Kernel.XMP.Impl.XMPNode,System.Boolean,System.Boolean)">
            <seealso cref="M:iText.Kernel.XMP.Impl.XMPUtilsImpl.AppendProperties(iText.Kernel.XMP.XMPMeta,iText.Kernel.XMP.XMPMeta,System.Boolean,System.Boolean,System.Boolean)"/>
            <param name="destXMP">The destination XMP object.</param>
            <param name="sourceNode">the source node</param>
            <param name="destParent">the parent of the destination node</param>
            <param name="replaceOldValues">Replace the values of existing properties.</param>
            <param name="deleteEmptyValues">
            flag if properties with empty values should be deleted
            in the destination object.
            </param>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPUtilsImpl.ItemValuesMatch(iText.Kernel.XMP.Impl.XMPNode,iText.Kernel.XMP.Impl.XMPNode)">
            <summary>Compares two nodes including its children and qualifier.</summary>
            <param name="leftNode">an <code>XMPNode</code></param>
            <param name="rightNode">an <code>XMPNode</code></param>
            <returns>Returns true if the nodes are equal, false otherwise.</returns>
            <exception cref="T:iText.Kernel.XMP.XMPException">Forwards exceptions to the calling method.
            	</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPUtilsImpl.CheckSeparator(System.String)">
            <summary>Make sure the separator is OK.</summary>
            <remarks>
            Make sure the separator is OK. It must be one semicolon surrounded by
            zero or more spaces. Any of the recognized semicolons or spaces are
            allowed.
            </remarks>
            <param name="separator"/>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPUtilsImpl.CheckQuotes(System.String,System.Char)">
            <summary>
            Make sure the open and close quotes are a legitimate pair and return the
            correct closing quote or an exception.
            </summary>
            <param name="quotes">opened and closing quote in a string</param>
            <param name="openQuote">the open quote</param>
            <returns>Returns a corresponding closing quote.</returns>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPUtilsImpl.ClassifyCharacter(System.Char)">
            <summary>
            Classifies the character into normal chars, spaces, semicola, quotes,
            control chars.
            </summary>
            <param name="ch">a char</param>
            <returns>Return the character kind.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPUtilsImpl.GetClosingQuote(System.Char)">
            <param name="openQuote">the open quote char</param>
            <returns>Returns the matching closing quote for an open quote.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPUtilsImpl.ApplyQuotes(System.String,System.Char,System.Char,System.Boolean)">
            <summary>Add quotes to the item.</summary>
            <param name="item">the array item</param>
            <param name="openQuote">the open quote character</param>
            <param name="closeQuote">the closing quote character</param>
            <param name="allowCommas">flag if commas are allowed</param>
            <returns>Returns the value in quotes.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPUtilsImpl.IsSurroundingQuote(System.Char,System.Char,System.Char)">
            <param name="ch">a character</param>
            <param name="openQuote">the opening quote char</param>
            <param name="closeQuote">the closing quote char</param>
            <returns>Return it the character is a surrounding quote.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XMPUtilsImpl.IsClosingingQuote(System.Char,System.Char,System.Char)">
            <param name="ch">a character</param>
            <param name="openQuote">the opening quote char</param>
            <param name="closeQuote">the closing quote char</param>
            <returns>Returns true if the character is a closing quote.</returns>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.XMPUtilsImpl.SPACES">
            <summary>
            U+0022 ASCII space<br />
            U+3000, ideographic space<br />
            U+303F, ideographic half fill space<br />
            U+2000..U+200B, en quad through zero width space
            </summary>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.XMPUtilsImpl.COMMAS">
            <summary>
            U+002C, ASCII comma<br />
            U+FF0C, full width comma<br />
            U+FF64, half width ideographic comma<br />
            U+FE50, small comma<br />
            U+FE51, small ideographic comma<br />
            U+3001, ideographic comma<br />
            U+060C, Arabic comma<br />
            U+055D, Armenian comma
            </summary>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.XMPUtilsImpl.SEMICOLA">
            <summary>
            U+003B, ASCII semicolon<br />
            U+FF1B, full width semicolon<br />
            U+FE54, small semicolon<br />
            U+061B, Arabic semicolon<br />
            U+037E, Greek "semicolon" (really a question mark)
            </summary>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.XMPUtilsImpl.QUOTES">
            <summary>
            U+0022 ASCII quote<br />
            The square brackets are not interpreted as quotes anymore (bug #2674672)
            (ASCII '[' (0x5B) and ']' (0x5D) are used as quotes in Chinese and
            Korean.)<br />
            U+00AB and U+00BB, guillemet quotes<br />
            U+3008..U+300F, various quotes.<br />
            U+301D..U+301F, double prime quotes.<br />
            U+2015, dash quote.<br />
            U+2018..U+201F, various quotes.<br />
            U+2039 and U+203A, guillemet quotes.
            </summary>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.XMPUtilsImpl.CONTROLS">
            <summary>
            U+0000..U+001F ASCII controls<br />
            U+2028, line separator.<br />
            U+2029, paragraph separator.
            </summary>
        </member>
        <member name="T:iText.Kernel.XMP.Impl.XPath.XMPPath">
            <summary>Representates an XMP XMPPath with segment accessor methods.</summary>
            <since>28.02.2006</since>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.XPath.XMPPath.STRUCT_FIELD_STEP">
            <summary>Marks a struct field step , also for top level nodes (schema "fields").</summary>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.XPath.XMPPath.QUALIFIER_STEP">
            <summary>Marks a qualifier step.</summary>
            <remarks>
            Marks a qualifier step.
            Note: Order is significant to separate struct/qual from array kinds!
            </remarks>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.XPath.XMPPath.ARRAY_INDEX_STEP">
            <summary>Marks an array index step</summary>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.XPath.XMPPath.segments">
            <summary>stores the segments of an XMPPath</summary>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XPath.XMPPath.Add(iText.Kernel.XMP.Impl.XPath.XMPPathSegment)">
            <summary>Append a path segment</summary>
            <param name="segment">the segment to add</param>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XPath.XMPPath.GetSegment(System.Int32)">
            <param name="index">the index of the segment to return</param>
            <returns>Returns a path segment.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XPath.XMPPath.Size">
            <returns>Returns the size of the xmp path.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XPath.XMPPath.ToString">
            <summary>Return a single String explaining which certificate was verified, how and why.</summary>
            <seealso cref="M:System.Object.ToString"/>
        </member>
        <member name="T:iText.Kernel.XMP.Impl.XPath.XMPPathParser">
            <summary>Parser for XMP XPaths.</summary>
            <since>01.03.2006</since>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XPath.XMPPathParser.#ctor">
            <summary>Private constructor</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.XMP.Impl.XPath.XMPPathParser.ExpandXPath(System.String,System.String)" -->
        <member name="M:iText.Kernel.XMP.Impl.XPath.XMPPathParser.SkipPathDelimiter(System.String,iText.Kernel.XMP.Impl.XPath.PathPosition)">
            <param name="path"/>
            <param name="pos"/>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XPath.XMPPathParser.ParseStructSegment(iText.Kernel.XMP.Impl.XPath.PathPosition)">
            <summary>Parses a struct segment</summary>
            <param name="pos">the current position in the path</param>
            <returns>Retusn the segment or an errror</returns>
            <exception cref="T:iText.Kernel.XMP.XMPException">If the sement is empty</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XPath.XMPPathParser.ParseIndexSegment(iText.Kernel.XMP.Impl.XPath.PathPosition)">
            <summary>Parses an array index segment.</summary>
            <param name="pos">the xmp path</param>
            <returns>Returns the segment or an error</returns>
            <exception cref="T:iText.Kernel.XMP.XMPException">thrown on xmp path errors</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XPath.XMPPathParser.ParseRootNode(System.String,iText.Kernel.XMP.Impl.XPath.PathPosition,iText.Kernel.XMP.Impl.XPath.XMPPath)">
            <summary>
            Parses the root node of an XMP Path, checks if namespace and prefix fit together
            and resolve the property to the base property if it is an alias.
            </summary>
            <param name="schemaNS">the root namespace</param>
            <param name="pos">the parsing position helper</param>
            <param name="expandedXPath">the path to contribute to</param>
            <exception cref="T:iText.Kernel.XMP.XMPException">If the path is not valid.</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XPath.XMPPathParser.VerifyQualName(System.String)">
            <summary>
            Verifies whether the qualifier name is not XML conformant or the
            namespace prefix has not been registered.
            </summary>
            <param name="qualName">a qualifier name</param>
            <exception cref="T:iText.Kernel.XMP.XMPException">If the name is not conformant</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XPath.XMPPathParser.VerifySimpleXMLName(System.String)">
            <summary>Verify if an XML name is conformant.</summary>
            <param name="name">an XML name</param>
            <exception cref="T:iText.Kernel.XMP.XMPException">When the name is not XML conformant</exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.XMP.Impl.XPath.XMPPathParser.VerifyXPathRoot(System.String,System.String)" -->
        <member name="T:iText.Kernel.XMP.Impl.XPath.PathPosition">
            <summary>This objects contains all needed char positions to parse.</summary>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.XPath.PathPosition.path">
            <summary>the complete path</summary>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.XPath.PathPosition.nameStart">
            <summary>the start of a segment name</summary>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.XPath.PathPosition.nameEnd">
            <summary>the end of a segment name</summary>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.XPath.PathPosition.stepBegin">
            <summary>the begin of a step</summary>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.XPath.PathPosition.stepEnd">
            <summary>the end of a step</summary>
        </member>
        <member name="T:iText.Kernel.XMP.Impl.XPath.XMPPathSegment">
            <summary>A segment of a parsed <code>XMPPath</code>.</summary>
            <since>23.06.2006</since>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.XPath.XMPPathSegment.name">
            <summary>name of the path segment</summary>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.XPath.XMPPathSegment.kind">
            <summary>kind of the path segment</summary>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.XPath.XMPPathSegment.alias">
            <summary>flag if segment is an alias</summary>
        </member>
        <member name="F:iText.Kernel.XMP.Impl.XPath.XMPPathSegment.aliasForm">
            <summary>alias form if applicable</summary>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XPath.XMPPathSegment.#ctor(System.String)">
            <summary>Constructor with initial values.</summary>
            <param name="name">the name of the segment</param>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XPath.XMPPathSegment.#ctor(System.String,System.Int32)">
            <summary>Constructor with initial values.</summary>
            <param name="name">the name of the segment</param>
            <param name="kind">the kind of the segment</param>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XPath.XMPPathSegment.GetKind">
            <returns>Returns the kind.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XPath.XMPPathSegment.SetKind(System.Int32)">
            <param name="kind">The kind to set.</param>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XPath.XMPPathSegment.GetName">
            <returns>Returns the name.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XPath.XMPPathSegment.SetName(System.String)">
            <param name="name">The name to set.</param>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XPath.XMPPathSegment.SetAlias(System.Boolean)">
            <param name="alias">the flag to set</param>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XPath.XMPPathSegment.IsAlias">
            <returns>Returns the alias.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XPath.XMPPathSegment.GetAliasForm">
            <returns>Returns the aliasForm if this segment has been created by an alias.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XPath.XMPPathSegment.SetAliasForm(System.Int32)">
            <param name="aliasForm">the aliasForm to set</param>
        </member>
        <member name="M:iText.Kernel.XMP.Impl.XPath.XMPPathSegment.ToString">
            <seealso cref="M:System.Object.ToString"/>
        </member>
        <member name="T:iText.Kernel.XMP.Options.AliasOptions">
            <summary>Options for XMPSchemaRegistryImpl#registerAlias.</summary>
            <since>20.02.2006</since>
        </member>
        <member name="F:iText.Kernel.XMP.Options.AliasOptions.PROP_DIRECT">
            <summary>This is a direct mapping.</summary>
            <remarks>This is a direct mapping. The actual data type does not matter.</remarks>
        </member>
        <member name="F:iText.Kernel.XMP.Options.AliasOptions.PROP_ARRAY">
            <summary>The actual is an unordered array, the alias is to the first element of the array.</summary>
        </member>
        <member name="F:iText.Kernel.XMP.Options.AliasOptions.PROP_ARRAY_ORDERED">
            <summary>The actual is an ordered array, the alias is to the first element of the array.</summary>
        </member>
        <member name="F:iText.Kernel.XMP.Options.AliasOptions.PROP_ARRAY_ALTERNATE">
            <summary>The actual is an alternate array, the alias is to the first element of the array.</summary>
        </member>
        <member name="F:iText.Kernel.XMP.Options.AliasOptions.PROP_ARRAY_ALT_TEXT">
            <summary>The actual is an alternate text array, the alias is to the 'x-default' element of the array.</summary>
        </member>
        <member name="M:iText.Kernel.XMP.Options.AliasOptions.#ctor">
            <seealso cref="M:iText.Kernel.XMP.Options.Options.#ctor"/>
        </member>
        <member name="M:iText.Kernel.XMP.Options.AliasOptions.#ctor(System.Int32)">
            <param name="options">the options to init with</param>
            <exception cref="T:iText.Kernel.XMP.XMPException">If options are not consistant</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Options.AliasOptions.IsSimple">
            <returns>Returns if the alias is of the simple form.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.AliasOptions.IsArray">
            <returns>Returns the option.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.AliasOptions.SetArray(System.Boolean)">
            <param name="value">the value to set</param>
            <returns>Returns the instance to call more set-methods.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.AliasOptions.IsArrayOrdered">
            <returns>Returns the option.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.AliasOptions.SetArrayOrdered(System.Boolean)">
            <param name="value">the value to set</param>
            <returns>Returns the instance to call more set-methods.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.AliasOptions.IsArrayAlternate">
            <returns>Returns the option.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.AliasOptions.SetArrayAlternate(System.Boolean)">
            <param name="value">the value to set</param>
            <returns>Returns the instance to call more set-methods.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.AliasOptions.IsArrayAltText">
            <returns>Returns the option.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.AliasOptions.SetArrayAltText(System.Boolean)">
            <param name="value">the value to set</param>
            <returns>Returns the instance to call more set-methods.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.AliasOptions.ToPropertyOptions">
            <returns>
            returns a
            <see cref="T:iText.Kernel.XMP.Options.PropertyOptions"/>
            s object
            </returns>
            <exception cref="T:iText.Kernel.XMP.XMPException">If the options are not consistant.</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Options.AliasOptions.DefineOptionName(System.Int32)">
            <seealso cref="M:iText.Kernel.XMP.Options.Options.DefineOptionName(System.Int32)"/>
        </member>
        <member name="M:iText.Kernel.XMP.Options.AliasOptions.GetValidOptions">
            <seealso cref="M:iText.Kernel.XMP.Options.Options.GetValidOptions"/>
        </member>
        <member name="T:iText.Kernel.XMP.Options.IteratorOptions">
            <summary>Options for <code>XMPIterator</code> construction.</summary>
            <since>24.01.2006</since>
        </member>
        <member name="F:iText.Kernel.XMP.Options.IteratorOptions.JUST_CHILDREN">
            <summary>Just do the immediate children of the root, default is subtree.</summary>
        </member>
        <member name="F:iText.Kernel.XMP.Options.IteratorOptions.JUST_LEAFNODES">
            <summary>Just do the leaf nodes, default is all nodes in the subtree.</summary>
            <remarks>
            Just do the leaf nodes, default is all nodes in the subtree.
            Bugfix #2658965: If this option is set the Iterator returns the namespace
            of the leaf instead of the namespace of the base property.
            </remarks>
        </member>
        <member name="F:iText.Kernel.XMP.Options.IteratorOptions.JUST_LEAFNAME">
            <summary>Return just the leaf part of the path, default is the full path.</summary>
        </member>
        <member name="F:iText.Kernel.XMP.Options.IteratorOptions.OMIT_QUALIFIERS">
            <summary>Omit all qualifiers.</summary>
        </member>
        <member name="M:iText.Kernel.XMP.Options.IteratorOptions.IsJustChildren">
            <returns>Returns whether the option is set.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.IteratorOptions.IsJustLeafname">
            <returns>Returns whether the option is set.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.IteratorOptions.IsJustLeafnodes">
            <returns>Returns whether the option is set.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.IteratorOptions.IsOmitQualifiers">
            <returns>Returns whether the option is set.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.IteratorOptions.SetJustChildren(System.Boolean)">
            <summary>Sets the option and returns the instance.</summary>
            <param name="value">the value to set</param>
            <returns>Returns the instance to call more set-methods.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.IteratorOptions.SetJustLeafname(System.Boolean)">
            <summary>Sets the option and returns the instance.</summary>
            <param name="value">the value to set</param>
            <returns>Returns the instance to call more set-methods.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.IteratorOptions.SetJustLeafnodes(System.Boolean)">
            <summary>Sets the option and returns the instance.</summary>
            <param name="value">the value to set</param>
            <returns>Returns the instance to call more set-methods.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.IteratorOptions.SetOmitQualifiers(System.Boolean)">
            <summary>Sets the option and returns the instance.</summary>
            <param name="value">the value to set</param>
            <returns>Returns the instance to call more set-methods.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.IteratorOptions.DefineOptionName(System.Int32)">
            <seealso cref="M:iText.Kernel.XMP.Options.Options.DefineOptionName(System.Int32)"/>
        </member>
        <member name="M:iText.Kernel.XMP.Options.IteratorOptions.GetValidOptions">
            <seealso cref="M:iText.Kernel.XMP.Options.Options.GetValidOptions"/>
        </member>
        <member name="T:iText.Kernel.XMP.Options.Options">
            <summary>The base class for a collection of 32 flag bits.</summary>
            <remarks>
            The base class for a collection of 32 flag bits. Individual flags are defined as enum value bit
            masks. Inheriting classes add convenience accessor methods.
            </remarks>
            <since>24.01.2006</since>
        </member>
        <member name="F:iText.Kernel.XMP.Options.Options.options">
            <summary>the internal int containing all options</summary>
        </member>
        <member name="F:iText.Kernel.XMP.Options.Options.optionNames">
            <summary>a map containing the bit names</summary>
        </member>
        <member name="M:iText.Kernel.XMP.Options.Options.#ctor">
            <summary>The default constructor.</summary>
        </member>
        <member name="M:iText.Kernel.XMP.Options.Options.#ctor(System.Int32)">
            <summary>Constructor with the options bit mask.</summary>
            <param name="options">the options bit mask</param>
            <exception cref="T:iText.Kernel.XMP.XMPException">If the options are not correct</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Options.Options.Clear">
            <summary>Resets the options.</summary>
        </member>
        <member name="M:iText.Kernel.XMP.Options.Options.IsExactly(System.Int32)">
            <param name="optionBits">an option bitmask</param>
            <returns>Returns true, if this object is equal to the given options.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.Options.ContainsAllOptions(System.Int32)">
            <param name="optionBits">an option bitmask</param>
            <returns>Returns true, if this object contains all given options.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.Options.ContainsOneOf(System.Int32)">
            <param name="optionBits">an option bitmask</param>
            <returns>Returns true, if this object contain at least one of the given options.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.Options.GetOption(System.Int32)">
            <param name="optionBit">the binary bit or bits that are requested</param>
            <returns>Returns if <b>all</b> of the requested bits are set or not.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.Options.SetOption(System.Int32,System.Boolean)">
            <param name="optionBits">the binary bit or bits that shall be set to the given value</param>
            <param name="value">the boolean value to set</param>
        </member>
        <member name="M:iText.Kernel.XMP.Options.Options.GetOptions">
            <summary>Is friendly to access it during the tests.</summary>
            <returns>Returns the options.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.Options.SetOptions(System.Int32)">
            <param name="options">The options to set.</param>
            <exception cref="T:iText.Kernel.XMP.XMPException"></exception>
        </member>
        <member name="M:iText.Kernel.XMP.Options.Options.Equals(System.Object)">
            <seealso cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:iText.Kernel.XMP.Options.Options.GetHashCode">
            <seealso cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:iText.Kernel.XMP.Options.Options.GetOptionsString">
            <summary>Creates a human readable string from the set options.</summary>
            <remarks>
            Creates a human readable string from the set options. <em>Note:</em> This method is quite
            expensive and should only be used within tests or as
            </remarks>
            <returns>
            Returns a String listing all options that are set to <code>true</code> by their name,
            like &quot;option1 | option4&quot;.
            </returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.Options.ToString">
            <returns>Returns the options as hex bitmask.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.Options.GetValidOptions">
            <summary>To be implemeted by inheritants.</summary>
            <returns>Returns a bit mask where all valid option bits are set.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.Options.DefineOptionName(System.Int32)">
            <summary>To be implemeted by inheritants.</summary>
            <param name="option">a single, valid option bit.</param>
            <returns>Returns a human readable name for an option bit.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.Options.AssertConsistency(System.Int32)">
            <summary>The inheriting option class can do additional checks on the options.</summary>
            <remarks>
            The inheriting option class can do additional checks on the options.
            <em>Note:</em> For performance reasons this method is only called
            when setting bitmasks directly.
            When get- and set-methods are used, this method must be called manually,
            normally only when the Options-object has been created from a client
            (it has to be made public therefore).
            </remarks>
            <param name="options">the bitmask to check.</param>
            <exception cref="T:iText.Kernel.XMP.XMPException">Thrown if the options are not consistent.</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Options.Options.AssertOptionsValid(System.Int32)">
            <summary>Checks options before they are set.</summary>
            <remarks>
            Checks options before they are set.
            First it is checked if only defined options are used,
            second the additional
            <see cref="M:iText.Kernel.XMP.Options.Options.AssertConsistency(System.Int32)"/>
            -method is called.
            </remarks>
            <param name="options">the options to check</param>
            <exception cref="T:iText.Kernel.XMP.XMPException">Thrown if the options are invalid.</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Options.Options.GetOptionName(System.Int32)">
            <summary>Looks up or asks the inherited class for the name of an option bit.</summary>
            <remarks>
            Looks up or asks the inherited class for the name of an option bit.
            Its save that there is only one valid option handed into the method.
            </remarks>
            <param name="option">a single option bit</param>
            <returns>Returns the option name or undefined.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.Options.ProcureOptionNames">
            <returns>Returns the optionNames map and creates it if required.</returns>
        </member>
        <member name="T:iText.Kernel.XMP.Options.ParseOptions">
            <summary>
            Options for
            <see cref="M:iText.Kernel.XMP.XMPMetaFactory.Parse(System.IO.Stream,iText.Kernel.XMP.Options.ParseOptions)"/>
            .
            </summary>
            <since>24.01.2006</since>
        </member>
        <member name="F:iText.Kernel.XMP.Options.ParseOptions.REQUIRE_XMP_META">
            <summary>Require a surrounding &quot;x:xmpmeta&quot; element in the xml-document.</summary>
        </member>
        <member name="F:iText.Kernel.XMP.Options.ParseOptions.STRICT_ALIASING">
            <summary>Do not reconcile alias differences, throw an exception instead.</summary>
        </member>
        <member name="F:iText.Kernel.XMP.Options.ParseOptions.FIX_CONTROL_CHARS">
            <summary>Convert ASCII control characters 0x01 - 0x1F (except tab, cr, and lf) to spaces.</summary>
        </member>
        <member name="F:iText.Kernel.XMP.Options.ParseOptions.ACCEPT_LATIN_1">
            <summary>If the input is not unicode, try to parse it as ISO-8859-1.</summary>
        </member>
        <member name="F:iText.Kernel.XMP.Options.ParseOptions.OMIT_NORMALIZATION">
            <summary>Do not carry run the XMPNormalizer on a packet, leave it as it is.</summary>
        </member>
        <member name="M:iText.Kernel.XMP.Options.ParseOptions.#ctor">
            <summary>Sets the options to the default values.</summary>
        </member>
        <member name="M:iText.Kernel.XMP.Options.ParseOptions.GetRequireXMPMeta">
            <returns>Returns the requireXMPMeta.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.ParseOptions.SetRequireXMPMeta(System.Boolean)">
            <param name="value">the value to set</param>
            <returns>Returns the instance to call more set-methods.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.ParseOptions.GetStrictAliasing">
            <returns>Returns the strictAliasing.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.ParseOptions.SetStrictAliasing(System.Boolean)">
            <param name="value">the value to set</param>
            <returns>Returns the instance to call more set-methods.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.ParseOptions.GetFixControlChars">
            <returns>Returns the strictAliasing.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.ParseOptions.SetFixControlChars(System.Boolean)">
            <param name="value">the value to set</param>
            <returns>Returns the instance to call more set-methods.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.ParseOptions.GetAcceptLatin1">
            <returns>Returns the strictAliasing.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.ParseOptions.SetOmitNormalization(System.Boolean)">
            <param name="value">the value to set</param>
            <returns>Returns the instance to call more set-methods.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.ParseOptions.GetOmitNormalization">
            <returns>Returns the option "omit normalization".</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.ParseOptions.SetAcceptLatin1(System.Boolean)">
            <param name="value">the value to set</param>
            <returns>Returns the instance to call more set-methods.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.ParseOptions.DefineOptionName(System.Int32)">
            <seealso cref="M:iText.Kernel.XMP.Options.Options.DefineOptionName(System.Int32)"/>
        </member>
        <member name="M:iText.Kernel.XMP.Options.ParseOptions.GetValidOptions">
            <seealso cref="M:iText.Kernel.XMP.Options.Options.GetValidOptions"/>
        </member>
        <member name="T:iText.Kernel.XMP.Options.PropertyOptions">
            <summary>
            The property flags are used when properties are fetched from the <code>XMPMeta</code>-object
            and provide more detailed information about the property.
            </summary>
            <since>03.07.2006</since>
        </member>
        <member name="F:iText.Kernel.XMP.Options.PropertyOptions.DELETE_EXISTING">
            <summary>may be used in the future</summary>
        </member>
        <member name="F:iText.Kernel.XMP.Options.PropertyOptions.SEPARATE_NODE">
            <summary>Updated by iText.</summary>
            <remarks>Updated by iText. Indicates if the property should be writted as a separate node</remarks>
        </member>
        <member name="M:iText.Kernel.XMP.Options.PropertyOptions.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="M:iText.Kernel.XMP.Options.PropertyOptions.#ctor(System.Int32)">
            <summary>Intialization constructor</summary>
            <param name="options">the initialization options</param>
            <exception cref="T:iText.Kernel.XMP.XMPException">If the options are not valid</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Options.PropertyOptions.IsURI">
            <returns>
            Return whether the property value is a URI. It is serialized to RDF using the
            <tt>rdf:resource</tt> attribute. Not mandatory for URIs, but considered RDF-savvy.
            </returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.PropertyOptions.SetURI(System.Boolean)">
            <param name="value">the value to set</param>
            <returns>Returns this to enable cascaded options.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.PropertyOptions.GetHasQualifiers">
            <returns>
            Return whether the property has qualifiers. These could be an <tt>xml:lang</tt>
            attribute, an <tt>rdf:type</tt> property, or a general qualifier. See the
            introductory discussion of qualified properties for more information.
            </returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.PropertyOptions.SetHasQualifiers(System.Boolean)">
            <param name="value">the value to set</param>
            <returns>Returns this to enable cascaded options.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.PropertyOptions.IsQualifier">
            <returns>
            Return whether this property is a qualifier for some other property. Note that if the
            qualifier itself has a structured value, this flag is only set for the top node of
            the qualifier's subtree. Qualifiers may have arbitrary structure, and may even have
            qualifiers.
            </returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.PropertyOptions.SetQualifier(System.Boolean)">
            <param name="value">the value to set</param>
            <returns>Returns this to enable cascaded options.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.PropertyOptions.GetHasLanguage">
            <returns>Return whether this property has an <tt>xml:lang</tt> qualifier.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.PropertyOptions.SetHasLanguage(System.Boolean)">
            <param name="value">the value to set</param>
            <returns>Returns this to enable cascaded options.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.PropertyOptions.GetHasType">
            <returns>Return whether this property has an <tt>rdf:type</tt> qualifier.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.PropertyOptions.SetHasType(System.Boolean)">
            <param name="value">the value to set</param>
            <returns>Returns this to enable cascaded options.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.PropertyOptions.IsStruct">
            <returns>Return whether this property contains nested fields.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.PropertyOptions.SetStruct(System.Boolean)">
            <param name="value">the value to set</param>
            <returns>Returns this to enable cascaded options.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.PropertyOptions.IsArray">
            <returns>
            Return whether this property is an array. By itself this indicates a general
            unordered array. It is serialized using an <tt>rdf:Bag</tt> container.
            </returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.PropertyOptions.SetArray(System.Boolean)">
            <param name="value">the value to set</param>
            <returns>Returns this to enable cascaded options.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.PropertyOptions.IsArrayOrdered">
            <returns>
            Return whether this property is an ordered array. Appears in conjunction with
            getPropValueIsArray(). It is serialized using an <tt>rdf:Seq</tt> container.
            </returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.PropertyOptions.SetArrayOrdered(System.Boolean)">
            <param name="value">the value to set</param>
            <returns>Returns this to enable cascaded options.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.PropertyOptions.IsArrayAlternate">
            <returns>
            Return whether this property is an alternative array. Appears in conjunction with
            getPropValueIsArray(). It is serialized using an <tt>rdf:Alt</tt> container.
            </returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.PropertyOptions.SetArrayAlternate(System.Boolean)">
            <param name="value">the value to set</param>
            <returns>Returns this to enable cascaded options.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.PropertyOptions.IsArrayAltText">
            <returns>
            Return whether this property is an alt-text array. Appears in conjunction with
            getPropArrayIsAlternate(). It is serialized using an <tt>rdf:Alt</tt> container.
            Each array element is a simple property with an <tt>xml:lang</tt> attribute.
            </returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.PropertyOptions.SetArrayAltText(System.Boolean)">
            <param name="value">the value to set</param>
            <returns>Returns this to enable cascaded options.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.PropertyOptions.IsSchemaNode">
            <returns>Returns whether the SCHEMA_NODE option is set.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.PropertyOptions.SetSchemaNode(System.Boolean)">
            <param name="value">the option DELETE_EXISTING to set</param>
            <returns>Returns this to enable cascaded options.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.PropertyOptions.IsCompositeProperty">
            <returns>Returns whether the property is of composite type - an array or a struct.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.PropertyOptions.IsSimple">
            <returns>Returns whether the property is of composite type - an array or a struct.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.PropertyOptions.EqualArrayTypes(iText.Kernel.XMP.Options.PropertyOptions)">
            <summary>Compares two options set for array compatibility.</summary>
            <param name="options">other options</param>
            <returns>Returns true if the array options of the sets are equal.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.PropertyOptions.MergeWith(iText.Kernel.XMP.Options.PropertyOptions)">
            <summary>Merges the set options of a another options object with this.</summary>
            <remarks>
            Merges the set options of a another options object with this.
            If the other options set is null, this objects stays the same.
            </remarks>
            <param name="options">other options</param>
            <exception cref="T:iText.Kernel.XMP.XMPException">If illegal options are provided</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Options.PropertyOptions.IsOnlyArrayOptions">
            <returns>Returns true if only array options are set.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.PropertyOptions.GetValidOptions">
            <seealso cref="M:iText.Kernel.XMP.Options.Options.GetValidOptions"/>
        </member>
        <member name="M:iText.Kernel.XMP.Options.PropertyOptions.DefineOptionName(System.Int32)">
            <seealso cref="M:iText.Kernel.XMP.Options.Options.DefineOptionName(System.Int32)"/>
        </member>
        <member name="M:iText.Kernel.XMP.Options.PropertyOptions.AssertConsistency(System.Int32)">
            <summary>
            Checks that a node not a struct and array at the same time;
            and URI cannot be a struct.
            </summary>
            <param name="options">the bitmask to check.</param>
            <exception cref="T:iText.Kernel.XMP.XMPException">Thrown if the options are not consistent.</exception>
        </member>
        <!-- Badly formed XML comment ignored for member "T:iText.Kernel.XMP.Options.SerializeOptions" -->
        <member name="F:iText.Kernel.XMP.Options.SerializeOptions.OMIT_PACKET_WRAPPER">
            <summary>Omit the XML packet wrapper.</summary>
        </member>
        <member name="F:iText.Kernel.XMP.Options.SerializeOptions.READONLY_PACKET">
            <summary>Mark packet as read-only.</summary>
            <remarks>Mark packet as read-only. Default is a writeable packet.</remarks>
        </member>
        <member name="F:iText.Kernel.XMP.Options.SerializeOptions.USE_COMPACT_FORMAT">
            <summary>Use a compact form of RDF.</summary>
            <remarks>
            Use a compact form of RDF.
            The compact form is the default serialization format (this flag is technically ignored).
            To serialize to the canonical form, set the flag USE_CANONICAL_FORMAT.
            If both flags &quot;compact&quot; and &quot;canonical&quot; are set, canonical is used.
            </remarks>
        </member>
        <member name="F:iText.Kernel.XMP.Options.SerializeOptions.USE_CANONICAL_FORMAT">
            <summary>Use the canonical form of RDF if set.</summary>
            <remarks>Use the canonical form of RDF if set. By default the compact form is used</remarks>
        </member>
        <member name="F:iText.Kernel.XMP.Options.SerializeOptions.INCLUDE_THUMBNAIL_PAD">
            <summary>Include a padding allowance for a thumbnail image.</summary>
            <remarks>
            Include a padding allowance for a thumbnail image. If no <tt>xmp:Thumbnails</tt> property
            is present, the typical space for a JPEG thumbnail is used.
            </remarks>
        </member>
        <member name="F:iText.Kernel.XMP.Options.SerializeOptions.EXACT_PACKET_LENGTH">
            <summary>The padding parameter provides the overall packet length.</summary>
            <remarks>
            The padding parameter provides the overall packet length. The actual amount of padding is
            computed. An exception is thrown if the packet exceeds this length with no padding.
            </remarks>
        </member>
        <member name="F:iText.Kernel.XMP.Options.SerializeOptions.OMIT_XMPMETA_ELEMENT">
            <summary>Omit the &lt;x:xmpmeta&gt;-tag</summary>
        </member>
        <member name="F:iText.Kernel.XMP.Options.SerializeOptions.SORT">
            <summary>Sort the struct properties and qualifier before serializing</summary>
        </member>
        <member name="F:iText.Kernel.XMP.Options.SerializeOptions.LITTLEENDIAN_BIT">
            <summary>Bit indicating little endian encoding, unset is big endian</summary>
        </member>
        <member name="F:iText.Kernel.XMP.Options.SerializeOptions.UTF16_BIT">
            <summary>Bit indication UTF16 encoding.</summary>
        </member>
        <member name="F:iText.Kernel.XMP.Options.SerializeOptions.ENCODE_UTF8">
            <summary>UTF8 encoding; this is the default</summary>
        </member>
        <member name="F:iText.Kernel.XMP.Options.SerializeOptions.ENCODE_UTF16BE">
            <summary>UTF16BE encoding</summary>
        </member>
        <member name="F:iText.Kernel.XMP.Options.SerializeOptions.ENCODE_UTF16LE">
            <summary>UTF16LE encoding</summary>
        </member>
        <member name="F:iText.Kernel.XMP.Options.SerializeOptions.padding">
            <summary>The amount of padding to be added if a writeable XML packet is created.</summary>
            <remarks>
            The amount of padding to be added if a writeable XML packet is created. If zero is passed
            (the default) an appropriate amount of padding is computed.
            </remarks>
        </member>
        <member name="F:iText.Kernel.XMP.Options.SerializeOptions.newline">
            <summary>The string to be used as a line terminator.</summary>
            <remarks>
            The string to be used as a line terminator. If empty it defaults to; linefeed, U+000A, the
            standard XML newline.
            </remarks>
        </member>
        <member name="F:iText.Kernel.XMP.Options.SerializeOptions.indent">
            <summary>
            The string to be used for each level of indentation in the serialized
            RDF.
            </summary>
            <remarks>
            The string to be used for each level of indentation in the serialized
            RDF. If empty it defaults to two ASCII spaces, U+0020.
            </remarks>
        </member>
        <member name="F:iText.Kernel.XMP.Options.SerializeOptions.baseIndent">
            <summary>
            The number of levels of indentation to be used for the outermost XML element in the
            serialized RDF.
            </summary>
            <remarks>
            The number of levels of indentation to be used for the outermost XML element in the
            serialized RDF. This is convenient when embedding the RDF in other text, defaults to 0.
            </remarks>
        </member>
        <member name="F:iText.Kernel.XMP.Options.SerializeOptions.omitVersionAttribute">
            <summary>Omits the Toolkit version attribute, not published, only used for Unit tests.</summary>
        </member>
        <member name="M:iText.Kernel.XMP.Options.SerializeOptions.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:iText.Kernel.XMP.Options.SerializeOptions.#ctor(System.Int32)">
            <summary>Constructor using inital options</summary>
            <param name="options">the inital options</param>
            <exception cref="T:iText.Kernel.XMP.XMPException">Thrown if options are not consistant.</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Options.SerializeOptions.GetOmitPacketWrapper">
            <returns>Returns the option.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.SerializeOptions.SetOmitPacketWrapper(System.Boolean)">
            <param name="value">the value to set</param>
            <returns>Returns the instance to call more set-methods.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.SerializeOptions.GetOmitXmpMetaElement">
            <returns>Returns the option.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.SerializeOptions.SetOmitXmpMetaElement(System.Boolean)">
            <param name="value">the value to set</param>
            <returns>Returns the instance to call more set-methods.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.SerializeOptions.GetReadOnlyPacket">
            <returns>Returns the option.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.SerializeOptions.SetReadOnlyPacket(System.Boolean)">
            <param name="value">the value to set</param>
            <returns>Returns the instance to call more set-methods.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.SerializeOptions.GetUseCompactFormat">
            <returns>Returns the option.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.SerializeOptions.SetUseCompactFormat(System.Boolean)">
            <param name="value">the value to set</param>
            <returns>Returns the instance to call more set-methods.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.SerializeOptions.GetUseCanonicalFormat">
            <returns>Returns the option.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.SerializeOptions.SetUseCanonicalFormat(System.Boolean)">
            <param name="value">the value to set</param>
            <returns>Returns the instance to call more set-methods.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.SerializeOptions.GetIncludeThumbnailPad">
            <returns>Returns the option.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.SerializeOptions.SetIncludeThumbnailPad(System.Boolean)">
            <param name="value">the value to set</param>
            <returns>Returns the instance to call more set-methods.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.SerializeOptions.GetExactPacketLength">
            <returns>Returns the option.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.SerializeOptions.SetExactPacketLength(System.Boolean)">
            <param name="value">the value to set</param>
            <returns>Returns the instance to call more set-methods.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.SerializeOptions.GetSort">
            <returns>Returns the option.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.SerializeOptions.SetSort(System.Boolean)">
            <param name="value">the value to set</param>
            <returns>Returns the instance to call more set-methods.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.SerializeOptions.GetEncodeUTF16BE">
            <returns>Returns the option.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.SerializeOptions.SetEncodeUTF16BE(System.Boolean)">
            <param name="value">the value to set</param>
            <returns>Returns the instance to call more set-methods.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.SerializeOptions.GetEncodeUTF16LE">
            <returns>Returns the option.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.SerializeOptions.SetEncodeUTF16LE(System.Boolean)">
            <param name="value">the value to set</param>
            <returns>Returns the instance to call more set-methods.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.SerializeOptions.GetBaseIndent">
            <returns>Returns the baseIndent.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.SerializeOptions.SetBaseIndent(System.Int32)">
            <param name="baseIndent">The baseIndent to set.</param>
            <returns>Returns the instance to call more set-methods.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.SerializeOptions.GetIndent">
            <returns>Returns the indent.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.SerializeOptions.SetIndent(System.String)">
            <param name="indent">The indent to set.</param>
            <returns>Returns the instance to call more set-methods.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.SerializeOptions.GetNewline">
            <returns>Returns the newline.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.SerializeOptions.SetNewline(System.String)">
            <param name="newline">The newline to set.</param>
            <returns>Returns the instance to call more set-methods.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.SerializeOptions.GetPadding">
            <returns>Returns the padding.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.SerializeOptions.SetPadding(System.Int32)">
            <param name="padding">The padding to set.</param>
            <returns>Returns the instance to call more set-methods.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.SerializeOptions.GetOmitVersionAttribute">
            <returns>
            Returns whether the Toolkit version attribute shall be omitted.
            <em>Note:</em> This options can only be set by unit tests.
            </returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.SerializeOptions.GetEncoding">
            <returns>Returns the encoding as Java encoding String.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Options.SerializeOptions.Clone">
            <returns>Returns clone of this SerializeOptions-object with the same options set.</returns>
            <exception cref="!:Java.Lang.CloneNotSupportedException">Cannot happen in this place.</exception>
        </member>
        <member name="M:iText.Kernel.XMP.Options.SerializeOptions.DefineOptionName(System.Int32)">
            <seealso cref="M:iText.Kernel.XMP.Options.Options.DefineOptionName(System.Int32)"/>
        </member>
        <member name="M:iText.Kernel.XMP.Options.SerializeOptions.GetValidOptions">
            <seealso cref="M:iText.Kernel.XMP.Options.Options.GetValidOptions"/>
        </member>
        <member name="T:iText.Kernel.XMP.PdfConst">
            <summary>Class that contains several constants.</summary>
        </member>
        <member name="F:iText.Kernel.XMP.PdfConst.Contributor">
            <summary>External Contributors to the resource (other than the authors).</summary>
        </member>
        <member name="F:iText.Kernel.XMP.PdfConst.Coverage">
            <summary>The extent or scope of the resource.</summary>
        </member>
        <member name="F:iText.Kernel.XMP.PdfConst.Creator">
            <summary>The authors of the resource (listed in order of precedence, if significant).</summary>
        </member>
        <member name="F:iText.Kernel.XMP.PdfConst.Date">
            <summary>Date(s) that something interesting happened to the resource.</summary>
        </member>
        <member name="F:iText.Kernel.XMP.PdfConst.Description">
            <summary>A textual description of the content of the resource.</summary>
            <remarks>A textual description of the content of the resource. Multiple values may be present for different languages.
                </remarks>
        </member>
        <member name="F:iText.Kernel.XMP.PdfConst.Format">
            <summary>The file format used when saving the resource.</summary>
            <remarks>The file format used when saving the resource. Tools and applications should set this property to the save format of the data. It may include appropriate qualifiers.
                </remarks>
        </member>
        <member name="F:iText.Kernel.XMP.PdfConst.Identifier">
            <summary>An unordered array of text strings that unambiguously identify the resource within a given context.
                </summary>
        </member>
        <member name="F:iText.Kernel.XMP.PdfConst.Language">
            <summary>An unordered array specifying the languages used in the	resource.</summary>
        </member>
        <member name="F:iText.Kernel.XMP.PdfConst.Publisher">
            <summary>Publishers.</summary>
        </member>
        <member name="F:iText.Kernel.XMP.PdfConst.Relation">
            <summary>Relationships to other documents.</summary>
        </member>
        <member name="F:iText.Kernel.XMP.PdfConst.Rights">
            <summary>Informal rights statement, selected by language.</summary>
        </member>
        <member name="F:iText.Kernel.XMP.PdfConst.Source">
            <summary>Unique identifier of the work from which this resource was derived.</summary>
        </member>
        <member name="F:iText.Kernel.XMP.PdfConst.Subject">
            <summary>An unordered array of descriptive phrases or keywords that specify the topic of the content of the resource.
                </summary>
        </member>
        <member name="F:iText.Kernel.XMP.PdfConst.Title">
            <summary>The title of the document, or the name given to the resource.</summary>
            <remarks>The title of the document, or the name given to the resource. Typically, it will be a name by which the resource is formally known.
                </remarks>
        </member>
        <member name="F:iText.Kernel.XMP.PdfConst.Type">
            <summary>A document type; for example, novel, poem, or working paper.</summary>
        </member>
        <member name="F:iText.Kernel.XMP.PdfConst.Keywords">
            <summary>Keywords.</summary>
        </member>
        <member name="F:iText.Kernel.XMP.PdfConst.Version">
            <summary>The PDF file version (for example: 1.0, 1.3, and so on).</summary>
        </member>
        <member name="F:iText.Kernel.XMP.PdfConst.Producer">
            <summary>The Producer.</summary>
        </member>
        <member name="F:iText.Kernel.XMP.PdfConst.Part">
            <summary>The part</summary>
        </member>
        <member name="F:iText.Kernel.XMP.PdfConst.Advisory">
            <summary>An unordered array specifying properties that were edited outside the authoring application.</summary>
            <remarks>An unordered array specifying properties that were edited outside the authoring application. Each item should contain a single namespace and XPath separated by one ASCII space (U+0020).
                </remarks>
        </member>
        <member name="F:iText.Kernel.XMP.PdfConst.BaseURL">
            <summary>The base URL for relative URLs in the document content.</summary>
            <remarks>The base URL for relative URLs in the document content. If this document contains Internet links, and those links are relative, they are relative to this base URL. This property provides a standard way for embedded relative URLs to be interpreted by tools. Web authoring tools should set the value based on their notion of where URLs will be interpreted.
                </remarks>
        </member>
        <member name="F:iText.Kernel.XMP.PdfConst.CreateDate">
            <summary>The date and time the resource was originally created.</summary>
        </member>
        <member name="F:iText.Kernel.XMP.PdfConst.CreatorTool">
            <summary>The name of the first known tool used to create the resource.</summary>
            <remarks>The name of the first known tool used to create the resource. If history is present in the metadata, this value should be equivalent to that of xmpMM:History's softwareAgent property.
                </remarks>
        </member>
        <member name="F:iText.Kernel.XMP.PdfConst.MetadataDate">
            <summary>The date and time that any metadata for this resource was last changed.</summary>
        </member>
        <member name="F:iText.Kernel.XMP.PdfConst.ModifyDate">
            <summary>The date and time the resource was last modified.</summary>
        </member>
        <member name="F:iText.Kernel.XMP.PdfConst.Nickname">
            <summary>A short informal name for the resource.</summary>
        </member>
        <member name="F:iText.Kernel.XMP.PdfConst.Thumbnails">
            <summary>An alternative array of thumbnail images for a file, which can differ in characteristics such as size or image encoding.
                </summary>
        </member>
        <member name="F:iText.Kernel.XMP.PdfConst.Trapped">
            <summary>Indicates whether the document has been modified to include trapping information</summary>
        </member>
        <member name="T:iText.Kernel.XMP.Properties.XMPAliasInfo">
            <summary>This interface is used to return info about an alias.</summary>
            <since>27.01.2006</since>
        </member>
        <member name="M:iText.Kernel.XMP.Properties.XMPAliasInfo.GetNamespace">
            <returns>Returns Returns the namespace URI for the base property.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Properties.XMPAliasInfo.GetPrefix">
            <returns>Returns the default prefix for the given base property.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Properties.XMPAliasInfo.GetPropName">
            <returns>Returns the path of the base property.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Properties.XMPAliasInfo.GetAliasForm">
            <returns>
            Returns the kind of the alias. This can be a direct alias
            (ARRAY), a simple property to an ordered array
            (ARRAY_ORDERED), to an alternate array
            (ARRAY_ALTERNATE) or to an alternate text array
            (ARRAY_ALT_TEXT).
            </returns>
        </member>
        <member name="T:iText.Kernel.XMP.Properties.XMPProperty">
            <summary>This interface is used to return a text property together with its and options.</summary>
            <since>23.01.2006</since>
        </member>
        <member name="M:iText.Kernel.XMP.Properties.XMPProperty.GetValue">
            <returns>Returns the value of the property.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Properties.XMPProperty.GetOptions">
            <returns>Returns the options of the property.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Properties.XMPProperty.GetLanguage">
            <summary>
            Only set by
            <see cref="M:iText.Kernel.XMP.XMPMeta.GetLocalizedText(System.String,System.String,System.String,System.String)"/>
            .
            </summary>
            <returns>Returns the language of the alt-text item.</returns>
        </member>
        <member name="T:iText.Kernel.XMP.Properties.XMPPropertyInfo">
            <summary>This interface is used to return a property together with its path and namespace.</summary>
            <remarks>
            This interface is used to return a property together with its path and namespace.
            It is returned when properties are iterated with the <code>XMPIterator</code>.
            </remarks>
            <since>06.07.2006</since>
        </member>
        <member name="M:iText.Kernel.XMP.Properties.XMPPropertyInfo.GetNamespace">
            <returns>Returns the namespace of the property</returns>
        </member>
        <member name="M:iText.Kernel.XMP.Properties.XMPPropertyInfo.GetPath">
            <returns>Returns the path of the property, but only if returned by the iterator.</returns>
        </member>
        <member name="T:iText.Kernel.XMP.XMPConst">
            <summary>Common constants for the XMP Toolkit.</summary>
            <since>20.01.2006</since>
        </member>
        <member name="F:iText.Kernel.XMP.XMPConst.NS_XML">
            <summary>The XML namespace for XML.</summary>
        </member>
        <member name="F:iText.Kernel.XMP.XMPConst.NS_RDF">
            <summary>The XML namespace for RDF.</summary>
        </member>
        <member name="F:iText.Kernel.XMP.XMPConst.NS_DC">
            <summary>The XML namespace for the Dublin Core schema.</summary>
        </member>
        <member name="F:iText.Kernel.XMP.XMPConst.NS_IPTCCORE">
            <summary>The XML namespace for the IPTC Core schema.</summary>
        </member>
        <member name="F:iText.Kernel.XMP.XMPConst.NS_IPTCEXT">
            <summary>The XML namespace for the IPTC Extension schema.</summary>
        </member>
        <member name="F:iText.Kernel.XMP.XMPConst.NS_DICOM">
            <summary>The XML namespace for the DICOM medical schema.</summary>
        </member>
        <member name="F:iText.Kernel.XMP.XMPConst.NS_PLUS">
            <summary>The XML namespace for the PLUS (Picture Licensing Universal System, http://www.useplus.org)</summary>
        </member>
        <member name="F:iText.Kernel.XMP.XMPConst.NS_X">
            <summary>The XML namespace Adobe XMP Metadata.</summary>
        </member>
        <member name="F:iText.Kernel.XMP.XMPConst.NS_XMP">
            <summary>The XML namespace for the XMP "basic" schema.</summary>
        </member>
        <member name="F:iText.Kernel.XMP.XMPConst.NS_XMP_RIGHTS">
            <summary>The XML namespace for the XMP copyright schema.</summary>
        </member>
        <member name="F:iText.Kernel.XMP.XMPConst.NS_XMP_MM">
            <summary>The XML namespace for the XMP digital asset management schema.</summary>
        </member>
        <member name="F:iText.Kernel.XMP.XMPConst.NS_XMP_BJ">
            <summary>The XML namespace for the job management schema.</summary>
        </member>
        <member name="F:iText.Kernel.XMP.XMPConst.NS_XMP_NOTE">
            <summary>The XML namespace for the job management schema.</summary>
        </member>
        <member name="F:iText.Kernel.XMP.XMPConst.NS_PDF">
            <summary>The XML namespace for the PDF schema.</summary>
        </member>
        <member name="F:iText.Kernel.XMP.XMPConst.NS_PDFX">
            <summary>The XML namespace for the PDF schema.</summary>
        </member>
        <member name="F:iText.Kernel.XMP.XMPConst.NS_PHOTOSHOP">
            <summary>The XML namespace for the Photoshop custom schema.</summary>
        </member>
        <member name="F:iText.Kernel.XMP.XMPConst.NS_PSALBUM">
            <summary>The XML namespace for the Photoshop Album schema.</summary>
        </member>
        <member name="F:iText.Kernel.XMP.XMPConst.NS_EXIF">
            <summary>The XML namespace for Adobe's EXIF schema.</summary>
        </member>
        <member name="F:iText.Kernel.XMP.XMPConst.NS_EXIFX">
            <summary>NS for the CIPA XMP for Exif document v1.1</summary>
        </member>
        <member name="F:iText.Kernel.XMP.XMPConst.NS_TIFF">
            <summary>The XML namespace for Adobe's TIFF schema.</summary>
        </member>
        <member name="F:iText.Kernel.XMP.XMPConst.NS_BWF">
            <summary>BExt Schema</summary>
        </member>
        <member name="F:iText.Kernel.XMP.XMPConst.NS_RIFFINFO">
            <summary>RIFF Info Schema</summary>
        </member>
        <member name="F:iText.Kernel.XMP.XMPConst.NS_TXMP">
            <summary>Transform XMP</summary>
        </member>
        <member name="F:iText.Kernel.XMP.XMPConst.NS_SWF">
            <summary>Adobe Flash SWF</summary>
        </member>
        <member name="F:iText.Kernel.XMP.XMPConst.NS_DC_DEPRECATED">
            <summary>legacy Dublin Core NS, will be converted to NS_DC</summary>
        </member>
        <member name="F:iText.Kernel.XMP.XMPConst.TYPE_IDENTIFIERQUAL">
            <summary>The XML namespace for qualifiers of the xmp:Identifier property.</summary>
        </member>
        <member name="F:iText.Kernel.XMP.XMPConst.TYPE_DIMENSIONS">
            <summary>The XML namespace for fields of the Dimensions type.</summary>
        </member>
        <member name="F:iText.Kernel.XMP.XMPConst.TYPE_IMAGE">
            <summary>The XML namespace for fields of a graphical image.</summary>
            <remarks>The XML namespace for fields of a graphical image. Used for the Thumbnail type.</remarks>
        </member>
        <member name="F:iText.Kernel.XMP.XMPConst.TYPE_RESOURCEEVENT">
            <summary>The XML namespace for fields of the ResourceEvent type.</summary>
        </member>
        <member name="F:iText.Kernel.XMP.XMPConst.TYPE_RESOURCEREF">
            <summary>The XML namespace for fields of the ResourceRef type.</summary>
        </member>
        <member name="F:iText.Kernel.XMP.XMPConst.TYPE_ST_VERSION">
            <summary>The XML namespace for fields of the Version type.</summary>
        </member>
        <member name="F:iText.Kernel.XMP.XMPConst.TYPE_ST_JOB">
            <summary>The XML namespace for fields of the JobRef type.</summary>
        </member>
        <member name="F:iText.Kernel.XMP.XMPConst.TRUESTR">
            <summary>The canonical true string value for Booleans in serialized XMP.</summary>
            <remarks>
            The canonical true string value for Booleans in serialized XMP. Code that converts from the
            string to a bool should be case insensitive, and even allow "1".
            </remarks>
        </member>
        <member name="F:iText.Kernel.XMP.XMPConst.FALSESTR">
            <summary>The canonical false string value for Booleans in serialized XMP.</summary>
            <remarks>
            The canonical false string value for Booleans in serialized XMP. Code that converts from the
            string to a bool should be case insensitive, and even allow "0".
            </remarks>
        </member>
        <member name="F:iText.Kernel.XMP.XMPConst.ARRAY_LAST_ITEM">
            <summary>Index that has the meaning to be always the last item in an array.</summary>
        </member>
        <member name="F:iText.Kernel.XMP.XMPConst.ARRAY_ITEM_NAME">
            <summary>Node name of an array item.</summary>
        </member>
        <member name="F:iText.Kernel.XMP.XMPConst.X_DEFAULT">
            <summary>The x-default string for localized properties</summary>
        </member>
        <member name="F:iText.Kernel.XMP.XMPConst.XML_LANG">
            <summary>xml:lang qualfifier</summary>
        </member>
        <member name="F:iText.Kernel.XMP.XMPConst.RDF_TYPE">
            <summary>rdf:type qualfifier</summary>
        </member>
        <member name="F:iText.Kernel.XMP.XMPConst.XMP_PI">
            <summary>Processing Instruction (PI) for xmp packet</summary>
        </member>
        <member name="F:iText.Kernel.XMP.XMPConst.TAG_XMPMETA">
            <summary>XMP meta tag version new</summary>
        </member>
        <member name="F:iText.Kernel.XMP.XMPConst.TAG_XAPMETA">
            <summary>XMP meta tag version old</summary>
        </member>
        <member name="F:iText.Kernel.XMP.XMPConst.PART">
            <summary>Part, 1, 2, or 3</summary>
        </member>
        <member name="F:iText.Kernel.XMP.XMPConst.CONFORMANCE">
            <summary>Conformance, A, B, or U.</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:iText.Kernel.XMP.XMPDateTime" -->
        <member name="M:iText.Kernel.XMP.XMPDateTime.GetYear">
            <returns>Returns the year, can be negative.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.XMPDateTime.SetYear(System.Int32)">
            <param name="year">Sets the year</param>
        </member>
        <member name="M:iText.Kernel.XMP.XMPDateTime.GetMonth">
            <returns>Returns The month in the range 1..12.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.XMPDateTime.SetMonth(System.Int32)">
            <param name="month">Sets the month 1..12</param>
        </member>
        <member name="M:iText.Kernel.XMP.XMPDateTime.GetDay">
            <returns>Returns the day of the month in the range 1..31.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.XMPDateTime.SetDay(System.Int32)">
            <param name="day">Sets the day 1..31</param>
        </member>
        <member name="M:iText.Kernel.XMP.XMPDateTime.GetHour">
            <returns>Returns hour - The hour in the range 0..23.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.XMPDateTime.SetHour(System.Int32)">
            <param name="hour">Sets the hour in the range 0..23.</param>
        </member>
        <member name="M:iText.Kernel.XMP.XMPDateTime.GetMinute">
            <returns>Returns the minute in the range 0..59.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.XMPDateTime.SetMinute(System.Int32)">
            <param name="minute">Sets the minute in the range 0..59.</param>
        </member>
        <member name="M:iText.Kernel.XMP.XMPDateTime.GetSecond">
            <returns>Returns the second in the range 0..59.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.XMPDateTime.SetSecond(System.Int32)">
            <param name="second">Sets the second in the range 0..59.</param>
        </member>
        <member name="M:iText.Kernel.XMP.XMPDateTime.GetNanoSecond">
            <returns>
            Returns milli-, micro- and nano seconds.
            Nanoseconds within a second, often left as zero?
            </returns>
        </member>
        <member name="M:iText.Kernel.XMP.XMPDateTime.SetNanoSecond(System.Int32)">
            <param name="nanoSecond">
            Sets the milli-, micro- and nano seconds.
            Granularity goes down to milli seconds.
            </param>
        </member>
        <member name="M:iText.Kernel.XMP.XMPDateTime.GetTimeZone">
            <returns>Returns the time zone.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.XMPDateTime.SetTimeZone(System.TimeZoneInfo)">
            <param name="tz">a time zone to set</param>
        </member>
        <member name="M:iText.Kernel.XMP.XMPDateTime.HasDate">
            <summary>This flag is set either by parsing or by setting year, month or day.</summary>
            <returns>Returns true if the XMPDateTime object has a date portion.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.XMPDateTime.HasTime">
            <summary>This flag is set either by parsing or by setting hours, minutes, seconds or milliseconds.
            	</summary>
            <returns>Returns true if the XMPDateTime object has a time portion.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.XMPDateTime.HasTimeZone">
            <summary>This flag is set either by parsing or by setting hours, minutes, seconds or milliseconds.
            	</summary>
            <returns>Returns true if the XMPDateTime object has a defined timezone.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.XMPDateTime.GetCalendar">
            <returns>
            Returns a <code>Calendar</code> (only with milli second precision). <br />
            <em>Note:</em> the dates before Oct 15th 1585 (which normally fall into validity of
            the Julian calendar) are also rendered internally as Gregorian dates.
            </returns>
        </member>
        <member name="M:iText.Kernel.XMP.XMPDateTime.GetIso8601String">
            <returns>Returns the ISO 8601 string representation of the date and time.</returns>
        </member>
        <member name="T:iText.Kernel.XMP.XMPDateTimeFactory">
            <summary>
            A factory to create <code>XMPDateTime</code>-instances from a <code>Calendar</code> or an
            ISO 8601 string or for the current time.
            </summary>
            <since>16.02.2006</since>
        </member>
        <member name="M:iText.Kernel.XMP.XMPDateTimeFactory.#ctor">
            <summary>Private constructor</summary>
        </member>
        <member name="M:iText.Kernel.XMP.XMPDateTimeFactory.CreateFromCalendar(iText.Kernel.XMP.XMPCalendar)">
            <summary>Creates an <code>XMPDateTime</code> from a <code>Calendar</code>-object.
            	</summary>
            <param name="calendar">a <code>Calendar</code>-object.</param>
            <returns>An <code>XMPDateTime</code>-object.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.XMPDateTimeFactory.Create">
            <summary>Creates an empty <code>XMPDateTime</code>-object.</summary>
            <returns>Returns an <code>XMPDateTime</code>-object.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.XMPDateTimeFactory.Create(System.Int32,System.Int32,System.Int32)">
            <summary>Creates an <code>XMPDateTime</code>-object from initial values.</summary>
            <param name="year">years</param>
            <param name="month">
            months from 1 to 12<br />
            <em>Note:</em> Remember that the month in
            <see cref="T:System.DateTime"/>
            is defined from 0 to 11.
            </param>
            <param name="day">days</param>
            <returns>Returns an <code>XMPDateTime</code>-object.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.XMPDateTimeFactory.Create(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Creates an <code>XMPDateTime</code>-object from initial values.</summary>
            <param name="year">years</param>
            <param name="month">
            months from 1 to 12<br />
            <em>Note:</em> Remember that the month in
            <see cref="T:System.DateTime"/>
            is defined from 0 to 11.
            </param>
            <param name="day">days</param>
            <param name="hour">hours</param>
            <param name="minute">minutes</param>
            <param name="second">seconds</param>
            <param name="nanoSecond">nanoseconds</param>
            <returns>Returns an <code>XMPDateTime</code>-object.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.XMPDateTimeFactory.CreateFromISO8601(System.String)">
            <summary>Creates an <code>XMPDateTime</code> from an ISO 8601 string.</summary>
            <param name="strValue">The ISO 8601 string representation of the date/time.</param>
            <returns>An <code>XMPDateTime</code>-object.</returns>
            <exception cref="T:iText.Kernel.XMP.XMPException">When the ISO 8601 string is non-conform</exception>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.XMPDateTimeFactory.GetCurrentDateTime">
            <summary>Obtain the current date and time.</summary>
            <returns>
            Returns The returned time is UTC, properly adjusted for the local time zone. The
            resolution of the time is not guaranteed to be finer than seconds.
            </returns>
        </member>
        <member name="M:iText.Kernel.XMP.XMPDateTimeFactory.SetLocalTimeZone(iText.Kernel.XMP.XMPDateTime)">
            <summary>
            Sets the local time zone without touching any other Any existing time zone value is replaced,
            the other date/time fields are not adjusted in any way.
            </summary>
            <param name="dateTime">the <code>XMPDateTime</code> variable containing the value to be modified.
            	</param>
            <returns>Returns an updated <code>XMPDateTime</code>-object.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.XMPDateTimeFactory.ConvertToUTCTime(iText.Kernel.XMP.XMPDateTime)">
            <summary>Make sure a time is UTC.</summary>
            <remarks>
            Make sure a time is UTC. If the time zone is not UTC, the time is
            adjusted and the time zone set to be UTC.
            </remarks>
            <param name="dateTime">
            the <code>XMPDateTime</code> variable containing the time to
            be modified.
            </param>
            <returns>Returns an updated <code>XMPDateTime</code>-object.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.XMPDateTimeFactory.ConvertToLocalTime(iText.Kernel.XMP.XMPDateTime)">
            <summary>Make sure a time is local.</summary>
            <remarks>
            Make sure a time is local. If the time zone is not the local zone, the time is adjusted and
            the time zone set to be local.
            </remarks>
            <param name="dateTime">the <code>XMPDateTime</code> variable containing the time to be modified.
            	</param>
            <returns>Returns an updated <code>XMPDateTime</code>-object.</returns>
        </member>
        <member name="T:iText.Kernel.XMP.XMPError">
            <since>21.09.2006</since>
        </member>
        <member name="F:iText.Kernel.XMP.XMPError.BADSTREAM">
            <summary><em>Note:</em> This is an error code introduced by Java.</summary>
        </member>
        <member name="T:iText.Kernel.XMP.XMPException">
            <summary>This exception wraps all errors that occur in the XMP Toolkit.</summary>
            <since>16.02.2006</since>
        </member>
        <member name="F:iText.Kernel.XMP.XMPException.errorCode">
            <summary>the errorCode of the XMP toolkit</summary>
        </member>
        <member name="M:iText.Kernel.XMP.XMPException.#ctor(System.String,System.Int32)">
            <summary>Constructs an exception with a message and an error code.</summary>
            <param name="message">the message</param>
            <param name="errorCode">the error code</param>
        </member>
        <member name="M:iText.Kernel.XMP.XMPException.#ctor(System.String,System.Int32,System.Exception)">
            <summary>Constructs an exception with a message, an error code and a <code>Throwable</code></summary>
            <param name="message">the error message.</param>
            <param name="errorCode">the error code</param>
            <param name="t">the exception source</param>
        </member>
        <member name="M:iText.Kernel.XMP.XMPException.GetErrorCode">
            <returns>Returns the errorCode.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:iText.Kernel.XMP.XMPIterator" -->
        <member name="M:iText.Kernel.XMP.XMPIterator.SkipSubtree">
            <summary>
            Skip the subtree below the current node when <code>next()</code> is
            called.
            </summary>
        </member>
        <member name="M:iText.Kernel.XMP.XMPIterator.SkipSiblings">
            <summary>
            Skip the subtree below and remaining siblings of the current node when
            <code>next()</code> is called.
            </summary>
        </member>
        <member name="T:iText.Kernel.XMP.XMPMeta">
            <summary>This class represents the set of XMP metadata as a DOM representation.</summary>
            <remarks>
            This class represents the set of XMP metadata as a DOM representation. It has methods to read and
            modify all kinds of properties, create an iterator over all properties and serialize the metadata
            to a String, byte-array or <code>OutputStream</code>.
            </remarks>
            <since>20.01.2006</since>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.XMP.XMPMeta.GetProperty(System.String,System.String)" -->
        <member name="M:iText.Kernel.XMP.XMPMeta.GetArrayItem(System.String,System.String,System.Int32)">
            <summary>Provides access to items within an array.</summary>
            <remarks>
            Provides access to items within an array. The index is passed as an integer, you need not
            worry about the path string syntax for array items, convert a loop index to a string, etc.
            </remarks>
            <param name="schemaNS">The namespace URI for the array. Has the same usage as in getProperty.</param>
            <param name="arrayName">
            The name of the array. May be a general path expression, must not be
            <code>null</code> or the empty string. Has the same namespace prefix usage as
            propName in <code>getProperty()</code>.
            </param>
            <param name="itemIndex">
            The index of the desired item. Arrays in XMP are indexed from 1. The
            constant
            <see cref="F:iText.Kernel.XMP.XMPConst.ARRAY_LAST_ITEM"/>
            always refers to the last existing array
            item.
            </param>
            <returns>
            Returns a <code>XMPProperty</code> containing the value and the options or
            <code>null</code> if the property does not exist.
            </returns>
            <exception cref="T:iText.Kernel.XMP.XMPException">Wraps all errors and exceptions that may occur.</exception>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.XMPMeta.CountArrayItems(System.String,System.String)">
            <summary>Returns the number of items in the array.</summary>
            <param name="schemaNS">The namespace URI for the array. Has the same usage as in getProperty.</param>
            <param name="arrayName">
            The name of the array. May be a general path expression, must not be
            <code>null</code> or the empty string. Has the same namespace prefix usage as
            propName in <code>getProperty()</code>.
            </param>
            <returns>Returns the number of items in the array.</returns>
            <exception cref="T:iText.Kernel.XMP.XMPException">Wraps all errors and exceptions that may occur.</exception>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.XMP.XMPMeta.GetStructField(System.String,System.String,System.String,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.XMP.XMPMeta.GetQualifier(System.String,System.String,System.String,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.XMP.XMPMeta.SetProperty(System.String,System.String,System.Object,iText.Kernel.XMP.Options.PropertyOptions)" -->
        <member name="M:iText.Kernel.XMP.XMPMeta.SetProperty(System.String,System.String,System.Object)">
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.SetProperty(System.String,System.String,System.Object,iText.Kernel.XMP.Options.PropertyOptions)"/>
            <param name="schemaNS">The namespace URI</param>
            <param name="propName">The name of the property</param>
            <param name="propValue">the value for the property</param>
            <exception cref="T:iText.Kernel.XMP.XMPException">Wraps all errors and exceptions</exception>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.XMPMeta.SetArrayItem(System.String,System.String,System.Int32,System.String,iText.Kernel.XMP.Options.PropertyOptions)">
            <summary>Replaces an item within an array.</summary>
            <remarks>
            Replaces an item within an array. The index is passed as an integer, you need not worry about
            the path string syntax for array items, convert a loop index to a string, etc. The array
            passed must already exist. In normal usage the selected array item is modified. A new item is
            automatically appended if the index is the array size plus 1.
            </remarks>
            <param name="schemaNS">The namespace URI for the array. Has the same usage as in getProperty.</param>
            <param name="arrayName">
            The name of the array. May be a general path expression, must not be
            <code>null</code> or the empty string. Has the same namespace prefix usage as
            propName in getProperty.
            </param>
            <param name="itemIndex">
            The index of the desired item. Arrays in XMP are indexed from 1. To address
            the last existing item, use
            <see cref="M:iText.Kernel.XMP.XMPMeta.CountArrayItems(System.String,System.String)"/>
            to find
            out the length of the array.
            </param>
            <param name="itemValue">
            the new value of the array item. Has the same usage as propValue in
            <code>setProperty()</code>.
            </param>
            <param name="options">the set options for the item.</param>
            <exception cref="T:iText.Kernel.XMP.XMPException">Wraps all errors and exceptions that may occur.</exception>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.XMPMeta.SetArrayItem(System.String,System.String,System.Int32,System.String)">
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.SetArrayItem(System.String,System.String,System.Int32,System.String,iText.Kernel.XMP.Options.PropertyOptions)"/>
            <param name="schemaNS">The namespace URI</param>
            <param name="arrayName">The name of the array</param>
            <param name="itemIndex">The index to insert the new item</param>
            <param name="itemValue">the new value of the array item</param>
            <exception cref="T:iText.Kernel.XMP.XMPException">Wraps all errors and exceptions</exception>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.XMPMeta.InsertArrayItem(System.String,System.String,System.Int32,System.String,iText.Kernel.XMP.Options.PropertyOptions)">
            <summary>Inserts an item into an array previous to the given index.</summary>
            <remarks>
            Inserts an item into an array previous to the given index. The index is passed as an integer,
            you need not worry about the path string syntax for array items, convert a loop index to a
            string, etc. The array passed must already exist. In normal usage the selected array item is
            modified. A new item is automatically appended if the index is the array size plus 1.
            </remarks>
            <param name="schemaNS">The namespace URI for the array. Has the same usage as in getProperty.</param>
            <param name="arrayName">
            The name of the array. May be a general path expression, must not be
            <code>null</code> or the empty string. Has the same namespace prefix usage as
            propName in getProperty.
            </param>
            <param name="itemIndex">
            The index to insert the new item. Arrays in XMP are indexed from 1. Use
            <code>XMPConst.ARRAY_LAST_ITEM</code> to append items.
            </param>
            <param name="itemValue">
            the new value of the array item. Has the same usage as
            propValue in <code>setProperty()</code>.
            </param>
            <param name="options">the set options that decide about the kind of the node.</param>
            <exception cref="T:iText.Kernel.XMP.XMPException">Wraps all errors and exceptions that may occur.</exception>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.XMPMeta.InsertArrayItem(System.String,System.String,System.Int32,System.String)">
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.InsertArrayItem(System.String,System.String,System.Int32,System.String,iText.Kernel.XMP.Options.PropertyOptions)"/>
            <param name="schemaNS">The namespace URI for the array</param>
            <param name="arrayName">The name of the array</param>
            <param name="itemIndex">The index to insert the new item</param>
            <param name="itemValue">the value of the array item</param>
            <exception cref="T:iText.Kernel.XMP.XMPException">Wraps all errors and exceptions</exception>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.XMP.XMPMeta.AppendArrayItem(System.String,System.String,iText.Kernel.XMP.Options.PropertyOptions,System.String,iText.Kernel.XMP.Options.PropertyOptions)" -->
        <member name="M:iText.Kernel.XMP.XMPMeta.AppendArrayItem(System.String,System.String,System.String)">
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.AppendArrayItem(System.String,System.String,iText.Kernel.XMP.Options.PropertyOptions,System.String,iText.Kernel.XMP.Options.PropertyOptions)"/>
            <param name="schemaNS">The namespace URI for the array</param>
            <param name="arrayName">The name of the array</param>
            <param name="itemValue">the value of the array item</param>
            <exception cref="T:iText.Kernel.XMP.XMPException">Wraps all errors and exceptions</exception>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.XMPMeta.SetStructField(System.String,System.String,System.String,System.String,System.String,iText.Kernel.XMP.Options.PropertyOptions)">
            <summary>Provides access to fields within a nested structure.</summary>
            <remarks>
            Provides access to fields within a nested structure. The namespace for the field is passed as
            a URI, you need not worry about the path string syntax. The names of fields should be XML
            qualified names, that is within an XML namespace. The path syntax for a qualified name uses
            the namespace prefix, which is unreliable because the prefix is never guaranteed. The URI is
            the formal name, the prefix is just a local shorthand in a given sequence of XML text.
            </remarks>
            <param name="schemaNS">The namespace URI for the struct. Has the same usage as in getProperty.</param>
            <param name="structName">
            The name of the struct. May be a general path expression, must not be null
            or the empty string. Has the same namespace prefix usage as propName in getProperty.
            </param>
            <param name="fieldNS">
            The namespace URI for the field. Has the same URI and prefix usage as the
            schemaNS parameter.
            </param>
            <param name="fieldName">
            The name of the field. Must be a single XML name, must not be null or the
            empty string. Has the same namespace prefix usage as the structName parameter.
            </param>
            <param name="fieldValue">
            the value of thefield, if the field has a value.
            Has the same usage as propValue in getProperty.
            </param>
            <param name="options">Option flags describing the field. See the earlier description.</param>
            <exception cref="T:iText.Kernel.XMP.XMPException">Wraps all errors and exceptions that may occur.</exception>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.XMPMeta.SetStructField(System.String,System.String,System.String,System.String,System.String)">
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.SetStructField(System.String,System.String,System.String,System.String,System.String,iText.Kernel.XMP.Options.PropertyOptions)"/>
            <param name="schemaNS">The namespace URI for the struct</param>
            <param name="structName">The name of the struct</param>
            <param name="fieldNS">The namespace URI for the field</param>
            <param name="fieldName">The name of the field</param>
            <param name="fieldValue">the value of the field</param>
            <exception cref="T:iText.Kernel.XMP.XMPException">Wraps all errors and exceptions</exception>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.XMPMeta.SetQualifier(System.String,System.String,System.String,System.String,System.String,iText.Kernel.XMP.Options.PropertyOptions)">
            <summary>Provides access to a qualifier attached to a property.</summary>
            <remarks>
            Provides access to a qualifier attached to a property. The namespace for the qualifier is
            passed as a URI, you need not worry about the path string syntax. In many regards qualifiers
            are like struct fields. See the introductory discussion of qualified properties for more
            information. The names of qualifiers should be XML qualified names, that is within an XML
            namespace. The path syntax for a qualified name uses the namespace prefix, which is
            unreliable because the prefix is never guaranteed. The URI is the formal name, the prefix is
            just a local shorthand in a given sequence of XML text. The property the qualifier
            will be attached has to exist.
            </remarks>
            <param name="schemaNS">The namespace URI for the struct. Has the same usage as in getProperty.</param>
            <param name="propName">
            The name of the property to which the qualifier is attached. Has the same
            usage as in getProperty.
            </param>
            <param name="qualNS">
            The namespace URI for the qualifier. Has the same URI and prefix usage as the
            schemaNS parameter.
            </param>
            <param name="qualName">
            The name of the qualifier. Must be a single XML name, must not be
            <code>null</code> or the empty string. Has the same namespace prefix usage as the
            propName parameter.
            </param>
            <param name="qualValue">
            A pointer to the <code>null</code> terminated UTF-8 string that is the
            value of the qualifier, if the qualifier has a value. Has the same usage as propValue
            in getProperty.
            </param>
            <param name="options">Option flags describing the qualifier. See the earlier description.</param>
            <exception cref="T:iText.Kernel.XMP.XMPException">Wraps all errors and exceptions that may occur.</exception>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.XMPMeta.SetQualifier(System.String,System.String,System.String,System.String,System.String)">
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.SetQualifier(System.String,System.String,System.String,System.String,System.String,iText.Kernel.XMP.Options.PropertyOptions)"/>
            <param name="schemaNS">The namespace URI for the struct</param>
            <param name="propName">The name of the property to which the qualifier is attached</param>
            <param name="qualNS">The namespace URI for the qualifier</param>
            <param name="qualName">The name of the qualifier</param>
            <param name="qualValue">the value of the qualifier</param>
            <exception cref="T:iText.Kernel.XMP.XMPException">Wraps all errors and exceptions</exception>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.XMPMeta.DeleteProperty(System.String,System.String)">
            <summary>Deletes the given XMP subtree rooted at the given property.</summary>
            <remarks>
            Deletes the given XMP subtree rooted at the given property. It is not an error if the
            property does not exist.
            </remarks>
            <param name="schemaNS">
            The namespace URI for the property. Has the same usage as in
            <code>getProperty()</code>.
            </param>
            <param name="propName">The name of the property. Has the same usage as in getProperty.</param>
        </member>
        <member name="M:iText.Kernel.XMP.XMPMeta.DeleteArrayItem(System.String,System.String,System.Int32)">
            <summary>Deletes the given XMP subtree rooted at the given array item.</summary>
            <remarks>
            Deletes the given XMP subtree rooted at the given array item. It is not an error if the array
            item does not exist.
            </remarks>
            <param name="schemaNS">The namespace URI for the array. Has the same usage as in getProperty.</param>
            <param name="arrayName">
            The name of the array. May be a general path expression, must not be
            <code>null</code> or the empty string. Has the same namespace prefix usage as
            propName in <code>getProperty()</code>.
            </param>
            <param name="itemIndex">
            The index of the desired item. Arrays in XMP are indexed from 1. The
            constant <code>XMPConst.ARRAY_LAST_ITEM</code> always refers to the last
            existing array item.
            </param>
        </member>
        <member name="M:iText.Kernel.XMP.XMPMeta.DeleteStructField(System.String,System.String,System.String,System.String)">
            <summary>Deletes the given XMP subtree rooted at the given struct field.</summary>
            <remarks>
            Deletes the given XMP subtree rooted at the given struct field. It is not an error if the
            field does not exist.
            </remarks>
            <param name="schemaNS">
            The namespace URI for the struct. Has the same usage as in
            <code>getProperty()</code>.
            </param>
            <param name="structName">
            The name of the struct. May be a general path expression, must not be
            <code>null</code> or the empty string. Has the same namespace prefix usage as
            propName in getProperty.
            </param>
            <param name="fieldNS">
            The namespace URI for the field. Has the same URI and prefix usage as the
            schemaNS parameter.
            </param>
            <param name="fieldName">
            The name of the field. Must be a single XML name, must not be
            <code>null</code> or the empty string. Has the same namespace prefix usage as the
            structName parameter.
            </param>
        </member>
        <member name="M:iText.Kernel.XMP.XMPMeta.DeleteQualifier(System.String,System.String,System.String,System.String)">
            <summary>Deletes the given XMP subtree rooted at the given qualifier.</summary>
            <remarks>
            Deletes the given XMP subtree rooted at the given qualifier. It is not an error if the
            qualifier does not exist.
            </remarks>
            <param name="schemaNS">
            The namespace URI for the struct. Has the same usage as in
            <code>getProperty()</code>.
            </param>
            <param name="propName">
            The name of the property to which the qualifier is attached. Has the same
            usage as in getProperty.
            </param>
            <param name="qualNS">
            The namespace URI for the qualifier. Has the same URI and prefix usage as the
            schemaNS parameter.
            </param>
            <param name="qualName">
            The name of the qualifier. Must be a single XML name, must not be
            <code>null</code> or the empty string. Has the same namespace prefix usage as the
            propName parameter.
            </param>
        </member>
        <member name="M:iText.Kernel.XMP.XMPMeta.DoesPropertyExist(System.String,System.String)">
            <summary>Returns whether the property exists.</summary>
            <param name="schemaNS">
            The namespace URI for the property. Has the same usage as in
            <code>getProperty()</code>.
            </param>
            <param name="propName">
            The name of the property.
            Has the same usage as in <code>getProperty()</code>.
            </param>
            <returns>Returns true if the property exists.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.XMPMeta.DoesArrayItemExist(System.String,System.String,System.Int32)">
            <summary>Tells if the array item exists.</summary>
            <param name="schemaNS">
            The namespace URI for the array. Has the same usage as in
            <code>getProperty()</code>.
            </param>
            <param name="arrayName">
            The name of the array. May be a general path expression, must not be
            <code>null</code> or the empty string. Has the same namespace prefix usage as
            propName in <code>getProperty()</code>.
            </param>
            <param name="itemIndex">
            The index of the desired item. Arrays in XMP are indexed from 1. The
            constant <code>XMPConst.ARRAY_LAST_ITEM</code> always refers to the last
            existing array item.
            </param>
            <returns>Returns <code>true</code> if the array exists, <code>false</code> otherwise.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.XMPMeta.DoesStructFieldExist(System.String,System.String,System.String,System.String)">
            <summary>DoesStructFieldExist tells if the struct field exists.</summary>
            <param name="schemaNS">
            The namespace URI for the struct. Has the same usage as in
            <code>getProperty()</code>.
            </param>
            <param name="structName">
            The name of the struct. May be a general path expression, must not be
            <code>null</code> or the empty string. Has the same namespace prefix usage as
            propName in <code>getProperty()</code>.
            </param>
            <param name="fieldNS">
            The namespace URI for the field. Has the same URI and prefix usage as the
            schemaNS parameter.
            </param>
            <param name="fieldName">
            The name of the field. Must be a single XML name, must not be
            <code>null</code> or the empty string. Has the same namespace prefix usage as the
            structName parameter.
            </param>
            <returns>Returns true if the field exists.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.XMPMeta.DoesQualifierExist(System.String,System.String,System.String,System.String)">
            <summary>DoesQualifierExist tells if the qualifier exists.</summary>
            <param name="schemaNS">
            The namespace URI for the struct. Has the same usage as in
            <code>getProperty()</code>.
            </param>
            <param name="propName">
            The name of the property to which the qualifier is attached. Has the same
            usage as in <code>getProperty()</code>.
            </param>
            <param name="qualNS">
            The namespace URI for the qualifier. Has the same URI and prefix usage as the
            schemaNS parameter.
            </param>
            <param name="qualName">
            The name of the qualifier. Must be a single XML name, must not be
            <code>null</code> or the empty string. Has the same namespace prefix usage as the
            propName parameter.
            </param>
            <returns>Returns true if the qualifier exists.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.XMP.XMPMeta.GetLocalizedText(System.String,System.String,System.String,System.String)" -->
        <member name="M:iText.Kernel.XMP.XMPMeta.SetLocalizedText(System.String,System.String,System.String,System.String,System.String,iText.Kernel.XMP.Options.PropertyOptions)">
            <summary>Modifies the value of a selected item in an alt-text array.</summary>
            <remarks>
            Modifies the value of a selected item in an alt-text array. Creates an appropriate array item
            if necessary, and handles special cases for the x-default item. If the selected item is from
            a match with the specific language, the value of that item is modified. If the existing value
            of that item matches the existing value of the x-default item, the x-default item is also
            modified. If the array only has 1 existing item (which is not x-default), an x-default item
            is added with the given value. If the selected item is from a match with the generic language
            and there are no other generic matches, the value of that item is modified. If the existing
            value of that item matches the existing value of the x-default item, the x-default item is
            also modified. If the array only has 1 existing item (which is not x-default), an x-default
            item is added with the given value. If the selected item is from a partial match with the
            generic language and there are other partial matches, a new item is created for the specific
            language. The x-default item is not modified. If the selected item is from the last 2 rules
            then a new item is created for the specific language. If the array only had an x-default
            item, the x-default item is also modified. If the array was empty, items are created for the
            specific language and x-default.
            <em>Note:</em> In a future version of this API a method
            using Java <code>java.lang.Locale</code> will be added.
            </remarks>
            <param name="schemaNS">
            The namespace URI for the alt-text array. Has the same usage as in
            <code>getProperty()</code>.
            </param>
            <param name="altTextName">
            The name of the alt-text array. May be a general path expression, must not
            be <code>null</code> or the empty string. Has the same namespace prefix usage as
            propName in <code>getProperty()</code>.
            </param>
            <param name="genericLang">
            The name of the generic language as an RFC 3066 primary subtag. May be
            <code>null</code> or the empty string if no generic language is wanted.
            </param>
            <param name="specificLang">
            The name of the specific language as an RFC 3066 tag. Must not be
            <code>null</code> or the empty string.
            </param>
            <param name="itemValue">
            A pointer to the <code>null</code> terminated UTF-8 string that is the new
            value for the appropriate array item.
            </param>
            <param name="options">Option flags, none are defined at present.</param>
            <exception cref="T:iText.Kernel.XMP.XMPException">Wraps all errors and exceptions that may occur.</exception>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.XMPMeta.SetLocalizedText(System.String,System.String,System.String,System.String,System.String)">
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.SetLocalizedText(System.String,System.String,System.String,System.String,System.String,iText.Kernel.XMP.Options.PropertyOptions)"/>
            <param name="schemaNS">The namespace URI for the alt-text array</param>
            <param name="altTextName">The name of the alt-text array</param>
            <param name="genericLang">The name of the generic language</param>
            <param name="specificLang">The name of the specific language</param>
            <param name="itemValue">the new value for the appropriate array item</param>
            <exception cref="T:iText.Kernel.XMP.XMPException">Wraps all errors and exceptions</exception>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.XMPMeta.GetPropertyBoolean(System.String,System.String)">
            <summary>
            These are very similar to <code>getProperty()</code> and <code>SetProperty()</code> above,
            but the value is returned or provided in a literal form instead of as a UTF-8 string.
            </summary>
            <remarks>
            These are very similar to <code>getProperty()</code> and <code>SetProperty()</code> above,
            but the value is returned or provided in a literal form instead of as a UTF-8 string.
            The path composition functions in <code>XMPPathFactory</code> may be used to compose an path
            expression for fields in nested structures, items in arrays, or qualifiers.
            </remarks>
            <param name="schemaNS">
            The namespace URI for the property. Has the same usage as in
            <code>getProperty()</code>.
            </param>
            <param name="propName">
            The name of the property.
            Has the same usage as in <code>getProperty()</code>.
            </param>
            <returns>
            Returns a <code>Boolean</code> value or <code>null</code>
            if the property does not exist.
            </returns>
            <exception cref="T:iText.Kernel.XMP.XMPException">
            Wraps all exceptions that may occur,
            especially conversion errors.
            </exception>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.XMPMeta.GetPropertyInteger(System.String,System.String)">
            <summary>Convenience method to retrieve the literal value of a property.</summary>
            <param name="schemaNS">
            The namespace URI for the property. Has the same usage as in
            <code>getProperty()</code>.
            </param>
            <param name="propName">
            The name of the property.
            Has the same usage as in <code>getProperty()</code>.
            </param>
            <returns>
            Returns an <code>Integer</code> value or <code>null</code>
            if the property does not exist.
            </returns>
            <exception cref="T:iText.Kernel.XMP.XMPException">
            Wraps all exceptions that may occur,
            especially conversion errors.
            </exception>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.XMPMeta.GetPropertyLong(System.String,System.String)">
            <summary>Convenience method to retrieve the literal value of a property.</summary>
            <param name="schemaNS">
            The namespace URI for the property. Has the same usage as in
            <code>getProperty()</code>.
            </param>
            <param name="propName">
            The name of the property.
            Has the same usage as in <code>getProperty()</code>.
            </param>
            <returns>
            Returns a <code>Long</code> value or <code>null</code>
            if the property does not exist.
            </returns>
            <exception cref="T:iText.Kernel.XMP.XMPException">
            Wraps all exceptions that may occur,
            especially conversion errors.
            </exception>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.XMPMeta.GetPropertyDouble(System.String,System.String)">
            <summary>Convenience method to retrieve the literal value of a property.</summary>
            <param name="schemaNS">
            The namespace URI for the property. Has the same usage as in
            <code>getProperty()</code>.
            </param>
            <param name="propName">
            The name of the property.
            Has the same usage as in <code>getProperty()</code>.
            </param>
            <returns>
            Returns a <code>Double</code> value or <code>null</code>
            if the property does not exist.
            </returns>
            <exception cref="T:iText.Kernel.XMP.XMPException">
            Wraps all exceptions that may occur,
            especially conversion errors.
            </exception>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.XMPMeta.GetPropertyDate(System.String,System.String)">
            <summary>Convenience method to retrieve the literal value of a property.</summary>
            <param name="schemaNS">
            The namespace URI for the property. Has the same usage as in
            <code>getProperty()</code>.
            </param>
            <param name="propName">
            The name of the property.
            Has the same usage as in <code>getProperty()</code>.
            </param>
            <returns>
            Returns a <code>XMPDateTime</code>-object or <code>null</code>
            if the property does not exist.
            </returns>
            <exception cref="T:iText.Kernel.XMP.XMPException">
            Wraps all exceptions that may occur,
            especially conversion errors.
            </exception>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.XMPMeta.GetPropertyCalendar(System.String,System.String)">
            <summary>Convenience method to retrieve the literal value of a property.</summary>
            <param name="schemaNS">
            The namespace URI for the property. Has the same usage as in
            <code>getProperty()</code>.
            </param>
            <param name="propName">
            The name of the property.
            Has the same usage as in <code>getProperty()</code>.
            </param>
            <returns>
            Returns a Java <code>Calendar</code>-object or <code>null</code>
            if the property does not exist.
            </returns>
            <exception cref="T:iText.Kernel.XMP.XMPException">
            Wraps all exceptions that may occur,
            especially conversion errors.
            </exception>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.XMPMeta.GetPropertyBase64(System.String,System.String)">
            <summary>Convenience method to retrieve the literal value of a property.</summary>
            <param name="schemaNS">
            The namespace URI for the property. Has the same usage as in
            <code>getProperty()</code>.
            </param>
            <param name="propName">
            The name of the property.
            Has the same usage as in <code>getProperty()</code>.
            </param>
            <returns>
            Returns a <code>byte[]</code>-array contained the decoded base64 value
            or <code>null</code> if the property does not exist.
            </returns>
            <exception cref="T:iText.Kernel.XMP.XMPException">
            Wraps all exceptions that may occur,
            especially conversion errors.
            </exception>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.XMPMeta.GetPropertyString(System.String,System.String)">
            <summary>Convenience method to retrieve the literal value of a property.</summary>
            <remarks>
            Convenience method to retrieve the literal value of a property.
            <em>Note:</em> There is no <code>setPropertyString()</code>,
            because <code>setProperty()</code> sets a string value.
            </remarks>
            <param name="schemaNS">
            The namespace URI for the property. Has the same usage as in
            <code>getProperty()</code>.
            </param>
            <param name="propName">
            The name of the property.
            Has the same usage as in <code>getProperty()</code>.
            </param>
            <returns>
            Returns a <code>String</code> value or <code>null</code>
            if the property does not exist.
            </returns>
            <exception cref="T:iText.Kernel.XMP.XMPException">
            Wraps all exceptions that may occur,
            especially conversion errors.
            </exception>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.XMPMeta.SetPropertyBoolean(System.String,System.String,System.Boolean,iText.Kernel.XMP.Options.PropertyOptions)">
            <summary>Convenience method to set a property to a literal <code>boolean</code> value.</summary>
            <param name="schemaNS">
            The namespace URI for the property. Has the same usage as in
            <code>setProperty()</code>.
            </param>
            <param name="propName">
            The name of the property.
            Has the same usage as in <code>getProperty()</code>.
            </param>
            <param name="propValue">the literal property value as <code>boolean</code>.</param>
            <param name="options">options of the property to set (optional).</param>
            <exception cref="T:iText.Kernel.XMP.XMPException">Wraps all exceptions that may occur.</exception>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.XMPMeta.SetPropertyBoolean(System.String,System.String,System.Boolean)">
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.SetPropertyBoolean(System.String,System.String,System.Boolean,iText.Kernel.XMP.Options.PropertyOptions)"/>
            <param name="schemaNS">The namespace URI for the property</param>
            <param name="propName">The name of the property</param>
            <param name="propValue">the literal property value as <code>boolean</code></param>
            <exception cref="T:iText.Kernel.XMP.XMPException">Wraps all exceptions</exception>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.XMPMeta.SetPropertyInteger(System.String,System.String,System.Int32,iText.Kernel.XMP.Options.PropertyOptions)">
            <summary>Convenience method to set a property to a literal <code>int</code> value.</summary>
            <param name="schemaNS">
            The namespace URI for the property. Has the same usage as in
            <code>setProperty()</code>.
            </param>
            <param name="propName">
            The name of the property.
            Has the same usage as in <code>getProperty()</code>.
            </param>
            <param name="propValue">the literal property value as <code>int</code>.</param>
            <param name="options">options of the property to set (optional).</param>
            <exception cref="T:iText.Kernel.XMP.XMPException">Wraps all exceptions that may occur.</exception>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.XMPMeta.SetPropertyInteger(System.String,System.String,System.Int32)">
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.SetPropertyInteger(System.String,System.String,System.Int32,iText.Kernel.XMP.Options.PropertyOptions)"/>
            <param name="schemaNS">The namespace URI for the property</param>
            <param name="propName">The name of the property</param>
            <param name="propValue">the literal property value as <code>int</code></param>
            <exception cref="T:iText.Kernel.XMP.XMPException">Wraps all exceptions</exception>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.XMPMeta.SetPropertyLong(System.String,System.String,System.Int64,iText.Kernel.XMP.Options.PropertyOptions)">
            <summary>Convenience method to set a property to a literal <code>long</code> value.</summary>
            <param name="schemaNS">
            The namespace URI for the property. Has the same usage as in
            <code>setProperty()</code>.
            </param>
            <param name="propName">
            The name of the property.
            Has the same usage as in <code>getProperty()</code>.
            </param>
            <param name="propValue">the literal property value as <code>long</code>.</param>
            <param name="options">options of the property to set (optional).</param>
            <exception cref="T:iText.Kernel.XMP.XMPException">Wraps all exceptions that may occur.</exception>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.XMPMeta.SetPropertyLong(System.String,System.String,System.Int64)">
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.SetPropertyLong(System.String,System.String,System.Int64,iText.Kernel.XMP.Options.PropertyOptions)"/>
            <param name="schemaNS">The namespace URI for the property</param>
            <param name="propName">The name of the property</param>
            <param name="propValue">the literal property value as <code>long</code></param>
            <exception cref="T:iText.Kernel.XMP.XMPException">Wraps all exceptions</exception>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.XMPMeta.SetPropertyDouble(System.String,System.String,System.Double,iText.Kernel.XMP.Options.PropertyOptions)">
            <summary>Convenience method to set a property to a literal <code>double</code> value.</summary>
            <param name="schemaNS">
            The namespace URI for the property. Has the same usage as in
            <code>setProperty()</code>.
            </param>
            <param name="propName">
            The name of the property.
            Has the same usage as in <code>getProperty()</code>.
            </param>
            <param name="propValue">the literal property value as <code>double</code>.</param>
            <param name="options">options of the property to set (optional).</param>
            <exception cref="T:iText.Kernel.XMP.XMPException">Wraps all exceptions that may occur.</exception>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.XMPMeta.SetPropertyDouble(System.String,System.String,System.Double)">
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.SetPropertyDouble(System.String,System.String,System.Double,iText.Kernel.XMP.Options.PropertyOptions)"/>
            <param name="schemaNS">The namespace URI for the property</param>
            <param name="propName">The name of the property</param>
            <param name="propValue">the literal property value as <code>double</code></param>
            <exception cref="T:iText.Kernel.XMP.XMPException">Wraps all exceptions</exception>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.XMPMeta.SetPropertyDate(System.String,System.String,iText.Kernel.XMP.XMPDateTime,iText.Kernel.XMP.Options.PropertyOptions)">
            <summary>
            Convenience method to set a property with an XMPDateTime-object,
            which is serialized to an ISO8601 date.
            </summary>
            <param name="schemaNS">
            The namespace URI for the property. Has the same usage as in
            <code>setProperty()</code>.
            </param>
            <param name="propName">
            The name of the property.
            Has the same usage as in <code>getProperty()</code>.
            </param>
            <param name="propValue">the property value as <code>XMPDateTime</code>.</param>
            <param name="options">options of the property to set (optional).</param>
            <exception cref="T:iText.Kernel.XMP.XMPException">Wraps all exceptions that may occur.</exception>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.XMPMeta.SetPropertyDate(System.String,System.String,iText.Kernel.XMP.XMPDateTime)">
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.SetPropertyDate(System.String,System.String,iText.Kernel.XMP.XMPDateTime,iText.Kernel.XMP.Options.PropertyOptions)"/>
            <param name="schemaNS">The namespace URI for the property</param>
            <param name="propName">The name of the property</param>
            <param name="propValue">the property value as <code>XMPDateTime</code></param>
            <exception cref="T:iText.Kernel.XMP.XMPException">Wraps all exceptions</exception>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.XMPMeta.SetPropertyCalendar(System.String,System.String,System.DateTime,iText.Kernel.XMP.Options.PropertyOptions)">
            <summary>
            Convenience method to set a property with a Java Calendar-object,
            which is serialized to an ISO8601 date.
            </summary>
            <param name="schemaNS">
            The namespace URI for the property. Has the same usage as in
            <code>setProperty()</code>.
            </param>
            <param name="propName">
            The name of the property.
            Has the same usage as in <code>getProperty()</code>.
            </param>
            <param name="propValue">the property value as Java <code>Calendar</code>.</param>
            <param name="options">options of the property to set (optional).</param>
            <exception cref="T:iText.Kernel.XMP.XMPException">Wraps all exceptions that may occur.</exception>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.XMPMeta.SetPropertyCalendar(System.String,System.String,System.DateTime)">
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.SetPropertyCalendar(System.String,System.String,System.DateTime,iText.Kernel.XMP.Options.PropertyOptions)"/>
            <param name="schemaNS">The namespace URI for the property</param>
            <param name="propName">The name of the property</param>
            <param name="propValue">the property value as <code>Calendar</code></param>
            <exception cref="T:iText.Kernel.XMP.XMPException">Wraps all exceptions</exception>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.XMPMeta.SetPropertyBase64(System.String,System.String,System.Byte[],iText.Kernel.XMP.Options.PropertyOptions)">
            <summary>
            Convenience method to set a property from a binary <code>byte[]</code>-array,
            which is serialized as base64-string.
            </summary>
            <param name="schemaNS">
            The namespace URI for the property. Has the same usage as in
            <code>setProperty()</code>.
            </param>
            <param name="propName">
            The name of the property.
            Has the same usage as in <code>getProperty()</code>.
            </param>
            <param name="propValue">the literal property value as byte array.</param>
            <param name="options">options of the property to set (optional).</param>
            <exception cref="T:iText.Kernel.XMP.XMPException">Wraps all exceptions that may occur.</exception>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.XMPMeta.SetPropertyBase64(System.String,System.String,System.Byte[])">
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.SetPropertyBase64(System.String,System.String,System.Byte[],iText.Kernel.XMP.Options.PropertyOptions)"/>
            <param name="schemaNS">The namespace URI for the property</param>
            <param name="propName">The name of the property</param>
            <param name="propValue">the literal property value as byte array</param>
            <exception cref="T:iText.Kernel.XMP.XMPException">Wraps all exceptions</exception>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.XMPMeta.Iterator">
            <summary>Constructs an iterator for the properties within this XMP object.</summary>
            <returns>Returns an <code>XMPIterator</code>.</returns>
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.Iterator(System.String,System.String,iText.Kernel.XMP.Options.IteratorOptions)"/>
            <exception cref="T:iText.Kernel.XMP.XMPException">Wraps all errors and exceptions that may occur.</exception>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.XMPMeta.Iterator(iText.Kernel.XMP.Options.IteratorOptions)">
            <summary>Constructs an iterator for the properties within this XMP object using some options.</summary>
            <param name="options">Option flags to control the iteration.</param>
            <returns>Returns an <code>XMPIterator</code>.</returns>
            <seealso cref="M:iText.Kernel.XMP.XMPMeta.Iterator(System.String,System.String,iText.Kernel.XMP.Options.IteratorOptions)"/>
            <exception cref="T:iText.Kernel.XMP.XMPException">Wraps all errors and exceptions that may occur.</exception>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.XMPMeta.Iterator(System.String,System.String,iText.Kernel.XMP.Options.IteratorOptions)">
            <summary>Construct an iterator for the properties within an XMP object.</summary>
            <remarks>
            Construct an iterator for the properties within an XMP object. According to the parameters it iterates the entire data tree,
            properties within a specific schema, or a subtree rooted at a specific node.
            </remarks>
            <param name="schemaNS">
            Optional schema namespace URI to restrict the iteration. Omitted (visit all
            schema) by passing <code>null</code> or empty String.
            </param>
            <param name="propName">
            Optional property name to restrict the iteration. May be an arbitrary path
            expression. Omitted (visit all properties) by passing <code>null</code> or empty
            String. If no schema URI is given, it is ignored.
            </param>
            <param name="options">
            Option flags to control the iteration. See
            <see cref="T:iText.Kernel.XMP.Options.IteratorOptions"/>
            for
            details.
            </param>
            <returns>
            Returns an <code>XMPIterator</code> for this <code>XMPMeta</code>-object
            considering the given options.
            </returns>
            <exception cref="T:iText.Kernel.XMP.XMPException">Wraps all errors and exceptions that may occur.</exception>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.XMPMeta.GetObjectName">
            <summary>
            This correlates to the about-attribute,
            returns the empty String if no name is set.
            </summary>
            <returns>Returns the name of the XMP object.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.XMPMeta.SetObjectName(System.String)">
            <param name="name">Sets the name of the XMP object.</param>
        </member>
        <member name="M:iText.Kernel.XMP.XMPMeta.GetPacketHeader">
            <returns>
            Returns the unparsed content of the &lt;?xpacket&gt; processing instruction.
            This contains normally the attribute-like elements 'begin="&lt;BOM&gt;"
            id="W5M0MpCehiHzreSzNTczkc9d"' and possibly the deprecated elements 'bytes="1234"' or
            'encoding="XXX"'. If the parsed packet has not been wrapped into an xpacket,
            <code>null</code> is returned.
            </returns>
        </member>
        <member name="M:iText.Kernel.XMP.XMPMeta.Clone">
            <summary>Clones the complete metadata tree.</summary>
            <returns>Returns a deep copy of this instance.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.XMP.XMPMeta.Sort" -->
        <member name="M:iText.Kernel.XMP.XMPMeta.Normalize(iText.Kernel.XMP.Options.ParseOptions)">
            <summary>Perform the normalization as a separate parsing step.</summary>
            <remarks>
            Perform the normalization as a separate parsing step.
            Normally it is done during parsing, unless the parsing option
            <see cref="F:iText.Kernel.XMP.Options.ParseOptions.OMIT_NORMALIZATION"/>
            is set to <code>true</code>.
            <em>Note:</em> It does no harm to call this method to an already normalized xmp object.
            It was a PDF/A requirement to get hand on the unnormalized <code>XMPMeta</code> object.
            </remarks>
            <param name="options">optional parsing options.</param>
            <exception cref="T:iText.Kernel.XMP.XMPException">Wraps all errors and exceptions that may occur.</exception>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.XMPMeta.DumpObject">
            <summary>Renders this node and the tree unter this node in a human readable form.</summary>
            <returns>Returns a multiline string containing the dump.</returns>
        </member>
        <member name="T:iText.Kernel.XMP.XMPMetaFactory">
            <summary>Creates <code>XMPMeta</code>-instances from an <code>InputStream</code></summary>
            <since>30.01.2006</since>
        </member>
        <member name="F:iText.Kernel.XMP.XMPMetaFactory.schema">
            <summary>The singleton instance of the <code>XMPSchemaRegistry</code>.</summary>
        </member>
        <member name="F:iText.Kernel.XMP.XMPMetaFactory.versionInfo">
            <summary>cache for version info</summary>
        </member>
        <member name="M:iText.Kernel.XMP.XMPMetaFactory.#ctor">
            <summary>Hides public constructor</summary>
        </member>
        <member name="M:iText.Kernel.XMP.XMPMetaFactory.GetSchemaRegistry">
            <returns>Returns the singleton instance of the <code>XMPSchemaRegistry</code>.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.XMPMetaFactory.Create">
            <returns>Returns an empty <code>XMPMeta</code>-object.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.XMPMetaFactory.Parse(System.IO.Stream)">
            <summary>Parsing with default options.</summary>
            <param name="in">an <code>InputStream</code></param>
            <returns>Returns the <code>XMPMeta</code>-object created from the input.</returns>
            <exception cref="T:iText.Kernel.XMP.XMPException">If the file is not well-formed XML or if the parsing fails.</exception>
            <seealso cref="M:iText.Kernel.XMP.XMPMetaFactory.Parse(System.IO.Stream,iText.Kernel.XMP.Options.ParseOptions)"/>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.XMP.XMPMetaFactory.Parse(System.IO.Stream,iText.Kernel.XMP.Options.ParseOptions)" -->
        <member name="M:iText.Kernel.XMP.XMPMetaFactory.ParseFromString(System.String)">
            <summary>Parsing with default options.</summary>
            <param name="packet">a String contain an XMP-file.</param>
            <returns>Returns the <code>XMPMeta</code>-object created from the input.</returns>
            <exception cref="T:iText.Kernel.XMP.XMPException">If the file is not well-formed XML or if the parsing fails.</exception>
            <seealso cref="M:iText.Kernel.XMP.XMPMetaFactory.Parse(System.IO.Stream)"/>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.XMPMetaFactory.ParseFromString(System.String,iText.Kernel.XMP.Options.ParseOptions)">
            <summary>Creates an <code>XMPMeta</code>-object from a string.</summary>
            <param name="packet">a String contain an XMP-file.</param>
            <param name="options">Options controlling the parsing.</param>
            <returns>Returns the <code>XMPMeta</code>-object created from the input.</returns>
            <exception cref="T:iText.Kernel.XMP.XMPException">If the file is not well-formed XML or if the parsing fails.</exception>
            <seealso cref="M:iText.Kernel.XMP.XMPMetaFactory.ParseFromString(System.String,iText.Kernel.XMP.Options.ParseOptions)"/>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.XMPMetaFactory.ParseFromBuffer(System.Byte[])">
            <summary>Parsing with default options.</summary>
            <param name="buffer">a String contain an XMP-file.</param>
            <returns>Returns the <code>XMPMeta</code>-object created from the input.</returns>
            <exception cref="T:iText.Kernel.XMP.XMPException">If the file is not well-formed XML or if the parsing fails.</exception>
            <seealso cref="M:iText.Kernel.XMP.XMPMetaFactory.ParseFromBuffer(System.Byte[],iText.Kernel.XMP.Options.ParseOptions)"/>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.XMPMetaFactory.ParseFromBuffer(System.Byte[],iText.Kernel.XMP.Options.ParseOptions)">
            <summary>Creates an <code>XMPMeta</code>-object from a byte-buffer.</summary>
            <param name="buffer">a String contain an XMP-file.</param>
            <param name="options">Options controlling the parsing.</param>
            <returns>Returns the <code>XMPMeta</code>-object created from the input.</returns>
            <exception cref="T:iText.Kernel.XMP.XMPException">If the file is not well-formed XML or if the parsing fails.</exception>
            <seealso cref="M:iText.Kernel.XMP.XMPMetaFactory.Parse(System.IO.Stream,iText.Kernel.XMP.Options.ParseOptions)"/>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.XMPMetaFactory.Serialize(iText.Kernel.XMP.XMPMeta,System.IO.Stream)">
            <summary>
            Serializes an <code>XMPMeta</code>-object as RDF into an <code>OutputStream</code>
            with default options.
            </summary>
            <param name="xmp">a metadata object</param>
            <param name="out">an <code>OutputStream</code> to write the serialized RDF to.</param>
            <exception cref="T:iText.Kernel.XMP.XMPException">on serializsation errors.</exception>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.XMPMetaFactory.Serialize(iText.Kernel.XMP.XMPMeta,System.IO.Stream,iText.Kernel.XMP.Options.SerializeOptions)">
            <summary>Serializes an <code>XMPMeta</code>-object as RDF into an <code>OutputStream</code>.</summary>
            <param name="xmp">a metadata object</param>
            <param name="options">
            Options to control the serialization (see
            <see cref="T:iText.Kernel.XMP.Options.SerializeOptions"/>
            ).
            </param>
            <param name="out">an <code>OutputStream</code> to write the serialized RDF to.</param>
            <exception cref="T:iText.Kernel.XMP.XMPException">on serializsation errors.</exception>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.XMPMetaFactory.SerializeToBuffer(iText.Kernel.XMP.XMPMeta,iText.Kernel.XMP.Options.SerializeOptions)">
            <summary>Serializes an <code>XMPMeta</code>-object as RDF into a byte buffer.</summary>
            <param name="xmp">a metadata object</param>
            <param name="options">
            Options to control the serialization (see
            <see cref="T:iText.Kernel.XMP.Options.SerializeOptions"/>
            ).
            </param>
            <returns>Returns a byte buffer containing the serialized RDF.</returns>
            <exception cref="T:iText.Kernel.XMP.XMPException">on serializsation errors.</exception>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.XMPMetaFactory.SerializeToString(iText.Kernel.XMP.XMPMeta,iText.Kernel.XMP.Options.SerializeOptions)">
            <summary>Serializes an <code>XMPMeta</code>-object as RDF into a string.</summary>
            <remarks>
            Serializes an <code>XMPMeta</code>-object as RDF into a string. <em>Note:</em> Encoding
            is ignored when serializing to a string.
            </remarks>
            <param name="xmp">a metadata object</param>
            <param name="options">
            Options to control the serialization (see
            <see cref="T:iText.Kernel.XMP.Options.SerializeOptions"/>
            ).
            </param>
            <returns>Returns a string containing the serialized RDF.</returns>
            <exception cref="T:iText.Kernel.XMP.XMPException">on serializsation errors.</exception>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.XMPMetaFactory.AssertImplementation(iText.Kernel.XMP.XMPMeta)">
            <param name="xmp">Asserts that xmp is compatible to <code>XMPMetaImpl</code>.s</param>
        </member>
        <member name="M:iText.Kernel.XMP.XMPMetaFactory.Reset">
            <summary>Resets the schema registry to its original state (creates a new one).</summary>
            <remarks>
            Resets the schema registry to its original state (creates a new one).
            Be careful this might break all existing XMPMeta-objects and should be used
            only for testing purpurses.
            </remarks>
        </member>
        <member name="M:iText.Kernel.XMP.XMPMetaFactory.GetVersionInfo">
            <summary>Obtain version information.</summary>
            <remarks>
            Obtain version information. The XMPVersionInfo singleton is created the first time
            its requested.
            </remarks>
            <returns>Returns the version information.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:iText.Kernel.XMP.XMPPathFactory" -->
        <member name="M:iText.Kernel.XMP.XMPPathFactory.#ctor">
            <summary>Private constructor</summary>
        </member>
        <member name="M:iText.Kernel.XMP.XMPPathFactory.ComposeArrayItemPath(System.String,System.Int32)">
            <summary>Compose the path expression for an item in an array.</summary>
            <param name="arrayName">
            The name of the array. May be a general path expression, must not be
            <code>null</code> or the empty string.
            </param>
            <param name="itemIndex">
            The index of the desired item. Arrays in XMP are indexed from 1.
            0 and below means last array item and renders as <code>[last()]</code>.
            </param>
            <returns>
            Returns the composed path basing on fullPath. This will be of the form
            <tt>ns:arrayName[i]</tt>, where &quot;ns&quot; is the prefix for schemaNS and
            &quot;i&quot; is the decimal representation of itemIndex.
            </returns>
            <exception cref="T:iText.Kernel.XMP.XMPException">Throws exeption if index zero is used.</exception>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.XMPPathFactory.ComposeStructFieldPath(System.String,System.String)">
            <summary>Compose the path expression for a field in a struct.</summary>
            <remarks>
            Compose the path expression for a field in a struct. The result can be added to the
            path of
            </remarks>
            <param name="fieldNS">
            The namespace URI for the field. Must not be <code>null</code> or the empty
            string.
            </param>
            <param name="fieldName">
            The name of the field. Must be a simple XML name, must not be
            <code>null</code> or the empty string.
            </param>
            <returns>
            Returns the composed path. This will be of the form
            <tt>ns:structName/fNS:fieldName</tt>, where &quot;ns&quot; is the prefix for
            schemaNS and &quot;fNS&quot; is the prefix for fieldNS.
            </returns>
            <exception cref="T:iText.Kernel.XMP.XMPException">Thrown if the path to create is not valid.</exception>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.XMPPathFactory.ComposeQualifierPath(System.String,System.String)">
            <summary>Compose the path expression for a qualifier.</summary>
            <param name="qualNS">
            The namespace URI for the qualifier. May be <code>null</code> or the empty
            string if the qualifier is in the XML empty namespace.
            </param>
            <param name="qualName">
            The name of the qualifier. Must be a simple XML name, must not be
            <code>null</code> or the empty string.
            </param>
            <returns>
            Returns the composed path. This will be of the form
            <tt>ns:propName/?qNS:qualName</tt>, where &quot;ns&quot; is the prefix for
            schemaNS and &quot;qNS&quot; is the prefix for qualNS.
            </returns>
            <exception cref="T:iText.Kernel.XMP.XMPException">Thrown if the path to create is not valid.</exception>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.XMPPathFactory.ComposeLangSelector(System.String,System.String)">
            <summary>Compose the path expression to select an alternate item by language.</summary>
            <remarks>
            Compose the path expression to select an alternate item by language. The
            path syntax allows two forms of &quot;content addressing&quot; that may
            be used to select an item in an array of alternatives. The form used in
            ComposeLangSelector lets you select an item in an alt-text array based on
            the value of its <tt>xml:lang</tt> qualifier. The other form of content
            addressing is shown in ComposeFieldSelector. \note ComposeLangSelector
            does not supplant SetLocalizedText or GetLocalizedText. They should
            generally be used, as they provide extra logic to choose the appropriate
            language and maintain consistency with the 'x-default' value.
            ComposeLangSelector gives you an path expression that is explicitly and
            only for the language given in the langName parameter.
            </remarks>
            <param name="arrayName">
            The name of the array. May be a general path expression, must
            not be <code>null</code> or the empty string.
            </param>
            <param name="langName">The RFC 3066 code for the desired language.</param>
            <returns>
            Returns the composed path. This will be of the form
            <tt>ns:arrayName[@xml:lang='langName']</tt>, where
            &quot;ns&quot; is the prefix for schemaNS.
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.XMP.XMPPathFactory.ComposeFieldSelector(System.String,System.String,System.String,System.String)" -->
        <member name="M:iText.Kernel.XMP.XMPPathFactory.AssertQualNS(System.String)">
            <summary>ParameterAsserts that a qualifier namespace is set.</summary>
            <param name="qualNS">a qualifier namespace</param>
            <exception cref="T:iText.Kernel.XMP.XMPException">Qualifier schema is null or empty</exception>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.XMPPathFactory.AssertQualName(System.String)">
            <summary>ParameterAsserts that a qualifier name is set.</summary>
            <param name="qualName">a qualifier name or path</param>
            <exception cref="T:iText.Kernel.XMP.XMPException">Qualifier name is null or empty</exception>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.XMPPathFactory.AssertFieldNS(System.String)">
            <summary>ParameterAsserts that a struct field namespace is set.</summary>
            <param name="fieldNS">a struct field namespace</param>
            <exception cref="T:iText.Kernel.XMP.XMPException">Struct field schema is null or empty</exception>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.XMPPathFactory.AssertFieldName(System.String)">
            <summary>ParameterAsserts that a struct field name is set.</summary>
            <param name="fieldName">a struct field name or path</param>
            <exception cref="T:iText.Kernel.XMP.XMPException">Struct field name is null or empty</exception>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <!-- Badly formed XML comment ignored for member "T:iText.Kernel.XMP.XMPSchemaRegistry" -->
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.XMP.XMPSchemaRegistry.RegisterNamespace(System.String,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.XMP.XMPSchemaRegistry.GetNamespacePrefix(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.XMP.XMPSchemaRegistry.GetNamespaceURI(System.String)" -->
        <member name="M:iText.Kernel.XMP.XMPSchemaRegistry.GetNamespaces">
            <returns>
            Returns the registered prefix/namespace-pairs as map, where the keys are the
            namespaces and the values are the prefixes.
            </returns>
        </member>
        <member name="M:iText.Kernel.XMP.XMPSchemaRegistry.GetPrefixes">
            <returns>
            Returns the registered namespace/prefix-pairs as map, where the keys are the
            prefixes and the values are the namespaces.
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.XMP.XMPSchemaRegistry.DeleteNamespace(System.String)" -->
        <member name="M:iText.Kernel.XMP.XMPSchemaRegistry.ResolveAlias(System.String,System.String)">
            <summary>Determines if a name is an alias, and what it is aliased to.</summary>
            <param name="aliasNS">
            The namespace URI of the alias. Must not be <code>null</code> or the empty
            string.
            </param>
            <param name="aliasProp">
            The name of the alias. May be an arbitrary path expression
            path, must not be <code>null</code> or the empty string.
            </param>
            <returns>
            Returns the <code>XMPAliasInfo</code> for the given alias namespace and property or
            <code>null</code> if there is no such alias.
            </returns>
        </member>
        <member name="M:iText.Kernel.XMP.XMPSchemaRegistry.FindAliases(System.String)">
            <summary>Collects all aliases that are contained in the provided namespace.</summary>
            <remarks>
            Collects all aliases that are contained in the provided namespace.
            If nothing is found, an empty array is returned.
            </remarks>
            <param name="aliasNS">a schema namespace URI</param>
            <returns>Returns all alias infos from aliases that are contained in the provided namespace.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.XMPSchemaRegistry.FindAlias(System.String)">
            <summary>Searches for registered aliases.</summary>
            <param name="qname">an XML conform qname</param>
            <returns>
            Returns if an alias definition for the given qname to another
            schema and property is registered.
            </returns>
        </member>
        <member name="M:iText.Kernel.XMP.XMPSchemaRegistry.GetAliases">
            <returns>
            Returns the registered aliases as map, where the key is the "qname" (prefix and name)
            and the value an <code>XMPAliasInfo</code>-object.
            </returns>
        </member>
        <member name="T:iText.Kernel.XMP.XMPUtils">
            <summary>Utility methods for XMP.</summary>
            <remarks>
            Utility methods for XMP. I included only those that are different from the
            Java default conversion utilities.
            </remarks>
            <since>21.02.2006</since>
        </member>
        <member name="M:iText.Kernel.XMP.XMPUtils.#ctor">
            <summary>Private constructor</summary>
        </member>
        <member name="M:iText.Kernel.XMP.XMPUtils.CatenateArrayItems(iText.Kernel.XMP.XMPMeta,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>Create a single edit string from an array of strings.</summary>
            <param name="xmp">The XMP object containing the array to be catenated.</param>
            <param name="schemaNS">
            The schema namespace URI for the array. Must not be null or
            the empty string.
            </param>
            <param name="arrayName">
            The name of the array. May be a general path expression, must
            not be null or the empty string. Each item in the array must
            be a simple string value.
            </param>
            <param name="separator">
            The string to be used to separate the items in the catenated
            string. Defaults to &quot;; &quot;, ASCII semicolon and space
            (U+003B, U+0020).
            </param>
            <param name="quotes">
            The characters to be used as quotes around array items that
            contain a separator. Defaults to '&quot;'
            </param>
            <param name="allowCommas">Option flag to control the catenation.</param>
            <returns>Returns the string containing the catenated array items.</returns>
            <exception cref="T:iText.Kernel.XMP.XMPException">Forwards the Exceptions from the metadata processing</exception>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.XMPUtils.SeparateArrayItems(iText.Kernel.XMP.XMPMeta,System.String,System.String,System.String,iText.Kernel.XMP.Options.PropertyOptions,System.Boolean)">
            <summary>Separate a single edit string into an array of strings.</summary>
            <param name="xmp">The XMP object containing the array to be updated.</param>
            <param name="schemaNS">
            The schema namespace URI for the array. Must not be null or
            the empty string.
            </param>
            <param name="arrayName">
            The name of the array. May be a general path expression, must
            not be null or the empty string. Each item in the array must
            be a simple string value.
            </param>
            <param name="catedStr">The string to be separated into the array items.</param>
            <param name="arrayOptions">Option flags to control the separation.</param>
            <param name="preserveCommas">Flag if commas shall be preserved</param>
            <exception cref="T:iText.Kernel.XMP.XMPException">Forwards the Exceptions from the metadata processing</exception>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.XMP.XMPUtils.RemoveProperties(iText.Kernel.XMP.XMPMeta,System.String,System.String,System.Boolean,System.Boolean)" -->
        <member name="M:iText.Kernel.XMP.XMPUtils.AppendProperties(iText.Kernel.XMP.XMPMeta,iText.Kernel.XMP.XMPMeta,System.Boolean,System.Boolean)">
            <summary>Alias without the new option <code>deleteEmptyValues</code>.</summary>
            <param name="source">The source XMP object.</param>
            <param name="dest">The destination XMP object.</param>
            <param name="doAllProperties">Do internal properties in addition to external properties.</param>
            <param name="replaceOldValues">Replace the values of existing properties.</param>
            <exception cref="T:iText.Kernel.XMP.XMPException">Forwards the Exceptions from the metadata processing</exception>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.XMP.XMPUtils.AppendProperties(iText.Kernel.XMP.XMPMeta,iText.Kernel.XMP.XMPMeta,System.Boolean,System.Boolean,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:iText.Kernel.XMP.XMPUtils.ConvertToBoolean(System.String)" -->
        <member name="M:iText.Kernel.XMP.XMPUtils.ConvertFromBoolean(System.Boolean)">
            <summary>Convert from boolean to string.</summary>
            <param name="value">a boolean value</param>
            <returns>
            The XMP string representation of the boolean. The values used are
            given by the constnts
            <see cref="F:iText.Kernel.XMP.XMPConst.TRUESTR"/>
            and
            <see cref="F:iText.Kernel.XMP.XMPConst.FALSESTR"/>
            .
            </returns>
        </member>
        <member name="M:iText.Kernel.XMP.XMPUtils.ConvertToInteger(System.String)">
            <summary>Converts a string value to an <code>int</code>.</summary>
            <param name="rawValue">the string value</param>
            <returns>Returns an int.</returns>
            <exception cref="T:iText.Kernel.XMP.XMPException">
            If the <code>rawValue</code> is <code>null</code> or empty or the
            conversion fails.
            </exception>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.XMPUtils.ConvertFromInteger(System.Int32)">
            <summary>Convert from int to string.</summary>
            <param name="value">an int value</param>
            <returns>The string representation of the int.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.XMPUtils.ConvertToLong(System.String)">
            <summary>Converts a string value to a <code>long</code>.</summary>
            <param name="rawValue">the string value</param>
            <returns>Returns a long.</returns>
            <exception cref="T:iText.Kernel.XMP.XMPException">
            If the <code>rawValue</code> is <code>null</code> or empty or the
            conversion fails.
            </exception>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.XMPUtils.ConvertFromLong(System.Int64)">
            <summary>Convert from long to string.</summary>
            <param name="value">a long value</param>
            <returns>The string representation of the long.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.XMPUtils.ConvertToDouble(System.String)">
            <summary>Converts a string value to a <code>double</code>.</summary>
            <param name="rawValue">the string value</param>
            <returns>Returns a double.</returns>
            <exception cref="T:iText.Kernel.XMP.XMPException">
            If the <code>rawValue</code> is <code>null</code> or empty or the
            conversion fails.
            </exception>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.XMPUtils.ConvertFromDouble(System.Double)">
            <summary>Convert from long to string.</summary>
            <param name="value">a long value</param>
            <returns>The string representation of the long.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.XMPUtils.ConvertToDate(System.String)">
            <summary>Converts a string value to an <code>XMPDateTime</code>.</summary>
            <param name="rawValue">the string value</param>
            <returns>Returns an <code>XMPDateTime</code>-object.</returns>
            <exception cref="T:iText.Kernel.XMP.XMPException">
            If the <code>rawValue</code> is <code>null</code> or empty or the
            conversion fails.
            </exception>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <member name="M:iText.Kernel.XMP.XMPUtils.ConvertFromDate(iText.Kernel.XMP.XMPDateTime)">
            <summary>Convert from <code>XMPDateTime</code> to string.</summary>
            <param name="value">an <code>XMPDateTime</code></param>
            <returns>The string representation of the long.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.XMPUtils.EncodeBase64(System.Byte[])">
            <summary>Convert from a byte array to a base64 encoded string.</summary>
            <param name="buffer">the byte array to be converted</param>
            <returns>Returns the base64 string.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.XMPUtils.DecodeBase64(System.String)">
            <summary>Decode from Base64 encoded string to raw data.</summary>
            <param name="base64String">a base64 encoded string</param>
            <returns>Returns a byte array containg the decoded string.</returns>
            <exception cref="T:iText.Kernel.XMP.XMPException">Thrown if the given string is not property base64 encoded</exception>
            <exception cref="T:iText.Kernel.XMP.XMPException"/>
        </member>
        <!-- Badly formed XML comment ignored for member "T:iText.Kernel.XMP.XMPVersionInfo" -->
        <member name="M:iText.Kernel.XMP.XMPVersionInfo.GetMajor">
            <returns>Returns the primary release number, the "1" in version "1.2.3".</returns>
        </member>
        <member name="M:iText.Kernel.XMP.XMPVersionInfo.GetMinor">
            <returns>Returns the secondary release number, the "2" in version "1.2.3".</returns>
        </member>
        <member name="M:iText.Kernel.XMP.XMPVersionInfo.GetMicro">
            <returns>Returns the tertiary release number, the "3" in version "1.2.3".</returns>
        </member>
        <member name="M:iText.Kernel.XMP.XMPVersionInfo.GetBuild">
            <returns>Returns a rolling build number, monotonically increasing in a release.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.XMPVersionInfo.IsDebug">
            <returns>Returns true if this is a debug build.</returns>
        </member>
        <member name="M:iText.Kernel.XMP.XMPVersionInfo.GetMessage">
            <returns>Returns a comprehensive version information string.</returns>
        </member>
        <member name="M:KernelExtensions.Digest(Org.BouncyCastle.Crypto.IDigest,System.Byte[],System.Int32,System.Int32)">
            <summary>
            IMPORTANT: USE THIS METHOD CAREFULLY.
            This method serves as replacement for the java method MessageDigest#digest(byte[] buf, int offset, int len).
            However for now, we simply omit len parameter, because it doesn't affect anything for all current usages
            (there are two of them at the moment of the method addition which are in StandardHandlerUsingAes256 class).
            This may be not true for future possible usages, so be aware.
            </summary>
        </member>
    </members>
</doc>
